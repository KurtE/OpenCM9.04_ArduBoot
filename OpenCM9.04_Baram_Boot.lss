
OpenCM9.04_Baram_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  08000134  08000134  000200e4  2**0
                  CONTENTS
  2 .text         000026f8  08000134  08000134  00010134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000000e4  20000000  0800282c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000638  200000e4  08002910  000200e4  2**2
                  ALLOC
  5 ._usrstack    00000100  2000071c  08002f48  000200e4  2**0
                  ALLOC
  6 .comment      0000006e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d78  00000000  00000000  00020188  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a7fa  00000000  00000000  00020f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000267d  00000000  00000000  0002b6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003184  00000000  00000000  0002dd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021ac  00000000  00000000  00030efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038bd  00000000  00000000  000330a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005ef7  00000000  00000000  00036965  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0003c85c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08001965 	stmdaeq	r0, {r0, r2, r5, r6, r8, fp, ip}
 8000008:	08000b01 	stmdaeq	r0, {r0, r8, r9, fp}
 800000c:	08000b03 	stmdaeq	r0, {r0, r1, r8, r9, fp}
 8000010:	08000b05 	stmdaeq	r0, {r0, r2, r8, r9, fp}
 8000014:	08000b07 	stmdaeq	r0, {r0, r1, r2, r8, r9, fp}
 8000018:	08000b09 	stmdaeq	r0, {r0, r3, r8, r9, fp}
	...
 800002c:	08000b0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, fp}
 8000030:	08000b0b 	stmdaeq	r0, {r0, r1, r3, r8, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000b0f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, fp}
 800003c:	08000b11 	stmdaeq	r0, {r0, r4, r8, r9, fp}
 8000040:	08000b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp}
 8000044:	08000b27 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, fp}
 8000048:	08000b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp}
 800004c:	08000b2b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, fp}
 8000050:	08000b2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp}
 8000054:	08000b2f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, fp}
 8000058:	08000b31 	stmdaeq	r0, {r0, r4, r5, r8, r9, fp}
 800005c:	08000b33 	stmdaeq	r0, {r0, r1, r4, r5, r8, r9, fp}
 8000060:	08000b35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, fp}
 8000064:	08000b37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, fp}
 8000068:	08000b39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, fp}
	...
 8000088:	08000b3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, fp}
 800008c:	08000b3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, fp}
 8000090:	08000b3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, r9, fp}
 8000094:	08000b43 	stmdaeq	r0, {r0, r1, r6, r8, r9, fp}
 8000098:	08000b45 	stmdaeq	r0, {r0, r2, r6, r8, r9, fp}
 800009c:	08000b47 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, fp}
 80000a0:	08000b49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp}
 80000a4:	08000b4b 	stmdaeq	r0, {r0, r1, r3, r6, r8, r9, fp}
 80000a8:	08000b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp}
 80000ac:	08000b4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, r9, fp}
 80000b0:	08000b51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp}
 80000b4:	08000b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp}
 80000b8:	08000b67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, fp}
 80000bc:	08000b69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, fp}
 80000c0:	08000b6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, fp}
 80000c4:	08000b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp}
 80000c8:	08000b6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp}
 80000cc:	08000b71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp}
 80000d0:	08000b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp}
 80000d4:	08000b75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp}
 80000d8:	08000ba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp}
 80000dc:	08000bd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp}
 80000e0:	08000bdb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, r9, fp}
 80000e4:	08000bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp}
 80000e8:	08000bdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, fp}
 80000ec:	08000be1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, fp}
 80000f0:	08000be3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, fp}
 80000f4:	08000be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp}
 80000f8:	08000be7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, r9, fp}
 80000fc:	08000be9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp}
 8000100:	08000beb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, fp}
 8000104:	08000bed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, fp}
 8000108:	08000bef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp}
 800010c:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
 8000110:	08000bf3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, fp}
 8000114:	08000bf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, fp}
 8000118:	08000bf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp}
 800011c:	08000bf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, fp}
 8000120:	08000bfb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, fp}
 8000124:	08000bfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp}
 8000128:	08000bff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp}
 800012c:	08000c01 	stmdaeq	r0, {r0, sl, fp}
 8000130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08000134 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8000134:	bf30      	wfi
    BX r14
 8000136:	4770      	bx	lr

08000138 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8000138:	bf20      	wfe
    BX r14
 800013a:	4770      	bx	lr

0800013c <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 800013c:	bf40      	sev
    BX r14
 800013e:	4770      	bx	lr

08000140 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8000140:	f3bf 8f6f 	isb	sy
    BX r14
 8000144:	4770      	bx	lr

08000146 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8000146:	f3bf 8f4f 	dsb	sy
    BX r14
 800014a:	4770      	bx	lr

0800014c <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 800014c:	f3bf 8f5f 	dmb	sy
    BX r14
 8000150:	4770      	bx	lr

08000152 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8000152:	df01      	svc	1
    BX r14
 8000154:	4770      	bx	lr

08000156 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8000156:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 800015a:	4770      	bx	lr

0800015c <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 800015c:	f380 8814 	msr	CONTROL, r0
  ISB
 8000160:	f3bf 8f6f 	isb	sy
  BX r14
 8000164:	4770      	bx	lr

08000166 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8000166:	f3ef 8009 	mrs	r0, PSP
  BX r14
 800016a:	4770      	bx	lr

0800016c <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 800016c:	f380 8809 	msr	PSP, r0
    BX r14
 8000170:	4770      	bx	lr

08000172 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8000172:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8000176:	4770      	bx	lr

08000178 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8000178:	f380 8808 	msr	MSP, r0
    BX r14
 800017c:	4770      	bx	lr

0800017e <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 800017e:	b672      	cpsid	i
  BX r14
 8000180:	4770      	bx	lr

08000182 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8000182:	b662      	cpsie	i
  BX r14
 8000184:	4770      	bx	lr

08000186 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8000186:	b671      	cpsid	f
  BX r14
 8000188:	4770      	bx	lr

0800018a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 800018a:	b661      	cpsie	f
  BX r14
 800018c:	4770      	bx	lr

0800018e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 800018e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8000192:	4770      	bx	lr

08000194 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8000194:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8000198:	4770      	bx	lr

0800019a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 800019a:	ba40      	rev16	r0, r0
  BX r14
 800019c:	4770      	bx	lr

0800019e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 800019e:	ba00      	rev	r0, r0
  BX r14
 80001a0:	4770      	bx	lr
	...

080001a4 <ClearTimeOutBuffer>:
	Jump_To_Application();
	return 0;
}
void ClearTimeOutBuffer(void){

	gu32TimingCounter1ms =0;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <ClearTimeOutBuffer+0x8>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	4770      	bx	lr
 80001ac:	200000e4 	andcs	r0, r0, r4, ror #1

080001b0 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	if( gu32TimingCounter1ms > 16){
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <CheckTimeOut+0x10>)
 80001b2:	6818      	ldr	r0, [r3, #0]
		return 1;

	}else
		return 0;
}
 80001b4:	2810      	cmp	r0, #16
 80001b6:	bf94      	ite	ls
 80001b8:	2000      	movls	r0, #0
 80001ba:	2001      	movhi	r0, #1
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000e4 	andcs	r0, r0, r4, ror #1

080001c4 <Interrupt1ms>:

//For Dynamixel
void Interrupt1ms(void)
{
	gu32TimingCounter1ms++;
 80001c4:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <Interrupt1ms+0x10>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	3201      	adds	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	gu32TimingCounter1ms_Txd++;
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	3201      	adds	r2, #1
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	4770      	bx	lr
 80001d4:	200000e4 	andcs	r0, r0, r4, ror #1

080001d8 <Timer_Configuration>:
}

void Timer_Configuration(void)
{
 80001d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	/* TIM2 configuration */
	TIM_TimeBaseStructure.TIM_Period = 79;
 80001da:	234f      	movs	r3, #79	; 0x4f
 80001dc:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001e0:	a901      	add	r1, sp, #4
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	/* TIM2 configuration */
	TIM_TimeBaseStructure.TIM_Period = 79;
	//TIM_TimeBaseStructure.TIM_Period = 7;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80001e2:	2300      	movs	r3, #0
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	/* TIM2 configuration */
	TIM_TimeBaseStructure.TIM_Period = 79;
	//TIM_TimeBaseStructure.TIM_Period = 7;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80001e8:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001ec:	f8ad 300a 	strh.w	r3, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001f0:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;
 80001f4:	f88d 300c 	strb.w	r3, [sp, #12]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001f8:	f001 fa5a 	bl	80016b0 <TIM_TimeBaseInit>

	/* Immediate load of TIM2 Precaler value */
	//       when interrupt resolution is 1us, SysTick->CTRL |= SysTick_Counter_Enable; in
	//       SysTick_CounterCmd(u32 SysTick_Counter) endlessly looping...
	TIM_PrescalerConfig(TIM2, 899, TIM_PSCReloadMode_Immediate);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f240 3183 	movw	r1, #899	; 0x383
 8000202:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000206:	f001 fa88 	bl	800171a <TIM_PrescalerConfig>
	//TIM_PrescalerConfig(TIM2, 8, TIM_PSCReloadMode_Immediate);

	TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 800020a:	2101      	movs	r1, #1
 800020c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000210:	f001 fa86 	bl	8001720 <TIM_ClearFlag>

	/* TIM2 IT enable */
	//       I don't know why enabling TIM_IT_CC1 makes while(gwTimingDelay != 0); endless loop...
	//TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000214:	2201      	movs	r2, #1
 8000216:	4611      	mov	r1, r2
 8000218:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800021c:	f001 fa7b 	bl	8001716 <TIM_ITConfig>

	/* TIM2 enable counter */
	//TIM_Cmd(TIM2, ENABLE);


}
 8000220:	b005      	add	sp, #20
 8000222:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000228 <TxDByte>:




void TxDByte(u8 dat)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	4604      	mov	r4, r0
	USART_ClearFlag( USART2, USART_FLAG_TC );//modified @new CM-900 2012-07-24
 800022c:	2140      	movs	r1, #64	; 0x40
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <TxDByte+0x24>)
 8000230:	f001 fb73 	bl	800191a <USART_ClearFlag>
	USART_SendData(USART2,dat);
 8000234:	4621      	mov	r1, r4
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <TxDByte+0x24>)
 8000238:	f001 fb61 	bl	80018fe <USART_SendData>
	while( USART_GetFlagStatus(USART2, USART_FLAG_TC)==RESET );
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <TxDByte+0x24>)
 8000240:	f001 fb65 	bl	800190e <USART_GetFlagStatus>
 8000244:	2800      	cmp	r0, #0
 8000246:	d0f9      	beq.n	800023c <TxDByte+0x14>
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	40004400 	andmi	r4, r0, r0, lsl #8

08000250 <TxDString>:
    bByte -= bTmp*10;
    TxDByte( bByte+'0');
}

void TxDString(char *str)
{
 8000250:	b510      	push	{r4, lr}
 8000252:	1e44      	subs	r4, r0, #1
	int i;
	for(i=0; str[i] ; i++)
 8000254:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000258:	b110      	cbz	r0, 8000260 <TxDString+0x10>
	{
		TxDByte(str[i]);
 800025a:	f7ff ffe5 	bl	8000228 <TxDByte>
 800025e:	e7f9      	b.n	8000254 <TxDString+0x4>
	}
}
 8000260:	bd10      	pop	{r4, pc}

08000262 <TxDHex8>:

void TxDHex8(u16 bSentData)
{
 8000262:	b510      	push	{r4, lr}
 8000264:	4604      	mov	r4, r0
	u16 bTmp;
	
	bTmp = ((bSentData>>4)&0x000f) + (u8)'0';
 8000266:	f3c0 1303 	ubfx	r3, r0, #4, #4
 800026a:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if(bTmp > '9') bTmp += 7;
 800026e:	2839      	cmp	r0, #57	; 0x39
 8000270:	bf88      	it	hi
 8000272:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
	TxDByte(bTmp);
	
	bTmp = (bSentData & 0x000f) + (u8)'0';
 8000276:	f004 040f 	and.w	r4, r4, #15
{
	u16 bTmp;
	
	bTmp = ((bSentData>>4)&0x000f) + (u8)'0';
	if(bTmp > '9') bTmp += 7;
	TxDByte(bTmp);
 800027a:	b2c0      	uxtb	r0, r0
 800027c:	f7ff ffd4 	bl	8000228 <TxDByte>
	
	bTmp = (bSentData & 0x000f) + (u8)'0';
 8000280:	f104 0030 	add.w	r0, r4, #48	; 0x30
	if(bTmp > '9') bTmp += 7;
 8000284:	2839      	cmp	r0, #57	; 0x39
 8000286:	bf88      	it	hi
 8000288:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
	TxDByte(bTmp);
 800028c:	b2c0      	uxtb	r0, r0
}
 800028e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(bTmp > '9') bTmp += 7;
	TxDByte(bTmp);
	
	bTmp = (bSentData & 0x000f) + (u8)'0';
	if(bTmp > '9') bTmp += 7;
	TxDByte(bTmp);
 8000292:	f7ff bfc9 	b.w	8000228 <TxDByte>

08000296 <TxDHex16>:
}

void TxDHex16(u16 wSentData)
{
 8000296:	b510      	push	{r4, lr}
 8000298:	4604      	mov	r4, r0
	TxDHex8((wSentData>>8)&0x00ff );
 800029a:	0a00      	lsrs	r0, r0, #8
 800029c:	f7ff ffe1 	bl	8000262 <TxDHex8>
	TxDHex8( wSentData&0x00ff);
 80002a0:	b2e0      	uxtb	r0, r4
}
 80002a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDHex16(u16 wSentData)
{
	TxDHex8((wSentData>>8)&0x00ff );
	TxDHex8( wSentData&0x00ff);
 80002a6:	f7ff bfdc 	b.w	8000262 <TxDHex8>

080002aa <TxDHex32>:
}

void TxDHex32(u32 lSentData)
{
 80002aa:	b510      	push	{r4, lr}
 80002ac:	4604      	mov	r4, r0
	TxDHex16((lSentData>>16)&0x0000ffff );
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	f7ff fff1 	bl	8000296 <TxDHex16>
	TxDHex16( lSentData&0x0000ffff);
 80002b4:	b2a0      	uxth	r0, r4
}
 80002b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDHex32(u32 lSentData)
{
	TxDHex16((lSentData>>16)&0x0000ffff );
	TxDHex16( lSentData&0x0000ffff);
 80002ba:	f7ff bfec 	b.w	8000296 <TxDHex16>

080002be <USB_TxDString>:
    USB_TxDByte( bByte+'0');
}


void USB_TxDString(char *str)
{
 80002be:	b510      	push	{r4, lr}
 80002c0:	1e44      	subs	r4, r0, #1
	int i;
	for(i=0; str[i] ; i++)
 80002c2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80002c6:	b110      	cbz	r0, 80002ce <USB_TxDString+0x10>
	{
		USB_TxDByte(str[i]);
 80002c8:	f000 ff16 	bl	80010f8 <USB_TxDByte>
 80002cc:	e7f9      	b.n	80002c2 <USB_TxDString+0x4>
	}
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <Delay>:
* Input          : nTime: specifies the delay time length, in milliseconds.
* Output         : None
* Return         : None
*******************************************************************************/
void Delay(u32 nTime)
{
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4604      	mov	r4, r0
	/* Enable the SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Enable);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f001 fa31 	bl	800173c <SysTick_CounterCmd>

	TimingDelay = nTime;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <Delay+0x28>)
 80002dc:	601c      	str	r4, [r3, #0]

	while(TimingDelay != 0);
 80002de:	681c      	ldr	r4, [r3, #0]
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d1fc      	bne.n	80002de <Delay+0xe>

	/* Disable SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Disable);
 80002e4:	f06f 0001 	mvn.w	r0, #1
 80002e8:	f001 fa28 	bl	800173c <SysTick_CounterCmd>
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
 80002ec:	4620      	mov	r0, r4
}
 80002ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	while(TimingDelay != 0);

	/* Disable SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Disable);
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
 80002f2:	f001 ba23 	b.w	800173c <SysTick_CounterCmd>
 80002f6:	bf00      	nop
 80002f8:	20000134 	andcs	r0, r0, r4, lsr r1

080002fc <StringCompare>:
	return 0;
}
*/

u16 StringCompare(char *bpA, char *bpB, int limit)
{
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	4604      	mov	r4, r0
	u16 wCount;
	wCount = 0;
	while(bpA[wCount] == bpB[wCount])
 8000300:	2301      	movs	r3, #1
 8000302:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000306:	f811 0b01 	ldrb.w	r0, [r1], #1
 800030a:	4285      	cmp	r5, r0
 800030c:	d10b      	bne.n	8000326 <StringCompare+0x2a>
	{
		wCount++;
		if ( wCount >= limit)
 800030e:	429a      	cmp	r2, r3
{
	u16 wCount;
	wCount = 0;
	while(bpA[wCount] == bpB[wCount])
	{
		wCount++;
 8000310:	b298      	uxth	r0, r3
		if ( wCount >= limit)
 8000312:	dd0a      	ble.n	800032a <StringCompare+0x2e>
			return wCount;
		if((bpA[wCount] == '\0' && bpB[wCount] == '\0') || wCount > COMMAND_BUFFER_SIZE-1 ) return wCount;
 8000314:	7825      	ldrb	r5, [r4, #0]
 8000316:	b90d      	cbnz	r5, 800031c <StringCompare+0x20>
 8000318:	780d      	ldrb	r5, [r1, #0]
 800031a:	b135      	cbz	r5, 800032a <StringCompare+0x2e>
 800031c:	3301      	adds	r3, #1
 800031e:	2b51      	cmp	r3, #81	; 0x51
 8000320:	d1ef      	bne.n	8000302 <StringCompare+0x6>
 8000322:	2050      	movs	r0, #80	; 0x50
 8000324:	e001      	b.n	800032a <StringCompare+0x2e>
	}
	return 0;
 8000326:	2000      	movs	r0, #0
 8000328:	bd30      	pop	{r4, r5, pc}
}
 800032a:	bd30      	pop	{r4, r5, pc}

0800032c <StringCopy>:

u16 StringCopy(char *bpDst, char *bpSrc)
{
 800032c:	4602      	mov	r2, r0
 800032e:	b530      	push	{r4, r5, lr}
 8000330:	3901      	subs	r1, #1
 8000332:	f100 040a 	add.w	r4, r0, #10
    u16 bCount;
    for(bCount =0; bCount < IDE_COMMAND_LENGTH/*COMMAND_BUFFER_SIZE*/; bCount++)
    {
        bpDst[bCount] = bpSrc[bCount];
 8000336:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800033a:	1a13      	subs	r3, r2, r0
 800033c:	f802 5b01 	strb.w	r5, [r2], #1
        if(bpSrc[bCount] == '\0') break;
 8000340:	780d      	ldrb	r5, [r1, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	b115      	cbz	r5, 800034c <StringCopy+0x20>
}

u16 StringCopy(char *bpDst, char *bpSrc)
{
    u16 bCount;
    for(bCount =0; bCount < IDE_COMMAND_LENGTH/*COMMAND_BUFFER_SIZE*/; bCount++)
 8000346:	42a2      	cmp	r2, r4
 8000348:	d1f5      	bne.n	8000336 <StringCopy+0xa>
 800034a:	230a      	movs	r3, #10
    {
        bpDst[bCount] = bpSrc[bCount];
        if(bpSrc[bCount] == '\0') break;
    }
    return bCount;
}
 800034c:	4618      	mov	r0, r3
 800034e:	bd30      	pop	{r4, r5, pc}

08000350 <USART_Configuration>:
	FLASHStatus = FLASH_ErasePage( EEPROM_START_ADDRESS);
	FLASH_Lock();
}
#endif
void USART_Configuration(u8 PORT, u32 baudrate)
{
 8000350:	b530      	push	{r4, r5, lr}
 8000352:	4604      	mov	r4, r0
 8000354:	460d      	mov	r5, r1
 8000356:	b085      	sub	sp, #20
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 8000358:	4668      	mov	r0, sp
 800035a:	f001 faa1 	bl	80018a0 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800035e:	2300      	movs	r3, #0
 8000360:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000364:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8000368:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800036c:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	if( PORT == 1 )
 8000370:	2c01      	cmp	r4, #1
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000372:	f04f 030c 	mov.w	r3, #12
{
	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);

	USART_InitStructure.USART_BaudRate = baudrate;
 8000376:	9500      	str	r5, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000378:	f8ad 300a 	strh.w	r3, [sp, #10]

	if( PORT == 1 )
 800037c:	d112      	bne.n	80003a4 <USART_Configuration+0x54>
	{
		USART_DeInit(USART1);
 800037e:	4820      	ldr	r0, [pc, #128]	; (8000400 <USART_Configuration+0xb0>)
 8000380:	f001 f9fc 	bl	800177c <USART_DeInit>
		Delay(10);
 8000384:	200a      	movs	r0, #10
 8000386:	f7ff ffa3 	bl	80002d0 <Delay>
		/* Configure the USART1 */
		USART_Init(USART1, &USART_InitStructure);
 800038a:	4669      	mov	r1, sp
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <USART_Configuration+0xb0>)
 800038e:	f001 fa43 	bl	8001818 <USART_Init>

		/* Enable USART1 Receive and Transmit interrupts */
		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8000392:	f240 5125 	movw	r1, #1317	; 0x525
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <USART_Configuration+0xb0>)
 8000398:	4622      	mov	r2, r4
 800039a:	f001 fa98 	bl	80018ce <USART_ITConfig>
		//USART_ITConfig(USART1, USART_IT_TC, ENABLE);

		/* Enable the USART1 */
		USART_Cmd(USART1, ENABLE);
 800039e:	4621      	mov	r1, r4
 80003a0:	4817      	ldr	r0, [pc, #92]	; (8000400 <USART_Configuration+0xb0>)
 80003a2:	e028      	b.n	80003f6 <USART_Configuration+0xa6>
	}

	else if( PORT == 2 )
 80003a4:	2c02      	cmp	r4, #2
 80003a6:	d112      	bne.n	80003ce <USART_Configuration+0x7e>
	{
		USART_DeInit(USART2);
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <USART_Configuration+0xb4>)
 80003aa:	f001 f9e7 	bl	800177c <USART_DeInit>
		Delay(10);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f7ff ff8e 	bl	80002d0 <Delay>
		/* Configure the UART5 */
		USART_Init(USART2, &USART_InitStructure);
 80003b4:	4669      	mov	r1, sp
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <USART_Configuration+0xb4>)
 80003b8:	f001 fa2e 	bl	8001818 <USART_Init>

		/* Enable UART5 Receive and Transmit interrupts */
		USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80003bc:	f240 5125 	movw	r1, #1317	; 0x525
 80003c0:	4810      	ldr	r0, [pc, #64]	; (8000404 <USART_Configuration+0xb4>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	f001 fa83 	bl	80018ce <USART_ITConfig>

		/* Enable the UART5 */
		USART_Cmd(USART2, ENABLE);
 80003c8:	2101      	movs	r1, #1
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <USART_Configuration+0xb4>)
 80003cc:	e013      	b.n	80003f6 <USART_Configuration+0xa6>
	}

	else if( PORT == 3 )
 80003ce:	2c03      	cmp	r4, #3
 80003d0:	d113      	bne.n	80003fa <USART_Configuration+0xaa>
	{

		USART_DeInit(USART3);
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <USART_Configuration+0xb8>)
 80003d4:	f001 f9d2 	bl	800177c <USART_DeInit>
		Delay(10);
 80003d8:	200a      	movs	r0, #10
 80003da:	f7ff ff79 	bl	80002d0 <Delay>
		/* Configure the USART3 */
		USART_Init(USART3, &USART_InitStructure);
 80003de:	4669      	mov	r1, sp
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <USART_Configuration+0xb8>)
 80003e2:	f001 fa19 	bl	8001818 <USART_Init>

		/* Enable USART3 Receive and Transmit interrupts */
		USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80003e6:	f240 5125 	movw	r1, #1317	; 0x525
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <USART_Configuration+0xb8>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	f001 fa6e 	bl	80018ce <USART_ITConfig>
		//USART_ITConfig(USART3, USART_IT_TC, ENABLE);

		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <USART_Configuration+0xb8>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	f001 fa5e 	bl	80018b6 <USART_Cmd>
	}
}
 80003fa:	b005      	add	sp, #20
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop
 8000400:	40013800 	andmi	r3, r1, r0, lsl #16
 8000404:	40004400 	andmi	r4, r0, r0, lsl #8
 8000408:	40004800 	andmi	r4, r0, r0, lsl #16

0800040c <SerialMonitor>:
{
	u16 bTerminate;//,bRxData;
	u8 dxlBaudrate =0;
	char bpCommand[COMMAND_LENGTH];
	int i;
	for(i=0;i<COMMAND_LENGTH;i++){
 800040c:	2300      	movs	r3, #0
		bpCommand[i]='\0';
 800040e:	461a      	mov	r2, r3
u8 gbCount =0;
#define IDE_COMMAND_LENGTH 10
extern volatile u16 USB_Rx_Cnt;
extern u8 USB_Rx_Buffer[VIRTUAL_COM_PORT_DATA_SIZE];
void SerialMonitor(void)
{
 8000410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000414:	b08d      	sub	sp, #52	; 0x34
	u16 bTerminate;//,bRxData;
	u8 dxlBaudrate =0;
	char bpCommand[COMMAND_LENGTH];
	int i;
	for(i=0;i<COMMAND_LENGTH;i++){
		bpCommand[i]='\0';
 8000416:	af08      	add	r7, sp, #32
 8000418:	55da      	strb	r2, [r3, r7]
{
	u16 bTerminate;//,bRxData;
	u8 dxlBaudrate =0;
	char bpCommand[COMMAND_LENGTH];
	int i;
	for(i=0;i<COMMAND_LENGTH;i++){
 800041a:	3301      	adds	r3, #1
 800041c:	2b10      	cmp	r3, #16
		bpCommand[i]='\0';
 800041e:	f04f 0400 	mov.w	r4, #0
{
	u16 bTerminate;//,bRxData;
	u8 dxlBaudrate =0;
	char bpCommand[COMMAND_LENGTH];
	int i;
	for(i=0;i<COMMAND_LENGTH;i++){
 8000422:	d1f9      	bne.n	8000418 <SerialMonitor+0xc>
extern volatile u16 USB_Rx_Cnt;
extern u8 USB_Rx_Buffer[VIRTUAL_COM_PORT_DATA_SIZE];
void SerialMonitor(void)
{
	u16 bTerminate;//,bRxData;
	u8 dxlBaudrate =0;
 8000424:	46a0      	mov	r8, r4
	}
	u8 bRxData=0;
	u8 usbRxCount = 0;
	//PrintProtectStatus();

	GPIO_ResetBits(PORT_LED, PIN_LED);					// LED On modified @new CM-900 with jason 2012-07-24
 8000426:	2104      	movs	r1, #4
 8000428:	48b9      	ldr	r0, [pc, #740]	; (8000710 <SerialMonitor+0x304>)
	GPIO_ResetBits(CM904_PORT_LED, CM904_PIN_LED);		// LED On modified @new CM-904
	USART_BUFFER_CLEAR;
 800042a:	4eba      	ldr	r6, [pc, #744]	; (8000714 <SerialMonitor+0x308>)
 800042c:	4dba      	ldr	r5, [pc, #744]	; (8000718 <SerialMonitor+0x30c>)
	}
	u8 bRxData=0;
	u8 usbRxCount = 0;
	//PrintProtectStatus();

	GPIO_ResetBits(PORT_LED, PIN_LED);					// LED On modified @new CM-900 with jason 2012-07-24
 800042e:	f000 ff8b 	bl	8001348 <GPIO_ResetBits>
	GPIO_ResetBits(CM904_PORT_LED, CM904_PIN_LED);		// LED On modified @new CM-904
 8000432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000436:	48b6      	ldr	r0, [pc, #728]	; (8000710 <SerialMonitor+0x304>)
 8000438:	f000 ff86 	bl	8001348 <GPIO_ResetBits>
	USART_BUFFER_CLEAR;
 800043c:	8034      	strh	r4, [r6, #0]
	int i;
	for(i=0;i<COMMAND_LENGTH;i++){
		bpCommand[i]='\0';
	}
	u8 bRxData=0;
	u8 usbRxCount = 0;
 800043e:	9400      	str	r4, [sp, #0]
	//PrintProtectStatus();

	GPIO_ResetBits(PORT_LED, PIN_LED);					// LED On modified @new CM-900 with jason 2012-07-24
	GPIO_ResetBits(CM904_PORT_LED, CM904_PIN_LED);		// LED On modified @new CM-904
	USART_BUFFER_CLEAR;
 8000440:	802c      	strh	r4, [r5, #0]
		}else{
			TxDString("\r\n -");
		}*/

		//GetCommandFromHost(gbpRxBuffer);
		while(!RXD_BUFFER_READY)
 8000442:	8832      	ldrh	r2, [r6, #0]
 8000444:	882b      	ldrh	r3, [r5, #0]
 8000446:	b292      	uxth	r2, r2
 8000448:	b29b      	uxth	r3, r3
 800044a:	429a      	cmp	r2, r3
 800044c:	d0f9      	beq.n	8000442 <SerialMonitor+0x36>
		}*/
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
	TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
	StringCopy(bpCommand,USB_Rx_Buffer);
 800044e:	49b3      	ldr	r1, [pc, #716]	; (800071c <SerialMonitor+0x310>)
	gbCount = USB_Rx_Cnt;
 8000450:	4cb3      	ldr	r4, [pc, #716]	; (8000720 <SerialMonitor+0x314>)
		}*/
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
	TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
	StringCopy(bpCommand,USB_Rx_Buffer);
 8000452:	4638      	mov	r0, r7
 8000454:	f7ff ff6a 	bl	800032c <StringCopy>
	gbCount = USB_Rx_Cnt;
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("bpCommand = ");	TxDString(bpCommand);	TxDString("\r\n");
	TxDString("gbCount = ");	TxDHex8(gbCount);	TxDString("\r\n");
#endif
	USB_Rx_Cnt = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	46a2      	mov	sl, r4
	for(i=0;i < VIRTUAL_COM_PORT_DATA_SIZE;i++ ){
		 USB_Rx_Buffer[i] = '\0';
 800045c:	4619      	mov	r1, r3
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
	TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
	StringCopy(bpCommand,USB_Rx_Buffer);
	gbCount = USB_Rx_Cnt;
 800045e:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8000734 <SerialMonitor+0x328>
 8000462:	f8b9 2000 	ldrh.w	r2, [r9]
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("bpCommand = ");	TxDString(bpCommand);	TxDString("\r\n");
	TxDString("gbCount = ");	TxDHex8(gbCount);	TxDString("\r\n");
#endif
	USB_Rx_Cnt = 0;
 8000466:	f8a9 3000 	strh.w	r3, [r9]
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
	TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
	StringCopy(bpCommand,USB_Rx_Buffer);
	gbCount = USB_Rx_Cnt;
 800046a:	b2d2      	uxtb	r2, r2
 800046c:	7222      	strb	r2, [r4, #8]
	TxDString("bpCommand = ");	TxDString(bpCommand);	TxDString("\r\n");
	TxDString("gbCount = ");	TxDHex8(gbCount);	TxDString("\r\n");
#endif
	USB_Rx_Cnt = 0;
	for(i=0;i < VIRTUAL_COM_PORT_DATA_SIZE;i++ ){
		 USB_Rx_Buffer[i] = '\0';
 800046e:	48ab      	ldr	r0, [pc, #684]	; (800071c <SerialMonitor+0x310>)
 8000470:	f04f 0b00 	mov.w	fp, #0
 8000474:	5419      	strb	r1, [r3, r0]
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("bpCommand = ");	TxDString(bpCommand);	TxDString("\r\n");
	TxDString("gbCount = ");	TxDHex8(gbCount);	TxDString("\r\n");
#endif
	USB_Rx_Cnt = 0;
	for(i=0;i < VIRTUAL_COM_PORT_DATA_SIZE;i++ ){
 8000476:	3301      	adds	r3, #1
 8000478:	2b40      	cmp	r3, #64	; 0x40
 800047a:	d1f8      	bne.n	800046e <SerialMonitor+0x62>

	}
		//bParaNum = StringProcess(bpCommand,ulpParameter,gbpRxBuffer);
		//bParaNum =1;
		//if(bParaNum != 0)
		if(/*gbCount == IDE_COMMAND_LENGTH &&*/gbCount > 3 && bpCommand[0] == 'A' && bpCommand[2] == '&')
 800047c:	2a03      	cmp	r2, #3
 800047e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000482:	f240 81a4 	bls.w	80007ce <SerialMonitor+0x3c2>
 8000486:	2b41      	cmp	r3, #65	; 0x41
 8000488:	f040 81a1 	bne.w	80007ce <SerialMonitor+0x3c2>
 800048c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8000490:	2b26      	cmp	r3, #38	; 0x26
 8000492:	f040 819e 	bne.w	80007d2 <SerialMonitor+0x3c6>
		{
			//if(bParaNum > PARA_NUM) bParaNum = PARA_NUM;
			if( StringCompare(bpCommand,"AT&LD",5) )//if( StringCompare(bpCommand,"LD")|| StringCompare(bpCommand,"L") || bRxData == 'l' )
 8000496:	2205      	movs	r2, #5
 8000498:	49a2      	ldr	r1, [pc, #648]	; (8000724 <SerialMonitor+0x318>)
 800049a:	4638      	mov	r0, r7
 800049c:	f7ff ff2e 	bl	80002fc <StringCompare>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	f000 8095 	beq.w	80005d0 <SerialMonitor+0x1c4>
				volatile TestStatus MemoryProgramStatus;

				vu32 tStartAddr;
				bRxData=0;

				FLASHStatus = FLASH_COMPLETE;
 80004a6:	2304      	movs	r3, #4
			//if(bParaNum > PARA_NUM) bParaNum = PARA_NUM;
			if( StringCompare(bpCommand,"AT&LD",5) )//if( StringCompare(bpCommand,"LD")|| StringCompare(bpCommand,"L") || bRxData == 'l' )
			{
				//TxDString("download\r\n");
				u32 EraseCounter = 0x00;
				vu32 NbrOfPage = 0x00;
 80004a8:	f8cd b018 	str.w	fp, [sp, #24]
				volatile TestStatus MemoryProgramStatus;

				vu32 tStartAddr;
				bRxData=0;

				FLASHStatus = FLASH_COMPLETE;
 80004ac:	f88d 3016 	strb.w	r3, [sp, #22]
				MemoryProgramStatus = PASSED;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f88d 3017 	strb.w	r3, [sp, #23]

				gwAddressPointer = FLASH_START_ADDRESS;
 80004b6:	4b9c      	ldr	r3, [pc, #624]	; (8000728 <SerialMonitor+0x31c>)
				gwRxTotalCount = gwCalculatedCheckSum = 0;


				/* Unlock the Flash Program Erase controller */
				FLASH_Unlock();
				gbIsFlashLock = FALSE;
 80004b8:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8000760 <SerialMonitor+0x354>
				bRxData=0;

				FLASHStatus = FLASH_COMPLETE;
				MemoryProgramStatus = PASSED;

				gwAddressPointer = FLASH_START_ADDRESS;
 80004bc:	60e3      	str	r3, [r4, #12]
				gwEndAddressPointer = FLASH_START_ADDRESS + 0xF800;
 80004be:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80004c2:	6123      	str	r3, [r4, #16]
						TxDString("\r\n Out of Range!\r\n");
					}
					continue;
				}// 2012-05-15 jason added from CM-530 Bootloader 1.01*/

				tStartAddr = gwAddressPointer;
 80004c4:	68e3      	ldr	r3, [r4, #12]
 80004c6:	9307      	str	r3, [sp, #28]
				/*Init global variable related to flash download*/
				gwRxTotalCount = gwCalculatedCheckSum = 0;
 80004c8:	f8c4 b014 	str.w	fp, [r4, #20]
 80004cc:	f8c4 b018 	str.w	fp, [r4, #24]


				/* Unlock the Flash Program Erase controller */
				FLASH_Unlock();
 80004d0:	f000 fe40 	bl	8001154 <FLASH_Unlock>
				gbIsFlashLock = FALSE;

				/* Define the number of page to be erased */
				NbrOfPage = ((gwEndAddressPointer - gwAddressPointer) / FLASH_PAGE_SIZE );  // 2012-05-15 jason added from CM-530 Bootloader 1.01
 80004d4:	6923      	ldr	r3, [r4, #16]
 80004d6:	68e2      	ldr	r2, [r4, #12]
				/*if ((FLASH_END_ADDRESS - gwAddressPointer) & 0x3ff)
				  NbrOfPage++;*/

				/* Clear All pending flags */
				FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80004d8:	2035      	movs	r0, #53	; 0x35
				/* Unlock the Flash Program Erase controller */
				FLASH_Unlock();
				gbIsFlashLock = FALSE;

				/* Define the number of page to be erased */
				NbrOfPage = ((gwEndAddressPointer - gwAddressPointer) / FLASH_PAGE_SIZE );  // 2012-05-15 jason added from CM-530 Bootloader 1.01
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	0a9b      	lsrs	r3, r3, #10
				gwRxTotalCount = gwCalculatedCheckSum = 0;


				/* Unlock the Flash Program Erase controller */
				FLASH_Unlock();
				gbIsFlashLock = FALSE;
 80004de:	f889 b000 	strb.w	fp, [r9]

				/* Define the number of page to be erased */
				NbrOfPage = ((gwEndAddressPointer - gwAddressPointer) / FLASH_PAGE_SIZE );  // 2012-05-15 jason added from CM-530 Bootloader 1.01
 80004e2:	9306      	str	r3, [sp, #24]
				/*if ((FLASH_END_ADDRESS - gwAddressPointer) & 0x3ff)
				  NbrOfPage++;*/

				/* Clear All pending flags */
				FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80004e4:	f000 fe4a 	bl	800117c <FLASH_ClearFlag>

				// 2012-05-15 jason added from CM-530 Bootloader 1.01
				//TxDString("\r\nErasing....     ");

				/* Erase the FLASH pages */
				for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE) ; EraseCounter++)
 80004e8:	465b      	mov	r3, fp
				{
					//u16 percent;
					if( (gwAddressPointer + (FLASH_PAGE_SIZE * EraseCounter)) > 0x0800F000)
 80004ea:	4990      	ldr	r1, [pc, #576]	; (800072c <SerialMonitor+0x320>)
 80004ec:	f8df b230 	ldr.w	fp, [pc, #560]	; 8000720 <SerialMonitor+0x314>

				// 2012-05-15 jason added from CM-530 Bootloader 1.01
				//TxDString("\r\nErasing....     ");

				/* Erase the FLASH pages */
				for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE) ; EraseCounter++)
 80004f0:	9a06      	ldr	r2, [sp, #24]
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d21d      	bcs.n	8000532 <SerialMonitor+0x126>
 80004f6:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80004fa:	2a04      	cmp	r2, #4
 80004fc:	d119      	bne.n	8000532 <SerialMonitor+0x126>
				{
					//u16 percent;
					if( (gwAddressPointer + (FLASH_PAGE_SIZE * EraseCounter)) > 0x0800F000)
 80004fe:	f8da 000c 	ldr.w	r0, [sl, #12]
 8000502:	029a      	lsls	r2, r3, #10
 8000504:	4410      	add	r0, r2
 8000506:	4288      	cmp	r0, r1
 8000508:	9303      	str	r3, [sp, #12]
 800050a:	9102      	str	r1, [sp, #8]
 800050c:	d811      	bhi.n	8000532 <SerialMonitor+0x126>
						break;
					FLASHStatus = FLASH_ErasePage(gwAddressPointer + (FLASH_PAGE_SIZE * EraseCounter));
 800050e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8000512:	9201      	str	r2, [sp, #4]
 8000514:	4410      	add	r0, r2
 8000516:	f000 fe67 	bl	80011e8 <FLASH_ErasePage>
 800051a:	f88d 0016 	strb.w	r0, [sp, #22]
					TxDHex32(gwAddressPointer + (FLASH_PAGE_SIZE * EraseCounter));
 800051e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8000522:	9a01      	ldr	r2, [sp, #4]
 8000524:	4410      	add	r0, r2
 8000526:	f7ff fec0 	bl	80002aa <TxDHex32>

				// 2012-05-15 jason added from CM-530 Bootloader 1.01
				//TxDString("\r\nErasing....     ");

				/* Erase the FLASH pages */
				for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE) ; EraseCounter++)
 800052a:	9b03      	ldr	r3, [sp, #12]
 800052c:	9902      	ldr	r1, [sp, #8]
 800052e:	3301      	adds	r3, #1
 8000530:	e7de      	b.n	80004f0 <SerialMonitor+0xe4>
				}
				//USB_TxDString("\b\b\b\b");
				//USB_TxD_Dec_U8(100);
				//USB_TxDString("\%");
				//TxDString("complete!\r\n");
				if( FLASHStatus != FLASH_COMPLETE )
 8000532:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d002      	beq.n	8000540 <SerialMonitor+0x134>
				{
					FLASH_Lock();
 800053a:	f000 fe17 	bl	800116c <FLASH_Lock>
					continue;
 800053e:	e780      	b.n	8000442 <SerialMonitor+0x36>
				}
				//USB_TxDString("\r\n Write Address : ");USB_TxDHex32(gwAddressPointer);
				USB_TxDString("Ready..\n");
 8000540:	487b      	ldr	r0, [pc, #492]	; (8000730 <SerialMonitor+0x324>)
 8000542:	f7ff febc 	bl	80002be <USB_TxDString>
				gbFlashDownloadStart = TRUE;
 8000546:	2101      	movs	r1, #1
				TIM_Cmd(TIM2, ENABLE);
 8000548:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
					FLASH_Lock();
					continue;
				}
				//USB_TxDString("\r\n Write Address : ");USB_TxDHex32(gwAddressPointer);
				USB_TxDString("Ready..\n");
				gbFlashDownloadStart = TRUE;
 800054c:	7721      	strb	r1, [r4, #28]
				TIM_Cmd(TIM2, ENABLE);
 800054e:	f001 f8cd 	bl	80016ec <TIM_Cmd>
				Delay(100); // some delay is needed because PC have some time to prepare data.
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f7ff febc 	bl	80002d0 <Delay>

				while(1){
					//wait until flash-download is finished
					//flash-download code is located EP3_OUT_Callback() in usb_endp.c
					//getting checksum data from Host PC(IDE)
					if(USB_Rx_Cnt != 0x0)
 8000558:	4a76      	ldr	r2, [pc, #472]	; (8000734 <SerialMonitor+0x328>)
 800055a:	4b76      	ldr	r3, [pc, #472]	; (8000734 <SerialMonitor+0x328>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	b113      	cbz	r3, 8000568 <SerialMonitor+0x15c>
						usbRxCount = USB_Rx_Cnt;
 8000562:	8813      	ldrh	r3, [r2, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	9300      	str	r3, [sp, #0]
					if(CheckTimeOut()){
 8000568:	f7ff fe22 	bl	80001b0 <CheckTimeOut>
 800056c:	2800      	cmp	r0, #0
 800056e:	d0f4      	beq.n	800055a <SerialMonitor+0x14e>
						gbFlashDownloadStart = FALSE;
 8000570:	f04f 0a00 	mov.w	sl, #0
						ClearTimeOutBuffer();
						TIM_Cmd(TIM2, DISABLE);
 8000574:	4651      	mov	r1, sl
 8000576:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
					//flash-download code is located EP3_OUT_Callback() in usb_endp.c
					//getting checksum data from Host PC(IDE)
					if(USB_Rx_Cnt != 0x0)
						usbRxCount = USB_Rx_Cnt;
					if(CheckTimeOut()){
						gbFlashDownloadStart = FALSE;
 800057a:	f884 a01c 	strb.w	sl, [r4, #28]
	Jump_To_Application();
	return 0;
}
void ClearTimeOutBuffer(void){

	gu32TimingCounter1ms =0;
 800057e:	f8c4 a000 	str.w	sl, [r4]
					if(USB_Rx_Cnt != 0x0)
						usbRxCount = USB_Rx_Cnt;
					if(CheckTimeOut()){
						gbFlashDownloadStart = FALSE;
						ClearTimeOutBuffer();
						TIM_Cmd(TIM2, DISABLE);
 8000582:	f001 f8b3 	bl	80016ec <TIM_Cmd>
				}
#ifdef DEBUG_ENABLE_BY_USART2
				TxDString("usbRxCount = ");	TxDHex8(usbRxCount);	TxDString("\r\n");
				TxDString("USB_Rx_Buffer = ");	TxDByte(USB_Rx_Buffer[usbRxCount-1]);	TxDString("\r\n");
#endif
				gwReceivedCheckSumFromHost = USB_Rx_Buffer[usbRxCount-1];
 8000586:	9a00      	ldr	r2, [sp, #0]
 8000588:	4b64      	ldr	r3, [pc, #400]	; (800071c <SerialMonitor+0x310>)
					if(CheckTimeOut()){
						gbFlashDownloadStart = FALSE;
						ClearTimeOutBuffer();
						TIM_Cmd(TIM2, DISABLE);
						//TxDString("\r\n Flash writing finished\r\n");
						USART_BUFFER_CLEAR
 800058a:	f8a6 a000 	strh.w	sl, [r6]
				}
#ifdef DEBUG_ENABLE_BY_USART2
				TxDString("usbRxCount = ");	TxDHex8(usbRxCount);	TxDString("\r\n");
				TxDString("USB_Rx_Buffer = ");	TxDByte(USB_Rx_Buffer[usbRxCount-1]);	TxDString("\r\n");
#endif
				gwReceivedCheckSumFromHost = USB_Rx_Buffer[usbRxCount-1];
 800058e:	4413      	add	r3, r2
 8000590:	f813 3c01 	ldrb.w	r3, [r3, #-1]
					if(CheckTimeOut()){
						gbFlashDownloadStart = FALSE;
						ClearTimeOutBuffer();
						TIM_Cmd(TIM2, DISABLE);
						//TxDString("\r\n Flash writing finished\r\n");
						USART_BUFFER_CLEAR
 8000594:	f8a5 a000 	strh.w	sl, [r5]
				}
#ifdef DEBUG_ENABLE_BY_USART2
				TxDString("usbRxCount = ");	TxDHex8(usbRxCount);	TxDString("\r\n");
				TxDString("USB_Rx_Buffer = ");	TxDByte(USB_Rx_Buffer[usbRxCount-1]);	TxDString("\r\n");
#endif
				gwReceivedCheckSumFromHost = USB_Rx_Buffer[usbRxCount-1];
 8000598:	6223      	str	r3, [r4, #32]
				gwCalculatedCheckSum = gwCalculatedCheckSum - gwReceivedCheckSumFromHost;
 800059a:	6963      	ldr	r3, [r4, #20]
 800059c:	6a22      	ldr	r2, [r4, #32]
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	6163      	str	r3, [r4, #20]
				/*while(!RXD_BUFFER_READY); //wait until check-sum data is received from PC
				gwReceivedCheckSumFromHost = RxDBufferFromHost();
				TxDString("\r\n gwReceivedCheckSumFromHost = ");	TxDHex32(gwReceivedCheckSumFromHost);	TxDString("\r\n");
				*/
				/* Lock again the Flash Program Erase controller */
				FLASH_Lock();
 80005a2:	f000 fde3 	bl	800116c <FLASH_Lock>
				gbIsFlashLock = TRUE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f889 3000 	strb.w	r3, [r9]
			//	TxDString("\r\n Size:0X");TxDHex16(gwRxTotalCount);
			//	TxDString("  Checksum:"); TxDHex16((u8)(gwCalculatedCheckSum&0xff));TxDString("-");TxDHex16(gwReceivedCheckSumFromHost);
				if((gwCalculatedCheckSum&0xff) == gwReceivedCheckSumFromHost || gwReceivedCheckSumFromHost == '*' ){
 80005ac:	6963      	ldr	r3, [r4, #20]
 80005ae:	6a22      	ldr	r2, [r4, #32]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d003      	beq.n	80005be <SerialMonitor+0x1b2>
 80005b6:	4b5a      	ldr	r3, [pc, #360]	; (8000720 <SerialMonitor+0x314>)
 80005b8:	6a1b      	ldr	r3, [r3, #32]
 80005ba:	2b2a      	cmp	r3, #42	; 0x2a
 80005bc:	d101      	bne.n	80005c2 <SerialMonitor+0x1b6>
					USB_TxDString("Success..\n");
 80005be:	485e      	ldr	r0, [pc, #376]	; (8000738 <SerialMonitor+0x32c>)
 80005c0:	e000      	b.n	80005c4 <SerialMonitor+0x1b8>
				}
				else
					USB_TxDString("Fail..\n");
 80005c2:	485e      	ldr	r0, [pc, #376]	; (800073c <SerialMonitor+0x330>)
 80005c4:	f7ff fe7b 	bl	80002be <USB_TxDString>
			//WDTCR = 0x08;
				Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f7ff fe81 	bl	80002d0 <Delay>
 80005ce:	e107      	b.n	80007e0 <SerialMonitor+0x3d4>

			}
			else if(StringCompare(bpCommand,"AT&GO",5))//else if(StringCompare(bpCommand,"GO")|| StringCompare(bpCommand,"G") || bRxData == 'g' )
 80005d0:	2205      	movs	r2, #5
 80005d2:	495b      	ldr	r1, [pc, #364]	; (8000740 <SerialMonitor+0x334>)
 80005d4:	4638      	mov	r0, r7
 80005d6:	f7ff fe91 	bl	80002fc <StringCompare>
 80005da:	b148      	cbz	r0, 80005f0 <SerialMonitor+0x1e4>
				{
					JumpAddress =  *(u32 *)(FLASH_START_ADDRESS + 4);
				}
				//NVIC_SetVectorTable(NVIC_VectTab_FLASH, ((JumpAddress-4)&0xFFFF) );

				Jump_To_Application = (pFunction) JumpAddress;
 80005dc:	4b59      	ldr	r3, [pc, #356]	; (8000744 <SerialMonitor+0x338>)
 80005de:	f8d3 9000 	ldr.w	r9, [r3]
					USB_TxDString("\r\n Go: ");
					USB_TxDHex32(JumpAddress);
					USB_TxDString("\r\n");
				}*/

				UsbVcpDisconnect();
 80005e2:	f000 fd6b 	bl	80010bc <UsbVcpDisconnect>
				TxDString("\r\n Go: 0x");
				TxDHex32(JumpAddress);
				TxDString("\r\n");
#endif

				Delay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f7ff fe72 	bl	80002d0 <Delay>
				Jump_To_Application();
 80005ec:	47c8      	blx	r9
 80005ee:	e0f7      	b.n	80007e0 <SerialMonitor+0x3d4>
			}
			else if(StringCompare(bpCommand,"AT&RST",6)){
 80005f0:	2206      	movs	r2, #6
 80005f2:	4955      	ldr	r1, [pc, #340]	; (8000748 <SerialMonitor+0x33c>)
 80005f4:	4638      	mov	r0, r7
 80005f6:	f7ff fe81 	bl	80002fc <StringCompare>
 80005fa:	b110      	cbz	r0, 8000602 <SerialMonitor+0x1f6>
#ifdef DEBUG_ENABLE_BY_USART2
				TxDString("system reset \r\n ");
#endif
				NVIC_GenerateSystemReset();
 80005fc:	f000 ff26 	bl	800144c <NVIC_GenerateSystemReset>
 8000600:	e0ee      	b.n	80007e0 <SerialMonitor+0x3d4>
			}
			else if(StringCompare(bpCommand,"AT&TOSS",7)){
 8000602:	2207      	movs	r2, #7
 8000604:	4951      	ldr	r1, [pc, #324]	; (800074c <SerialMonitor+0x340>)
 8000606:	4638      	mov	r0, r7
 8000608:	f7ff fe78 	bl	80002fc <StringCompare>
 800060c:	2800      	cmp	r0, #0
 800060e:	f000 80d2 	beq.w	80007b6 <SerialMonitor+0x3aa>
#ifdef DEBUG_ENABLE_BY_USART2
				TxDString("TOSS Mode for dynamixel \r\n ");
#endif
				USB_TxDString("TOSS MODE OK\r\n ");
 8000612:	484f      	ldr	r0, [pc, #316]	; (8000750 <SerialMonitor+0x344>)
 8000614:	f7ff fe53 	bl	80002be <USB_TxDString>
				if(bpCommand [7] == '=' || bpCommand [7] == '*' ){
 8000618:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 800061c:	293d      	cmp	r1, #61	; 0x3d
 800061e:	d002      	beq.n	8000626 <SerialMonitor+0x21a>
 8000620:	292a      	cmp	r1, #42	; 0x2a
 8000622:	f040 80dd 	bne.w	80007e0 <SerialMonitor+0x3d4>

					if(gbCount == 9){
 8000626:	7a23      	ldrb	r3, [r4, #8]
 8000628:	2b09      	cmp	r3, #9
 800062a:	d107      	bne.n	800063c <SerialMonitor+0x230>
						if(bpCommand[8] > 47 && bpCommand[8] < 58){
 800062c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000630:	3b30      	subs	r3, #48	; 0x30
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b09      	cmp	r3, #9
 8000636:	bf98      	it	ls
 8000638:	4698      	movls	r8, r3
 800063a:	e013      	b.n	8000664 <SerialMonitor+0x258>
							dxlBaudrate = bpCommand[8] - 48;
						}

					}else if(gbCount == 10){
 800063c:	2b0a      	cmp	r3, #10
 800063e:	d111      	bne.n	8000664 <SerialMonitor+0x258>
						if(bpCommand[8] > 47 && bpCommand[8] < 58 && bpCommand[9] > 47 && bpCommand[9] < 58 ){
 8000640:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8000644:	3a30      	subs	r2, #48	; 0x30
 8000646:	b2d3      	uxtb	r3, r2
 8000648:	2b09      	cmp	r3, #9
 800064a:	d80b      	bhi.n	8000664 <SerialMonitor+0x258>
 800064c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8000650:	3b30      	subs	r3, #48	; 0x30
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b09      	cmp	r3, #9
							dxlBaudrate = (bpCommand[8] - 48)*10 + (bpCommand[9] - 48);
 8000656:	bf9e      	ittt	ls
 8000658:	eb02 0882 	addls.w	r8, r2, r2, lsl #2
 800065c:	eb03 0848 	addls.w	r8, r3, r8, lsl #1
 8000660:	fa5f f888 	uxtbls.w	r8, r8
					//nothing...
					}
#ifdef DEBUG_ENABLE_BY_USART2
					//TxDString("Dxl baud rate =  ");TxD_Dec_U8(dxlBaudrate);TxDString("\r\n ");
#endif
					if(bpCommand[7] == '='){
 8000664:	293d      	cmp	r1, #61	; 0x3d
 8000666:	d105      	bne.n	8000674 <SerialMonitor+0x268>
					// Dynamixel 1.0
						USART_Configuration(1, dxl_get_baudrate(dxlBaudrate,0));
 8000668:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <SerialMonitor+0x348>)
 800066a:	f108 0101 	add.w	r1, r8, #1
 800066e:	fb93 f1f1 	sdiv	r1, r3, r1
 8000672:	e007      	b.n	8000684 <SerialMonitor+0x278>
 8000674:	f1b8 0f08 	cmp.w	r8, #8
 8000678:	bf96      	itet	ls
 800067a:	4b37      	ldrls	r3, [pc, #220]	; (8000758 <SerialMonitor+0x34c>)
					//nothing...
					}
#ifdef DEBUG_ENABLE_BY_USART2
					//TxDString("Dxl baud rate =  ");TxD_Dec_U8(dxlBaudrate);TxDString("\r\n ");
#endif
					if(bpCommand[7] == '='){
 800067c:	f44f 4161 	movhi.w	r1, #57600	; 0xe100
 8000680:	f853 1028 	ldrls.w	r1, [r3, r8, lsl #2]
					// Dynamixel 1.0
						USART_Configuration(1, dxl_get_baudrate(dxlBaudrate,0));
						//TxDString("Dxl baud rate =  ");TxDHex32(dxl_get_baudrate(dxlBaudrate,0));TxDString("\r\n ");
					}else{
					// Dynamixel 2.0
						USART_Configuration(1, dxl_get_baudrate(dxlBaudrate,1));
 8000684:	2001      	movs	r0, #1
					}
					USART_BUFFER_CLEAR
					gbDXLWritePointer = gbDXLReadPointer = 0;
 8000686:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000764 <SerialMonitor+0x358>
 800068a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8000768 <SerialMonitor+0x35c>
					// Dynamixel 1.0
						USART_Configuration(1, dxl_get_baudrate(dxlBaudrate,0));
						//TxDString("Dxl baud rate =  ");TxDHex32(dxl_get_baudrate(dxlBaudrate,0));TxDString("\r\n ");
					}else{
					// Dynamixel 2.0
						USART_Configuration(1, dxl_get_baudrate(dxlBaudrate,1));
 800068e:	f7ff fe5f 	bl	8000350 <USART_Configuration>
					}
					USART_BUFFER_CLEAR
 8000692:	2300      	movs	r3, #0
 8000694:	8033      	strh	r3, [r6, #0]
 8000696:	802b      	strh	r3, [r5, #0]
					gbDXLWritePointer = gbDXLReadPointer = 0;
 8000698:	f88a 3000 	strb.w	r3, [sl]
 800069c:	f88b 3000 	strb.w	r3, [fp]
					USB_Rx_Cnt = 0;
 80006a0:	f8a9 3000 	strh.w	r3, [r9]
					while(1)
					{

						if(USB_Rx_Cnt > 0)//if(gwUSARTReadPtr != gwUSARTWritePtr) //USB -> DXL
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SerialMonitor+0x328>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d065      	beq.n	800077a <SerialMonitor+0x36e>
						{
#ifdef DEBUG_ENABLE_BY_USART2
							TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
							TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
							if(USB_Rx_Buffer[0] == '!' && USB_Rx_Buffer[1] == '!' && USB_Rx_Buffer[2] == '!'){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <SerialMonitor+0x310>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d111      	bne.n	80006da <SerialMonitor+0x2ce>
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <SerialMonitor+0x310>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	2b21      	cmp	r3, #33	; 0x21
 80006bc:	d10d      	bne.n	80006da <SerialMonitor+0x2ce>
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <SerialMonitor+0x310>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b21      	cmp	r3, #33	; 0x21
 80006c4:	d109      	bne.n	80006da <SerialMonitor+0x2ce>
								//TxDString("Escaped!!\r\n");
								USART_BUFFER_CLEAR
								USB_Rx_Cnt = 0;
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <SerialMonitor+0x328>)
							TxDString("USB_Rx_Cnt = ");	TxDHex8(USB_Rx_Cnt);	TxDString("\r\n");
							TxDString("USB_Rx_Buffer = ");	TxDString(USB_Rx_Buffer);	TxDString("\r\n");
#endif
							if(USB_Rx_Buffer[0] == '!' && USB_Rx_Buffer[1] == '!' && USB_Rx_Buffer[2] == '!'){
								//TxDString("Escaped!!\r\n");
								USART_BUFFER_CLEAR
 80006c8:	2300      	movs	r3, #0
 80006ca:	8033      	strh	r3, [r6, #0]
 80006cc:	802b      	strh	r3, [r5, #0]
								USB_Rx_Cnt = 0;
 80006ce:	8013      	strh	r3, [r2, #0]
								gbDXLWritePointer = gbDXLReadPointer = 0;
 80006d0:	f88a 3000 	strb.w	r3, [sl]
 80006d4:	f88b 3000 	strb.w	r3, [fp]
								break;
 80006d8:	e082      	b.n	80007e0 <SerialMonitor+0x3d4>
							}
							GPIO_SetBits(GPIOB, GPIO_Pin_5);	// TX Enable
 80006da:	2120      	movs	r1, #32
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <SerialMonitor+0x304>)
 80006de:	f000 fe31 	bl	8001344 <GPIO_SetBits>
							for(i=0; i < USB_Rx_Cnt; i++){
 80006e2:	f04f 0900 	mov.w	r9, #0
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <SerialMonitor+0x328>)
 80006e8:	881a      	ldrh	r2, [r3, #0]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	4591      	cmp	r9, r2
 80006ee:	da3d      	bge.n	800076c <SerialMonitor+0x360>
								USART_SendData(USART1,(u8)USB_Rx_Buffer[i]);
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <SerialMonitor+0x310>)
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <SerialMonitor+0x350>)
 80006f4:	f813 1009 	ldrb.w	r1, [r3, r9]
 80006f8:	f001 f901 	bl	80018fe <USART_SendData>
								while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	4817      	ldr	r0, [pc, #92]	; (800075c <SerialMonitor+0x350>)
 8000700:	f001 f905 	bl	800190e <USART_GetFlagStatus>
 8000704:	2800      	cmp	r0, #0
 8000706:	d0f9      	beq.n	80006fc <SerialMonitor+0x2f0>
								USB_Rx_Cnt = 0;
								gbDXLWritePointer = gbDXLReadPointer = 0;
								break;
							}
							GPIO_SetBits(GPIOB, GPIO_Pin_5);	// TX Enable
							for(i=0; i < USB_Rx_Cnt; i++){
 8000708:	f109 0901 	add.w	r9, r9, #1
 800070c:	e7eb      	b.n	80006e6 <SerialMonitor+0x2da>
 800070e:	bf00      	nop
 8000710:	40010c00 	andmi	r0, r1, r0, lsl #24
 8000714:	2000018c 	andcs	r0, r0, ip, lsl #3
 8000718:	20000138 	andcs	r0, r0, r8, lsr r1
 800071c:	200006a1 	andcs	r0, r0, r1, lsr #13
 8000720:	200000e4 	andcs	r0, r0, r4, ror #1
 8000724:	0800276d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, sp}
 8000728:	08003000 	stmdaeq	r0, {ip, sp}
 800072c:	0800f000 	stmdaeq	r0, {ip, sp, lr, pc}
 8000730:	08002773 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, sl, sp}
 8000734:	2000010e 	andcs	r0, r0, lr, lsl #2
 8000738:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
 800073c:	08002787 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, sl, sp}
 8000740:	0800278f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, r9, sl, sp}
 8000744:	08003004 	stmdaeq	r0, {r2, ip, sp}
 8000748:	08002795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, sp}
 800074c:	0800279c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp}
 8000750:	080027a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp}
 8000754:	001e8480 	andseq	r8, lr, r0, lsl #9
 8000758:	08002698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp}
 800075c:	40013800 	andmi	r3, r1, r0, lsl #16
 8000760:	20000000 	andcs	r0, r0, r0
 8000764:	20000131 	andcs	r0, r0, r1, lsr r1
 8000768:	200006a0 	andcs	r0, r0, r0, lsr #13
								USART_SendData(USART1,(u8)USB_Rx_Buffer[i]);
								while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
							}
							USB_Rx_Cnt = 0;
 800076c:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <SerialMonitor+0x3ec>)
 800076e:	2300      	movs	r3, #0
							GPIO_ResetBits(GPIOB, GPIO_Pin_5);	// RX Enable
 8000770:	2120      	movs	r1, #32
 8000772:	4822      	ldr	r0, [pc, #136]	; (80007fc <SerialMonitor+0x3f0>)
							GPIO_SetBits(GPIOB, GPIO_Pin_5);	// TX Enable
							for(i=0; i < USB_Rx_Cnt; i++){
								USART_SendData(USART1,(u8)USB_Rx_Buffer[i]);
								while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
							}
							USB_Rx_Cnt = 0;
 8000774:	8013      	strh	r3, [r2, #0]
							GPIO_ResetBits(GPIOB, GPIO_Pin_5);	// RX Enable
 8000776:	f000 fde7 	bl	8001348 <GPIO_ResetBits>

						}

						if(gbDXLWritePointer != gbDXLReadPointer){
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <SerialMonitor+0x3f4>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <SerialMonitor+0x3f8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d08e      	beq.n	80006a4 <SerialMonitor+0x298>
							while(gbDXLWritePointer != gbDXLReadPointer)//DXL -> USB
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SerialMonitor+0x3f8>)
							{
								USB_TxDByte(gbpDXLDataBuffer[gbDXLReadPointer++]);
 8000788:	491f      	ldr	r1, [pc, #124]	; (8000808 <SerialMonitor+0x3fc>)
							GPIO_ResetBits(GPIOB, GPIO_Pin_5);	// RX Enable

						}

						if(gbDXLWritePointer != gbDXLReadPointer){
							while(gbDXLWritePointer != gbDXLReadPointer)//DXL -> USB
 800078a:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <SerialMonitor+0x3f4>)
 800078c:	7810      	ldrb	r0, [r2, #0]
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <SerialMonitor+0x3f8>)
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	4290      	cmp	r0, r2
 8000794:	d086      	beq.n	80006a4 <SerialMonitor+0x298>
							{
								USB_TxDByte(gbpDXLDataBuffer[gbDXLReadPointer++]);
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	1c50      	adds	r0, r2, #1
 800079e:	b2c0      	uxtb	r0, r0
 80007a0:	7018      	strb	r0, [r3, #0]
 80007a2:	5c88      	ldrb	r0, [r1, r2]
 80007a4:	9101      	str	r1, [sp, #4]
 80007a6:	f000 fca7 	bl	80010f8 <USB_TxDByte>
								gbDXLReadPointer = gbDXLReadPointer & USART_BUFFER_SIZE;
 80007aa:	9b02      	ldr	r3, [sp, #8]
 80007ac:	9901      	ldr	r1, [sp, #4]
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e7e9      	b.n	800078a <SerialMonitor+0x37e>
							}
						}
					}
				}
			}
			else if(StringCompare(bpCommand,"AT&NAME",7)){
 80007b6:	2207      	movs	r2, #7
 80007b8:	4914      	ldr	r1, [pc, #80]	; (800080c <SerialMonitor+0x400>)
 80007ba:	4638      	mov	r0, r7
 80007bc:	f7ff fd9e 	bl	80002fc <StringCompare>
 80007c0:	b108      	cbz	r0, 80007c6 <SerialMonitor+0x3ba>
				USB_TxDString("CM-904\n");
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <SerialMonitor+0x404>)
 80007c4:	e00a      	b.n	80007dc <SerialMonitor+0x3d0>
			}
			else{
				TxDString("No IDE Command!\r\n");
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <SerialMonitor+0x408>)
 80007c8:	f7ff fd42 	bl	8000250 <TxDString>
 80007cc:	e008      	b.n	80007e0 <SerialMonitor+0x3d4>
			}

		}else{
			if(bpCommand[0] == 'A' && bpCommand[1] == 'T'){
 80007ce:	2b41      	cmp	r3, #65	; 0x41
 80007d0:	d106      	bne.n	80007e0 <SerialMonitor+0x3d4>
 80007d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80007d6:	2b54      	cmp	r3, #84	; 0x54
 80007d8:	d102      	bne.n	80007e0 <SerialMonitor+0x3d4>
				USB_TxDString("OK\n");
 80007da:	480f      	ldr	r0, [pc, #60]	; (8000818 <SerialMonitor+0x40c>)
 80007dc:	f7ff fd6f 	bl	80002be <USB_TxDString>
			}
		}
		gbCount = 0;
 80007e0:	2300      	movs	r3, #0
		for(i=0;i<COMMAND_LENGTH;i++){
				bpCommand[i]='\0'; //clear command buffer
 80007e2:	4619      	mov	r1, r3
		}else{
			if(bpCommand[0] == 'A' && bpCommand[1] == 'T'){
				USB_TxDString("OK\n");
			}
		}
		gbCount = 0;
 80007e4:	7223      	strb	r3, [r4, #8]
		for(i=0;i<COMMAND_LENGTH;i++){
				bpCommand[i]='\0'; //clear command buffer
 80007e6:	54f9      	strb	r1, [r7, r3]
			if(bpCommand[0] == 'A' && bpCommand[1] == 'T'){
				USB_TxDString("OK\n");
			}
		}
		gbCount = 0;
		for(i=0;i<COMMAND_LENGTH;i++){
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
				bpCommand[i]='\0'; //clear command buffer
 80007ec:	f04f 0200 	mov.w	r2, #0
			if(bpCommand[0] == 'A' && bpCommand[1] == 'T'){
				USB_TxDString("OK\n");
			}
		}
		gbCount = 0;
		for(i=0;i<COMMAND_LENGTH;i++){
 80007f0:	d1f9      	bne.n	80007e6 <SerialMonitor+0x3da>
				bpCommand[i]='\0'; //clear command buffer
		}
		USART_BUFFER_CLEAR;
 80007f2:	8032      	strh	r2, [r6, #0]
 80007f4:	802a      	strh	r2, [r5, #0]
 80007f6:	e624      	b.n	8000442 <SerialMonitor+0x36>
 80007f8:	2000010e 	andcs	r0, r0, lr, lsl #2
 80007fc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8000800:	200006a0 	andcs	r0, r0, r0, lsr #13
 8000804:	20000131 	andcs	r0, r0, r1, lsr r1
 8000808:	200005a0 	andcs	r0, r0, r0, lsr #11
 800080c:	080027b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp}
 8000810:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
 8000814:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
 8000818:	080027d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, sp}

0800081c <RCC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
 800081c:	b510      	push	{r4, lr}
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
 800081e:	f000 fe21 	bl	8001464 <RCC_DeInit>

  /* Enable HSE */
    RCC_HSEConfig(RCC_HSE_ON);
 8000822:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000826:	f000 fe3b 	bl	80014a0 <RCC_HSEConfig>

  /* Wait till HSE is ready */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800082a:	f000 ff21 	bl	8001670 <RCC_WaitForHSEStartUp>
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <RCC_Configuration+0x84>)

  if(HSEStartUpStatus == SUCCESS)
 8000830:	2801      	cmp	r0, #1

  /* Enable HSE */
    RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000832:	4604      	mov	r4, r0
 8000834:	7018      	strb	r0, [r3, #0]

  if(HSEStartUpStatus == SUCCESS)
 8000836:	d00a      	beq.n	800084e <RCC_Configuration+0x32>
  }
	/* Enable peripheral clocks --------------------------------------------------*/
	//RCC_ADCCLKConfig(RCC_PCLK2_Div6);    // added 2012-05-10 jason

	/* Enable USART1, GPIOA, GPIOB, and AFIO clocks */ //add RCC_APB2Periph_GPIOC for USB_DISCONNECT pin by sm.lee 2012-08-13
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_USART1 |
 8000838:	2101      	movs	r1, #1
 800083a:	f244 001d 	movw	r0, #16413	; 0x401d
 800083e:	f000 fed3 	bl	80015e8 <RCC_APB2PeriphClockCmd>
  						    RCC_APB1Periph_USART2 |
  						    RCC_APB1Periph_PWR ,
  						    ENABLE);

	//PWR_BackupAccessCmd(ENABLE);
}
 8000842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
							RCC_APB2Periph_ADC2   |
#endif
						    RCC_APB2Periph_AFIO,
						    ENABLE);
	//add RCC_APB1Periph_USART2 clock @ new CM-900 with jason 2012-07-24
  	RCC_APB1PeriphClockCmd(
 8000846:	2101      	movs	r1, #1
 8000848:	4816      	ldr	r0, [pc, #88]	; (80008a4 <RCC_Configuration+0x88>)
 800084a:	f000 bed9 	b.w	8001600 <RCC_APB1PeriphClockCmd>
    HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 800084e:	2010      	movs	r0, #16
 8000850:	f000 fc74 	bl	800113c <FLASH_PrefetchBufferCmd>

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
 8000854:	2002      	movs	r0, #2
 8000856:	f000 fc65 	bl	8001124 <FLASH_SetLatency>

    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1); 
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fe5e 	bl	800151c <RCC_HCLKConfig>
  
    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1); 
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fe6f 	bl	8001544 <RCC_PCLK2Config>

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);
 8000866:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800086a:	f000 fe61 	bl	8001530 <RCC_PCLK1Config>

    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 800086e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000872:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000876:	f000 fe2f 	bl	80014d8 <RCC_PLLConfig>

    /* Enable PLL */ 
	RCC_PLLCmd(ENABLE);
 800087a:	4620      	mov	r0, r4
 800087c:	f000 fe36 	bl	80014ec <RCC_PLLCmd>

    /* Wait till PLL is ready */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8000880:	2039      	movs	r0, #57	; 0x39
 8000882:	f000 fee1 	bl	8001648 <RCC_GetFlagStatus>
 8000886:	2800      	cmp	r0, #0
 8000888:	d0fa      	beq.n	8000880 <RCC_Configuration+0x64>
    {
    }
    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 fe34 	bl	80014f8 <RCC_SYSCLKConfig>
    /* Select USBCLK source */
    RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fe61 	bl	8001558 <RCC_USBCLKConfig>
    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08)
 8000896:	f000 fe39 	bl	800150c <RCC_GetSYSCLKSource>
 800089a:	2808      	cmp	r0, #8
 800089c:	d1fb      	bne.n	8000896 <RCC_Configuration+0x7a>
 800089e:	e7cb      	b.n	8000838 <RCC_Configuration+0x1c>
 80008a0:	20000130 	andcs	r0, r0, r0, lsr r1
 80008a4:	10820001 	addne	r0, r2, r1

080008a8 <GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//��� ���� ���
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008ac:	4c45      	ldr	r4, [pc, #276]	; (80009c4 <GPIO_Configuration+0x11c>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 80008ae:	b085      	sub	sp, #20


	GPIO_InitTypeDef GPIO_InitStructure;


	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//��� ���� ���
 80008b0:	2501      	movs	r5, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 80008b2:	2328      	movs	r3, #40	; 0x28
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008b4:	a903      	add	r1, sp, #12
 80008b6:	4620      	mov	r0, r4


	/* Configure USART2 Rx(Alter.F) (PA.3) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//modified by sm.lee 2012-07-24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80008b8:	2604      	movs	r6, #4
	GPIO_InitTypeDef GPIO_InitStructure;


	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//��� ���� ���
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 80008ba:	f88d 300f 	strb.w	r3, [sp, #15]


	GPIO_InitTypeDef GPIO_InitStructure;


	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//��� ���� ���
 80008be:	f8ad 500c 	strh.w	r5, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80008c2:	f88d 500e 	strb.w	r5, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008c6:	f000 fce5 	bl	8001294 <GPIO_Init>


	/* Configure USART2 Rx(Alter.F) (PA.3) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//modified by sm.lee 2012-07-24
 80008ca:	2308      	movs	r3, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008cc:	a903      	add	r1, sp, #12
 80008ce:	4620      	mov	r0, r4
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	/* Configure USART2 Rx(Alter.F) (PA.3) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//modified by sm.lee 2012-07-24
 80008d0:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Configure USART2 Tx(Alter.F) (PA.2) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;//modified by sm.lee 2012-07-24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008d4:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008d8:	f04f 0b18 	mov.w	fp, #24
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	/* Configure USART2 Rx(Alter.F) (PA.3) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//modified by sm.lee 2012-07-24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80008dc:	f88d 600f 	strb.w	r6, [sp, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008e0:	f000 fcd8 	bl	8001294 <GPIO_Init>

	/* Configure USART2 Tx(Alter.F) (PA.2) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;//modified by sm.lee 2012-07-24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008e4:	a903      	add	r1, sp, #12
 80008e6:	4620      	mov	r0, r4
#endif
/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = PIN_LED;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(PORT_LED, &GPIO_InitStructure);
 80008e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	GPIO_Init(PORT_USB_POWER, &GPIO_InitStructure);
#endif
/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = PIN_LED;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80008ec:	2710      	movs	r7, #16

/* Configure USB Disconnect pin (PA.8) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;/*test for USB disconnect*/
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// GPIO_Speed_50MHz;//GPIO_Speed_10MHz; PC13~15 is limited their' speed to 2Mhz
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStructure);
 80008ee:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80009cc <GPIO_Configuration+0x124>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//modified by sm.lee 2012-07-24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Configure USART2 Tx(Alter.F) (PA.2) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;//modified by sm.lee 2012-07-24
 80008f2:	f8ad 600c 	strh.w	r6, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008f6:	f88d 800e 	strb.w	r8, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008fa:	f88d b00f 	strb.w	fp, [sp, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008fe:	f000 fcc9 	bl	8001294 <GPIO_Init>
#endif
/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = PIN_LED;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(PORT_LED, &GPIO_InitStructure);
 8000902:	a903      	add	r1, sp, #12
 8000904:	4620      	mov	r0, r4

/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = CM904_PIN_LED;
 8000906:	f44f 7900 	mov.w	r9, #512	; 0x200
	GPIO_InitStructure.GPIO_Pin =  PIN_USB_POWER;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(PORT_USB_POWER, &GPIO_InitStructure);
#endif
/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = PIN_LED;
 800090a:	f8ad 600c 	strh.w	r6, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800090e:	f88d 500e 	strb.w	r5, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000912:	f88d 700f 	strb.w	r7, [sp, #15]
	GPIO_Init(PORT_LED, &GPIO_InitStructure);
 8000916:	f000 fcbd 	bl	8001294 <GPIO_Init>

/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = CM904_PIN_LED;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(CM904_PORT_LED, &GPIO_InitStructure);
 800091a:	a903      	add	r1, sp, #12
 800091c:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(PORT_LED, &GPIO_InitStructure);

/* Configure LED (PB.2) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = CM904_PIN_LED;
 800091e:	f8ad 900c 	strh.w	r9, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000922:	f88d 500e 	strb.w	r5, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000926:	f88d 700f 	strb.w	r7, [sp, #15]
	GPIO_Init(CM904_PORT_LED, &GPIO_InitStructure);
 800092a:	f000 fcb3 	bl	8001294 <GPIO_Init>

/* Configure USB Disconnect pin (PA.8) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;/*test for USB disconnect*/
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// GPIO_Speed_50MHz;//GPIO_Speed_10MHz; PC13~15 is limited their' speed to 2Mhz
 800092e:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(CM904_PORT_LED, &GPIO_InitStructure);

/* Configure USB Disconnect pin (PA.8) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;/*test for USB disconnect*/
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// GPIO_Speed_50MHz;//GPIO_Speed_10MHz; PC13~15 is limited their' speed to 2Mhz
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStructure);
 8000934:	a903      	add	r1, sp, #12
 8000936:	4650      	mov	r0, sl
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(CM904_PORT_LED, &GPIO_InitStructure);

/* Configure USB Disconnect pin (PA.8) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;/*test for USB disconnect*/
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// GPIO_Speed_50MHz;//GPIO_Speed_10MHz; PC13~15 is limited their' speed to 2Mhz
 8000938:	f88d 200e 	strb.w	r2, [sp, #14]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(CM904_PORT_LED, &GPIO_InitStructure);

/* Configure USB Disconnect pin (PA.8) as output push-pull */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;/*test for USB disconnect*/
 800093c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000940:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// GPIO_Speed_50MHz;//GPIO_Speed_10MHz; PC13~15 is limited their' speed to 2Mhz
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000942:	f88d 700f 	strb.w	r7, [sp, #15]
	GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStructure);
 8000946:	f000 fca5 	bl	8001294 <GPIO_Init>

	GPIO_SetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);//USB Pull-up must be disabled(go to High) during system power on
 800094a:	9b01      	ldr	r3, [sp, #4]
 800094c:	4650      	mov	r0, sl
 800094e:	4619      	mov	r1, r3
 8000950:	f000 fcf8 	bl	8001344 <GPIO_SetBits>

	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_5; //DXL DIR
 8000954:	f04f 0a20 	mov.w	sl, #32
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000958:	a903      	add	r1, sp, #12
 800095a:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStructure);

	GPIO_SetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);//USB Pull-up must be disabled(go to High) during system power on

	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_5; //DXL DIR
 800095c:	f8ad a00c 	strh.w	sl, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000960:	f88d 800e 	strb.w	r8, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000964:	f88d 700f 	strb.w	r7, [sp, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000968:	f000 fc94 	bl	8001294 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; //DXL RXD
 800096c:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800096e:	a903      	add	r1, sp, #12
 8000970:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_5; //DXL DIR
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; //DXL RXD
 8000972:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000976:	f88d 600f 	strb.w	r6, [sp, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800097a:	f000 fc8b 	bl	8001294 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; //DXL TXD
 800097e:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000980:	a903      	add	r1, sp, #12
 8000982:	4620      	mov	r0, r4

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; //DXL RXD
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; //DXL TXD
 8000984:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000988:	f88d 800e 	strb.w	r8, [sp, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800098c:	f88d b00f 	strb.w	fp, [sp, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000990:	f000 fc80 	bl	8001294 <GPIO_Init>

	GPIO_ResetBits(GPIOB, GPIO_Pin_5);	// TX Disable // RX Enable
 8000994:	4651      	mov	r1, sl
 8000996:	4620      	mov	r0, r4
 8000998:	f000 fcd6 	bl	8001348 <GPIO_ResetBits>

	GPIO_SetBits(PORT_LED, PIN_LED);		// LED Off
 800099c:	4631      	mov	r1, r6
 800099e:	4620      	mov	r0, r4
 80009a0:	f000 fcd0 	bl	8001344 <GPIO_SetBits>
	GPIO_SetBits(CM904_PORT_LED, CM904_PIN_LED);		// 904 LED Off
 80009a4:	4649      	mov	r1, r9
 80009a6:	4620      	mov	r0, r4
 80009a8:	f000 fccc 	bl	8001344 <GPIO_SetBits>

	/* Configure USART1 Remap enable */
	GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 80009ac:	4629      	mov	r1, r5
 80009ae:	4630      	mov	r0, r6
 80009b0:	f000 fccc 	bl	800134c <GPIO_PinRemapConfig>
	/* If use both DXL Enable_TX/RX pin and JTAG Debug/Downloading, need GPIO_Remap_SWJ_NoJTRST option */
	GPIO_PinRemapConfig( GPIO_Remap_SWJ_NoJTRST,ENABLE);//GPIO_Remap_SWJ_Disable, ENABLE);
 80009b4:	4629      	mov	r1, r5
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <GPIO_Configuration+0x120>)
 80009b8:	f000 fcc8 	bl	800134c <GPIO_PinRemapConfig>


}
 80009bc:	b005      	add	sp, #20
 80009be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c2:	bf00      	nop
 80009c4:	40010800 	andmi	r0, r1, r0, lsl #16
 80009c8:	00300100 	eorseq	r0, r0, r0, lsl #2
 80009cc:	40011000 	andmi	r1, r1, r0

080009d0 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 80009d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
/*
 * Set the Vector Table base location at 0x08000000 in Boot-loader case
 * Set the Vector Table base location at 0x08003000 in Application case
 */
//	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);   
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
 80009d2:	2100      	movs	r1, #0
 80009d4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80009d8:	f000 fd2e 	bl	8001438 <NVIC_SetVectorTable>
#endif


/* Configure the NVIC Preemption Priority Bits */  
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80009dc:	f44f 60a0 	mov.w	r0, #1280	; 0x500

	/* Enable the USB RX0 Interrupt */
	 NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;//USB_LP_CAN1_RX0_IRQn;
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80009e0:	2401      	movs	r4, #1
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
#endif


/* Configure the NVIC Preemption Priority Bits */  
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80009e2:	f000 fcdd 	bl	80013a0 <NVIC_PriorityGroupConfig>


	/* Enable the USB RX0 Interrupt */
	 NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;//USB_LP_CAN1_RX0_IRQn;
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80009e6:	2500      	movs	r5, #0
/* Configure the NVIC Preemption Priority Bits */  
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);


	/* Enable the USB RX0 Interrupt */
	 NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;//USB_LP_CAN1_RX0_IRQn;
 80009e8:	2314      	movs	r3, #20
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	 NVIC_Init(&NVIC_InitStructure);
 80009ea:	a801      	add	r0, sp, #4
/* Configure the NVIC Preemption Priority Bits */  
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);


	/* Enable the USB RX0 Interrupt */
	 NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;//USB_LP_CAN1_RX0_IRQn;
 80009ec:	f88d 3004 	strb.w	r3, [sp, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80009f0:	f88d 5005 	strb.w	r5, [sp, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80009f4:	f88d 5006 	strb.w	r5, [sp, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80009f8:	f88d 4007 	strb.w	r4, [sp, #7]
	 NVIC_Init(&NVIC_InitStructure);
 80009fc:	f000 fcda 	bl	80013b4 <NVIC_Init>

	// Enable the USART1 Interrupt for DXL
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8000a00:	2325      	movs	r3, #37	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000a02:	a801      	add	r0, sp, #4
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	 NVIC_Init(&NVIC_InitStructure);

	// Enable the USART1 Interrupt for DXL
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8000a04:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000a08:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000a0c:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a10:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000a14:	f000 fcce 	bl	80013b4 <NVIC_Init>

	 /* Enable the USART2 Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQChannel;// USART interrupt when connect to Zigbee USART
 8000a18:	2326      	movs	r3, #38	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000a1a:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	 /* Enable the USART2 Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQChannel;// USART interrupt when connect to Zigbee USART
 8000a1c:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000a20:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000a24:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a28:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000a2c:	f000 fcc2 	bl	80013b4 <NVIC_Init>

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8000a30:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000a32:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8000a34:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000a38:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000a3c:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a40:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000a44:	f000 fcb6 	bl	80013b4 <NVIC_Init>

}
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd30      	pop	{r4, r5, pc}

08000a4c <main>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int main(void)
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
	/* System Clocks Configuration */
	RCC_Configuration();
 8000a4e:	f7ff fee5 	bl	800081c <RCC_Configuration>

	/* Configure the GPIO ports */
	GPIO_Configuration();
 8000a52:	f7ff ff29 	bl	80008a8 <GPIO_Configuration>

	/* NVIC configuration */
	NVIC_Configuration();
 8000a56:	f7ff ffbb 	bl	80009d0 <NVIC_Configuration>

	Timer_Configuration();
 8000a5a:	f7ff fbbd 	bl	80001d8 <Timer_Configuration>

	/* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	SysTick_SetReload(9000);
 8000a5e:	f242 3028 	movw	r0, #9000	; 0x2328
 8000a62:	f000 fe65 	bl	8001730 <SysTick_SetReload>

	/* Enable SysTick interrupt */
	SysTick_ITConfig(ENABLE);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fe7c 	bl	8001764 <SysTick_ITConfig>

	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 8000a6c:	f245 5055 	movw	r0, #21845	; 0x5555
 8000a70:	f000 fbfe 	bl	8001270 <IWDG_WriteAccessCmd>

	IWDG_SetPrescaler(IWDG_Prescaler_4);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 fc01 	bl	800127c <IWDG_SetPrescaler>

	IWDG_SetReload(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f000 fc04 	bl	8001288 <IWDG_SetReload>
#endif



	/* USART Configuration */
	USART_Configuration(2,57600); //Initialize USART 2 device
 8000a80:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff fc63 	bl	8000350 <USART_Configuration>
	USART_BUFFER_CLEAR;
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <main+0x9c>)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	8013      	strh	r3, [r2, #0]
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <main+0xa0>)
	Delay(70);
 8000a92:	2046      	movs	r0, #70	; 0x46



	/* USART Configuration */
	USART_Configuration(2,57600); //Initialize USART 2 device
	USART_BUFFER_CLEAR;
 8000a94:	8013      	strh	r3, [r2, #0]
	Delay(70);
 8000a96:	f7ff fc1b 	bl	80002d0 <Delay>

	/* USB Init */
	USB_Init();
 8000a9a:	f000 ff8b 	bl	80019b4 <USB_Init>


	if(GPIO_ReadInputDataBit(GPIOA , GPIO_Pin_0) == SET )
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <main+0xa4>)
 8000aa2:	f000 fc49 	bl	8001338 <GPIO_ReadInputDataBit>
 8000aa6:	2801      	cmp	r0, #1
 8000aa8:	d102      	bne.n	8000ab0 <main+0x64>
		TxDString("Detect Pin!\r\n");
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <main+0xa8>)
 8000aac:	f7ff fbd0 	bl	8000250 <TxDString>
	TxDString("CM-9 SERISE SYSTEM INIT!\r\n");
#endif

	u32 NotApp = 0;

	if( *(u32 *)(FLASH_START_ADDRESS+ 4) == 0xFFFFFFFF )
 8000ab0:	4d11      	ldr	r5, [pc, #68]	; (8000af8 <main+0xac>)
	{
		NotApp = 1;
	}	

	if(RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET || GPIO_ReadInputDataBit(GPIOA , GPIO_Pin_0) == SET || NotApp == 1)
 8000ab2:	207d      	movs	r0, #125	; 0x7d
	TxDString("CM-9 SERISE SYSTEM INIT!\r\n");
#endif

	u32 NotApp = 0;

	if( *(u32 *)(FLASH_START_ADDRESS+ 4) == 0xFFFFFFFF )
 8000ab4:	682e      	ldr	r6, [r5, #0]
	{
		NotApp = 1;
	}	

	if(RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET || GPIO_ReadInputDataBit(GPIOA , GPIO_Pin_0) == SET || NotApp == 1)
 8000ab6:	f000 fdc7 	bl	8001648 <RCC_GetFlagStatus>
 8000aba:	4604      	mov	r4, r0
 8000abc:	b118      	cbz	r0, 8000ac6 <main+0x7a>
	{


		RCC_ClearFlag();
 8000abe:	f000 fdef 	bl	80016a0 <RCC_ClearFlag>
		while(bDeviceState != CONFIGURED);  //Wait until USB CDC is fully initialized
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <main+0xb0>)
 8000ac4:	e00b      	b.n	8000ade <main+0x92>
	if( *(u32 *)(FLASH_START_ADDRESS+ 4) == 0xFFFFFFFF )
	{
		NotApp = 1;
	}	

	if(RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET || GPIO_ReadInputDataBit(GPIOA , GPIO_Pin_0) == SET || NotApp == 1)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <main+0xa4>)
 8000aca:	f000 fc35 	bl	8001338 <GPIO_ReadInputDataBit>
 8000ace:	2801      	cmp	r0, #1
 8000ad0:	d0f5      	beq.n	8000abe <main+0x72>
 8000ad2:	3601      	adds	r6, #1
 8000ad4:	d0f3      	beq.n	8000abe <main+0x72>
	TxDString("\r\n Go: 0x");
	TxDHex32(JumpAddress);
	TxDString("\r\n");
#endif
	Jump_To_Application = (pFunction) JumpAddress;
	Jump_To_Application();
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	4798      	blx	r3
	return 0;
}
 8000ada:	4620      	mov	r0, r4
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
	if(RCC_GetFlagStatus(RCC_FLAG_IWDGRST) != RESET || GPIO_ReadInputDataBit(GPIOA , GPIO_Pin_0) == SET || NotApp == 1)
	{


		RCC_ClearFlag();
		while(bDeviceState != CONFIGURED);  //Wait until USB CDC is fully initialized
 8000ade:	6813      	ldr	r3, [r2, #0]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d1fc      	bne.n	8000ade <main+0x92>
#ifdef DEBUG_ENABLE_BY_USART2
		TxDString("Start serial monitor\r\n");
#endif
		SerialMonitor();
 8000ae4:	f7ff fc92 	bl	800040c <SerialMonitor>
 8000ae8:	2000018c 	andcs	r0, r0, ip, lsl #3
 8000aec:	20000138 	andcs	r0, r0, r8, lsr r1
 8000af0:	40010800 	andmi	r0, r1, r0, lsl #16
 8000af4:	080027da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, sp}
 8000af8:	08003004 	stmdaeq	r0, {r2, ip, sp}
 8000afc:	20000120 	andcs	r0, r0, r0, lsr #2

08000b00 <NMIException>:
 8000b00:	4770      	bx	lr

08000b02 <HardFaultException>:
 8000b02:	4770      	bx	lr

08000b04 <MemManageException>:
 8000b04:	4770      	bx	lr

08000b06 <BusFaultException>:
 8000b06:	4770      	bx	lr

08000b08 <UsageFaultException>:
 8000b08:	4770      	bx	lr

08000b0a <DebugMonitor>:
 8000b0a:	4770      	bx	lr

08000b0c <SVCHandler>:
 8000b0c:	4770      	bx	lr

08000b0e <PendSVC>:
 8000b0e:	4770      	bx	lr

08000b10 <SysTickHandler>:
{

	//IWDG_ReloadCounter(); //if you want to prevent resetting system, enable this function and adjust the timing
	//TxDString("IWDG counter reset!");

	if (TimingDelay != 0x00)
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <SysTickHandler+0x10>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	b112      	cbz	r2, 8000b1c <SysTickHandler+0xc>
	{ 
		TimingDelay--;
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000134 	andcs	r0, r0, r4, lsr r1

08000b24 <WWDG_IRQHandler>:
 8000b24:	4770      	bx	lr

08000b26 <PVD_IRQHandler>:
 8000b26:	4770      	bx	lr

08000b28 <TAMPER_IRQHandler>:
 8000b28:	4770      	bx	lr

08000b2a <RTC_IRQHandler>:
 8000b2a:	4770      	bx	lr

08000b2c <FLASH_IRQHandler>:
 8000b2c:	4770      	bx	lr

08000b2e <RCC_IRQHandler>:
 8000b2e:	4770      	bx	lr

08000b30 <EXTI0_IRQHandler>:
 8000b30:	4770      	bx	lr

08000b32 <EXTI1_IRQHandler>:
 8000b32:	4770      	bx	lr

08000b34 <EXTI2_IRQHandler>:
 8000b34:	4770      	bx	lr

08000b36 <EXTI3_IRQHandler>:
 8000b36:	4770      	bx	lr

08000b38 <EXTI4_IRQHandler>:
 8000b38:	4770      	bx	lr

08000b3a <ADC1_2_IRQHandler>:
 8000b3a:	4770      	bx	lr

08000b3c <USB_HP_CAN_TX_IRQHandler>:
 8000b3c:	4770      	bx	lr

08000b3e <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
	__USBCDC_ISR();
 8000b3e:	f000 b915 	b.w	8000d6c <__USBCDC_ISR>

08000b42 <CAN_RX1_IRQHandler>:
 8000b42:	4770      	bx	lr

08000b44 <CAN_SCE_IRQHandler>:
 8000b44:	4770      	bx	lr

08000b46 <EXTI9_5_IRQHandler>:
 8000b46:	4770      	bx	lr

08000b48 <TIM1_BRK_IRQHandler>:
 8000b48:	4770      	bx	lr

08000b4a <TIM1_UP_IRQHandler>:
 8000b4a:	4770      	bx	lr

08000b4c <TIM1_TRG_COM_IRQHandler>:
 8000b4c:	4770      	bx	lr

08000b4e <TIM1_CC_IRQHandler>:
 8000b4e:	4770      	bx	lr

08000b50 <TIM2_IRQHandler>:
extern u8 CheckTimeOut(void);
extern void Interrupt1ms(void);
extern vu32      gu32TimingCounter1ms, gw1msCounter;

void TIM2_IRQHandler(void)
{
 8000b50:	b508      	push	{r3, lr}

	/* Clear TIM2 update interrupt */
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000b52:	2101      	movs	r1, #1
 8000b54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b58:	f000 fde6 	bl	8001728 <TIM_ClearITPendingBit>

		/* Toggle Red */
		//LED(YELLOW);
		Interrupt1ms();

}
 8000b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	/* Clear TIM2 update interrupt */
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);

		/* Toggle Red */
		//LED(YELLOW);
		Interrupt1ms();
 8000b60:	f7ff bb30 	b.w	80001c4 <Interrupt1ms>

08000b64 <TIM3_IRQHandler>:
 8000b64:	4770      	bx	lr

08000b66 <TIM4_IRQHandler>:
 8000b66:	4770      	bx	lr

08000b68 <I2C1_EV_IRQHandler>:
 8000b68:	4770      	bx	lr

08000b6a <I2C1_ER_IRQHandler>:
 8000b6a:	4770      	bx	lr

08000b6c <I2C2_EV_IRQHandler>:
 8000b6c:	4770      	bx	lr

08000b6e <I2C2_ER_IRQHandler>:
 8000b6e:	4770      	bx	lr

08000b70 <SPI1_IRQHandler>:
 8000b70:	4770      	bx	lr

08000b72 <SPI2_IRQHandler>:
 8000b72:	4770      	bx	lr

08000b74 <USART1_IRQHandler>:

extern volatile u8  gbDXLWritePointer;
extern volatile u8  gbpDXLDataBuffer[256];

void USART1_IRQHandler(void)
{
 8000b74:	b510      	push	{r4, lr}
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){
 8000b76:	f240 5125 	movw	r1, #1317	; 0x525
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <USART1_IRQHandler+0x28>)
 8000b7c:	f000 fed1 	bl	8001922 <USART_GetITStatus>
 8000b80:	b158      	cbz	r0, 8000b9a <USART1_IRQHandler+0x26>
		gbpDXLDataBuffer[gbDXLWritePointer++] = USART_ReceiveData(USART1);
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <USART1_IRQHandler+0x2c>)
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <USART1_IRQHandler+0x28>)
 8000b86:	7814      	ldrb	r4, [r2, #0]
 8000b88:	b2e4      	uxtb	r4, r4
 8000b8a:	1c63      	adds	r3, r4, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	7013      	strb	r3, [r2, #0]
 8000b90:	f000 feb9 	bl	8001906 <USART_ReceiveData>
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <USART1_IRQHandler+0x30>)
 8000b96:	b2c0      	uxtb	r0, r0
 8000b98:	5518      	strb	r0, [r3, r4]
 8000b9a:	bd10      	pop	{r4, pc}
 8000b9c:	40013800 	andmi	r3, r1, r0, lsl #16
 8000ba0:	200006a0 	andcs	r0, r0, r0, lsr #13
 8000ba4:	200005a0 	andcs	r0, r0, r0, lsr #11

08000ba8 <USART2_IRQHandler>:


	//modified @new CM-900 for downloading 2012-07-24
	static u32 sr;
	/* Read one byte from the receive data register */
	gwpUSARTBuffer[(gwUSARTWritePtr++)&USART_BUFFER_SIZE] = USART_ReceiveData(USART2);
 8000ba8:	4908      	ldr	r1, [pc, #32]	; (8000bcc <USART2_IRQHandler+0x24>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8000baa:	b538      	push	{r3, r4, r5, lr}


	//modified @new CM-900 for downloading 2012-07-24
	static u32 sr;
	/* Read one byte from the receive data register */
	gwpUSARTBuffer[(gwUSARTWritePtr++)&USART_BUFFER_SIZE] = USART_ReceiveData(USART2);
 8000bac:	880b      	ldrh	r3, [r1, #0]
 8000bae:	4d08      	ldr	r5, [pc, #32]	; (8000bd0 <USART2_IRQHandler+0x28>)
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	b292      	uxth	r2, r2
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8000bbc:	800a      	strh	r2, [r1, #0]
 8000bbe:	f000 fea2 	bl	8001906 <USART_ReceiveData>
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <USART2_IRQHandler+0x2c>)
 8000bc4:	b2c0      	uxtb	r0, r0
 8000bc6:	5518      	strb	r0, [r3, r4]
	sr = USART2->SR;
 8000bc8:	882b      	ldrh	r3, [r5, #0]
 8000bca:	bd38      	pop	{r3, r4, r5, pc}
 8000bcc:	20000138 	andcs	r0, r0, r8, lsr r1
 8000bd0:	40004400 	andmi	r4, r0, r0, lsl #8
 8000bd4:	200001a0 	andcs	r0, r0, r0, lsr #3

08000bd8 <USART3_IRQHandler>:
 8000bd8:	4770      	bx	lr

08000bda <EXTI15_10_IRQHandler>:
 8000bda:	4770      	bx	lr

08000bdc <RTCAlarm_IRQHandler>:
 8000bdc:	4770      	bx	lr

08000bde <USBWakeUp_IRQHandler>:
 8000bde:	4770      	bx	lr

08000be0 <TIM8_BRK_IRQHandler>:
 8000be0:	4770      	bx	lr

08000be2 <TIM8_UP_IRQHandler>:
 8000be2:	4770      	bx	lr

08000be4 <TIM8_TRG_COM_IRQHandler>:
 8000be4:	4770      	bx	lr

08000be6 <TIM8_CC_IRQHandler>:
 8000be6:	4770      	bx	lr

08000be8 <ADC3_IRQHandler>:
 8000be8:	4770      	bx	lr

08000bea <FSMC_IRQHandler>:
 8000bea:	4770      	bx	lr

08000bec <SDIO_IRQHandler>:
 8000bec:	4770      	bx	lr

08000bee <TIM5_IRQHandler>:
 8000bee:	4770      	bx	lr

08000bf0 <SPI3_IRQHandler>:
 8000bf0:	4770      	bx	lr

08000bf2 <UART4_IRQHandler>:
 8000bf2:	4770      	bx	lr

08000bf4 <UART5_IRQHandler>:
 8000bf4:	4770      	bx	lr

08000bf6 <TIM6_IRQHandler>:
 8000bf6:	4770      	bx	lr

08000bf8 <TIM7_IRQHandler>:
 8000bf8:	4770      	bx	lr

08000bfa <DMA2_Channel1_IRQHandler>:
 8000bfa:	4770      	bx	lr

08000bfc <DMA2_Channel2_IRQHandler>:
 8000bfc:	4770      	bx	lr

08000bfe <DMA2_Channel3_IRQHandler>:
 8000bfe:	4770      	bx	lr

08000c00 <DMA2_Channel4_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
 8000c00:	4770      	bx	lr
	...

08000c04 <EP1_IN_Callback>:
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{

	FinishToSend = 0;
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <EP1_IN_Callback+0x8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4770      	bx	lr
 8000c0c:	2000010c 	andcs	r0, r0, ip, lsl #2

08000c10 <WriteFlash64>:
	SetEPRxValid(ENDP3);
#endif /* STM32F10X_CL */
}


bool WriteFlash64(u8* RxBuffer, u16 RxCount ){
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	u16 lFlashCount;
	u8 lTheRestCount=0;
	volatile FLASH_Status FLASHStatus;

	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <WriteFlash64+0xe0>)
	SetEPRxValid(ENDP3);
#endif /* STM32F10X_CL */
}


bool WriteFlash64(u8* RxBuffer, u16 RxCount ){
 8000c16:	b085      	sub	sp, #20

	u16 lFlashCount;
	u8 lTheRestCount=0;
	volatile FLASH_Status FLASHStatus;

	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
 8000c18:	781b      	ldrb	r3, [r3, #0]
	SetEPRxValid(ENDP3);
#endif /* STM32F10X_CL */
}


bool WriteFlash64(u8* RxBuffer, u16 RxCount ){
 8000c1a:	4606      	mov	r6, r0

	u16 lFlashCount;
	u8 lTheRestCount=0;
	volatile FLASH_Status FLASHStatus;

	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
 8000c1c:	2b01      	cmp	r3, #1
	SetEPRxValid(ENDP3);
#endif /* STM32F10X_CL */
}


bool WriteFlash64(u8* RxBuffer, u16 RxCount ){
 8000c1e:	4689      	mov	r9, r1

	u16 lFlashCount;
	u8 lTheRestCount=0;
	volatile FLASH_Status FLASHStatus;

	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
 8000c20:	d061      	beq.n	8000ce6 <WriteFlash64+0xd6>
		return FALSE;

	lTheRestCount = 4 - (RxCount % 4);
 8000c22:	f001 0403 	and.w	r4, r1, #3
 8000c26:	f1c4 0404 	rsb	r4, r4, #4
		TxDByte(RxBuffer[lFlashCount+1]);
		TxDByte(RxBuffer[lFlashCount+2]);
		TxDByte(RxBuffer[lFlashCount+3]);
#endif
		u32 data = (RxBuffer[lFlashCount+3]<<24)+(RxBuffer[lFlashCount+2]<<16)+(RxBuffer[lFlashCount+1]<<8)+RxBuffer[lFlashCount];
		FLASHStatus = FLASH_ProgramWord(gwAddressPointer, data);
 8000c2a:	4f32      	ldr	r7, [pc, #200]	; (8000cf4 <WriteFlash64+0xe4>)
			USB_TxDString("\r\n flash writing error!");
			break;
		}
		gwAddressPointer = gwAddressPointer + 4;

		gwCalculatedCheckSum += RxBuffer[lFlashCount+3]+RxBuffer[lFlashCount+2]+RxBuffer[lFlashCount+1]+RxBuffer[lFlashCount];
 8000c2c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000d0c <WriteFlash64+0xfc>
	volatile FLASH_Status FLASHStatus;

	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
		return FALSE;

	lTheRestCount = 4 - (RxCount % 4);
 8000c30:	b2e4      	uxtb	r4, r4

	for(lFlashCount =0;lFlashCount < RxCount; lFlashCount += 4)
 8000c32:	2500      	movs	r5, #0
 8000c34:	454d      	cmp	r5, r9
 8000c36:	d246      	bcs.n	8000cc6 <WriteFlash64+0xb6>
		TxDByte(RxBuffer[lFlashCount]);
		TxDByte(RxBuffer[lFlashCount+1]);
		TxDByte(RxBuffer[lFlashCount+2]);
		TxDByte(RxBuffer[lFlashCount+3]);
#endif
		u32 data = (RxBuffer[lFlashCount+3]<<24)+(RxBuffer[lFlashCount+2]<<16)+(RxBuffer[lFlashCount+1]<<8)+RxBuffer[lFlashCount];
 8000c38:	1cab      	adds	r3, r5, #2
 8000c3a:	1cea      	adds	r2, r5, #3
 8000c3c:	5cf1      	ldrb	r1, [r6, r3]
 8000c3e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8000c42:	0409      	lsls	r1, r1, #16
 8000c44:	f105 0b01 	add.w	fp, r5, #1
 8000c48:	eb01 6808 	add.w	r8, r1, r8, lsl #24
 8000c4c:	f816 100b 	ldrb.w	r1, [r6, fp]
		FLASHStatus = FLASH_ProgramWord(gwAddressPointer, data);
 8000c50:	6838      	ldr	r0, [r7, #0]
		TxDByte(RxBuffer[lFlashCount]);
		TxDByte(RxBuffer[lFlashCount+1]);
		TxDByte(RxBuffer[lFlashCount+2]);
		TxDByte(RxBuffer[lFlashCount+3]);
#endif
		u32 data = (RxBuffer[lFlashCount+3]<<24)+(RxBuffer[lFlashCount+2]<<16)+(RxBuffer[lFlashCount+1]<<8)+RxBuffer[lFlashCount];
 8000c52:	eb08 2101 	add.w	r1, r8, r1, lsl #8
 8000c56:	f816 8005 	ldrb.w	r8, [r6, r5]
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	4488      	add	r8, r1
		FLASHStatus = FLASH_ProgramWord(gwAddressPointer, data);
 8000c5e:	4641      	mov	r1, r8
		TxDByte(RxBuffer[lFlashCount]);
		TxDByte(RxBuffer[lFlashCount+1]);
		TxDByte(RxBuffer[lFlashCount+2]);
		TxDByte(RxBuffer[lFlashCount+3]);
#endif
		u32 data = (RxBuffer[lFlashCount+3]<<24)+(RxBuffer[lFlashCount+2]<<16)+(RxBuffer[lFlashCount+1]<<8)+RxBuffer[lFlashCount];
 8000c60:	9300      	str	r3, [sp, #0]
		FLASHStatus = FLASH_ProgramWord(gwAddressPointer, data);
 8000c62:	f000 fae1 	bl	8001228 <FLASH_ProgramWord>
 8000c66:	f88d 000f 	strb.w	r0, [sp, #15]

		if( (*(vu32*)gwAddressPointer) != data )
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	9b00      	ldr	r3, [sp, #0]
 8000c6e:	6809      	ldr	r1, [r1, #0]
 8000c70:	9a01      	ldr	r2, [sp, #4]
 8000c72:	4588      	cmp	r8, r1
 8000c74:	d001      	beq.n	8000c7a <WriteFlash64+0x6a>
		{
			USB_TxDString("\r\n Download Failed!");
 8000c76:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <WriteFlash64+0xe8>)
 8000c78:	e004      	b.n	8000c84 <WriteFlash64+0x74>
			break;
		}

		if( gwAddressPointer > FLASH_END_ADDRESS )
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <WriteFlash64+0xec>)
 8000c7e:	4281      	cmp	r1, r0
 8000c80:	d903      	bls.n	8000c8a <WriteFlash64+0x7a>
		{
			USB_TxDString("\r\n Download Overflow!");
 8000c82:	481f      	ldr	r0, [pc, #124]	; (8000d00 <WriteFlash64+0xf0>)
 8000c84:	f7ff fb1b 	bl	80002be <USB_TxDString>
			break;
 8000c88:	e01d      	b.n	8000cc6 <WriteFlash64+0xb6>
		}

		if( FLASHStatus != FLASH_COMPLETE ) // flash writing error
 8000c8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000c8e:	2904      	cmp	r1, #4
 8000c90:	d001      	beq.n	8000c96 <WriteFlash64+0x86>
		{
			USB_TxDString("\r\n flash writing error!");
 8000c92:	481c      	ldr	r0, [pc, #112]	; (8000d04 <WriteFlash64+0xf4>)
 8000c94:	e7f6      	b.n	8000c84 <WriteFlash64+0x74>
			break;
		}
		gwAddressPointer = gwAddressPointer + 4;
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	3104      	adds	r1, #4
 8000c9a:	6039      	str	r1, [r7, #0]

		gwCalculatedCheckSum += RxBuffer[lFlashCount+3]+RxBuffer[lFlashCount+2]+RxBuffer[lFlashCount+1]+RxBuffer[lFlashCount];
 8000c9c:	5cb2      	ldrb	r2, [r6, r2]
 8000c9e:	5cf3      	ldrb	r3, [r6, r3]
 8000ca0:	f8da 1000 	ldr.w	r1, [sl]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f816 200b 	ldrb.w	r2, [r6, fp]
 8000caa:	4413      	add	r3, r2
 8000cac:	1972      	adds	r2, r6, r5
 8000cae:	7812      	ldrb	r2, [r2, #0]
	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
		return FALSE;

	lTheRestCount = 4 - (RxCount % 4);

	for(lFlashCount =0;lFlashCount < RxCount; lFlashCount += 4)
 8000cb0:	3504      	adds	r5, #4
			USB_TxDString("\r\n flash writing error!");
			break;
		}
		gwAddressPointer = gwAddressPointer + 4;

		gwCalculatedCheckSum += RxBuffer[lFlashCount+3]+RxBuffer[lFlashCount+2]+RxBuffer[lFlashCount+1]+RxBuffer[lFlashCount];
 8000cb2:	4413      	add	r3, r2
 8000cb4:	440b      	add	r3, r1
		//TxDString("loop CheckSum =");	TxDHex16(gwCalculatedCheckSum);	TxDString("\r\n");
		gwRxTotalCount+=4;
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <WriteFlash64+0xf8>)
			USB_TxDString("\r\n flash writing error!");
			break;
		}
		gwAddressPointer = gwAddressPointer + 4;

		gwCalculatedCheckSum += RxBuffer[lFlashCount+3]+RxBuffer[lFlashCount+2]+RxBuffer[lFlashCount+1]+RxBuffer[lFlashCount];
 8000cb8:	f8ca 3000 	str.w	r3, [sl]
		//TxDString("loop CheckSum =");	TxDHex16(gwCalculatedCheckSum);	TxDString("\r\n");
		gwRxTotalCount+=4;
 8000cbc:	6813      	ldr	r3, [r2, #0]
	if(gbIsFlashLock == TRUE) // If flash is lock, stop to write flash.
		return FALSE;

	lTheRestCount = 4 - (RxCount % 4);

	for(lFlashCount =0;lFlashCount < RxCount; lFlashCount += 4)
 8000cbe:	b2ad      	uxth	r5, r5
		}
		gwAddressPointer = gwAddressPointer + 4;

		gwCalculatedCheckSum += RxBuffer[lFlashCount+3]+RxBuffer[lFlashCount+2]+RxBuffer[lFlashCount+1]+RxBuffer[lFlashCount];
		//TxDString("loop CheckSum =");	TxDHex16(gwCalculatedCheckSum);	TxDString("\r\n");
		gwRxTotalCount+=4;
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e7b6      	b.n	8000c34 <WriteFlash64+0x24>

	}

	if(lTheRestCount != 4 ){
 8000cc6:	2c04      	cmp	r4, #4
 8000cc8:	d00d      	beq.n	8000ce6 <WriteFlash64+0xd6>
		//TxDString("lTheRestCount=");	TxDHex16(lTheRestCount);	TxDString("\r\n");
		gwRxTotalCount -= lTheRestCount;
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <WriteFlash64+0xf8>)
 8000ccc:	6813      	ldr	r3, [r2, #0]
 8000cce:	1b1b      	subs	r3, r3, r4
 8000cd0:	6013      	str	r3, [r2, #0]
		while(lTheRestCount){
			//TxDString("checksum deviation=");	TxDHex16(lFlashCount-lTheRestCount);	TxDString("\r\n");
			gwCalculatedCheckSum = gwCalculatedCheckSum - RxBuffer[(lFlashCount - lTheRestCount)];
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <WriteFlash64+0xfc>)
 8000cd4:	1b29      	subs	r1, r5, r4
 8000cd6:	6813      	ldr	r3, [r2, #0]
 8000cd8:	5c71      	ldrb	r1, [r6, r1]
			//TxDString("gwCalculatedCheckSum =");	TxDHex16(gwCalculatedCheckSum);	TxDString("\r\n");
			lTheRestCount--;
 8000cda:	3c01      	subs	r4, #1
	if(lTheRestCount != 4 ){
		//TxDString("lTheRestCount=");	TxDHex16(lTheRestCount);	TxDString("\r\n");
		gwRxTotalCount -= lTheRestCount;
		while(lTheRestCount){
			//TxDString("checksum deviation=");	TxDHex16(lFlashCount-lTheRestCount);	TxDString("\r\n");
			gwCalculatedCheckSum = gwCalculatedCheckSum - RxBuffer[(lFlashCount - lTheRestCount)];
 8000cdc:	1a5b      	subs	r3, r3, r1
	}

	if(lTheRestCount != 4 ){
		//TxDString("lTheRestCount=");	TxDHex16(lTheRestCount);	TxDString("\r\n");
		gwRxTotalCount -= lTheRestCount;
		while(lTheRestCount){
 8000cde:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			//TxDString("checksum deviation=");	TxDHex16(lFlashCount-lTheRestCount);	TxDString("\r\n");
			gwCalculatedCheckSum = gwCalculatedCheckSum - RxBuffer[(lFlashCount - lTheRestCount)];
 8000ce2:	6013      	str	r3, [r2, #0]
	}

	if(lTheRestCount != 4 ){
		//TxDString("lTheRestCount=");	TxDHex16(lTheRestCount);	TxDString("\r\n");
		gwRxTotalCount -= lTheRestCount;
		while(lTheRestCount){
 8000ce4:	d1f6      	bne.n	8000cd4 <WriteFlash64+0xc4>
			lTheRestCount--;
		}
	}

	return FALSE;
}
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	b005      	add	sp, #20
 8000cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000000 	andcs	r0, r0, r0
 8000cf4:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000cf8:	080027e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp}
 8000cfc:	0800fbff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8000d00:	080027fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp}
 8000d04:	08002812 	stmdaeq	r0, {r1, r4, fp, sp}
 8000d08:	200000fc 	strdcs	r0, [r0], -ip
 8000d0c:	200000f8 	strdcs	r0, [r0], -r8

08000d10 <EP3_OUT_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/
volatile u16 USB_Rx_Cnt =0;
void EP3_OUT_Callback(void)
{
 8000d10:	b538      	push	{r3, r4, r5, lr}

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d12:	4911      	ldr	r1, [pc, #68]	; (8000d58 <EP3_OUT_Callback+0x48>)
 8000d14:	2003      	movs	r0, #3
 8000d16:	f001 fbf3 	bl	8002500 <USB_SIL_Read>

//#ifdef DEBUG_ENABLE_BY_USART2
	//TxDString("[USB]USB_Rx_Cnt = ");	TxDHex16(USB_Rx_Cnt);	TxDString("\r\n");
//#endif

	if(gbFlashDownloadStart == TRUE){
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <EP3_OUT_Callback+0x4c>)
volatile u16 USB_Rx_Cnt =0;
void EP3_OUT_Callback(void)
{

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d1c:	4d10      	ldr	r5, [pc, #64]	; (8000d60 <EP3_OUT_Callback+0x50>)

//#ifdef DEBUG_ENABLE_BY_USART2
	//TxDString("[USB]USB_Rx_Cnt = ");	TxDHex16(USB_Rx_Cnt);	TxDString("\r\n");
//#endif

	if(gbFlashDownloadStart == TRUE){
 8000d1e:	781b      	ldrb	r3, [r3, #0]
volatile u16 USB_Rx_Cnt =0;
void EP3_OUT_Callback(void)
{

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d20:	b280      	uxth	r0, r0

//#ifdef DEBUG_ENABLE_BY_USART2
	//TxDString("[USB]USB_Rx_Cnt = ");	TxDHex16(USB_Rx_Cnt);	TxDString("\r\n");
//#endif

	if(gbFlashDownloadStart == TRUE){
 8000d22:	2b01      	cmp	r3, #1
volatile u16 USB_Rx_Cnt =0;
void EP3_OUT_Callback(void)
{

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d24:	8068      	strh	r0, [r5, #2]
 8000d26:	4c0c      	ldr	r4, [pc, #48]	; (8000d58 <EP3_OUT_Callback+0x48>)

//#ifdef DEBUG_ENABLE_BY_USART2
	//TxDString("[USB]USB_Rx_Cnt = ");	TxDHex16(USB_Rx_Cnt);	TxDString("\r\n");
//#endif

	if(gbFlashDownloadStart == TRUE){
 8000d28:	d106      	bne.n	8000d38 <EP3_OUT_Callback+0x28>
		ClearTimeOutBuffer();
 8000d2a:	f7ff fa3b 	bl	80001a4 <ClearTimeOutBuffer>
		WriteFlash64(USB_Rx_Buffer, USB_Rx_Cnt);
 8000d2e:	8869      	ldrh	r1, [r5, #2]
 8000d30:	4620      	mov	r0, r4
 8000d32:	b289      	uxth	r1, r1
 8000d34:	f7ff ff6c 	bl	8000c10 <WriteFlash64>
	}

	gwpUSARTBuffer[gwUSARTWritePtr++&USART_BUFFER_SIZE] = USB_Rx_Buffer[0];
 8000d38:	490a      	ldr	r1, [pc, #40]	; (8000d64 <EP3_OUT_Callback+0x54>)
	//TxDString("gwUSARTWritePtr = ");	TxDHex32(gwpUSARTBuffer[gwUSARTWritePtr-1]);	TxDString("\r\n");

  
#ifndef STM32F10X_CL
	/* Enable the receive of data on EP3 */
	SetEPRxValid(ENDP3);
 8000d3a:	2003      	movs	r0, #3
	if(gbFlashDownloadStart == TRUE){
		ClearTimeOutBuffer();
		WriteFlash64(USB_Rx_Buffer, USB_Rx_Cnt);
	}

	gwpUSARTBuffer[gwUSARTWritePtr++&USART_BUFFER_SIZE] = USB_Rx_Buffer[0];
 8000d3c:	880b      	ldrh	r3, [r1, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	b292      	uxth	r2, r2
 8000d44:	800a      	strh	r2, [r1, #0]
 8000d46:	7821      	ldrb	r1, [r4, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <EP3_OUT_Callback+0x58>)
 8000d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d4e:	54d1      	strb	r1, [r2, r3]
  
#ifndef STM32F10X_CL
	/* Enable the receive of data on EP3 */
	SetEPRxValid(ENDP3);
#endif /* STM32F10X_CL */
}
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	//TxDString("gwUSARTWritePtr = ");	TxDHex32(gwpUSARTBuffer[gwUSARTWritePtr-1]);	TxDString("\r\n");

  
#ifndef STM32F10X_CL
	/* Enable the receive of data on EP3 */
	SetEPRxValid(ENDP3);
 8000d54:	f001 baf1 	b.w	800233a <SetEPRxValid>
 8000d58:	200006a1 	andcs	r0, r0, r1, lsr #13
 8000d5c:	20000100 	andcs	r0, r0, r0, lsl #2
 8000d60:	2000010c 	andcs	r0, r0, ip, lsl #2
 8000d64:	20000138 	andcs	r0, r0, r8, lsr r1
 8000d68:	200001a0 	andcs	r0, r0, r0, lsr #3

08000d6c <__USBCDC_ISR>:

#ifndef STM32F10X_CL

//USB_Istr()
void __USBCDC_ISR(void)
{
 8000d6c:	b538      	push	{r3, r4, r5, lr}

  wIstr = _GetISTR();
 8000d6e:	4d15      	ldr	r5, [pc, #84]	; (8000dc4 <__USBCDC_ISR+0x58>)
 8000d70:	4c15      	ldr	r4, [pc, #84]	; (8000dc8 <__USBCDC_ISR+0x5c>)
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	8023      	strh	r3, [r4, #0]


  if (wIstr & ISTR_SOF )
 8000d78:	8823      	ldrh	r3, [r4, #0]
 8000d7a:	059b      	lsls	r3, r3, #22
 8000d7c:	d507      	bpl.n	8000d8e <__USBCDC_ISR+0x22>
#ifdef DEBUG
	  TxDString("SOF wIstr = ");
	  TxDHex16(wIstr);
	  TxDString("\r\n");
#endif
    _SetISTR((u16)CLR_SOF);
 8000d7e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <__USBCDC_ISR+0x60>)
#ifdef DEBUG
	  TxDString("SOF wIstr = ");
	  TxDHex16(wIstr);
	  TxDString("\r\n");
#endif
    _SetISTR((u16)CLR_SOF);
 8000d84:	602b      	str	r3, [r5, #0]
    bIntPackSOF++;
 8000d86:	7813      	ldrb	r3, [r2, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	7013      	strb	r3, [r2, #0]
#ifdef SOF_CALLBACK
    SOF_Callback();
#endif
  }
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  if (wIstr & ISTR_CTR )
 8000d8e:	8823      	ldrh	r3, [r4, #0]
 8000d90:	0418      	lsls	r0, r3, #16
 8000d92:	d501      	bpl.n	8000d98 <__USBCDC_ISR+0x2c>
	  TxDHex16(wIstr);
	  TxDString("\r\n");
#endif
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP(); //reply for device setup-request from Host
 8000d94:	f001 fbc6 	bl	8002524 <CTR_LP>
#ifdef CTR_CALLBACK
    //CTR_Callback();
#endif
  }
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  if (wIstr & ISTR_RESET)
 8000d98:	8823      	ldrh	r3, [r4, #0]
 8000d9a:	0559      	lsls	r1, r3, #21
 8000d9c:	d505      	bpl.n	8000daa <__USBCDC_ISR+0x3e>
	  TxDString("RESET wIstr = ");
	  TxDHex16(wIstr);
	  TxDString("\r\n");
#endif

    _SetISTR((u16)CLR_RESET);
 8000d9e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000da2:	602b      	str	r3, [r5, #0]
    Device_Property.Reset();
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <__USBCDC_ISR+0x64>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4798      	blx	r3
#ifdef RESET_CALLBACK
    RESET_Callback();
#endif
  }
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  if (wIstr & ISTR_DOVR )//& wInterrupt_Mask)
 8000daa:	8823      	ldrh	r3, [r4, #0]
 8000dac:	045a      	lsls	r2, r3, #17
#ifdef DEBUG
	  TxDString("DOVR wIstr = ");
	  TxDHex16(wIstr);
	  TxDString("\r\n");
#endif
    _SetISTR((u16)CLR_DOVR);
 8000dae:	bf44      	itt	mi
 8000db0:	f64b 73ff 	movwmi	r3, #49151	; 0xbfff
 8000db4:	602b      	strmi	r3, [r5, #0]
#ifdef DOVR_CALLBACK
    DOVR_Callback();
#endif
  }
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
  if (wIstr & ISTR_ERR)// & wInterrupt_Mask)
 8000db6:	8823      	ldrh	r3, [r4, #0]
 8000db8:	049b      	lsls	r3, r3, #18
	TxDString("ERR wIstr = ");
	TxDHex16(wIstr);
	TxDString("\r\n");
#endif

    _SetISTR((u16)CLR_ERR);
 8000dba:	bf44      	itt	mi
 8000dbc:	f64d 73ff 	movwmi	r3, #57343	; 0xdfff
 8000dc0:	602b      	strmi	r3, [r5, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	40005c44 	andmi	r5, r0, r4, asr #24
 8000dc8:	200006e2 	andcs	r0, r0, r2, ror #13
 8000dcc:	20000114 	andcs	r0, r0, r4, lsl r1
 8000dd0:	2000005c 	andcs	r0, r0, ip, asr r0

08000dd4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;
  //TxDString("Virtual_Com_Port_SetConfiguration\r\n");
  if (pInfo->Current_Configuration != 0)
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000dd6:	7a9b      	ldrb	r3, [r3, #10]
 8000dd8:	b113      	cbz	r3, 8000de0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000ddc:	2205      	movs	r2, #5
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000de8:	20000120 	andcs	r0, r0, r0, lsr #2

08000dec <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	4770      	bx	lr
 8000df4:	20000120 	andcs	r0, r0, r0, lsr #2

08000df8 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <Virtual_Com_Port_Status_In+0x10>)
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	2a20      	cmp	r2, #32
  {

    //USART_Config();
    //config changed
    Request = 0;
 8000dfe:	bf04      	itt	eq
 8000e00:	2200      	moveq	r2, #0
 8000e02:	701a      	strbeq	r2, [r3, #0]
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000118 	andcs	r0, r0, r8, lsl r1

08000e0c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{
 8000e0c:	4770      	bx	lr
	...

08000e10 <Virtual_Com_Port_Data_Setup>:
 // TxDString("Virtual_Com_Port_Data_Setup ->RequestNo = ");  TxDHex8(RequestNo);  TxDString("\r\n");
//#endif
  u8    *(*CopyRoutine)(u16);
  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000e10:	2821      	cmp	r0, #33	; 0x21
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
int comstatetemp=0;
RESULT Virtual_Com_Port_Data_Setup(u8 RequestNo)
{
 8000e12:	b510      	push	{r4, lr}
 // TxDString("Virtual_Com_Port_Data_Setup ->RequestNo = ");  TxDHex8(RequestNo);  TxDString("\r\n");
//#endif
  u8    *(*CopyRoutine)(u16);
  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000e14:	d108      	bne.n	8000e28 <Virtual_Com_Port_Data_Setup+0x18>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e20:	2b21      	cmp	r3, #33	; 0x21
 8000e22:	d010      	beq.n	8000e46 <Virtual_Com_Port_Data_Setup+0x36>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000e24:	2002      	movs	r0, #2
 8000e26:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8000e28:	2820      	cmp	r0, #32
 8000e2a:	d1fb      	bne.n	8000e24 <Virtual_Com_Port_Data_Setup+0x14>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	781b      	ldrb	r3, [r3, #0]
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000e34:	7010      	strb	r0, [r2, #0]
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8000e3a:	2b21      	cmp	r3, #33	; 0x21
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <Virtual_Com_Port_Data_Setup+0x54>)
 8000e3e:	bf18      	it	ne
 8000e40:	2300      	movne	r3, #0
    }
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
 8000e42:	b90b      	cbnz	r3, 8000e48 <Virtual_Com_Port_Data_Setup+0x38>
 8000e44:	e7ee      	b.n	8000e24 <Virtual_Com_Port_Data_Setup+0x14>

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <Virtual_Com_Port_Data_Setup+0x58>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <Virtual_Com_Port_Data_Setup+0x4c>)
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e4a:	2400      	movs	r4, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e4c:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
 8000e4e:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e50:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e52:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8000e54:	4798      	blx	r3
  return USB_SUCCESS;
 8000e56:	4620      	mov	r0, r4
}
 8000e58:	bd10      	pop	{r4, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000710 	andcs	r0, r0, r0, lsl r7
 8000e60:	20000118 	andcs	r0, r0, r8, lsl r1
 8000e64:	08000eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp}
 8000e68:	08000ea1 	stmdaeq	r0, {r0, r5, r7, r9, sl, fp}

08000e6c <Virtual_Com_Port_NoData_Setup>:
	else if(new_signal == 0x0){
		gbFlashDownloadStart = TRUE;

	}
	(gbFlashDownloadStart ? TxDString("gbFlashDownloadStart is true\r\n") : TxDString("gbFlashDownloadStart is false\r\n"));*/
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <Virtual_Com_Port_NoData_Setup+0x20>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e76:	2b21      	cmp	r3, #33	; 0x21
 8000e78:	d106      	bne.n	8000e88 <Virtual_Com_Port_NoData_Setup+0x1c>
  {
    if (RequestNo == SET_COMM_FEATURE)
 8000e7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000e7e:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 8000e80:	bf14      	ite	ne
 8000e82:	2002      	movne	r0, #2
 8000e84:	2000      	moveq	r0, #0
 8000e86:	4770      	bx	lr
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8000e88:	2002      	movs	r0, #2
}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000710 	andcs	r0, r0, r0, lsl r7

08000e90 <Virtual_Com_Port_Get_Interface_Setting>:
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(u8 Interface, u8 AlternateSetting)
{
  //TxDString("Virtual_Com_Port_Get_Interface_Setting\r\n");
  if (AlternateSetting > 0)
 8000e90:	b921      	cbnz	r1, 8000e9c <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 8000e92:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8000e94:	bf8c      	ite	hi
 8000e96:	2002      	movhi	r0, #2
 8000e98:	2000      	movls	r0, #0
 8000e9a:	4770      	bx	lr
RESULT Virtual_Com_Port_Get_Interface_Setting(u8 Interface, u8 AlternateSetting)
{
  //TxDString("Virtual_Com_Port_Get_Interface_Setting\r\n");
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
 8000e9c:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 8000e9e:	4770      	bx	lr

08000ea0 <Virtual_Com_Port_GetLineCoding>:
			  //Delay(5000);
			  //NVIC_GenerateSystemReset();
			  //NVIC_GenerateCoreReset();
	//}

  if (Length == 0)
 8000ea0:	b920      	cbnz	r0, 8000eac <Virtual_Com_Port_GetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <Virtual_Com_Port_GetLineCoding+0x10>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	821a      	strh	r2, [r3, #16]
    return NULL;
 8000eaa:	4770      	bx	lr
  }
  return(u8 *)&linecoding;
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <Virtual_Com_Port_GetLineCoding+0x14>)
}
 8000eae:	4770      	bx	lr
 8000eb0:	20000710 	andcs	r0, r0, r0, lsl r7
 8000eb4:	20000054 	andcs	r0, r0, r4, asr r0

08000eb8 <Virtual_Com_Port_SetLineCoding>:
u8 *Virtual_Com_Port_SetLineCoding(u16 Length)
{
#ifdef DEBUG_ENABLE_BY_USART2
	TxDString("SetLineCoding bitrate = ");TxDHex32(linecoding.bitrate);  TxDString("\r\n");
#endif
   if(linecoding.bitrate == 0x4B0){
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <Virtual_Com_Port_SetLineCoding+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
		  //TxDString("System reset operates!\r\n");
		  comstatetemp = 100;
 8000ec0:	bf02      	ittt	eq
 8000ec2:	4b06      	ldreq	r3, [pc, #24]	; (8000edc <Virtual_Com_Port_SetLineCoding+0x24>)
 8000ec4:	2264      	moveq	r2, #100	; 0x64
 8000ec6:	605a      	streq	r2, [r3, #4]
	}
  if (Length == 0)
 8000ec8:	b920      	cbnz	r0, 8000ed4 <Virtual_Com_Port_SetLineCoding+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <Virtual_Com_Port_SetLineCoding+0x28>)
 8000ecc:	2208      	movs	r2, #8
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	821a      	strh	r2, [r3, #16]
    return NULL;
 8000ed2:	4770      	bx	lr
  }

  return(u8 *)&linecoding;
 8000ed4:	4800      	ldr	r0, [pc, #0]	; (8000ed8 <Virtual_Com_Port_SetLineCoding+0x20>)
}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000054 	andcs	r0, r0, r4, asr r0
 8000edc:	20000118 	andcs	r0, r0, r8, lsl r1
 8000ee0:	20000710 	andcs	r0, r0, r0, lsl r7

08000ee4 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8000ee4:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8000ee6:	f000 f8eb 	bl	80010c0 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <Virtual_Com_Port_init+0x1c>)
 8000eec:	2400      	movs	r4, #0
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	729c      	strb	r4, [r3, #10]

  /* Connect the device */
  PowerOn();
 8000ef2:	f000 f8a9 	bl	8001048 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8000ef6:	f001 faf3 	bl	80024e0 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 8000efa:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <Virtual_Com_Port_init+0x20>)
 8000efc:	601c      	str	r4, [r3, #0]
 8000efe:	bd10      	pop	{r4, pc}
 8000f00:	20000710 	andcs	r0, r0, r0, lsl r7
 8000f04:	20000120 	andcs	r0, r0, r0, lsr #2

08000f08 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <Virtual_Com_Port_Reset+0xd0>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <Virtual_Com_Port_Reset+0xd4>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f0c:	681b      	ldr	r3, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f0e:	79d2      	ldrb	r2, [r2, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8000f10:	b510      	push	{r4, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f12:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000f14:	725a      	strb	r2, [r3, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000f16:	729c      	strb	r4, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8000f18:	72dc      	strb	r4, [r3, #11]

  /* Init EP3 OUT as Bulk endpoint */
  OTG_DEV_EP_Init(EP3_OUT, OTG_DEV_EP_TYPE_BULK, VIRTUAL_COM_PORT_DATA_SIZE);  
#else 

  SetBTABLE(BTABLE_ADDRESS);
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f001 f9b2 	bl	8002284 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8000f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f24:	4620      	mov	r0, r4
 8000f26:	f001 f9b5 	bl	8002294 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f001 f9bf 	bl	80022b0 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4620      	mov	r0, r4
 8000f36:	f001 fa99 	bl	800246c <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f001 fa83 	bl	8002448 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 fa1c 	bl	8002380 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <Virtual_Com_Port_Reset+0xd8>)
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8000f50:	f001 fa4a 	bl	80023e8 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f001 f9f0 	bl	800233a <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f001 f999 	bl	8002294 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8000f62:	21c0      	movs	r1, #192	; 0xc0
 8000f64:	2001      	movs	r0, #1
 8000f66:	f001 fa6f 	bl	8002448 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f001 f99f 	bl	80022b0 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8000f72:	4621      	mov	r1, r4
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 f9b4 	bl	80022e2 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8000f7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f001 f988 	bl	8002294 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8000f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f001 fa5d 	bl	8002448 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8000f8e:	4621      	mov	r1, r4
 8000f90:	2002      	movs	r0, #2
 8000f92:	f001 f9a6 	bl	80022e2 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8000f96:	2120      	movs	r1, #32
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f001 f989 	bl	80022b0 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f001 f977 	bl	8002294 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8000fa6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000faa:	2003      	movs	r0, #3
 8000fac:	f001 fa5e 	bl	800246c <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f001 fa18 	bl	80023e8 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8000fb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f001 f990 	bl	80022e2 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f001 f973 	bl	80022b0 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f001 f8e6 	bl	800219c <SetDeviceAddress>
#endif /* STM32F10X_CL */

  bDeviceState = ATTACHED;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <Virtual_Com_Port_Reset+0xdc>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	20000710 	andcs	r0, r0, r0, lsl r7
 8000fdc:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
 8000fe0:	20000054 	andcs	r0, r0, r4, asr r0
 8000fe4:	20000120 	andcs	r0, r0, r0, lsr #2

08000fe8 <Virtual_Com_Port_GetDeviceDescriptor>:
* Return         : The address of the device descriptor.
*******************************************************************************/
u8 *Virtual_Com_Port_GetDeviceDescriptor(u16 Length)
{
	//TxDString("Virtual_Com_Port_GetDeviceDescriptor\r\n");
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8000fe8:	4901      	ldr	r1, [pc, #4]	; (8000ff0 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 8000fea:	f000 bec3 	b.w	8001d74 <Standard_GetDescriptorData>
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	andcs	r0, r0, ip, lsl #1

08000ff4 <Virtual_Com_Port_GetConfigDescriptor>:
* Return         : The address of the configuration descriptor.
*******************************************************************************/
u8 *Virtual_Com_Port_GetConfigDescriptor(u16 Length)
{
	//TxDString("Virtual_Com_Port_GetConfigDescriptor\r\n");
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8000ff4:	4901      	ldr	r1, [pc, #4]	; (8000ffc <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 8000ff6:	f000 bebd 	b.w	8001d74 <Standard_GetDescriptorData>
 8000ffa:	bf00      	nop
 8000ffc:	20000094 	mulcs	r0, r4, r0

08001000 <Virtual_Com_Port_GetStringDescriptor>:
* Return         : The address of the string descriptors.
*******************************************************************************/
u8 *Virtual_Com_Port_GetStringDescriptor(u16 Length)
{
  //TxDString("Virtual_Com_Port_GetStringDescriptor\r\n");
  u8 wValue0 = pInformation->USBwValue0;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8001006:	2b04      	cmp	r3, #4
 8001008:	d804      	bhi.n	8001014 <Virtual_Com_Port_GetStringDescriptor+0x14>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800100a:	4904      	ldr	r1, [pc, #16]	; (800101c <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800100c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001010:	f000 beb0 	b.w	8001d74 <Standard_GetDescriptorData>
  }
}
 8001014:	2000      	movs	r0, #0
 8001016:	4770      	bx	lr
 8001018:	20000710 	andcs	r0, r0, r0, lsl r7
 800101c:	2000009c 	mulcs	r0, ip, r0

08001020 <IntToUnicode>:

static void IntToUnicode (u32 value , u8 *pbuf , u8 len)
{
  u8 idx = 0;

  for( idx = 0 ; idx < len ; idx ++)
 8001020:	2300      	movs	r3, #0
* Output         : None.
* Return         : None.
*******************************************************************************/

static void IntToUnicode (u32 value , u8 *pbuf , u8 len)
{
 8001022:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
 8001024:	461d      	mov	r5, r3

static void IntToUnicode (u32 value , u8 *pbuf , u8 len)
{
  u8 idx = 0;

  for( idx = 0 ; idx < len ; idx ++)
 8001026:	b2dc      	uxtb	r4, r3
 8001028:	42a2      	cmp	r2, r4
 800102a:	d90c      	bls.n	8001046 <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 800102c:	0f04      	lsrs	r4, r0, #28
 800102e:	2c09      	cmp	r4, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001030:	bf94      	ite	ls
 8001032:	3430      	addls	r4, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8001034:	3437      	addhi	r4, #55	; 0x37
 8001036:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
 800103a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;
 800103e:	0100      	lsls	r0, r0, #4

    pbuf[ 2* idx + 1] = 0;
 8001040:	7065      	strb	r5, [r4, #1]
 8001042:	3301      	adds	r3, #1
 8001044:	e7ef      	b.n	8001026 <IntToUnicode+0x6>
  }
}
 8001046:	bd30      	pop	{r4, r5, pc}

08001048 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001048:	b508      	push	{r3, lr}
void USB_Cable_Config (FunctionalState NewState)
{
   if (NewState != DISABLE)
   {
	   /*TxDString("USB Pull-up Enabled\r\n");*/
 	  GPIO_ResetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <PowerOn+0x28>)
 8001050:	f000 f97a 	bl	8001348 <GPIO_ResetBits>
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <PowerOn+0x2c>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800105c:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM | CNTR_CTRM ; //add CNTR_SOFM
 800105e:	4907      	ldr	r1, [pc, #28]	; (800107c <PowerOn+0x34>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001060:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001062:	6010      	str	r0, [r2, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM | CNTR_CTRM ; //add CNTR_SOFM
 8001064:	f44f 421c 	mov.w	r2, #39936	; 0x9c00
 8001068:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800106a:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800106c:	bd08      	pop	{r3, pc}
 800106e:	bf00      	nop
 8001070:	40011000 	andmi	r1, r1, r0
 8001074:	40005c40 	andmi	r5, r0, r0, asr #24
 8001078:	40005c44 	andmi	r5, r0, r4, asr #24
 800107c:	20000714 	andcs	r0, r0, r4, lsl r7

08001080 <USB_Cable_Config>:
void USB_Cable_Config (FunctionalState NewState)
{
   if (NewState != DISABLE)
   {
	   /*TxDString("USB Pull-up Enabled\r\n");*/
 	  GPIO_ResetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
   if (NewState != DISABLE)
 8001084:	b110      	cbz	r0, 800108c <USB_Cable_Config+0xc>
   {
	   /*TxDString("USB Pull-up Enabled\r\n");*/
 	  GPIO_ResetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <USB_Cable_Config+0x14>)
 8001088:	f000 b95e 	b.w	8001348 <GPIO_ResetBits>
   }
   else
   {
	   /*TxDString("USB Pull-up Disabled\r\n");*/
 	  GPIO_SetBits(USB_DISCONNECT_PORT, USB_DISCONNECT_PIN);
 800108c:	4801      	ldr	r0, [pc, #4]	; (8001094 <USB_Cable_Config+0x14>)
 800108e:	f000 b959 	b.w	8001344 <GPIO_SetBits>
 8001092:	bf00      	nop
 8001094:	40011000 	andmi	r1, r1, r0

08001098 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 8001098:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  /* disable all ints and force USB reset */
  _SetCNTR(CNTR_FRES);
 800109a:	4d06      	ldr	r5, [pc, #24]	; (80010b4 <PowerOff+0x1c>)
 800109c:	2301      	movs	r3, #1
 800109e:	602b      	str	r3, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <PowerOff+0x20>)
 80010a2:	2400      	movs	r4, #0
 80010a4:	601c      	str	r4, [r3, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff ffea 	bl	8001080 <USB_Cable_Config>
  /* switch-off device */
 _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80010ac:	2303      	movs	r3, #3
 80010ae:	602b      	str	r3, [r5, #0]

  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	40005c40 	andmi	r5, r0, r0, asr #24
 80010b8:	40005c44 	andmi	r5, r0, r4, asr #24

080010bc <UsbVcpDisconnect>:
    PowerOn();
}

void UsbVcpDisconnect(void)
{
    PowerOff();
 80010bc:	f7ff bfec 	b.w	8001098 <PowerOff>

080010c0 <Get_SerialNum>:
void Get_SerialNum(void)
{
  u32 Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO u32*)(0x1FFFF7E8);
  Device_Serial1 = *(__IO u32*)(0x1FFFF7EC);
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <Get_SerialNum+0x28>)
*******************************************************************************/
void Get_SerialNum(void)
{
  u32 Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO u32*)(0x1FFFF7E8);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <Get_SerialNum+0x2c>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80010c4:	b510      	push	{r4, lr}
  u32 Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO u32*)(0x1FFFF7E8);
 80010c6:	681b      	ldr	r3, [r3, #0]
  Device_Serial1 = *(__IO u32*)(0x1FFFF7EC);
 80010c8:	6814      	ldr	r4, [r2, #0]
  Device_Serial2 = *(__IO u32*)(0x1FFFF7F0);
 80010ca:	6850      	ldr	r0, [r2, #4]

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80010cc:	1818      	adds	r0, r3, r0
 80010ce:	d00a      	beq.n	80010e6 <Get_SerialNum+0x26>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80010d0:	2208      	movs	r2, #8
 80010d2:	4907      	ldr	r1, [pc, #28]	; (80010f0 <Get_SerialNum+0x30>)
 80010d4:	f7ff ffa4 	bl	8001020 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80010d8:	4620      	mov	r0, r4
  }

}
 80010da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80010de:	2204      	movs	r2, #4
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <Get_SerialNum+0x34>)
 80010e2:	f7ff bf9d 	b.w	8001020 <IntToUnicode>
 80010e6:	bd10      	pop	{r4, pc}
 80010e8:	1ffff7ec 	svcne	0x00fff7ec
 80010ec:	1ffff7e8 	svcne	0x00fff7e8
 80010f0:	20000003 	andcs	r0, r0, r3
 80010f4:	20000013 	andcs	r0, r0, r3, lsl r0

080010f8 <USB_TxDByte>:
#endif



extern void USB_TxDByte(u8 dat)
{
 80010f8:	b513      	push	{r0, r1, r4, lr}
 80010fa:	ac02      	add	r4, sp, #8
 80010fc:	f804 0d01 	strb.w	r0, [r4, #-1]!
  vu32 StartTimer;
  vu32 TimeOut;
	//TxDByte(dat);
	Delay(5); //some delay is needed when data send to USB Host by sm6787@robotis.com
 8001100:	2005      	movs	r0, #5
 8001102:	f7ff f8e5 	bl	80002d0 <Delay>

  UserToPMABufferCopy(&dat, ENDP1_TXADDR,1);
 8001106:	2201      	movs	r2, #1
 8001108:	4620      	mov	r0, r4
 800110a:	21c0      	movs	r1, #192	; 0xc0
 800110c:	f001 f895 	bl	800223a <UserToPMABufferCopy>
	SetEPTxCount(ENDP1, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	4608      	mov	r0, r1
 8001114:	f001 f95a 	bl	80023cc <SetEPTxCount>
	SetEPTxValid(ENDP1);
 8001118:	2001      	movs	r0, #1
 800111a:	f001 f8fb 	bl	8002314 <SetEPTxValid>
  
}
 800111e:	b002      	add	sp, #8
 8001120:	bd10      	pop	{r4, pc}
	...

08001124 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <FLASH_SetLatency+0x14>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800112c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4310      	orrs	r0, r2
 8001132:	6018      	str	r0, [r3, #0]
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40022000 	andmi	r2, r2, r0

0800113c <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <FLASH_PrefetchBufferCmd+0x14>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f022 0210 	bic.w	r2, r2, #16
 8001144:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4310      	orrs	r0, r2
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40022000 	andmi	r2, r2, r0

08001154 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <FLASH_Unlock+0x10>)
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <FLASH_Unlock+0x14>)
 8001158:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800115a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40022000 	andmi	r2, r2, r0
 8001168:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0800116c <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <FLASH_Lock+0xc>)
 800116e:	6913      	ldr	r3, [r2, #16]
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6113      	str	r3, [r2, #16]
 8001176:	4770      	bx	lr
 8001178:	40022000 	andmi	r2, r2, r0

0800117c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <FLASH_ClearFlag+0x8>)
 800117e:	60d8      	str	r0, [r3, #12]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40022000 	andmi	r2, r2, r0

08001188 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <FLASH_GetStatus+0x24>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	07d1      	lsls	r1, r2, #31
 800118e:	d409      	bmi.n	80011a4 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	0752      	lsls	r2, r2, #29
 8001194:	d408      	bmi.n	80011a8 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 800119c:	bf14      	ite	ne
 800119e:	2003      	movne	r0, #3
 80011a0:	2004      	moveq	r0, #4
 80011a2:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80011a4:	2001      	movs	r0, #1
 80011a6:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 80011a8:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80011aa:	4770      	bx	lr
 80011ac:	40022000 	andmi	r2, r2, r0

080011b0 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80011b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011b2:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80011b4:	f7ff ffe8 	bl	8001188 <FLASH_GetStatus>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80011b8:	2500      	movs	r5, #0

  for(i = 0xFF; i != 0; i--)
 80011ba:	26ff      	movs	r6, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80011bc:	2801      	cmp	r0, #1
 80011be:	d10e      	bne.n	80011de <FLASH_WaitForLastOperation+0x2e>
 80011c0:	b15c      	cbz	r4, 80011da <FLASH_WaitForLastOperation+0x2a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80011c2:	9501      	str	r5, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80011c4:	9601      	str	r6, [sp, #4]
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	b11b      	cbz	r3, 80011d2 <FLASH_WaitForLastOperation+0x22>
 80011ca:	9b01      	ldr	r3, [sp, #4]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	e7f9      	b.n	80011c6 <FLASH_WaitForLastOperation+0x16>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 80011d2:	f7ff ffd9 	bl	8001188 <FLASH_GetStatus>
    Timeout--;
 80011d6:	3c01      	subs	r4, #1
 80011d8:	e7f0      	b.n	80011bc <FLASH_WaitForLastOperation+0xc>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80011da:	2005      	movs	r0, #5
 80011dc:	e002      	b.n	80011e4 <FLASH_WaitForLastOperation+0x34>
 80011de:	2c00      	cmp	r4, #0
 80011e0:	bf08      	it	eq
 80011e2:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 80011e4:	b002      	add	sp, #8
 80011e6:	bd70      	pop	{r4, r5, r6, pc}

080011e8 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80011ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011f0:	f7ff ffde 	bl	80011b0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80011f4:	2804      	cmp	r0, #4
 80011f6:	d114      	bne.n	8001222 <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80011f8:	4c0a      	ldr	r4, [pc, #40]	; (8001224 <FLASH_ErasePage+0x3c>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80011fa:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80011fe:	6923      	ldr	r3, [r4, #16]
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8001206:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8001208:	6923      	ldr	r3, [r4, #16]
 800120a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120e:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001210:	f7ff ffce 	bl	80011b0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8001214:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8001216:	bf1f      	itttt	ne
 8001218:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 800121c:	6922      	ldrne	r2, [r4, #16]
 800121e:	4013      	andne	r3, r2
 8001220:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	40022000 	andmi	r2, r2, r0

08001228 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800122c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800122e:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001230:	f7ff ffbe 	bl	80011b0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8001234:	2804      	cmp	r0, #4
 8001236:	d117      	bne.n	8001268 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001238:	4c0c      	ldr	r4, [pc, #48]	; (800126c <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800123a:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800123c:	6923      	ldr	r3, [r4, #16]
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8001244:	b2ab      	uxth	r3, r5
 8001246:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001248:	f7ff ffb2 	bl	80011b0 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 800124c:	2804      	cmp	r0, #4
 800124e:	d104      	bne.n	800125a <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8001250:	0c2d      	lsrs	r5, r5, #16
 8001252:	8075      	strh	r5, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001254:	200f      	movs	r0, #15
 8001256:	f7ff ffab 	bl	80011b0 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800125a:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 800125c:	bf1f      	itttt	ne
 800125e:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8001262:	6922      	ldrne	r2, [r4, #16]
 8001264:	4013      	andne	r3, r2
 8001266:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	andmi	r2, r2, r0

08001270 <IWDG_WriteAccessCmd>:
void IWDG_WriteAccessCmd(u16 IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));

  IWDG->KR = IWDG_WriteAccess;
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <IWDG_WriteAccessCmd+0x8>)
 8001272:	6018      	str	r0, [r3, #0]
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40003000 	andmi	r3, r0, r0

0800127c <IWDG_SetPrescaler>:
void IWDG_SetPrescaler(u8 IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));

  IWDG->PR = IWDG_Prescaler;
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <IWDG_SetPrescaler+0x8>)
 800127e:	6058      	str	r0, [r3, #4]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40003000 	andmi	r3, r0, r0

08001288 <IWDG_SetReload>:
void IWDG_SetReload(u16 Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));

  IWDG->RLR = Reload;
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <IWDG_SetReload+0x8>)
 800128a:	6098      	str	r0, [r3, #8]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40003000 	andmi	r3, r0, r0

08001294 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8001294:	78ca      	ldrb	r2, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 800129a:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 800129c:	bf48      	it	mi
 800129e:	788c      	ldrbmi	r4, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80012a0:	880e      	ldrh	r6, [r1, #0]
 80012a2:	f002 030f 	and.w	r3, r2, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80012a6:	bf48      	it	mi
 80012a8:	4323      	orrmi	r3, r4
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80012aa:	f016 0fff 	tst.w	r6, #255	; 0xff
 80012ae:	d01e      	beq.n	80012ee <GPIO_Init+0x5a>
  {
    tmpreg = GPIOx->CRL;
 80012b0:	6801      	ldr	r1, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012b2:	2400      	movs	r4, #0
    {
      pos = ((u32)0x01) << pinpos;
 80012b4:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80012b8:	f04f 0c0f 	mov.w	ip, #15
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 80012bc:	fa0e f704 	lsl.w	r7, lr, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

      if (currentpin == pos)
 80012c0:	ea37 0506 	bics.w	r5, r7, r6
 80012c4:	d10f      	bne.n	80012e6 <GPIO_Init+0x52>
      {
        pos = pinpos << 2;
 80012c6:	00a5      	lsls	r5, r4, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80012c8:	fa0c f805 	lsl.w	r8, ip, r5
 80012cc:	ea21 0108 	bic.w	r1, r1, r8

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80012d0:	fa03 f505 	lsl.w	r5, r3, r5

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80012d4:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80012d6:	ea41 0105 	orr.w	r1, r1, r5

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80012da:	d101      	bne.n	80012e0 <GPIO_Init+0x4c>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 80012dc:	6147      	str	r7, [r0, #20]
 80012de:	e002      	b.n	80012e6 <GPIO_Init+0x52>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80012e0:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 80012e2:	bf08      	it	eq
 80012e4:	6107      	streq	r7, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012e6:	3401      	adds	r4, #1
 80012e8:	2c08      	cmp	r4, #8
 80012ea:	d1e7      	bne.n	80012bc <GPIO_Init+0x28>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80012ec:	6001      	str	r1, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80012ee:	2eff      	cmp	r6, #255	; 0xff
 80012f0:	d920      	bls.n	8001334 <GPIO_Init+0xa0>
  {
    tmpreg = GPIOx->CRH;
 80012f2:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012f4:	2400      	movs	r4, #0
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 80012f6:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80012fa:	f04f 0c0f 	mov.w	ip, #15
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 80012fe:	f104 0508 	add.w	r5, r4, #8
 8001302:	fa0e f505 	lsl.w	r5, lr, r5
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8001306:	ea35 0706 	bics.w	r7, r5, r6
 800130a:	d10f      	bne.n	800132c <GPIO_Init+0x98>
      {
        pos = pinpos << 2;
 800130c:	00a7      	lsls	r7, r4, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 800130e:	fa0c f807 	lsl.w	r8, ip, r7
 8001312:	ea21 0108 	bic.w	r1, r1, r8

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001316:	fa03 f707 	lsl.w	r7, r3, r7

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800131a:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800131c:	ea41 0107 	orr.w	r1, r1, r7

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001320:	d101      	bne.n	8001326 <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8001322:	6145      	str	r5, [r0, #20]
 8001324:	e002      	b.n	800132c <GPIO_Init+0x98>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001326:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8001328:	bf08      	it	eq
 800132a:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800132c:	3401      	adds	r4, #1
 800132e:	2c08      	cmp	r4, #8
 8001330:	d1e5      	bne.n	80012fe <GPIO_Init+0x6a>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001332:	6041      	str	r1, [r0, #4]
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001338 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8001338:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
 800133a:	4219      	tst	r1, r3
}
 800133c:	bf14      	ite	ne
 800133e:	2001      	movne	r0, #1
 8001340:	2000      	moveq	r0, #0
 8001342:	4770      	bx	lr

08001344 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001344:	6101      	str	r1, [r0, #16]
 8001346:	4770      	bx	lr

08001348 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001348:	6141      	str	r1, [r0, #20]
 800134a:	4770      	bx	lr

0800134c <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 800134c:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <GPIO_PinRemapConfig+0x50>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001350:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8001354:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8001358:	6853      	ldr	r3, [r2, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 800135a:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800135c:	d106      	bne.n	800136c <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800135e:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001360:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001364:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8001368:	6055      	str	r5, [r2, #4]
 800136a:	e00e      	b.n	800138a <GPIO_PinRemapConfig+0x3e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800136c:	02c2      	lsls	r2, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800136e:	bf55      	itete	pl
 8001370:	0d42      	lsrpl	r2, r0, #21
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8001372:	2203      	movmi	r2, #3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001374:	0112      	lslpl	r2, r2, #4
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8001376:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 800137a:	bf4c      	ite	mi
 800137c:	40aa      	lslmi	r2, r5
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800137e:	fa04 f202 	lslpl.w	r2, r4, r2
 8001382:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001386:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 800138a:	b121      	cbz	r1, 8001396 <GPIO_PinRemapConfig+0x4a>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800138c:	0d40      	lsrs	r0, r0, #21
 800138e:	0100      	lsls	r0, r0, #4
 8001390:	fa04 f000 	lsl.w	r0, r4, r0
 8001394:	4303      	orrs	r3, r0
  }

  AFIO->MAPR = tmpreg;
 8001396:	4a01      	ldr	r2, [pc, #4]	; (800139c <GPIO_PinRemapConfig+0x50>)
 8001398:	6053      	str	r3, [r2, #4]
 800139a:	bd30      	pop	{r4, r5, pc}
 800139c:	40010000 	andmi	r0, r1, r0

080013a0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80013a0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <NVIC_PriorityGroupConfig+0x10>)
 80013a6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80013aa:	60d8      	str	r0, [r3, #12]
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	and	lr, r0, r0, lsl #26

080013b4 <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80013b4:	78c2      	ldrb	r2, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80013b6:	b530      	push	{r4, r5, lr}
 80013b8:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80013ba:	b36a      	cbz	r2, 8001418 <NVIC_Init+0x64>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <NVIC_Init+0x7c>)
 80013be:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013c0:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80013c2:	43c9      	mvns	r1, r1
 80013c4:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 80013c8:	f1c1 0404 	rsb	r4, r1, #4
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013cc:	fa02 f404 	lsl.w	r4, r2, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80013d0:	220f      	movs	r2, #15
 80013d2:	40ca      	lsrs	r2, r1
 80013d4:	7881      	ldrb	r1, [r0, #2]
 80013d6:	400a      	ands	r2, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80013d8:	f003 0103 	and.w	r1, r3, #3
 80013dc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80013e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80013e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80013e8:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80013ea:	00cd      	lsls	r5, r1, #3
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80013ec:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	40aa      	lsls	r2, r5
 80013f4:	21ff      	movs	r1, #255	; 0xff
 80013f6:	40a9      	lsls	r1, r5
 80013f8:	4062      	eors	r2, r4
 80013fa:	400a      	ands	r2, r1
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 80013fc:	4062      	eors	r2, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80013fe:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001402:	7803      	ldrb	r3, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8001404:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001406:	0959      	lsrs	r1, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <NVIC_Init+0x80>)
 8001412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001416:	bd30      	pop	{r4, r5, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001418:	095a      	lsrs	r2, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800141a:	2101      	movs	r1, #1
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001424:	4903      	ldr	r1, [pc, #12]	; (8001434 <NVIC_Init+0x80>)
 8001426:	3220      	adds	r2, #32
 8001428:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800142c:	bd30      	pop	{r4, r5, pc}
 800142e:	bf00      	nop
 8001430:	e000ed00 	and	lr, r0, r0, lsl #26
 8001434:	e000e100 	and	lr, r0, r0, lsl #2

08001438 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8001438:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800143c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <NVIC_SetVectorTable+0x10>)
 8001442:	4308      	orrs	r0, r1
 8001444:	6098      	str	r0, [r3, #8]
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	and	lr, r0, r0, lsl #26

0800144c <NVIC_GenerateSystemReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
 800144c:	b508      	push	{r3, lr}
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 800144e:	4a03      	ldr	r2, [pc, #12]	; (800145c <NVIC_GenerateSystemReset+0x10>)
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <NVIC_GenerateSystemReset+0x14>)
 8001452:	60da      	str	r2, [r3, #12]
  __DSB();                                                                             /* Ensure completion of memory access */
 8001454:	f7fe fe77 	bl	8000146 <__DSB>
 8001458:	e7fe      	b.n	8001458 <NVIC_GenerateSystemReset+0xc>
 800145a:	bf00      	nop
 800145c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8001460:	e000ed00 	and	lr, r0, r0, lsl #26

08001464 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <RCC_DeInit+0x34>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <RCC_DeInit+0x38>)
 8001472:	400a      	ands	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800147c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001480:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001488:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001490:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	4770      	bx	lr
 8001498:	40021000 	andmi	r1, r2, r0
 800149c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

080014a0 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <RCC_HSEConfig+0x34>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80014a2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b4:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80014b6:	d003      	beq.n	80014c0 <RCC_HSEConfig+0x20>
 80014b8:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80014bc:	d004      	beq.n	80014c8 <RCC_HSEConfig+0x28>
 80014be:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014c6:	e002      	b.n	80014ce <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	andmi	r1, r2, r0

080014d8 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <RCC_PLLConfig+0x10>)
 80014da:	6853      	ldr	r3, [r2, #4]
 80014dc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80014e0:	4319      	orrs	r1, r3

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80014e2:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014e4:	6050      	str	r0, [r2, #4]
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	andmi	r1, r2, r0

080014ec <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <RCC_PLLCmd+0x8>)
 80014ee:	6018      	str	r0, [r3, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	42420060 	submi	r0, r2, #96	; 0x60

080014f8 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <RCC_SYSCLKConfig+0x10>)
 80014fa:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80014fc:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001500:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001502:	6050      	str	r0, [r2, #4]
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	andmi	r1, r2, r0

0800150c <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <RCC_GetSYSCLKSource+0xc>)
 800150e:	6858      	ldr	r0, [r3, #4]
}
 8001510:	f000 000c 	and.w	r0, r0, #12
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	andmi	r1, r2, r0

0800151c <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <RCC_HCLKConfig+0x10>)
 800151e:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001524:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001526:	6050      	str	r0, [r2, #4]
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	andmi	r1, r2, r0

08001530 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <RCC_PCLK1Config+0x10>)
 8001532:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001538:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800153a:	6050      	str	r0, [r2, #4]
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	andmi	r1, r2, r0

08001544 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <RCC_PCLK2Config+0x10>)
 8001546:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001548:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800154c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001550:	6050      	str	r0, [r2, #4]
 8001552:	4770      	bx	lr
 8001554:	40021000 	andmi	r1, r2, r0

08001558 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <RCC_USBCLKConfig+0x8>)
 800155a:	6018      	str	r0, [r3, #0]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	424200d8 	submi	r0, r2, #216	; 0xd8

08001564 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <RCC_GetClocksFreq+0x74>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001566:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001568:	6853      	ldr	r3, [r2, #4]

  switch (tmp)
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d001      	beq.n	8001576 <RCC_GetClocksFreq+0x12>
 8001572:	2b08      	cmp	r3, #8
 8001574:	d001      	beq.n	800157a <RCC_GetClocksFreq+0x16>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <RCC_GetClocksFreq+0x78>)
 8001578:	e00e      	b.n	8001598 <RCC_GetClocksFreq+0x34>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800157a:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800157c:	6851      	ldr	r1, [r2, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 800157e:	f3c3 4383 	ubfx	r3, r3, #18, #4

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8001582:	03cc      	lsls	r4, r1, #15
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8001584:	f103 0302 	add.w	r3, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8001588:	d502      	bpl.n	8001590 <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 800158a:	6851      	ldr	r1, [r2, #4]
 800158c:	0389      	lsls	r1, r1, #14
 800158e:	d501      	bpl.n	8001594 <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8001590:	4913      	ldr	r1, [pc, #76]	; (80015e0 <RCC_GetClocksFreq+0x7c>)
 8001592:	e000      	b.n	8001596 <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8001594:	4911      	ldr	r1, [pc, #68]	; (80015dc <RCC_GetClocksFreq+0x78>)
 8001596:	434b      	muls	r3, r1
 8001598:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800159a:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800159c:	4911      	ldr	r1, [pc, #68]	; (80015e4 <RCC_GetClocksFreq+0x80>)
 800159e:	f3c3 1303 	ubfx	r3, r3, #4, #4

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80015a2:	5ccc      	ldrb	r4, [r1, r3]
 80015a4:	6803      	ldr	r3, [r0, #0]
 80015a6:	40e3      	lsrs	r3, r4
 80015a8:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80015aa:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];
 80015ac:	f3c4 2402 	ubfx	r4, r4, #8, #3

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015b0:	5d0c      	ldrb	r4, [r1, r4]
 80015b2:	fa23 f404 	lsr.w	r4, r3, r4
 80015b6:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80015b8:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];
 80015ba:	f3c4 24c2 	ubfx	r4, r4, #11, #3

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015be:	5d0c      	ldrb	r4, [r1, r4]
 80015c0:	40e3      	lsrs	r3, r4
 80015c2:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80015c4:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 80015c6:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80015ca:	440a      	add	r2, r1

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80015cc:	7c12      	ldrb	r2, [r2, #16]
 80015ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80015d2:	6103      	str	r3, [r0, #16]
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	andmi	r1, r2, r0
 80015dc:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80015e0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80015e4:	08002759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, sp}

080015e8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015ea:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015ec:	b109      	cbz	r1, 80015f2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015ee:	4310      	orrs	r0, r2
 80015f0:	e001      	b.n	80015f6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015f2:	ea22 0000 	bic.w	r0, r2, r0
 80015f6:	6198      	str	r0, [r3, #24]
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40021000 	andmi	r1, r2, r0

08001600 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001602:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001604:	b109      	cbz	r1, 800160a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001606:	4310      	orrs	r0, r2
 8001608:	e001      	b.n	800160e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800160a:	ea22 0000 	bic.w	r0, r2, r0
 800160e:	61d8      	str	r0, [r3, #28]
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40021000 	andmi	r1, r2, r0

08001618 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800161a:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800161c:	b109      	cbz	r1, 8001622 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800161e:	4310      	orrs	r0, r2
 8001620:	e001      	b.n	8001626 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001622:	ea22 0000 	bic.w	r0, r2, r0
 8001626:	60d8      	str	r0, [r3, #12]
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	andmi	r1, r2, r0

08001630 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001632:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001634:	b109      	cbz	r1, 800163a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001636:	4310      	orrs	r0, r2
 8001638:	e001      	b.n	800163e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800163a:	ea22 0000 	bic.w	r0, r2, r0
 800163e:	6118      	str	r0, [r3, #16]
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	andmi	r1, r2, r0

08001648 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001648:	0942      	lsrs	r2, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 800164a:	2a01      	cmp	r2, #1
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <RCC_GetFlagStatus+0x24>)
 800164e:	d101      	bne.n	8001654 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	e003      	b.n	800165c <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001654:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8001656:	bf0c      	ite	eq
 8001658:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800165a:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 800165c:	f000 001f 	and.w	r0, r0, #31
 8001660:	fa23 f000 	lsr.w	r0, r3, r0
}
 8001664:	f000 0001 	and.w	r0, r0, #1
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	andmi	r1, r2, r0

08001670 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001670:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001676:	2031      	movs	r0, #49	; 0x31
 8001678:	f7ff ffe6 	bl	8001648 <RCC_GetFlagStatus>
    StartUpCounter++;  
 800167c:	9b01      	ldr	r3, [sp, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8001682:	b918      	cbnz	r0, 800168c <RCC_WaitForHSEStartUp+0x1c>
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800168a:	d1f4      	bne.n	8001676 <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800168c:	2031      	movs	r0, #49	; 0x31
 800168e:	f7ff ffdb 	bl	8001648 <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 8001692:	3000      	adds	r0, #0
 8001694:	bf18      	it	ne
 8001696:	2001      	movne	r0, #1
 8001698:	b003      	add	sp, #12
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080016a0 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80016a0:	4a02      	ldr	r2, [pc, #8]	; (80016ac <RCC_ClearFlag+0xc>)
 80016a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80016a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a8:	6253      	str	r3, [r2, #36]	; 0x24
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	andmi	r1, r2, r0

080016b0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 80016b0:	8803      	ldrh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 80016b2:	88ca      	ldrh	r2, [r1, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 80016b4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80016b8:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 80016ba:	8803      	ldrh	r3, [r0, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	884a      	ldrh	r2, [r1, #2]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016c8:	888b      	ldrh	r3, [r1, #4]
 80016ca:	8583      	strh	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80016cc:	880b      	ldrh	r3, [r1, #0]
 80016ce:	8503      	strh	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80016d0:	2301      	movs	r3, #1
 80016d2:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <TIM_TimeBaseInit+0x38>)
 80016d6:	4298      	cmp	r0, r3
 80016d8:	d003      	beq.n	80016e2 <TIM_TimeBaseInit+0x32>
 80016da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016de:	4298      	cmp	r0, r3
 80016e0:	d101      	bne.n	80016e6 <TIM_TimeBaseInit+0x36>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80016e2:	7a0b      	ldrb	r3, [r1, #8]
 80016e4:	8603      	strh	r3, [r0, #48]	; 0x30
 80016e6:	4770      	bx	lr
 80016e8:	40012c00 	andmi	r2, r1, r0, lsl #24

080016ec <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 80016ec:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016ee:	b119      	cbz	r1, 80016f8 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	e003      	b.n	8001700 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	059b      	lsls	r3, r3, #22
 80016fe:	0d9b      	lsrs	r3, r3, #22
 8001700:	8003      	strh	r3, [r0, #0]
 8001702:	4770      	bx	lr

08001704 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001704:	8983      	ldrh	r3, [r0, #12]
 8001706:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001708:	b10a      	cbz	r2, 800170e <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800170a:	4319      	orrs	r1, r3
 800170c:	e001      	b.n	8001712 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 800170e:	ea23 0101 	bic.w	r1, r3, r1
 8001712:	8181      	strh	r1, [r0, #12]
 8001714:	4770      	bx	lr

08001716 <TIM_ITConfig>:
 8001716:	f7ff bff5 	b.w	8001704 <TIM_DMACmd>

0800171a <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800171a:	8501      	strh	r1, [r0, #40]	; 0x28

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800171c:	8282      	strh	r2, [r0, #20]
 800171e:	4770      	bx	lr

08001720 <TIM_ClearFlag>:
 8001720:	43c9      	mvns	r1, r1
 8001722:	b289      	uxth	r1, r1
 8001724:	8201      	strh	r1, [r0, #16]
 8001726:	4770      	bx	lr

08001728 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8001728:	43c9      	mvns	r1, r1
 800172a:	b289      	uxth	r1, r1
 800172c:	8201      	strh	r1, [r0, #16]
 800172e:	4770      	bx	lr

08001730 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8001730:	4b01      	ldr	r3, [pc, #4]	; (8001738 <SysTick_SetReload+0x8>)
 8001732:	6058      	str	r0, [r3, #4]
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e010 	and	lr, r0, r0, lsl r0

0800173c <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 800173c:	2801      	cmp	r0, #1
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <SysTick_CounterCmd+0x24>)
 8001740:	d103      	bne.n	800174a <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	e004      	b.n	8001754 <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 800174a:	3002      	adds	r0, #2
 800174c:	d104      	bne.n	8001758 <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e010 	and	lr, r0, r0, lsl r0

08001764 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8001766:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001768:	b110      	cbz	r0, 8001770 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 800176a:	f042 0202 	orr.w	r2, r2, #2
 800176e:	e001      	b.n	8001774 <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8001770:	f022 0202 	bic.w	r2, r2, #2
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	4770      	bx	lr
 8001778:	e000e010 	and	lr, r0, r0, lsl r0

0800177c <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 800177c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <USART_DeInit+0x94>)
 8001780:	4298      	cmp	r0, r3
 8001782:	d02e      	beq.n	80017e2 <USART_DeInit+0x66>
 8001784:	d808      	bhi.n	8001798 <USART_DeInit+0x1c>
 8001786:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800178a:	4298      	cmp	r0, r3
 800178c:	d017      	beq.n	80017be <USART_DeInit+0x42>
 800178e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001792:	4298      	cmp	r0, r3
 8001794:	d01c      	beq.n	80017d0 <USART_DeInit+0x54>
 8001796:	bd08      	pop	{r3, pc}
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <USART_DeInit+0x98>)
 800179a:	4298      	cmp	r0, r3
 800179c:	d02a      	beq.n	80017f4 <USART_DeInit+0x78>
 800179e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d132      	bne.n	800180c <USART_DeInit+0x90>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80017a6:	2101      	movs	r1, #1
 80017a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017ac:	f7ff ff34 	bl	8001618 <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 80017b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80017b4:	2100      	movs	r1, #0
 80017b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017ba:	f7ff bf2d 	b.w	8001618 <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80017be:	2101      	movs	r1, #1
 80017c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017c4:	f7ff ff34 	bl	8001630 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80017c8:	2100      	movs	r1, #0
 80017ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017ce:	e019      	b.n	8001804 <USART_DeInit+0x88>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80017d0:	2101      	movs	r1, #1
 80017d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017d6:	f7ff ff2b 	bl	8001630 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80017da:	2100      	movs	r1, #0
 80017dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017e0:	e010      	b.n	8001804 <USART_DeInit+0x88>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80017e2:	2101      	movs	r1, #1
 80017e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017e8:	f7ff ff22 	bl	8001630 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80017ec:	2100      	movs	r1, #0
 80017ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017f2:	e007      	b.n	8001804 <USART_DeInit+0x88>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80017f4:	2101      	movs	r1, #1
 80017f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017fa:	f7ff ff19 	bl	8001630 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80017fe:	2100      	movs	r1, #0
 8001800:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
      break;            

    default:
      break;
  }
}
 8001804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001808:	f7ff bf12 	b.w	8001630 <RCC_APB1PeriphResetCmd>
 800180c:	bd08      	pop	{r3, pc}
 800180e:	bf00      	nop
 8001810:	40004c00 	andmi	r4, r0, r0, lsl #24
 8001814:	40005000 	andmi	r5, r0, r0

08001818 <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001818:	b530      	push	{r4, r5, lr}
 800181a:	460d      	mov	r5, r1
 800181c:	4604      	mov	r4, r0
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800181e:	8a03      	ldrh	r3, [r0, #16]
 8001820:	88ca      	ldrh	r2, [r1, #6]
 8001822:	b29b      	uxth	r3, r3
 8001824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001828:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800182a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800182c:	8982      	ldrh	r2, [r0, #12]
 800182e:	8889      	ldrh	r1, [r1, #4]
 8001830:	892b      	ldrh	r3, [r5, #8]
 8001832:	b292      	uxth	r2, r2
 8001834:	430b      	orrs	r3, r1
 8001836:	8969      	ldrh	r1, [r5, #10]
 8001838:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800183c:	430b      	orrs	r3, r1
 800183e:	f022 020c 	bic.w	r2, r2, #12
 8001842:	4313      	orrs	r3, r2
 8001844:	b29b      	uxth	r3, r3
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8001846:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001848:	8a83      	ldrh	r3, [r0, #20]
 800184a:	89aa      	ldrh	r2, [r5, #12]
 800184c:	b29b      	uxth	r3, r3
 800184e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001852:	b087      	sub	sp, #28
 8001854:	4313      	orrs	r3, r2
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8001856:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001858:	a801      	add	r0, sp, #4
 800185a:	f7ff fe83 	bl	8001564 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800185e:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001860:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <USART_Init+0x84>)
 8001864:	428c      	cmp	r4, r1
 8001866:	bf18      	it	ne
 8001868:	461a      	movne	r2, r3
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 800186a:	2319      	movs	r3, #25
 800186c:	4353      	muls	r3, r2
 800186e:	682a      	ldr	r2, [r5, #0]
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	fbb3 f2f2 	udiv	r2, r3, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	fbb2 f0f3 	udiv	r0, r2, r3
 800187c:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 800187e:	0901      	lsrs	r1, r0, #4
 8001880:	fb03 2211 	mls	r2, r3, r1, r2
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	3232      	adds	r2, #50	; 0x32
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	f003 030f 	and.w	r3, r3, #15

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8001890:	4303      	orrs	r3, r0
 8001892:	b29b      	uxth	r3, r3
 8001894:	8123      	strh	r3, [r4, #8]
}
 8001896:	b007      	add	sp, #28
 8001898:	bd30      	pop	{r4, r5, pc}
 800189a:	bf00      	nop
 800189c:	40013800 	andmi	r3, r1, r0, lsl #16

080018a0 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80018a0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80018a4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80018a6:	220c      	movs	r2, #12
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80018a8:	2300      	movs	r3, #0
 80018aa:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80018ac:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80018ae:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80018b0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80018b2:	8183      	strh	r3, [r0, #12]
 80018b4:	4770      	bx	lr

080018b6 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80018b6:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018b8:	b119      	cbz	r1, 80018c2 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c0:	e003      	b.n	80018ca <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80018c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	8183      	strh	r3, [r0, #12]
 80018cc:	4770      	bx	lr

080018ce <USART_ITConfig>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 80018ce:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 80018d0:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 80018d2:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80018d6:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 80018d8:	f001 011f 	and.w	r1, r1, #31
 80018dc:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80018e0:	d101      	bne.n	80018e6 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 80018e2:	300c      	adds	r0, #12
 80018e4:	e003      	b.n	80018ee <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80018e6:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 80018e8:	bf0c      	ite	eq
 80018ea:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80018ec:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(vu32*)usartxbase  |= itmask;
 80018ee:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80018f0:	b10a      	cbz	r2, 80018f6 <USART_ITConfig+0x28>
  {
    *(vu32*)usartxbase  |= itmask;
 80018f2:	4319      	orrs	r1, r3
 80018f4:	e001      	b.n	80018fa <USART_ITConfig+0x2c>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 80018f6:	ea23 0101 	bic.w	r1, r3, r1
 80018fa:	6001      	str	r1, [r0, #0]
 80018fc:	bd10      	pop	{r4, pc}

080018fe <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 80018fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001902:	8081      	strh	r1, [r0, #4]
 8001904:	4770      	bx	lr

08001906 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8001906:	8880      	ldrh	r0, [r0, #4]
}
 8001908:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800190c:	4770      	bx	lr

0800190e <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 800190e:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001910:	4219      	tst	r1, r3
}
 8001912:	bf14      	ite	ne
 8001914:	2001      	movne	r0, #1
 8001916:	2000      	moveq	r0, #0
 8001918:	4770      	bx	lr

0800191a <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 800191a:	43c9      	mvns	r1, r1
 800191c:	b289      	uxth	r1, r1
 800191e:	8001      	strh	r1, [r0, #0]
 8001920:	4770      	bx	lr

08001922 <USART_GetITStatus>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8001922:	2301      	movs	r3, #1
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8001924:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8001926:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800192a:	f001 021f 	and.w	r2, r1, #31

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800192e:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8001930:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001934:	d101      	bne.n	800193a <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8001936:	8983      	ldrh	r3, [r0, #12]
 8001938:	e003      	b.n	8001942 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800193a:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800193c:	bf0c      	ite	eq
 800193e:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001940:	8a83      	ldrhne	r3, [r0, #20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001946:	8802      	ldrh	r2, [r0, #0]
 8001948:	b292      	uxth	r2, r2

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 800194a:	b143      	cbz	r3, 800195e <USART_GetITStatus+0x3c>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 800194c:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 800194e:	0a09      	lsrs	r1, r1, #8

  bitpos = (u32)0x01 << bitpos;
 8001950:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
  {
    bitstatus = SET;
 8001954:	420a      	tst	r2, r1
 8001956:	bf14      	ite	ne
 8001958:	4618      	movne	r0, r3
 800195a:	2000      	moveq	r0, #0
 800195c:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 800195e:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8001960:	bd10      	pop	{r4, pc}
	...

08001964 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8001964:	4668      	mov	r0, sp
 8001966:	f020 0107 	bic.w	r1, r0, #7
 800196a:	468d      	mov	sp, r1
 800196c:	b501      	push	{r0, lr}
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <Reset_Handler+0x3c>)
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <Reset_Handler+0x40>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <Reset_Handler+0x44>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d204      	bcs.n	8001982 <Reset_Handler+0x1e>
    {
        *(pulDest++) = *(pulSrc++);
 8001978:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800197c:	f843 0b04 	str.w	r0, [r3], #4
 8001980:	e7f8      	b.n	8001974 <Reset_Handler+0x10>
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <Reset_Handler+0x4c>)
    {
        *(pulDest++) = 0;
 8001986:	2100      	movs	r1, #0
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8001988:	4293      	cmp	r3, r2
 800198a:	d202      	bcs.n	8001992 <Reset_Handler+0x2e>
    {
        *(pulDest++) = 0;
 800198c:	f843 1b04 	str.w	r1, [r3], #4
 8001990:	e7fa      	b.n	8001988 <Reset_Handler+0x24>
    }

    //
    // Call the application's entry point.
    //
    main();
 8001992:	f7ff f85b 	bl	8000a4c <main>
}
 8001996:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800199a:	4685      	mov	sp, r0
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
 80019a4:	20000000 	andcs	r0, r0, r0
 80019a8:	200000e4 	andcs	r0, r0, r4, ror #1
 80019ac:	200000e4 	andcs	r0, r0, r4, ror #1
 80019b0:	2000071c 	andcs	r0, r0, ip, lsl r7

080019b4 <USB_Init>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <USB_Init+0x1c>)
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <USB_Init+0x20>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <USB_Init+0x24>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 80019ba:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 80019bc:	2202      	movs	r2, #2
 80019be:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <USB_Init+0x28>)
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <USB_Init+0x2c>)
 80019c4:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <USB_Init+0x30>)
  /* Initialize devices one by one */
  pProperty->Init();
 80019c8:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 80019ca:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 80019cc:	4718      	bx	r3
 80019ce:	bf00      	nop
 80019d0:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80019d4:	20000710 	andcs	r0, r0, r0, lsl r7
 80019d8:	200000bc 	strhcs	r0, [r0], -ip
 80019dc:	2000005c 	andcs	r0, r0, ip, asr r0
 80019e0:	200006e8 	andcs	r0, r0, r8, ror #13
 80019e4:	2000070c 	andcs	r0, r0, ip, lsl #14

080019e8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4c06      	ldr	r4, [pc, #24]	; (8001a04 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80019ec:	b918      	cbnz	r0, 80019f6 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80019f4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <Standard_GetConfiguration+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 80019fe:	6820      	ldr	r0, [r4, #0]
 8001a00:	300a      	adds	r0, #10
}
 8001a02:	bd10      	pop	{r4, pc}
 8001a04:	20000710 	andcs	r0, r0, r0, lsl r7
 8001a08:	2000070c 	andcs	r0, r0, ip, lsl #14

08001a0c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4c06      	ldr	r4, [pc, #24]	; (8001a28 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001a10:	b918      	cbnz	r0, 8001a1a <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	2201      	movs	r2, #1
 8001a16:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001a18:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <Standard_GetInterface+0x20>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	300c      	adds	r0, #12
}
 8001a26:	bd10      	pop	{r4, pc}
 8001a28:	20000710 	andcs	r0, r0, r0, lsl r7
 8001a2c:	2000070c 	andcs	r0, r0, ip, lsl #14

08001a30 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8001a30:	b510      	push	{r4, lr}
 8001a32:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <Standard_GetStatus+0x84>)
  if (Length == 0)
 8001a34:	b918      	cbnz	r0, 8001a3e <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	821a      	strh	r2, [r3, #16]
    return 0;
 8001a3c:	bd10      	pop	{r4, pc}
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <Standard_GetStatus+0x88>)

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001a40:	6814      	ldr	r4, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	8003      	strh	r3, [r0, #0]
 8001a46:	7821      	ldrb	r1, [r4, #0]
 8001a48:	4602      	mov	r2, r0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001a4a:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 8001a4e:	d10d      	bne.n	8001a6c <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8001a50:	7a63      	ldrb	r3, [r4, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001a52:	0699      	lsls	r1, r3, #26
    {
      SetBit(StatusInfo0, 1);
 8001a54:	bf44      	itt	mi
 8001a56:	2102      	movmi	r1, #2
 8001a58:	7001      	strbmi	r1, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
    {
      SetBit(StatusInfo0, 0);
 8001a5e:	7803      	ldrb	r3, [r0, #0]
 8001a60:	bf14      	ite	ne
 8001a62:	f043 0301 	orrne.w	r3, r3, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8001a66:	f023 0301 	biceq.w	r3, r3, #1
 8001a6a:	e014      	b.n	8001a96 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001a6c:	2901      	cmp	r1, #1
 8001a6e:	d020      	beq.n	8001ab2 <Standard_GetStatus+0x82>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001a70:	2902      	cmp	r1, #2
 8001a72:	d11d      	bne.n	8001ab0 <Standard_GetStatus+0x80>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001a74:	7961      	ldrb	r1, [r4, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001a76:	f001 030f 	and.w	r3, r1, #15
 8001a7a:	009b      	lsls	r3, r3, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a80:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001a84:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001a88:	681b      	ldr	r3, [r3, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001a8a:	d006      	beq.n	8001a9a <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001a8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d107      	bne.n	8001aa4 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001a94:	2301      	movs	r3, #1
 8001a96:	7013      	strb	r3, [r2, #0]
 8001a98:	e004      	b.n	8001aa4 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001a9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	e7f6      	b.n	8001a92 <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <Standard_GetStatus+0x8c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <Standard_GetStatus+0x88>)
 8001aae:	bd10      	pop	{r4, pc}
    }

  }
  else
  {
    return NULL;
 8001ab0:	4618      	mov	r0, r3
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 8001ab2:	bd10      	pop	{r4, pc}
 8001ab4:	20000710 	andcs	r0, r0, r0, lsl r7
 8001ab8:	20000716 	andcs	r0, r0, r6, lsl r7
 8001abc:	2000070c 	andcs	r0, r0, ip, lsl #14

08001ac0 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001ac4:	4f23      	ldr	r7, [pc, #140]	; (8001b54 <DataStageIn+0x94>)
 8001ac6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001b68 <DataStageIn+0xa8>
 8001aca:	683c      	ldr	r4, [r7, #0]
  u32 save_wLength = pEPinfo->Usb_wLength;
 8001acc:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001ace:	b9bb      	cbnz	r3, 8001b00 <DataStageIn+0x40>
 8001ad0:	7a26      	ldrb	r6, [r4, #8]
 8001ad2:	2e04      	cmp	r6, #4
 8001ad4:	d114      	bne.n	8001b00 <DataStageIn+0x40>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001ad6:	4820      	ldr	r0, [pc, #128]	; (8001b58 <DataStageIn+0x98>)
 8001ad8:	7802      	ldrb	r2, [r0, #0]
 8001ada:	2a01      	cmp	r2, #1
 8001adc:	d10b      	bne.n	8001af6 <DataStageIn+0x36>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001ade:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <DataStageIn+0x9c>)
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <DataStageIn+0xa0>)
 8001ae4:	b289      	uxth	r1, r1
 8001ae6:	440a      	add	r2, r1
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	2230      	movs	r2, #48	; 0x30
 8001aee:	f8a8 2000 	strh.w	r2, [r8]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001af2:	7003      	strb	r3, [r0, #0]
 8001af4:	e029      	b.n	8001b4a <DataStageIn+0x8a>
    #ifdef STM32F10X_CL      
      PCD_EP_Read (ENDP0, 0, 0);
    #endif  /* STM32F10X_CL */ 
    
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
 8001af6:	2310      	movs	r3, #16
 8001af8:	f8a8 3000 	strh.w	r3, [r8]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8001afc:	2607      	movs	r6, #7
 8001afe:	e024      	b.n	8001b4a <DataStageIn+0x8a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001b00:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001b02:	42ab      	cmp	r3, r5
 8001b04:	bf94      	ite	ls
 8001b06:	2604      	movls	r6, #4
 8001b08:	2602      	movhi	r6, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001b0a:	429d      	cmp	r5, r3
 8001b0c:	bf28      	it	cs
 8001b0e:	461d      	movcs	r5, r3
 8001b10:	69a3      	ldr	r3, [r4, #24]
 8001b12:	4628      	mov	r0, r5
 8001b14:	4798      	blx	r3
 8001b16:	4681      	mov	r9, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 fcb7 	bl	800248c <GetEPTxAddr>
 8001b1e:	462a      	mov	r2, r5
 8001b20:	4601      	mov	r1, r0
 8001b22:	4648      	mov	r0, r9
 8001b24:	f000 fb89 	bl	800223a <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8001b28:	4629      	mov	r1, r5
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 fc4e 	bl	80023cc <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001b30:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001b32:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001b36:	1b5b      	subs	r3, r3, r5
 8001b38:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001b3a:	8a63      	ldrh	r3, [r4, #18]
 8001b3c:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8001b3e:	2330      	movs	r3, #48	; 0x30
 8001b40:	f8a8 3000 	strh.w	r3, [r8]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <DataStageIn+0xa4>)
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001b46:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001b48:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	721e      	strb	r6, [r3, #8]
 8001b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b52:	bf00      	nop
 8001b54:	20000710 	andcs	r0, r0, r0, lsl r7
 8001b58:	2000012c 	andcs	r0, r0, ip, lsr #2
 8001b5c:	40005c50 	andmi	r5, r0, r0, asr ip
 8001b60:	20003002 	andcs	r3, r0, r2
 8001b64:	20000718 	andcs	r0, r0, r8, lsl r7
 8001b68:	2000071a 	andcs	r0, r0, sl, lsl r7

08001b6c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001b6c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001b70:	490a      	ldr	r1, [pc, #40]	; (8001b9c <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	7849      	ldrb	r1, [r1, #1]
 8001b76:	78da      	ldrb	r2, [r3, #3]
 8001b78:	4291      	cmp	r1, r2
 8001b7a:	d30a      	bcc.n	8001b92 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001b7c:	7899      	ldrb	r1, [r3, #2]
 8001b7e:	b941      	cbnz	r1, 8001b92 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001b80:	889c      	ldrh	r4, [r3, #4]
 8001b82:	b934      	cbnz	r4, 8001b92 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001b84:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <Standard_SetConfiguration+0x34>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4798      	blx	r3
    return USB_SUCCESS;
 8001b8e:	4620      	mov	r0, r4
 8001b90:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8001b92:	2002      	movs	r0, #2
  }
}
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	bf00      	nop
 8001b98:	20000710 	andcs	r0, r0, r0, lsl r7
 8001b9c:	200000e0 	andcs	r0, r0, r0, ror #1
 8001ba0:	2000070c 	andcs	r0, r0, ip, lsl #14

08001ba4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <Standard_SetInterface+0x3c>)
 8001ba8:	4d0e      	ldr	r5, [pc, #56]	; (8001be4 <Standard_SetInterface+0x40>)
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	6992      	ldr	r2, [r2, #24]
 8001bb0:	78d9      	ldrb	r1, [r3, #3]
 8001bb2:	7958      	ldrb	r0, [r3, #5]
 8001bb4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8001bb6:	682b      	ldr	r3, [r5, #0]
 8001bb8:	7a9a      	ldrb	r2, [r3, #10]
 8001bba:	b17a      	cbz	r2, 8001bdc <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001bbc:	b970      	cbnz	r0, 8001bdc <Standard_SetInterface+0x38>
 8001bbe:	791a      	ldrb	r2, [r3, #4]
 8001bc0:	b962      	cbnz	r2, 8001bdc <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8001bc2:	789c      	ldrb	r4, [r3, #2]
 8001bc4:	b954      	cbnz	r4, 8001bdc <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <Standard_SetInterface+0x44>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001bce:	682b      	ldr	r3, [r5, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001bd0:	4620      	mov	r0, r4
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001bd2:	795a      	ldrb	r2, [r3, #5]
 8001bd4:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001bd6:	78da      	ldrb	r2, [r3, #3]
 8001bd8:	731a      	strb	r2, [r3, #12]
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8001bdc:	2002      	movs	r0, #2
}
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
 8001be0:	200006e8 	andcs	r0, r0, r8, ror #13
 8001be4:	20000710 	andcs	r0, r0, r0, lsl r7
 8001be8:	2000070c 	andcs	r0, r0, ip, lsl #14

08001bec <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <Standard_ClearFeature+0xc8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001bf4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001bf8:	d104      	bne.n	8001c04 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001bfa:	7a5a      	ldrb	r2, [r3, #9]
 8001bfc:	f022 0220 	bic.w	r2, r2, #32
 8001c00:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d153      	bne.n	8001cb0 <Standard_ClearFeature+0xc4>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001c08:	885a      	ldrh	r2, [r3, #2]
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d151      	bne.n	8001cb2 <Standard_ClearFeature+0xc6>
        || (pInformation->USBwIndex1 != 0))
 8001c0e:	791a      	ldrb	r2, [r3, #4]
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	d14e      	bne.n	8001cb2 <Standard_ClearFeature+0xc6>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001c14:	7959      	ldrb	r1, [r3, #5]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001c16:	4d28      	ldr	r5, [pc, #160]	; (8001cb8 <Standard_ClearFeature+0xcc>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8001c18:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 8001c1c:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001c1e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8001c22:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001c26:	6812      	ldr	r2, [r2, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001c28:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001c2a:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001c2e:	bf14      	ite	ne
 8001c30:	f002 0230 	andne.w	r2, r2, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001c34:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001c38:	42a8      	cmp	r0, r5
 8001c3a:	d239      	bcs.n	8001cb0 <Standard_ClearFeature+0xc4>
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d037      	beq.n	8001cb0 <Standard_ClearFeature+0xc4>
        || (pInformation->Current_Configuration == 0))
 8001c40:	7a9b      	ldrb	r3, [r3, #10]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d034      	beq.n	8001cb0 <Standard_ClearFeature+0xc4>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001c46:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001c4a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001c4e:	060a      	lsls	r2, r1, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001c50:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001c52:	d50c      	bpl.n	8001c6e <Standard_ClearFeature+0x82>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001c54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d123      	bne.n	8001ca4 <Standard_ClearFeature+0xb8>
      {
      #ifndef STM32F10X_CL
        ClearDTOG_TX(Related_Endpoint);
 8001c5c:	b2c4      	uxtb	r4, r0
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f000 fba2 	bl	80023a8 <ClearDTOG_TX>
      #endif /* STM32F10X_CL */
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001c64:	2130      	movs	r1, #48	; 0x30
 8001c66:	4620      	mov	r0, r4
 8001c68:	f000 fb22 	bl	80022b0 <SetEPTxStatus>
 8001c6c:	e01a      	b.n	8001ca4 <Standard_ClearFeature+0xb8>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001c6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c76:	d115      	bne.n	8001ca4 <Standard_ClearFeature+0xb8>
      {
        if (Related_Endpoint == ENDP0)
 8001c78:	b928      	cbnz	r0, 8001c86 <Standard_ClearFeature+0x9a>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <Standard_ClearFeature+0xd0>)
 8001c7c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001c80:	f000 fbb2 	bl	80023e8 <SetEPRxCount>
 8001c84:	e001      	b.n	8001c8a <Standard_ClearFeature+0x9e>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
        #ifndef STM32F10X_CL
          ClearDTOG_RX(Related_Endpoint);
 8001c86:	f000 fb7d 	bl	8002384 <ClearDTOG_RX>
        #endif /* STM32F10X_CL */
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca2:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <Standard_ClearFeature+0xd4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4798      	blx	r3
    return USB_SUCCESS;
 8001cac:	2000      	movs	r0, #0
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 8001cb0:	2002      	movs	r0, #2
}
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
 8001cb4:	20000710 	andcs	r0, r0, r0, lsl r7
 8001cb8:	200000e0 	andcs	r0, r0, r0, ror #1
 8001cbc:	2000005c 	andcs	r0, r0, ip, asr r0
 8001cc0:	2000070c 	andcs	r0, r0, ip, lsl #14

08001cc4 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001cc4:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <Standard_SetEndPointFeature+0x80>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001cc8:	4d1f      	ldr	r5, [pc, #124]	; (8001d48 <Standard_SetEndPointFeature+0x84>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001cca:	6818      	ldr	r0, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001ccc:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001cce:	7941      	ldrb	r1, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8001cd0:	f021 0480 	bic.w	r4, r1, #128	; 0x80
 8001cd4:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001cd6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8001cda:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001cde:	6812      	ldr	r2, [r2, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001ce0:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001ce4:	bf14      	ite	ne
 8001ce6:	f002 0230 	andne.w	r2, r2, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001cea:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001cee:	42ac      	cmp	r4, r5
 8001cf0:	d225      	bcs.n	8001d3e <Standard_SetEndPointFeature+0x7a>
      || pInformation->USBwValue != 0 || Status == 0
 8001cf2:	8844      	ldrh	r4, [r0, #2]
 8001cf4:	bb1c      	cbnz	r4, 8001d3e <Standard_SetEndPointFeature+0x7a>
 8001cf6:	b312      	cbz	r2, 8001d3e <Standard_SetEndPointFeature+0x7a>
      || pInformation->Current_Configuration == 0)
 8001cf8:	7a82      	ldrb	r2, [r0, #10]
 8001cfa:	b302      	cbz	r2, 8001d3e <Standard_SetEndPointFeature+0x7a>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d00:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001d04:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001d06:	0609      	lsls	r1, r1, #24
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001d08:	bf4b      	itete	mi
 8001d0a:	f422 42e0 	bicmi.w	r2, r2, #28672	; 0x7000
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001d0e:	f422 4280 	bicpl.w	r2, r2, #16384	; 0x4000
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001d12:	f022 0240 	bicmi.w	r2, r2, #64	; 0x40
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001d16:	f022 0270 	bicpl.w	r2, r2, #112	; 0x70
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001d1a:	bf4b      	itete	mi
 8001d1c:	b292      	uxthmi	r2, r2
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001d1e:	b292      	uxthpl	r2, r2
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001d20:	f082 0210 	eormi.w	r2, r2, #16
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001d24:	f482 5280 	eorpl.w	r2, r2, #4096	; 0x1000
 8001d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d30:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <Standard_SetEndPointFeature+0x88>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4798      	blx	r3
  return USB_SUCCESS;
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001d3e:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
 8001d42:	bf00      	nop
 8001d44:	20000710 	andcs	r0, r0, r0, lsl r7
 8001d48:	200000e0 	andcs	r0, r0, r0, ror #1
 8001d4c:	2000070c 	andcs	r0, r0, ip, lsl #14

08001d50 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001d50:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <Standard_SetDeviceFeature+0x1c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	7a53      	ldrb	r3, [r2, #9]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <Standard_SetDeviceFeature+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4798      	blx	r3
  return USB_SUCCESS;
}
 8001d66:	2000      	movs	r0, #0
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000710 	andcs	r0, r0, r0, lsl r7
 8001d70:	2000070c 	andcs	r0, r0, ip, lsl #14

08001d74 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <Standard_GetDescriptorData+0x18>)
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
 8001d76:	b510      	push	{r4, lr}
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001d78:	681c      	ldr	r4, [r3, #0]
 8001d7a:	8a62      	ldrh	r2, [r4, #18]
  if (Length == 0)
 8001d7c:	b918      	cbnz	r0, 8001d86 <Standard_GetDescriptorData+0x12>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001d7e:	888b      	ldrh	r3, [r1, #4]
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	8223      	strh	r3, [r4, #16]
    return 0;
 8001d84:	bd10      	pop	{r4, pc}
  }

  return pDesc->Descriptor + wOffset;
 8001d86:	6808      	ldr	r0, [r1, #0]
 8001d88:	4410      	add	r0, r2
}
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	20000710 	andcs	r0, r0, r0, lsl r7

08001d90 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001d90:	b508      	push	{r3, lr}
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <Post0_Process+0x30>)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001d9a:	f000 fb25 	bl	80023e8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <Post0_Process+0x34>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	7a18      	ldrb	r0, [r3, #8]
 8001da4:	2808      	cmp	r0, #8
 8001da6:	d106      	bne.n	8001db6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <Post0_Process+0x38>)
 8001daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dae:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <Post0_Process+0x3c>)
 8001db2:	2210      	movs	r2, #16
 8001db4:	801a      	strh	r2, [r3, #0]
    OTGD_FS_EP0StartXfer(ep);    
  }  
#endif /* STM32F10X_CL */

  return (pInformation->ControlState == PAUSE);
}
 8001db6:	f1a0 0309 	sub.w	r3, r0, #9
 8001dba:	4258      	negs	r0, r3
 8001dbc:	4158      	adcs	r0, r3
 8001dbe:	bd08      	pop	{r3, pc}
 8001dc0:	2000005c 	andcs	r0, r0, ip, asr r0
 8001dc4:	20000710 	andcs	r0, r0, r0, lsl r7
 8001dc8:	20000718 	andcs	r0, r0, r8, lsl r7
 8001dcc:	2000071a 	andcs	r0, r0, sl, lsl r7

08001dd0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8001dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  u16 offset = 1;
  
  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8001dd2:	4d9f      	ldr	r5, [pc, #636]	; (8002050 <Setup0_Process+0x280>)
  ep = PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
#else  
  u16 offset = 1;
  
  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001dd4:	4e9f      	ldr	r6, [pc, #636]	; (8002054 <Setup0_Process+0x284>)
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8001dd6:	682f      	ldr	r7, [r5, #0]
  ep = PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
#else  
  u16 offset = 1;
  
  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001dd8:	6832      	ldr	r2, [r6, #0]
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8001dda:	7a3b      	ldrb	r3, [r7, #8]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d019      	beq.n	8001e14 <Setup0_Process+0x44>
  ep = PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
#else  
  u16 offset = 1;
  
  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001de0:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <Setup0_Process+0x288>)
 8001de2:	b292      	uxth	r2, r2
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	881c      	ldrh	r4, [r3, #0]
 8001dea:	0064      	lsls	r4, r4, #1
 8001dec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001df0:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	703b      	strb	r3, [r7, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001df8:	7863      	ldrb	r3, [r4, #1]
 8001dfa:	707b      	strb	r3, [r7, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001dfc:	88a0      	ldrh	r0, [r4, #4]
 8001dfe:	f000 fb69 	bl	80024d4 <ByteSwap>
 8001e02:	8078      	strh	r0, [r7, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8001e04:	8920      	ldrh	r0, [r4, #8]
 8001e06:	682f      	ldr	r7, [r5, #0]
 8001e08:	f000 fb64 	bl	80024d4 <ByteSwap>
 8001e0c:	80b8      	strh	r0, [r7, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001e0e:	89a2      	ldrh	r2, [r4, #12]
 8001e10:	682b      	ldr	r3, [r5, #0]
 8001e12:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8001e1a:	88da      	ldrh	r2, [r3, #6]
 8001e1c:	785c      	ldrb	r4, [r3, #1]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d159      	bne.n	8001ed6 <Setup0_Process+0x106>
 8001e22:	781a      	ldrb	r2, [r3, #0]
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e24:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001e28:	d13b      	bne.n	8001ea2 <Setup0_Process+0xd2>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001e2a:	2c09      	cmp	r4, #9
 8001e2c:	d102      	bne.n	8001e34 <Setup0_Process+0x64>
    {
      Result = Standard_SetConfiguration();
 8001e2e:	f7ff fe9d 	bl	8001b6c <Standard_SetConfiguration>
 8001e32:	e045      	b.n	8001ec0 <Setup0_Process+0xf0>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001e34:	2c05      	cmp	r4, #5
 8001e36:	d110      	bne.n	8001e5a <Setup0_Process+0x8a>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001e38:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	da01      	bge.n	8001e44 <Setup0_Process+0x74>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001e40:	2308      	movs	r3, #8
 8001e42:	e045      	b.n	8001ed0 <Setup0_Process+0x100>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001e44:	789a      	ldrb	r2, [r3, #2]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d1fa      	bne.n	8001e40 <Setup0_Process+0x70>
          || (pInformation->USBwIndex != 0)
 8001e4a:	889a      	ldrh	r2, [r3, #4]
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d1f7      	bne.n	8001e40 <Setup0_Process+0x70>
          || (pInformation->Current_Configuration != 0))
 8001e50:	7a9b      	ldrb	r3, [r3, #10]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8116 	beq.w	8002084 <Setup0_Process+0x2b4>
 8001e58:	e7f2      	b.n	8001e40 <Setup0_Process+0x70>
         SetDeviceAddress(pInformation->USBwValue0);
      #endif  /* STM32F10X_CL */
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001e5a:	2c03      	cmp	r4, #3
 8001e5c:	d113      	bne.n	8001e86 <Setup0_Process+0xb6>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8001e5e:	78da      	ldrb	r2, [r3, #3]
 8001e60:	2a01      	cmp	r2, #1
 8001e62:	d007      	beq.n	8001e74 <Setup0_Process+0xa4>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001e64:	4b7d      	ldr	r3, [pc, #500]	; (800205c <Setup0_Process+0x28c>)
 8001e66:	4620      	mov	r0, r4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001e6e:	2803      	cmp	r0, #3
 8001e70:	d12a      	bne.n	8001ec8 <Setup0_Process+0xf8>
 8001e72:	e02c      	b.n	8001ece <Setup0_Process+0xfe>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 8001e74:	889a      	ldrh	r2, [r3, #4]
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d1f4      	bne.n	8001e64 <Setup0_Process+0x94>
          && (ValBit(pInformation->Current_Feature, 5)))
 8001e7a:	7a5b      	ldrb	r3, [r3, #9]
 8001e7c:	0698      	lsls	r0, r3, #26
 8001e7e:	d5f1      	bpl.n	8001e64 <Setup0_Process+0x94>
      {
        Result = Standard_SetDeviceFeature();
 8001e80:	f7ff ff66 	bl	8001d50 <Standard_SetDeviceFeature>
 8001e84:	e01c      	b.n	8001ec0 <Setup0_Process+0xf0>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001e86:	2c01      	cmp	r4, #1
 8001e88:	d1ec      	bne.n	8001e64 <Setup0_Process+0x94>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001e8a:	78da      	ldrb	r2, [r3, #3]
 8001e8c:	2a01      	cmp	r2, #1
 8001e8e:	d1e9      	bne.n	8001e64 <Setup0_Process+0x94>
          && pInformation->USBwIndex == 0
 8001e90:	889a      	ldrh	r2, [r3, #4]
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d1e6      	bne.n	8001e64 <Setup0_Process+0x94>
          && ValBit(pInformation->Current_Feature, 5))
 8001e96:	7a5b      	ldrb	r3, [r3, #9]
 8001e98:	0699      	lsls	r1, r3, #26
 8001e9a:	d5e3      	bpl.n	8001e64 <Setup0_Process+0x94>
      {
        Result = Standard_ClearFeature();
 8001e9c:	f7ff fea6 	bl	8001bec <Standard_ClearFeature>
 8001ea0:	e00e      	b.n	8001ec0 <Setup0_Process+0xf0>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d104      	bne.n	8001eb0 <Setup0_Process+0xe0>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001ea6:	2c0b      	cmp	r4, #11
 8001ea8:	d1dc      	bne.n	8001e64 <Setup0_Process+0x94>
    {
      Result = Standard_SetInterface();
 8001eaa:	f7ff fe7b 	bl	8001ba4 <Standard_SetInterface>
 8001eae:	e007      	b.n	8001ec0 <Setup0_Process+0xf0>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001eb0:	2a02      	cmp	r2, #2
 8001eb2:	d1d7      	bne.n	8001e64 <Setup0_Process+0x94>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001eb4:	2c01      	cmp	r4, #1
 8001eb6:	d0f1      	beq.n	8001e9c <Setup0_Process+0xcc>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001eb8:	2c03      	cmp	r4, #3
 8001eba:	d1d3      	bne.n	8001e64 <Setup0_Process+0x94>
    {
      Result = Standard_SetEndPointFeature();
 8001ebc:	f7ff ff02 	bl	8001cc4 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	f000 80df 	beq.w	8002084 <Setup0_Process+0x2b4>
 8001ec6:	e7cd      	b.n	8001e64 <Setup0_Process+0x94>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d1b9      	bne.n	8001e40 <Setup0_Process+0x70>
 8001ecc:	e0da      	b.n	8002084 <Setup0_Process+0x2b4>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8001ece:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001ed0:	682a      	ldr	r2, [r5, #0]
 8001ed2:	7213      	strb	r3, [r2, #8]
 8001ed4:	e0d2      	b.n	800207c <Setup0_Process+0x2ac>

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8001ed6:	2c06      	cmp	r4, #6
 8001ed8:	d115      	bne.n	8001f06 <Setup0_Process+0x136>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	0652      	lsls	r2, r2, #25
 8001ede:	f040 80df 	bne.w	80020a0 <Setup0_Process+0x2d0>
    {
      u8 wValue1 = pInformation->USBwValue1;
 8001ee2:	789a      	ldrb	r2, [r3, #2]
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <Setup0_Process+0x28c>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001ee6:	2a01      	cmp	r2, #1
 8001ee8:	d102      	bne.n	8001ef0 <Setup0_Process+0x120>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	e072      	b.n	8001fd6 <Setup0_Process+0x206>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001ef0:	2a02      	cmp	r2, #2
 8001ef2:	d102      	bne.n	8001efa <Setup0_Process+0x12a>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	e06d      	b.n	8001fd6 <Setup0_Process+0x206>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001efa:	2a03      	cmp	r2, #3
 8001efc:	f040 80d0 	bne.w	80020a0 <Setup0_Process+0x2d0>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	e067      	b.n	8001fd6 <Setup0_Process+0x206>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d141      	bne.n	8001f8e <Setup0_Process+0x1be>
 8001f0a:	8859      	ldrh	r1, [r3, #2]
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	f040 80c7 	bne.w	80020a0 <Setup0_Process+0x2d0>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f18:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001f1c:	f040 80c0 	bne.w	80020a0 <Setup0_Process+0x2d0>
 8001f20:	781a      	ldrb	r2, [r3, #0]
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001f22:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001f26:	d104      	bne.n	8001f32 <Setup0_Process+0x162>
        && (pInformation->USBwIndex == 0))
 8001f28:	889b      	ldrh	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b6 	beq.w	800209c <Setup0_Process+0x2cc>
 8001f30:	e0b6      	b.n	80020a0 <Setup0_Process+0x2d0>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001f32:	2a01      	cmp	r2, #1
 8001f34:	d10b      	bne.n	8001f4e <Setup0_Process+0x17e>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001f36:	4a49      	ldr	r2, [pc, #292]	; (800205c <Setup0_Process+0x28c>)
 8001f38:	7958      	ldrb	r0, [r3, #5]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6992      	ldr	r2, [r2, #24]
 8001f3e:	4790      	blx	r2
 8001f40:	2800      	cmp	r0, #0
 8001f42:	f040 80ad 	bne.w	80020a0 <Setup0_Process+0x2d0>
          && (pInformation->Current_Configuration != 0))
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <Setup0_Process+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	7a9b      	ldrb	r3, [r3, #10]
 8001f4c:	e01b      	b.n	8001f86 <Setup0_Process+0x1b6>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001f4e:	2a02      	cmp	r2, #2
 8001f50:	f040 80a6 	bne.w	80020a0 <Setup0_Process+0x2d0>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001f54:	795a      	ldrb	r2, [r3, #5]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001f56:	4842      	ldr	r0, [pc, #264]	; (8002060 <Setup0_Process+0x290>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001f58:	f002 010f 	and.w	r1, r2, #15
 8001f5c:	008b      	lsls	r3, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001f5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f62:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001f66:	681b      	ldr	r3, [r3, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001f68:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001f6a:	f012 0f80 	tst.w	r2, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001f6e:	bf14      	ite	ne
 8001f70:	f003 0330 	andne.w	r3, r3, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001f74:	f403 5340 	andeq.w	r3, r3, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001f78:	4281      	cmp	r1, r0
 8001f7a:	f080 8091 	bcs.w	80020a0 <Setup0_Process+0x2d0>
 8001f7e:	f012 0f70 	tst.w	r2, #112	; 0x70
 8001f82:	f040 808d 	bne.w	80020a0 <Setup0_Process+0x2d0>
          && (Status != 0))
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8088 	bne.w	800209c <Setup0_Process+0x2cc>
 8001f8c:	e088      	b.n	80020a0 <Setup0_Process+0x2d0>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001f8e:	2c08      	cmp	r4, #8
 8001f90:	d105      	bne.n	8001f9e <Setup0_Process+0x1ce>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	065b      	lsls	r3, r3, #25
 8001f96:	f040 8083 	bne.w	80020a0 <Setup0_Process+0x2d0>
    {
      CopyRoutine = Standard_GetConfiguration;
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <Setup0_Process+0x294>)
 8001f9c:	e01d      	b.n	8001fda <Setup0_Process+0x20a>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001f9e:	2c0a      	cmp	r4, #10
 8001fa0:	d17e      	bne.n	80020a0 <Setup0_Process+0x2d0>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fa8:	2a01      	cmp	r2, #1
 8001faa:	d179      	bne.n	80020a0 <Setup0_Process+0x2d0>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001fac:	7a9a      	ldrb	r2, [r3, #10]
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	d076      	beq.n	80020a0 <Setup0_Process+0x2d0>
 8001fb2:	8859      	ldrh	r1, [r3, #2]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d173      	bne.n	80020a0 <Setup0_Process+0x2d0>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001fbe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001fc2:	d16d      	bne.n	80020a0 <Setup0_Process+0x2d0>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <Setup0_Process+0x28c>)
 8001fc6:	7958      	ldrb	r0, [r3, #5]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	6992      	ldr	r2, [r2, #24]
 8001fcc:	4790      	blx	r2
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d166      	bne.n	80020a0 <Setup0_Process+0x2d0>
    {
      CopyRoutine = Standard_GetInterface;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <Setup0_Process+0x298>)
 8001fd4:	e001      	b.n	8001fda <Setup0_Process+0x20a>
    }

  }
  
  if (CopyRoutine)
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d062      	beq.n	80020a0 <Setup0_Process+0x2d0>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001fda:	682a      	ldr	r2, [r5, #0]
 8001fdc:	2400      	movs	r4, #0
 8001fde:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001fe0:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001fe6:	4620      	mov	r0, r4
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	8a1a      	ldrh	r2, [r3, #16]
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d101      	bne.n	8001ff8 <Setup0_Process+0x228>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	e003      	b.n	8002000 <Setup0_Process+0x230>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001ff8:	2802      	cmp	r0, #2
 8001ffa:	d000      	beq.n	8001ffe <Setup0_Process+0x22e>
 8001ffc:	b912      	cbnz	r2, 8002004 <Setup0_Process+0x234>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001ffe:	2208      	movs	r2, #8
 8002000:	721a      	strb	r2, [r3, #8]
 8002002:	e03b      	b.n	800207c <Setup0_Process+0x2ac>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8002004:	f993 1000 	ldrsb.w	r1, [r3]
 8002008:	2900      	cmp	r1, #0
 800200a:	da31      	bge.n	8002070 <Setup0_Process+0x2a0>
  {
    /* Device ==> Host */
    __IO u32 wLength = pInformation->USBwLength;
 800200c:	88d9      	ldrh	r1, [r3, #6]
 800200e:	4c13      	ldr	r4, [pc, #76]	; (800205c <Setup0_Process+0x28c>)
 8002010:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8002012:	9801      	ldr	r0, [sp, #4]
 8002014:	4282      	cmp	r2, r0
 8002016:	d902      	bls.n	800201e <Setup0_Process+0x24e>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8002018:	9a01      	ldr	r2, [sp, #4]
 800201a:	821a      	strh	r2, [r3, #16]
 800201c:	e010      	b.n	8002040 <Setup0_Process+0x270>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800201e:	428a      	cmp	r2, r1
 8002020:	d20e      	bcs.n	8002040 <Setup0_Process+0x270>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002022:	6821      	ldr	r1, [r4, #0]
 8002024:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8002028:	4282      	cmp	r2, r0
 800202a:	d201      	bcs.n	8002030 <Setup0_Process+0x260>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800202c:	2100      	movs	r1, #0
 800202e:	e005      	b.n	800203c <Setup0_Process+0x26c>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002030:	fb92 f1f0 	sdiv	r1, r2, r0
 8002034:	fb00 2211 	mls	r2, r0, r1, r2
 8002038:	b912      	cbnz	r2, 8002040 <Setup0_Process+0x270>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800203a:	2101      	movs	r1, #1
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <Setup0_Process+0x29c>)
 800203e:	7011      	strb	r1, [r2, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002046:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8002048:	f7ff fd3a 	bl	8001ac0 <DataStageIn>
 800204c:	e016      	b.n	800207c <Setup0_Process+0x2ac>
 800204e:	bf00      	nop
 8002050:	20000710 	andcs	r0, r0, r0, lsl r7
 8002054:	40005c50 	andmi	r5, r0, r0, asr ip
 8002058:	20003004 	andcs	r3, r0, r4
 800205c:	200006e8 	andcs	r0, r0, r8, ror #13
 8002060:	200000e0 	andcs	r0, r0, r0, ror #1
 8002064:	080019e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, fp, ip}
 8002068:	08001a0d 	stmdaeq	r0, {r0, r2, r3, r9, fp, ip}
 800206c:	2000012c 	andcs	r0, r0, ip, lsr #2
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002070:	2203      	movs	r2, #3
 8002072:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <Setup0_Process+0x2e8>)
 8002076:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800207a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800207c:	f7ff fe88 	bl	8001d90 <Post0_Process>
}
 8002080:	b003      	add	sp, #12
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002084:	6832      	ldr	r2, [r6, #0]
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <Setup0_Process+0x2ec>)
 8002088:	b292      	uxth	r2, r2
 800208a:	4413      	add	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <Setup0_Process+0x2f0>)
 8002094:	2230      	movs	r2, #48	; 0x30
 8002096:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8002098:	2306      	movs	r3, #6
 800209a:	e719      	b.n	8001ed0 <Setup0_Process+0x100>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <Setup0_Process+0x2f4>)
 800209e:	e79c      	b.n	8001fda <Setup0_Process+0x20a>
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <Setup0_Process+0x2f8>)
 80020a2:	682a      	ldr	r2, [r5, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	7850      	ldrb	r0, [r2, #1]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80020ac:	2803      	cmp	r0, #3
 80020ae:	d19b      	bne.n	8001fe8 <Setup0_Process+0x218>
    {
      pInformation->ControlState = PAUSE;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <Setup0_Process+0x2fc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	e79e      	b.n	8001ff4 <Setup0_Process+0x224>
 80020b6:	bf00      	nop
 80020b8:	20000718 	andcs	r0, r0, r8, lsl r7
 80020bc:	20003002 	andcs	r3, r0, r2
 80020c0:	2000071a 	andcs	r0, r0, sl, lsl r7
 80020c4:	08001a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, ip}
 80020c8:	200006e8 	andcs	r0, r0, r8, ror #13
 80020cc:	20000710 	andcs	r0, r0, r0, lsl r7

080020d0 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 80020d2:	4d2c      	ldr	r5, [pc, #176]	; (8002184 <Out0_Process+0xb4>)
 80020d4:	682c      	ldr	r4, [r5, #0]
 80020d6:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d04b      	beq.n	8002174 <Out0_Process+0xa4>
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d049      	beq.n	8002174 <Out0_Process+0xa4>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d001      	beq.n	80020e8 <Out0_Process+0x18>
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d13f      	bne.n	8002168 <Out0_Process+0x98>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80020e8:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80020ea:	8a26      	ldrh	r6, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80020ec:	b1a9      	cbz	r1, 800211a <Out0_Process+0x4a>
 80020ee:	b1a6      	cbz	r6, 800211a <Out0_Process+0x4a>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80020f0:	8aa3      	ldrh	r3, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80020f2:	429e      	cmp	r6, r3
 80020f4:	bf28      	it	cs
 80020f6:	461e      	movcs	r6, r3
 80020f8:	4630      	mov	r0, r6
 80020fa:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 80020fc:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80020fe:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8002100:	1b9b      	subs	r3, r3, r6
 8002102:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002104:	8a63      	ldrh	r3, [r4, #18]

  #ifdef STM32F10X_CL  
    PCD_EP_Read(ENDP0, Buffer, Length); 
  #else  
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002106:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8002108:	4433      	add	r3, r6
 800210a:	8263      	strh	r3, [r4, #18]

  #ifdef STM32F10X_CL  
    PCD_EP_Read(ENDP0, Buffer, Length); 
  #else  
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800210c:	f000 f9ce 	bl	80024ac <GetEPRxAddr>
 8002110:	4632      	mov	r2, r6
 8002112:	4601      	mov	r1, r0
 8002114:	4638      	mov	r0, r7
 8002116:	f000 f8a2 	bl	800225e <PMAToUserBufferCopy>
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
 800211a:	8a23      	ldrh	r3, [r4, #16]
 800211c:	b153      	cbz	r3, 8002134 <Out0_Process+0x64>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <Out0_Process+0xb8>)
    SetEPTxCount(ENDP0, 0);
 8002120:	2100      	movs	r1, #0
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002122:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8002126:	4608      	mov	r0, r1
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002128:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800212a:	f000 f94f 	bl	80023cc <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <Out0_Process+0xbc>)
 8002130:	2230      	movs	r2, #48	; 0x30
 8002132:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002134:	8aa3      	ldrh	r3, [r4, #20]
 8002136:	8a22      	ldrh	r2, [r4, #16]
 8002138:	4293      	cmp	r3, r2
  {
    pInformation->ControlState = OUT_DATA;
 800213a:	682b      	ldr	r3, [r5, #0]
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800213c:	d801      	bhi.n	8002142 <Out0_Process+0x72>
  {
    pInformation->ControlState = OUT_DATA;
 800213e:	2203      	movs	r2, #3
 8002140:	e001      	b.n	8002146 <Out0_Process+0x76>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002142:	b112      	cbz	r2, 800214a <Out0_Process+0x7a>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002144:	2205      	movs	r2, #5
 8002146:	721a      	strb	r2, [r3, #8]
 8002148:	e00b      	b.n	8002162 <Out0_Process+0x92>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800214a:	2106      	movs	r1, #6
 800214c:	7219      	strb	r1, [r3, #8]
      USB_StatusIn();
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <Out0_Process+0xc0>)
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <Out0_Process+0xc4>)
 8002154:	b289      	uxth	r1, r1
 8002156:	440b      	add	r3, r1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <Out0_Process+0xbc>)
 800215e:	2230      	movs	r2, #48	; 0x30
 8002160:	801a      	strh	r2, [r3, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	7a1b      	ldrb	r3, [r3, #8]
 8002166:	e006      	b.n	8002176 <Out0_Process+0xa6>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002168:	2b07      	cmp	r3, #7
 800216a:	d103      	bne.n	8002174 <Out0_Process+0xa4>
  {
    (*pProperty->Process_Status_OUT)();
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <Out0_Process+0xc8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4798      	blx	r3
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8002174:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002176:	682a      	ldr	r2, [r5, #0]
 8002178:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800217a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800217e:	f7ff be07 	b.w	8001d90 <Post0_Process>
 8002182:	bf00      	nop
 8002184:	20000710 	andcs	r0, r0, r0, lsl r7
 8002188:	20000718 	andcs	r0, r0, r8, lsl r7
 800218c:	2000071a 	andcs	r0, r0, sl, lsl r7
 8002190:	40005c50 	andmi	r5, r0, r0, asr ip
 8002194:	20003002 	andcs	r3, r0, r2
 8002198:	200006e8 	andcs	r0, r0, r8, ror #13

0800219c <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 800219c:	b570      	push	{r4, r5, r6, lr}
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((u8)Val);
#else 
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <SetDeviceAddress+0x38>)

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80021a0:	2200      	movs	r2, #0
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((u8)Val);
#else 
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 80021a2:	781d      	ldrb	r5, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80021a4:	42aa      	cmp	r2, r5
 80021a6:	d210      	bcs.n	80021ca <SetDeviceAddress+0x2e>
  {
    _SetEPAddress((u8)i, (u8)i);
 80021a8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80021ac:	f102 5380 	add.w	r3, r2, #268435456	; 0x10000000
 80021b0:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	681e      	ldr	r6, [r3, #0]
 80021b8:	f442 4400 	orr.w	r4, r2, #32768	; 0x8000
 80021bc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80021c0:	4031      	ands	r1, r6
 80021c2:	4321      	orrs	r1, r4
 80021c4:	6019      	str	r1, [r3, #0]
#else 
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80021c6:	3201      	adds	r2, #1
 80021c8:	e7ec      	b.n	80021a4 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <SetDeviceAddress+0x3c>)
 80021cc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80021d0:	6018      	str	r0, [r3, #0]
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	200000e0 	andcs	r0, r0, r0, ror #1
 80021d8:	40005c4c 	andmi	r5, r0, ip, asr #24

080021dc <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 80021dc:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 80021de:	4c13      	ldr	r4, [pc, #76]	; (800222c <In0_Process+0x50>)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80021e4:	2a02      	cmp	r2, #2
 80021e6:	d001      	beq.n	80021ec <In0_Process+0x10>
 80021e8:	2a04      	cmp	r2, #4
 80021ea:	d104      	bne.n	80021f6 <In0_Process+0x1a>
  {
    DataStageIn();
 80021ec:	f7ff fc68 	bl	8001ac0 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	7a1b      	ldrb	r3, [r3, #8]
 80021f4:	e013      	b.n	800221e <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80021f6:	2a06      	cmp	r2, #6
 80021f8:	d110      	bne.n	800221c <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80021fa:	785a      	ldrb	r2, [r3, #1]
 80021fc:	2a05      	cmp	r2, #5
 80021fe:	d109      	bne.n	8002214 <In0_Process+0x38>
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	0652      	lsls	r2, r2, #25
 8002204:	d106      	bne.n	8002214 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002206:	78d8      	ldrb	r0, [r3, #3]
 8002208:	f7ff ffc8 	bl	800219c <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <In0_Process+0x54>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <In0_Process+0x58>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 800221c:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8002222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8002226:	f7ff bdb3 	b.w	8001d90 <Post0_Process>
 800222a:	bf00      	nop
 800222c:	20000710 	andcs	r0, r0, r0, lsl r7
 8002230:	2000070c 	andcs	r0, r0, ip, lsl #14
 8002234:	200006e8 	andcs	r0, r0, r8, ror #13

08002238 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002238:	4770      	bx	lr

0800223a <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 800223a:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 800223c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002240:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8002242:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002246:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8002248:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800224a:	2300      	movs	r3, #0
 800224c:	429a      	cmp	r2, r3
 800224e:	d005      	beq.n	800225c <UserToPMABufferCopy+0x22>
 8002250:	f830 4b02 	ldrh.w	r4, [r0], #2
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8002254:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8002258:	3301      	adds	r3, #1
 800225a:	e7f7      	b.n	800224c <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800225c:	bd10      	pop	{r4, pc}

0800225e <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 800225e:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8002260:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8002264:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8002266:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 800226a:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800226c:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800226e:	2300      	movs	r3, #0
 8002270:	429a      	cmp	r2, r3
 8002272:	d005      	beq.n	8002280 <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8002274:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002278:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 800227c:	3301      	adds	r3, #1
 800227e:	e7f7      	b.n	8002270 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8002280:	bd10      	pop	{r4, pc}
	...

08002284 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(u16 wRegValue)
{
  _SetBTABLE(wRegValue);
 8002284:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002288:	4a01      	ldr	r2, [pc, #4]	; (8002290 <SetBTABLE+0xc>)
 800228a:	4003      	ands	r3, r0
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4770      	bx	lr
 8002290:	40005c50 	andmi	r5, r0, r0, asr ip

08002294 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(u8 bEpNum, u16 wType)
{
  _SetEPType(bEpNum, wType);
 8002294:	0080      	lsls	r0, r0, #2
 8002296:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800229a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800229e:	6803      	ldr	r3, [r0, #0]
 80022a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a8:	4319      	orrs	r1, r3
 80022aa:	b289      	uxth	r1, r1
 80022ac:	6001      	str	r1, [r0, #0]
 80022ae:	4770      	bx	lr

080022b0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80022b0:	0080      	lsls	r0, r0, #2
 80022b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80022b6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80022ba:	6803      	ldr	r3, [r0, #0]
 80022bc:	06ca      	lsls	r2, r1, #27
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	bf48      	it	mi
 80022ca:	f083 0310 	eormi.w	r3, r3, #16
 80022ce:	068a      	lsls	r2, r1, #26
 80022d0:	bf48      	it	mi
 80022d2:	f083 0320 	eormi.w	r3, r3, #32
 80022d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022de:	6003      	str	r3, [r0, #0]
 80022e0:	4770      	bx	lr

080022e2 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(u8 bEpNum, u16 wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80022e2:	0080      	lsls	r0, r0, #2
 80022e4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80022e8:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80022ec:	6803      	ldr	r3, [r0, #0]
 80022ee:	04ca      	lsls	r2, r1, #19
 80022f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	bf48      	it	mi
 80022fc:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8002300:	048a      	lsls	r2, r1, #18
 8002302:	bf48      	it	mi
 8002304:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8002308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6003      	str	r3, [r0, #0]
 8002312:	4770      	bx	lr

08002314 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(u8 bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002314:	0080      	lsls	r0, r0, #2
 8002316:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800231a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800231e:	6803      	ldr	r3, [r0, #0]
 8002320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002328:	b29b      	uxth	r3, r3
 800232a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002336:	6003      	str	r3, [r0, #0]
 8002338:	4770      	bx	lr

0800233a <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800233a:	0080      	lsls	r0, r0, #2
 800233c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002340:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002344:	6803      	ldr	r3, [r0, #0]
 8002346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	b29b      	uxth	r3, r3
 8002350:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	6003      	str	r3, [r0, #0]
 800235e:	4770      	bx	lr

08002360 <ClearEPDoubleBuff>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEPDoubleBuff(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8002360:	0080      	lsls	r0, r0, #2
 8002362:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002366:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800236a:	6803      	ldr	r3, [r0, #0]
 800236c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	0d1b      	lsrs	r3, r3, #20
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6003      	str	r3, [r0, #0]
 800237e:	4770      	bx	lr

08002380 <Clear_Status_Out>:
 8002380:	f7ff bfee 	b.w	8002360 <ClearEPDoubleBuff>

08002384 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002384:	0080      	lsls	r0, r0, #2
 8002386:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800238a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800238e:	6803      	ldr	r3, [r0, #0]
 8002390:	045b      	lsls	r3, r3, #17
 8002392:	d508      	bpl.n	80023a6 <ClearDTOG_RX+0x22>
 8002394:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002398:	6802      	ldr	r2, [r0, #0]
 800239a:	4013      	ands	r3, r2
 800239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a4:	6003      	str	r3, [r0, #0]
 80023a6:	4770      	bx	lr

080023a8 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80023a8:	0080      	lsls	r0, r0, #2
 80023aa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80023ae:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80023b2:	6803      	ldr	r3, [r0, #0]
 80023b4:	065b      	lsls	r3, r3, #25
 80023b6:	d508      	bpl.n	80023ca <ClearDTOG_TX+0x22>
 80023b8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023c8:	6003      	str	r3, [r0, #0]
 80023ca:	4770      	bx	lr

080023cc <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SetEPTxCount+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <SetEPTxCount+0x18>)
 80023d8:	4403      	add	r3, r0
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	6019      	str	r1, [r3, #0]
 80023de:	4770      	bx	lr
 80023e0:	40005c50 	andmi	r5, r0, r0, asr ip
 80023e4:	20003002 	andcs	r3, r0, r2

080023e8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <SetEPRxCount+0x38>)
 80023ea:	293e      	cmp	r1, #62	; 0x3e
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <SetEPRxCount+0x3c>)
 80023f6:	4403      	add	r3, r0
 80023f8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80023fc:	d909      	bls.n	8002412 <SetEPRxCount+0x2a>
 80023fe:	094b      	lsrs	r3, r1, #5
 8002400:	06c8      	lsls	r0, r1, #27
 8002402:	bf04      	itt	eq
 8002404:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8002408:	b29b      	uxtheq	r3, r3
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	e004      	b.n	800241c <SetEPRxCount+0x34>
 8002412:	084b      	lsrs	r3, r1, #1
 8002414:	07c9      	lsls	r1, r1, #31
 8002416:	bf48      	it	mi
 8002418:	3301      	addmi	r3, #1
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4770      	bx	lr
 8002420:	40005c50 	andmi	r5, r0, r0, asr ip
 8002424:	20003006 	andcs	r3, r0, r6

08002428 <SetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
{
  _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SetEPDblBuf0Addr+0x1c>)
 800242a:	0849      	lsrs	r1, r1, #1
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0049      	lsls	r1, r1, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002436:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800243a:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800243e:	0040      	lsls	r0, r0, #1
 8002440:	6001      	str	r1, [r0, #0]
 8002442:	4770      	bx	lr
 8002444:	40005c50 	andmi	r5, r0, r0, asr ip

08002448 <SetEPTxAddr>:
 8002448:	f7ff bfee 	b.w	8002428 <SetEPDblBuf0Addr>

0800244c <SetEPDblBuf1Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
{
  _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SetEPDblBuf1Addr+0x18>)
 800244e:	0849      	lsrs	r1, r1, #1
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0049      	lsls	r1, r1, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <SetEPDblBuf1Addr+0x1c>)
 800245c:	4403      	add	r3, r0
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	6019      	str	r1, [r3, #0]
 8002462:	4770      	bx	lr
 8002464:	40005c50 	andmi	r5, r0, r0, asr ip
 8002468:	20003004 	andcs	r3, r0, r4

0800246c <SetEPRxAddr>:
 800246c:	f7ff bfee 	b.w	800244c <SetEPDblBuf1Addr>

08002470 <GetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
u16 GetEPDblBuf0Addr(u8 bEpNum)
{
  return(_GetEPDblBuf0Addr(bEpNum));
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <GetEPDblBuf0Addr+0x18>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800247a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800247e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8002482:	0040      	lsls	r0, r0, #1
}
 8002484:	8800      	ldrh	r0, [r0, #0]
 8002486:	4770      	bx	lr
 8002488:	40005c50 	andmi	r5, r0, r0, asr ip

0800248c <GetEPTxAddr>:
 800248c:	f7ff bff0 	b.w	8002470 <GetEPDblBuf0Addr>

08002490 <GetEPDblBuf1Addr>:
* Output         : None.
* Return         : Address of the Buffer 1.
*******************************************************************************/
u16 GetEPDblBuf1Addr(u8 bEpNum)
{
  return(_GetEPDblBuf1Addr(bEpNum));
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <GetEPDblBuf1Addr+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <GetEPDblBuf1Addr+0x18>)
 800249c:	4403      	add	r3, r0
 800249e:	005b      	lsls	r3, r3, #1
}
 80024a0:	8818      	ldrh	r0, [r3, #0]
 80024a2:	4770      	bx	lr
 80024a4:	40005c50 	andmi	r5, r0, r0, asr ip
 80024a8:	20003004 	andcs	r3, r0, r4

080024ac <GetEPRxAddr>:
 80024ac:	f7ff bff0 	b.w	8002490 <GetEPDblBuf1Addr>

080024b0 <GetEPDblBuf1Count>:
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
u16 GetEPDblBuf1Count(u8 bEpNum)
{
  return(_GetEPDblBuf1Count(bEpNum));
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <GetEPDblBuf1Count+0x18>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <GetEPDblBuf1Count+0x1c>)
 80024bc:	4403      	add	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	6818      	ldr	r0, [r3, #0]
}
 80024c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80024c6:	4770      	bx	lr
 80024c8:	40005c50 	andmi	r5, r0, r0, asr ip
 80024cc:	20003006 	andcs	r3, r0, r6

080024d0 <GetEPRxCount>:
 80024d0:	f7ff bfee 	b.w	80024b0 <GetEPDblBuf1Count>

080024d4 <ByteSwap>:
{
  u8 bTemp;
  u16 wRet;
  bTemp = (u8)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((u16)bTemp << 8);
  return(wRet);
 80024d4:	b2c3      	uxtb	r3, r0
 80024d6:	0a00      	lsrs	r0, r0, #8
}
 80024d8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80024dc:	4770      	bx	lr
	...

080024e0 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <USB_SIL_Init+0x14>)
 80024e2:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <USB_SIL_Init+0x18>)
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80024e6:	6018      	str	r0, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 80024e8:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 80024ec:	8013      	strh	r3, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80024ee:	4a03      	ldr	r2, [pc, #12]	; (80024fc <USB_SIL_Init+0x1c>)
 80024f0:	6013      	str	r3, [r2, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 80024f2:	4770      	bx	lr
 80024f4:	40005c44 	andmi	r5, r0, r4, asr #24
 80024f8:	20000714 	andcs	r0, r0, r4, lsl r7
 80024fc:	40005c40 	andmi	r5, r0, r0, asr #24

08002500 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
u32 USB_SIL_Read(u8 bEpAddr, u8* pBufferPointer)
{
 8002500:	b570      	push	{r4, r5, r6, lr}
  u32 DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002502:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002506:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
u32 USB_SIL_Read(u8 bEpAddr, u8* pBufferPointer)
{
 8002508:	460e      	mov	r6, r1
  u32 DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800250a:	f7ff ffe1 	bl	80024d0 <GetEPRxCount>
 800250e:	4604      	mov	r4, r0

  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002510:	4628      	mov	r0, r5
 8002512:	f7ff ffcb 	bl	80024ac <GetEPRxAddr>
 8002516:	4622      	mov	r2, r4
 8002518:	4601      	mov	r1, r0
 800251a:	4630      	mov	r0, r6
 800251c:	f7ff fe9f 	bl	800225e <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 8002520:	4620      	mov	r0, r4
 8002522:	bd70      	pop	{r4, r5, r6, pc}

08002524 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO u16 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8002528:	4e53      	ldr	r6, [pc, #332]	; (8002678 <CTR_LP+0x154>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO u16 wEPVal = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	46b0      	mov	r8, r6
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800252e:	4f53      	ldr	r7, [pc, #332]	; (800267c <CTR_LP+0x158>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO u16 wEPVal = 0;
 8002530:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4a52      	ldr	r2, [pc, #328]	; (8002680 <CTR_LP+0x15c>)
 8002538:	b299      	uxth	r1, r3
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	8011      	strh	r1, [r2, #0]
 800253e:	f140 8098 	bpl.w	8002672 <CTR_LP+0x14e>
  {
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8002542:	8813      	ldrh	r3, [r2, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	7033      	strb	r3, [r6, #0]
    if (EPindex == 0)
 800254a:	2b00      	cmp	r3, #0
 800254c:	d163      	bne.n	8002616 <CTR_LP+0xf2>

      /* save RX & TX status */
      /* and set both to NAK */


	    SaveRState = _GetENDPOINT(ENDP0);
 800254e:	4c4d      	ldr	r4, [pc, #308]	; (8002684 <CTR_LP+0x160>)
 8002550:	4d4d      	ldr	r5, [pc, #308]	; (8002688 <CTR_LP+0x164>)
 8002552:	6823      	ldr	r3, [r4, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <CTR_LP+0x168>)

      /* save RX & TX status */
      /* and set both to NAK */


	    SaveRState = _GetENDPOINT(ENDP0);
 8002556:	b29b      	uxth	r3, r3
 8002558:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800255a:	882b      	ldrh	r3, [r5, #0]
 800255c:	4689      	mov	r9, r1
 800255e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002562:	800b      	strh	r3, [r1, #0]
	    SaveRState &=  EPRX_STAT;	
 8002564:	882b      	ldrh	r3, [r5, #0]
 8002566:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800256a:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800256c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	4003      	ands	r3, r0
 8002574:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002578:	f083 0320 	eor.w	r3, r3, #32
 800257c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002584:	6023      	str	r3, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002586:	8813      	ldrh	r3, [r2, #0]
 8002588:	f013 0f10 	tst.w	r3, #16
 800258c:	d107      	bne.n	800259e <CTR_LP+0x7a>

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */


        _ClearEP_CTR_TX(ENDP0);
 800258e:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	4013      	ands	r3, r2
 8002596:	6023      	str	r3, [r4, #0]
        In0_Process();
 8002598:	f7ff fe20 	bl	80021dc <In0_Process>
 800259c:	e01a      	b.n	80025d4 <CTR_LP+0xb0>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 80025a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80025aa:	051a      	lsls	r2, r3, #20
 80025ac:	d507      	bpl.n	80025be <CTR_LP+0x9a>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80025ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025b2:	6822      	ldr	r2, [r4, #0]
 80025b4:	4013      	ands	r3, r2
 80025b6:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 80025b8:	f7ff fc0a 	bl	8001dd0 <Setup0_Process>
 80025bc:	e00a      	b.n	80025d4 <CTR_LP+0xb0>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 80025be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	d5b6      	bpl.n	8002534 <CTR_LP+0x10>
        {
          _ClearEP_CTR_RX(ENDP0);
 80025c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	4013      	ands	r3, r2
 80025ce:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80025d0:	f7ff fd7e 	bl	80020d0 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80025d4:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	4013      	ands	r3, r2
 80025dc:	882a      	ldrh	r2, [r5, #0]
 80025de:	04d6      	lsls	r6, r2, #19
 80025e0:	882a      	ldrh	r2, [r5, #0]
 80025e2:	bf48      	it	mi
 80025e4:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 80025e8:	0495      	lsls	r5, r2, #18
 80025ea:	f8b9 2000 	ldrh.w	r2, [r9]
 80025ee:	bf48      	it	mi
 80025f0:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 80025f4:	06d4      	lsls	r4, r2, #27
 80025f6:	f8b9 2000 	ldrh.w	r2, [r9]
 80025fa:	bf48      	it	mi
 80025fc:	f083 0310 	eormi.w	r3, r3, #16
 8002600:	0690      	lsls	r0, r2, #26
 8002602:	bf48      	it	mi
 8002604:	f083 0320 	eormi.w	r3, r3, #32
 8002608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <CTR_LP+0x160>)
 800260e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002612:	6013      	str	r3, [r2, #0]
          return;
 8002614:	e02d      	b.n	8002672 <CTR_LP+0x14e>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002616:	009a      	lsls	r2, r3, #2
 8002618:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800261c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	b289      	uxth	r1, r1
 8002624:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002628:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800262c:	0409      	lsls	r1, r1, #16
 800262e:	d509      	bpl.n	8002644 <CTR_LP+0x120>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002630:	f640 718f 	movw	r1, #3983	; 0xf8f
 8002634:	6810      	ldr	r0, [r2, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002636:	3b01      	subs	r3, #1
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002638:	4001      	ands	r1, r0
 800263a:	6011      	str	r1, [r2, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <CTR_LP+0x16c>)
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002644:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002648:	061a      	lsls	r2, r3, #24
 800264a:	f57f af73 	bpl.w	8002534 <CTR_LP+0x10>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800264e:	f648 710f 	movw	r1, #36623	; 0x8f0f
 8002652:	f898 2000 	ldrb.w	r2, [r8]
 8002656:	0093      	lsls	r3, r2, #2
 8002658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800265c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002660:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002662:	3a01      	subs	r2, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002664:	4001      	ands	r1, r0
 8002666:	6019      	str	r1, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <CTR_LP+0x170>)
 800266a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266e:	4798      	blx	r3
 8002670:	e760      	b.n	8002534 <CTR_LP+0x10>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002672:	b003      	add	sp, #12
 8002674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002678:	200006ec 	andcs	r0, r0, ip, ror #13
 800267c:	40005c44 	andmi	r5, r0, r4, asr #24
 8002680:	200006e2 	andcs	r0, r0, r2, ror #13
 8002684:	40005c00 	andmi	r5, r0, r0, lsl #24
 8002688:	20000718 	andcs	r0, r0, r8, lsl r7
 800268c:	2000071a 	andcs	r0, r0, sl, lsl r7
 8002690:	2000001c 	andcs	r0, r0, ip, lsl r0
 8002694:	20000038 	andcs	r0, r0, r8, lsr r0

08002698 <CSWTCH.61>:
 8002698:	00000960 	andeq	r0, r0, r0, ror #18
 800269c:	0000e100 	andeq	lr, r0, r0, lsl #2
 80026a0:	0001c200 	andeq	ip, r1, r0, lsl #4
 80026a4:	000f4240 	andeq	r4, pc, r0, asr #4
 80026a8:	001e8480 	andseq	r8, lr, r0, lsl #9
 80026ac:	002dc6c0 	eoreq	ip, sp, r0, asr #13
 80026b0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80026b4:	0044aa20 	subeq	sl, r4, r0, lsr #20
 80026b8:	00a037a0 	adceq	r3, r0, r0, lsr #15

080026bc <Virtual_Com_Port_StringProduct>:
 80026bc:	00520332 	subseq	r0, r2, r2, lsr r3
 80026c0:	0042004f 	subeq	r0, r2, pc, asr #32
 80026c4:	0054004f 	subseq	r0, r4, pc, asr #32
 80026c8:	00530049 	subseq	r0, r3, r9, asr #32
 80026cc:	00560020 	subseq	r0, r6, r0, lsr #32
 80026d0:	00720069 	rsbseq	r0, r2, r9, rrx
 80026d4:	00750074 	rsbseq	r0, r5, r4, ror r0
 80026d8:	006c0061 	rsbeq	r0, ip, r1, rrx
 80026dc:	00430020 	subeq	r0, r3, r0, lsr #32
 80026e0:	004d004f 	subeq	r0, sp, pc, asr #32
 80026e4:	00500020 	subseq	r0, r0, r0, lsr #32
 80026e8:	0072006f 	rsbseq	r0, r2, pc, rrx
 80026ec:	03120074 	tsteq	r2, #116	; 0x74

080026ee <Virtual_Com_Port_StringVendor>:
 80026ee:	00430312 	subeq	r0, r3, r2, lsl r3
 80026f2:	002d004d 	eoreq	r0, sp, sp, asr #32
 80026f6:	00300039 	eorseq	r0, r0, r9, lsr r0
 80026fa:	00200030 	eoreq	r0, r0, r0, lsr r0
 80026fe:	03040020 	movweq	r0, #16416	; 0x4020

08002700 <Virtual_Com_Port_StringLangID>:
 8002700:	04090304 	streq	r0, [r9], #-772	; 0xfffffcfc

08002704 <Virtual_Com_Port_ConfigDescriptor>:
 8002704:	00430209 	subeq	r0, r3, r9, lsl #4
 8002708:	80000102 	andhi	r0, r0, r2, lsl #2
 800270c:	00040900 	andeq	r0, r4, r0, lsl #18
 8002710:	02020100 	andeq	r0, r2, #0, 2
 8002714:	24050001 	strcs	r0, [r5], #-1
 8002718:	05011000 	streq	r1, [r1, #-0]
 800271c:	01000124 	tsteq	r0, r4, lsr #2
 8002720:	02022404 	andeq	r2, r2, #4, 8	; 0x4000000
 8002724:	00062405 	andeq	r2, r6, r5, lsl #8
 8002728:	82050701 	andhi	r0, r5, #262144	; 0x40000
 800272c:	ff000803 			; <UNDEFINED> instruction: 0xff000803
 8002730:	00010409 	andeq	r0, r1, r9, lsl #8
 8002734:	00000a02 	andeq	r0, r0, r2, lsl #20
 8002738:	03050700 	movweq	r0, #22272	; 0x5700
 800273c:	00004002 	andeq	r4, r0, r2
 8002740:	02810507 	addeq	r0, r1, #29360128	; 0x1c00000
 8002744:	12000040 	andne	r0, r0, #64	; 0x40

08002747 <Virtual_Com_Port_DeviceDescriptor>:
 8002747:	02000112 	andeq	r0, r0, #-2147483644	; 0x80000004
 800274b:	40000002 	andmi	r0, r0, r2
 800274f:	ff48fff1 			; <UNDEFINED> instruction: 0xff48fff1
 8002753:	02010200 	andeq	r0, r1, #0, 4
 8002757:	00000100 	andeq	r0, r0, r0, lsl #2

08002759 <APBAHBPrescTable>:
 8002759:	00000000 	andeq	r0, r0, r0
 800275d:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 8002761:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 8002765:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

08002769 <ADCPrescTable>:
 8002769:	08060402 	stmdaeq	r6, {r1, sl}
 800276d:	4c265441 	cfstrsmi	mvf5, [r6], #-260	; 0xfffffefc
 8002771:	65520044 	ldrbvs	r0, [r2, #-68]	; 0xffffffbc
 8002775:	2e796461 	cdpcs	4, 7, cr6, cr9, cr1, {3}
 8002779:	53000a2e 	movwpl	r0, #2606	; 0xa2e
 800277d:	65636375 	strbvs	r6, [r3, #-885]!	; 0xfffffc8b
 8002781:	2e2e7373 	mcrcs	3, 1, r7, cr14, cr3, {3}
 8002785:	6146000a 	cmpvs	r6, sl
 8002789:	2e2e6c69 	cdpcs	12, 2, cr6, cr14, cr9, {3}
 800278d:	5441000a 	strbpl	r0, [r1], #-10
 8002791:	004f4726 	subeq	r4, pc, r6, lsr #14
 8002795:	52265441 	eorpl	r5, r6, #1090519040	; 0x41000000
 8002799:	41005453 	tstmi	r0, r3, asr r4
 800279d:	4f542654 	svcmi	0x00542654
 80027a1:	54005353 	strpl	r5, [r0], #-851	; 0xfffffcad
 80027a5:	2053534f 	subscs	r5, r3, pc, asr #6
 80027a9:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
 80027ad:	0d4b4f20 	stcleq	15, cr4, [fp, #-128]	; 0xffffff80
 80027b1:	4100200a 	tstmi	r0, sl
 80027b5:	414e2654 	cmpmi	lr, r4, asr r6
 80027b9:	4300454d 	movwmi	r4, #1357	; 0x54d
 80027bd:	30392d4d 	eorscc	r2, r9, sp, asr #26
 80027c1:	4e000a34 	mcrmi	10, 0, r0, cr0, cr4, {1}
 80027c5:	4449206f 	strbmi	r2, [r9], #-111	; 0xffffff91
 80027c9:	6f432045 	svcvs	0x00432045
 80027cd:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 80027d1:	0a0d2164 	beq	834ad69 <_etext+0x34853d>
 80027d5:	0a4b4f00 	beq	92d63dd <_etext+0x12d3bb1>
 80027d9:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 80027dd:	20746365 	rsbscs	r6, r4, r5, ror #6
 80027e1:	216e6950 	cmncs	lr, r0, asr r9
 80027e5:	0d000a0d 	vstreq	s0, [r0, #-52]	; 0xffffffcc
 80027e9:	6f44200a 	svcvs	0x0044200a
 80027ed:	6f6c6e77 	svcvs	0x006c6e77
 80027f1:	46206461 	strtmi	r6, [r0], -r1, ror #8
 80027f5:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 80027f9:	0d002164 	stfeqs	f2, [r0, #-400]	; 0xfffffe70
 80027fd:	6f44200a 	svcvs	0x0044200a
 8002801:	6f6c6e77 	svcvs	0x006c6e77
 8002805:	4f206461 	svcmi	0x00206461
 8002809:	66726576 			; <UNDEFINED> instruction: 0x66726576
 800280d:	21776f6c 	cmncs	r7, ip, ror #30
 8002811:	200a0d00 	andcs	r0, sl, r0, lsl #26
 8002815:	73616c66 	cmnvc	r1, #26112	; 0x6600
 8002819:	72772068 	rsbsvc	r2, r7, #104	; 0x68
 800281d:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
 8002821:	72652067 	rsbvc	r2, r5, #103	; 0x67
 8002825:	21726f72 	cmncs	r2, r2, ror pc
 8002829:	Address 0x08002829 is out of bounds.


Disassembly of section .data:

20000000 <_sdata>:
20000000:	53031a01 	movwpl	r1, #14849	; 0x3a01

20000001 <Virtual_Com_Port_StringSerial>:
20000001:	0053031a 	subseq	r0, r3, sl, lsl r3
20000005:	004d0054 	subeq	r0, sp, r4, asr r0
20000009:	00320033 	eorseq	r0, r2, r3, lsr r0
2000000d:	00300031 	eorseq	r0, r0, r1, lsr r0
	...

2000001c <pEpInt_OUT>:
2000001c:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000020:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000024:	08000d11 	stmdaeq	r0, {r0, r4, r8, sl, fp}
20000028:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
2000002c:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000030:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000034:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}

20000038 <pEpInt_IN>:
20000038:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
2000003c:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000040:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000044:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000048:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
2000004c:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
20000050:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}

20000054 <linecoding>:
20000054:	0001c200 	andeq	ip, r1, r0, lsl #4
20000058:	00080000 	andeq	r0, r8, r0

2000005c <Device_Property>:
2000005c:	08000ee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp}
20000060:	08000f09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp}
20000064:	08000df9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp}
20000068:	08000e0d 	stmdaeq	r0, {r0, r2, r3, r9, sl, fp}
2000006c:	08000e11 	stmdaeq	r0, {r0, r4, r9, sl, fp}
20000070:	08000e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp}
20000074:	08000e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp}
20000078:	08000fe9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, fp}
2000007c:	08000ff5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp}
20000080:	08001001 	stmdaeq	r0, {r0, ip}
20000084:	00000000 	andeq	r0, r0, r0
20000088:	00000040 	andeq	r0, r0, r0, asr #32

2000008c <Device_Descriptor>:
2000008c:	08002747 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, sp}
20000090:	00000012 	andeq	r0, r0, r2, lsl r0

20000094 <Config_Descriptor>:
20000094:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
20000098:	00000043 	andeq	r0, r0, r3, asr #32

2000009c <String_Descriptor>:
2000009c:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
200000a0:	00000004 	andeq	r0, r0, r4
200000a4:	080026ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, sp}
200000a8:	00000012 	andeq	r0, r0, r2, lsl r0
200000ac:	080026bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp}
200000b0:	00000032 	andeq	r0, r0, r2, lsr r0
200000b4:	20000001 	andcs	r0, r0, r1
200000b8:	0000001a 	andeq	r0, r0, sl, lsl r0

200000bc <User_Standard_Requests>:
200000bc:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000c0:	08000dd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, fp}
200000c4:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000c8:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000cc:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000d0:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000d4:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000d8:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
200000dc:	08000ded 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, fp}

200000e0 <Device_Table>:
200000e0:	00000104 	andeq	r0, r0, r4, lsl #2

Disassembly of section .bss:

200000e4 <_sbss>:
200000e4:	00000000 	andeq	r0, r0, r0

200000e8 <gu32TimingCounter1ms_Txd>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <gbCount>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <gwAddressPointer>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <gwEndAddressPointer>:
200000f4:	00000000 	andeq	r0, r0, r0

200000f8 <gwCalculatedCheckSum>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <gwRxTotalCount>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <gbFlashDownloadStart>:
20000100:	00000000 	andeq	r0, r0, r0

20000104 <gwReceivedCheckSumFromHost>:
20000104:	00000000 	andeq	r0, r0, r0

20000108 <gwWriteProtectedPages>:
20000108:	00000000 	andeq	r0, r0, r0

2000010c <FinishToSend>:
	...

2000010e <USB_Rx_Cnt>:
	...

20000110 <FrameCount.5994>:
20000110:	00000000 	andeq	r0, r0, r0

20000114 <bIntPackSOF>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <Request>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <comstatetemp>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <bDeviceState>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <USB_Tx_State>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <USART_Rx_length>:
20000128:	00000000 	andeq	r0, r0, r0

2000012c <Data_Mul_MaxPacketSize>:
2000012c:	00000000 	andeq	r0, r0, r0

20000130 <HSEStartUpStatus>:
	...

20000131 <gbDXLReadPointer>:
20000131:	00000000 	andeq	r0, r0, r0

20000134 <TimingDelay>:
20000134:	00000000 	andeq	r0, r0, r0

20000138 <gwUSARTWritePtr>:
	...

2000013a <gbpRxBuffer>:
	...

2000018c <gwUSARTReadPtr>:
2000018c:	00000000 	andeq	r0, r0, r0

20000190 <USART_InitStructure>:
	...

200001a0 <gwpUSARTBuffer>:
	...

200005a0 <gbpDXLDataBuffer>:
	...

200006a0 <gbDXLWritePointer>:
	...

200006a1 <USB_Rx_Buffer>:
	...

200006e2 <wIstr>:
	...

200006e4 <SaveState>:
200006e4:	00000000 	andeq	r0, r0, r0

200006e8 <pProperty>:
200006e8:	00000000 	andeq	r0, r0, r0

200006ec <EPindex>:
200006ec:	00000000 	andeq	r0, r0, r0

200006f0 <Device_Info>:
	...

2000070c <pUser_Standard_Requests>:
2000070c:	00000000 	andeq	r0, r0, r0

20000710 <pInformation>:
20000710:	00000000 	andeq	r0, r0, r0

20000714 <wInterrupt_Mask>:
	...

20000716 <StatusInfo>:
	...

20000718 <SaveRState>:
	...

2000071a <SaveTState>:
	...

Disassembly of section ._usrstack:

2000071c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
  return USB_SUCCESS;
}

void UsbVcpConnect(void)
{
    PowerOn();
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  if(bDeviceState == CONFIGURED)
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
    {
      /* Reset the frame counter */
      FrameCount = 0;
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
  20:	6f725020 	svcvs	0x00725020
    bTmp = bByte/10;
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
  30:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  34:	30363130 	eorscc	r3, r6, r0, lsr r1
  38:	20393036 	eorscs	r3, r9, r6, lsr r0
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
}
  44:	415b2029 	cmpmi	fp, r9, lsr #32
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	72622d35 	rsbvc	r2, r2, #3392	; 0xd40
  58:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
  5c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  60:	6f697369 	svcvs	0x00697369
  64:	3332206e 	teqcc	r2, #110	; 0x6e
  68:	35313737 	ldrcc	r3, [r1, #-1847]!	; 0xfffff8c9
  6c:	Address 0x0000006c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
   4:	61656100 	cmnvs	r5, r0, lsl #2
}
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
    bTmp = bByte/10;
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
  2c:	22041e01 	andcs	r1, r4, #1, 28
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	000000ec 	andeq	r0, r0, ip, ror #1
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001a4 	stmdaeq	r0, {r2, r5, r7, r8}
  14:	0000000c 	andeq	r0, r0, ip
  18:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
  20:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
    bTmp = bByte/10;
  24:	00000014 	andeq	r0, r0, r4, lsl r0
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
  28:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
  2c:	0000004e 	andeq	r0, r0, lr, asr #32
  30:	00000000 	andeq	r0, r0, r0
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000000 	andeq	r0, r0, r0
  3c:	00000030 	andeq	r0, r0, r0, lsr r0
  40:	08000228 	stmdaeq	r0, {r3, r5, r9}
}
  44:	00000028 	andeq	r0, r0, r8, lsr #32
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  48:	00000000 	andeq	r0, r0, r0
  4c:	0000004a 	andeq	r0, r0, sl, asr #32
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000250 	stmdaeq	r0, {r4, r6, r9}
  54:	00000012 	andeq	r0, r0, r2, lsl r0
  58:	08000262 	stmdaeq	r0, {r1, r5, r6, r9}


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
  5c:	00000034 	andeq	r0, r0, r4, lsr r0
  60:	08000296 	stmdaeq	r0, {r1, r2, r4, r7, r9}
  64:	00000014 	andeq	r0, r0, r4, lsl r0
  68:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
  6c:	00000014 	andeq	r0, r0, r4, lsl r0
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
  70:	00000000 	andeq	r0, r0, r0
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  74:	0000004a 	andeq	r0, r0, sl, asr #32
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
  78:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
    }
          
    if(status != FLASH_BUSY)
  80:	00000000 	andeq	r0, r0, r0
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
  84:	00000034 	andeq	r0, r0, r4, lsr r0
  88:	00000000 	andeq	r0, r0, r0
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
  90:	00000000 	andeq	r0, r0, r0
  94:	00000014 	andeq	r0, r0, r4, lsl r0
  98:	00000000 	andeq	r0, r0, r0
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
}
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
  a4:	0000002c 	andeq	r0, r0, ip, lsr #32
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
  a8:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
  ac:	00000030 	andeq	r0, r0, r0, lsr r0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
  b0:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
  b4:	00000024 	andeq	r0, r0, r4, lsr #32
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  b8:	08000350 	stmdaeq	r0, {r4, r6, r8, r9}
  bc:	000000bc 	strheq	r0, [r0], -ip
      break; 
      
    default:
      break;
  }
}
  c0:	0800040c 	stmdaeq	r0, {r2, r3, sl}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  c4:	00000410 	andeq	r0, r0, r0, lsl r4
  c8:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
  cc:	0000008c 	andeq	r0, r0, ip, lsl #1
  d0:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
  d4:	00000128 	andeq	r0, r0, r8, lsr #2
  d8:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
  dc:	0000007c 	andeq	r0, r0, ip, ror r0
  e0:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
  e4:	000000b4 	strheq	r0, [r0], -r4
	...
  f0:	00000044 	andeq	r0, r0, r4, asr #32
  f4:	1b5c0002 	blne	1700104 <__Stack_Size+0x16ffd04>
  f8:	00040000 	andeq	r0, r4, r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 104:	00000014 	andeq	r0, r0, r4, lsl r0
 108:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
 10c:	00000004 	andeq	r0, r0, r4
 110:	08000b50 	stmdaeq	r0, {r4, r6, r8, r9, fp}
 114:	00000014 	andeq	r0, r0, r4, lsl r0
 118:	08000b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp}
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
 120:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
 124:	00000030 	andeq	r0, r0, r0, lsr r0
 128:	08000c00 	stmdaeq	r0, {sl, fp}
 12c:	00000002 	andeq	r0, r0, r2
	...
 138:	00000014 	andeq	r0, r0, r4, lsl r0
 13c:	20990002 	addscs	r0, r9, r2
 140:	00040000 	andeq	r0, r4, r0
	...
 150:	00000034 	andeq	r0, r0, r4, lsr r0
 154:	21c60002 	biccs	r0, r6, r2
 158:	00040000 	andeq	r0, r4, r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	08000c04 	stmdaeq	r0, {r2, sl, fp}
 164:	0000000c 	andeq	r0, r0, ip
 168:	08000c10 	stmdaeq	r0, {r4, sl, fp}
 16c:	00000100 	andeq	r0, r0, r0, lsl #2
 170:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
 174:	0000005c 	andeq	r0, r0, ip, asr r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	25270002 	strcs	r0, [r7, #-2]!
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
 19c:	00000068 	andeq	r0, r0, r8, rrx
	...
 1a8:	00000084 	andeq	r0, r0, r4, lsl #1
 1ac:	27550002 	ldrbcs	r0, [r5, -r2]
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 1c4:	0000000c 	andeq	r0, r0, ip
 1c8:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 1cc:	00000014 	andeq	r0, r0, r4, lsl r0
 1d0:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 1d4:	00000002 	andeq	r0, r0, r2
 1d8:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 1dc:	0000005c 	andeq	r0, r0, ip, asr r0
 1e0:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
 1e4:	00000024 	andeq	r0, r0, r4, lsr #32
 1e8:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	08000ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp}
 204:	00000024 	andeq	r0, r0, r4, lsr #32
 208:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 20c:	000000e0 	andeq	r0, r0, r0, ror #1
 210:	08000fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp}
 214:	0000000c 	andeq	r0, r0, ip
 218:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 21c:	0000000c 	andeq	r0, r0, ip
 220:	08001000 	stmdaeq	r0, {ip}
 224:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 230:	00000054 	andeq	r0, r0, r4, asr r0
 234:	324d0002 	subcc	r0, sp, #2
 238:	00040000 	andeq	r0, r4, r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	08001020 	stmdaeq	r0, {r5, ip}
 244:	00000028 	andeq	r0, r0, r8, lsr #32
 248:	08001048 	stmdaeq	r0, {r3, r6, ip}
 24c:	00000038 	andeq	r0, r0, r8, lsr r0
 250:	00000000 	andeq	r0, r0, r0
 254:	00000004 	andeq	r0, r0, r4
 258:	08001080 	stmdaeq	r0, {r7, ip}
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 26c:	00000004 	andeq	r0, r0, r4
 270:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 274:	00000038 	andeq	r0, r0, r8, lsr r0
 278:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
 27c:	0000002a 	andeq	r0, r0, sl, lsr #32
	...
 288:	000000cc 	andeq	r0, r0, ip, asr #1
 28c:	37190002 	ldrcc	r0, [r9, -r2]
 290:	00040000 	andeq	r0, r4, r0
 294:	00000000 	andeq	r0, r0, r0
 298:	08001124 	stmdaeq	r0, {r2, r5, r8, ip}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	0800113c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip}
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
 2b8:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 2bc:	00000010 	andeq	r0, r0, r0, lsl r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000010 	andeq	r0, r0, r0, lsl r0
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000010 	andeq	r0, r0, r0, lsl r0
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	00000020 	andeq	r0, r0, r0, lsr #32
 2f0:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
 2fc:	00000028 	andeq	r0, r0, r8, lsr #32
 300:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 304:	00000038 	andeq	r0, r0, r8, lsr r0
 308:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
 30c:	00000040 	andeq	r0, r0, r0, asr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000003c 	andeq	r0, r0, ip, lsr r0
 318:	00000000 	andeq	r0, r0, r0
 31c:	00000070 	andeq	r0, r0, r0, ror r0
 320:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
 324:	00000048 	andeq	r0, r0, r8, asr #32
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000038 	andeq	r0, r0, r8, lsr r0
 330:	00000000 	andeq	r0, r0, r0
 334:	00000048 	andeq	r0, r0, r8, asr #32
 338:	00000000 	andeq	r0, r0, r0
 33c:	0000009c 	muleq	r0, ip, r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000008c 	andeq	r0, r0, ip, lsl #1
 348:	00000000 	andeq	r0, r0, r0
 34c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 358:	00000044 	andeq	r0, r0, r4, asr #32
 35c:	3fdc0002 	svccc	0x00dc0002
 360:	00040000 	andeq	r0, r4, r0
 364:	00000000 	andeq	r0, r0, r0
 368:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 36c:	0000000c 	andeq	r0, r0, ip
 370:	0800127c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip}
 374:	0000000c 	andeq	r0, r0, ip
 378:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
 37c:	0000000c 	andeq	r0, r0, ip
 380:	00000000 	andeq	r0, r0, r0
 384:	00000010 	andeq	r0, r0, r0, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000010 	andeq	r0, r0, r0, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 3a0:	0000009c 	muleq	r0, ip, r0
 3a4:	418d0002 	orrmi	r0, sp, r2
 3a8:	00040000 	andeq	r0, r4, r0
	...
 3b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	00000016 	andeq	r0, r0, r6, lsl r0
 3c0:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 3c4:	000000a4 	andeq	r0, r0, r4, lsr #1
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000010 	andeq	r0, r0, r0, lsl r0
 3d0:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
 3d4:	0000000c 	andeq	r0, r0, ip
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000006 	andeq	r0, r0, r6
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	0000000c 	andeq	r0, r0, ip
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000006 	andeq	r0, r0, r6
 3f0:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 3f4:	00000004 	andeq	r0, r0, r4
 3f8:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 3fc:	00000004 	andeq	r0, r0, r4
 400:	00000000 	andeq	r0, r0, r0
 404:	0000000a 	andeq	r0, r0, sl
 408:	00000000 	andeq	r0, r0, r0
 40c:	00000004 	andeq	r0, r0, r4
 410:	00000000 	andeq	r0, r0, r0
 414:	00000010 	andeq	r0, r0, r0, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	0000000c 	andeq	r0, r0, ip
 428:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 42c:	00000054 	andeq	r0, r0, r4, asr r0
 430:	00000000 	andeq	r0, r0, r0
 434:	0000002a 	andeq	r0, r0, sl, lsr #32
	...
 440:	00000104 	andeq	r0, r0, r4, lsl #2
 444:	48d60002 	ldmmi	r6, {r1}^
 448:	00040000 	andeq	r0, r4, r0
	...
 454:	00000034 	andeq	r0, r0, r4, lsr r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000030 	andeq	r0, r0, r0, lsr r0
 460:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 46c:	00000084 	andeq	r0, r0, r4, lsl #1
 470:	00000000 	andeq	r0, r0, r0
 474:	0000000c 	andeq	r0, r0, ip
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000004 	andeq	r0, r0, r4
 480:	00000000 	andeq	r0, r0, r0
 484:	00000004 	andeq	r0, r0, r4
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000004 	andeq	r0, r0, r4
 490:	00000000 	andeq	r0, r0, r0
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000006 	andeq	r0, r0, r6
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000004 	andeq	r0, r0, r4
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000010 	andeq	r0, r0, r0, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000010 	andeq	r0, r0, r0, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	00000020 	andeq	r0, r0, r0, lsr #32
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
 4e4:	00000014 	andeq	r0, r0, r4, lsl r0
 4e8:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000010 	andeq	r0, r0, r0, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	00000018 	andeq	r0, r0, r8, lsl r0
 500:	00000000 	andeq	r0, r0, r0
 504:	00000020 	andeq	r0, r0, r0, lsr #32
 508:	00000000 	andeq	r0, r0, r0
 50c:	00000050 	andeq	r0, r0, r0, asr r0
 510:	00000000 	andeq	r0, r0, r0
 514:	00000020 	andeq	r0, r0, r0, lsr #32
 518:	00000000 	andeq	r0, r0, r0
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	00000000 	andeq	r0, r0, r0
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	00000000 	andeq	r0, r0, r0
 52c:	00000020 	andeq	r0, r0, r0, lsr #32
 530:	00000000 	andeq	r0, r0, r0
 534:	00000030 	andeq	r0, r0, r0, lsr r0
 538:	00000000 	andeq	r0, r0, r0
 53c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 548:	00000114 	andeq	r0, r0, r4, lsl r1
 54c:	52670002 	rsbpl	r0, r7, #2
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	08001464 	stmdaeq	r0, {r2, r5, r6, sl, ip}
 55c:	0000003c 	andeq	r0, r0, ip, lsr r0
 560:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
 564:	00000038 	andeq	r0, r0, r8, lsr r0
 568:	00000000 	andeq	r0, r0, r0
 56c:	00000014 	andeq	r0, r0, r4, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	0000000c 	andeq	r0, r0, ip
 578:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
 57c:	00000014 	andeq	r0, r0, r4, lsl r0
 580:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
 584:	0000000c 	andeq	r0, r0, ip
 588:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
 58c:	00000014 	andeq	r0, r0, r4, lsl r0
 590:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
 594:	00000010 	andeq	r0, r0, r0, lsl r0
 598:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
 59c:	00000014 	andeq	r0, r0, r4, lsl r0
 5a0:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
 5a4:	00000014 	andeq	r0, r0, r4, lsl r0
 5a8:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 5ac:	00000014 	andeq	r0, r0, r4, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000018 	andeq	r0, r0, r8, lsl r0
 5b8:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
 5bc:	0000000c 	andeq	r0, r0, ip
 5c0:	00000000 	andeq	r0, r0, r0
 5c4:	00000014 	andeq	r0, r0, r4, lsl r0
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	00000020 	andeq	r0, r0, r0, lsr #32
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	00000010 	andeq	r0, r0, r0, lsl r0
 5e0:	00000000 	andeq	r0, r0, r0
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
 5ec:	00000084 	andeq	r0, r0, r4, lsl #1
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
 5fc:	00000018 	andeq	r0, r0, r8, lsl r0
 600:	08001600 	stmdaeq	r0, {r9, sl, ip}
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
 614:	00000018 	andeq	r0, r0, r8, lsl r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000000c 	andeq	r0, r0, ip
 620:	00000000 	andeq	r0, r0, r0
 624:	0000000c 	andeq	r0, r0, ip
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000000c 	andeq	r0, r0, ip
 630:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 634:	00000028 	andeq	r0, r0, r8, lsr #32
 638:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
 63c:	0000002e 	andeq	r0, r0, lr, lsr #32
 640:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
 644:	00000010 	andeq	r0, r0, r0, lsl r0
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000014 	andeq	r0, r0, r4, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	0000000c 	andeq	r0, r0, ip
	...
 660:	000002cc 	andeq	r0, r0, ip, asr #5
 664:	5ae40002 	bpl	ff900674 <SCS_BASE+0x1f8f2674>
 668:	00040000 	andeq	r0, r4, r0
	...
 674:	00000032 	andeq	r0, r0, r2, lsr r0
 678:	00000000 	andeq	r0, r0, r0
 67c:	0000003a 	andeq	r0, r0, sl, lsr r0
 680:	00000000 	andeq	r0, r0, r0
 684:	000000d4 	ldrdeq	r0, [r0], -r4
 688:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
 68c:	0000003c 	andeq	r0, r0, ip, lsr r0
 690:	00000000 	andeq	r0, r0, r0
 694:	00000074 	andeq	r0, r0, r4, ror r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000088 	andeq	r0, r0, r8, lsl #1
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	00000084 	andeq	r0, r0, r4, lsl #1
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	00000068 	andeq	r0, r0, r8, rrx
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	00000022 	andeq	r0, r0, r2, lsr #32
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000012 	andeq	r0, r0, r2, lsl r0
 6c0:	00000000 	andeq	r0, r0, r0
 6c4:	00000014 	andeq	r0, r0, r4, lsl r0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	00000010 	andeq	r0, r0, r0, lsl r0
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	00000012 	andeq	r0, r0, r2, lsl r0
 6d8:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
 6dc:	00000018 	andeq	r0, r0, r8, lsl r0
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	00000004 	andeq	r0, r0, r4
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000008 	andeq	r0, r0, r8
 6f8:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 6fc:	00000012 	andeq	r0, r0, r2, lsl r0
 700:	00000000 	andeq	r0, r0, r0
 704:	0000000e 	andeq	r0, r0, lr
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000001a 	andeq	r0, r0, sl, lsl r0
 710:	00000000 	andeq	r0, r0, r0
 714:	00000034 	andeq	r0, r0, r4, lsr r0
 718:	00000000 	andeq	r0, r0, r0
 71c:	00000014 	andeq	r0, r0, r4, lsl r0
 720:	00000000 	andeq	r0, r0, r0
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000012 	andeq	r0, r0, r2, lsl r0
 730:	0800171a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip}
 734:	00000006 	andeq	r0, r0, r6
 738:	00000000 	andeq	r0, r0, r0
 73c:	00000010 	andeq	r0, r0, r0, lsl r0
 740:	00000000 	andeq	r0, r0, r0
 744:	00000010 	andeq	r0, r0, r0, lsl r0
 748:	00000000 	andeq	r0, r0, r0
 74c:	0000003c 	andeq	r0, r0, ip, lsr r0
 750:	00000000 	andeq	r0, r0, r0
 754:	00000010 	andeq	r0, r0, r0, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	00000014 	andeq	r0, r0, r4, lsl r0
 760:	00000000 	andeq	r0, r0, r0
 764:	00000010 	andeq	r0, r0, r0, lsl r0
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000014 	andeq	r0, r0, r4, lsl r0
 770:	00000000 	andeq	r0, r0, r0
 774:	00000018 	andeq	r0, r0, r8, lsl r0
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000018 	andeq	r0, r0, r8, lsl r0
 780:	00000000 	andeq	r0, r0, r0
 784:	00000018 	andeq	r0, r0, r8, lsl r0
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000018 	andeq	r0, r0, r8, lsl r0
 790:	00000000 	andeq	r0, r0, r0
 794:	00000010 	andeq	r0, r0, r0, lsl r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	00000014 	andeq	r0, r0, r4, lsl r0
 7a0:	00000000 	andeq	r0, r0, r0
 7a4:	00000010 	andeq	r0, r0, r0, lsl r0
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	00000014 	andeq	r0, r0, r4, lsl r0
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	00000010 	andeq	r0, r0, r0, lsl r0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000014 	andeq	r0, r0, r4, lsl r0
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000010 	andeq	r0, r0, r0, lsl r0
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000014 	andeq	r0, r0, r4, lsl r0
 7d0:	00000000 	andeq	r0, r0, r0
 7d4:	00000010 	andeq	r0, r0, r0, lsl r0
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000010 	andeq	r0, r0, r0, lsl r0
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	00000010 	andeq	r0, r0, r0, lsl r0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000010 	andeq	r0, r0, r0, lsl r0
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000010 	andeq	r0, r0, r0, lsl r0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000010 	andeq	r0, r0, r0, lsl r0
 800:	00000000 	andeq	r0, r0, r0
 804:	00000014 	andeq	r0, r0, r4, lsl r0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000014 	andeq	r0, r0, r4, lsl r0
 810:	00000000 	andeq	r0, r0, r0
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000014 	andeq	r0, r0, r4, lsl r0
 820:	00000000 	andeq	r0, r0, r0
 824:	00000014 	andeq	r0, r0, r4, lsl r0
 828:	00000000 	andeq	r0, r0, r0
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	00000000 	andeq	r0, r0, r0
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
 838:	00000000 	andeq	r0, r0, r0
 83c:	00000044 	andeq	r0, r0, r4, asr #32
 840:	00000000 	andeq	r0, r0, r0
 844:	00000018 	andeq	r0, r0, r8, lsl r0
 848:	00000000 	andeq	r0, r0, r0
 84c:	00000018 	andeq	r0, r0, r8, lsl r0
 850:	00000000 	andeq	r0, r0, r0
 854:	00000018 	andeq	r0, r0, r8, lsl r0
 858:	00000000 	andeq	r0, r0, r0
 85c:	00000016 	andeq	r0, r0, r6, lsl r0
 860:	00000000 	andeq	r0, r0, r0
 864:	00000016 	andeq	r0, r0, r6, lsl r0
 868:	00000000 	andeq	r0, r0, r0
 86c:	00000016 	andeq	r0, r0, r6, lsl r0
 870:	00000000 	andeq	r0, r0, r0
 874:	00000016 	andeq	r0, r0, r6, lsl r0
 878:	00000000 	andeq	r0, r0, r0
 87c:	00000004 	andeq	r0, r0, r4
 880:	00000000 	andeq	r0, r0, r0
 884:	00000004 	andeq	r0, r0, r4
 888:	00000000 	andeq	r0, r0, r0
 88c:	00000004 	andeq	r0, r0, r4
 890:	00000000 	andeq	r0, r0, r0
 894:	00000004 	andeq	r0, r0, r4
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000004 	andeq	r0, r0, r4
 8a0:	00000000 	andeq	r0, r0, r0
 8a4:	00000006 	andeq	r0, r0, r6
 8a8:	00000000 	andeq	r0, r0, r0
 8ac:	00000016 	andeq	r0, r0, r6, lsl r0
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8b8:	00000000 	andeq	r0, r0, r0
 8bc:	00000060 	andeq	r0, r0, r0, rrx
 8c0:	00000000 	andeq	r0, r0, r0
 8c4:	00000016 	andeq	r0, r0, r6, lsl r0
 8c8:	00000000 	andeq	r0, r0, r0
 8cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 8d0:	00000000 	andeq	r0, r0, r0
 8d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 8d8:	00000000 	andeq	r0, r0, r0
 8dc:	00000010 	andeq	r0, r0, r0, lsl r0
 8e0:	00000000 	andeq	r0, r0, r0
 8e4:	00000006 	andeq	r0, r0, r6
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	00000006 	andeq	r0, r0, r6
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	00000006 	andeq	r0, r0, r6
 8f8:	00000000 	andeq	r0, r0, r0
 8fc:	00000008 	andeq	r0, r0, r8
 900:	00000000 	andeq	r0, r0, r0
 904:	00000006 	andeq	r0, r0, r6
 908:	00000000 	andeq	r0, r0, r0
 90c:	00000006 	andeq	r0, r0, r6
 910:	00000000 	andeq	r0, r0, r0
 914:	0000000c 	andeq	r0, r0, ip
 918:	00000000 	andeq	r0, r0, r0
 91c:	00000016 	andeq	r0, r0, r6, lsl r0
 920:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 924:	00000008 	andeq	r0, r0, r8
	...
 930:	00000044 	andeq	r0, r0, r4, asr #32
 934:	79650002 	stmdbvc	r5!, {r1}^
 938:	00040000 	andeq	r0, r4, r0
	...
 944:	00000018 	andeq	r0, r0, r8, lsl r0
 948:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
 94c:	0000000c 	andeq	r0, r0, ip
 950:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
 954:	00000028 	andeq	r0, r0, r8, lsr #32
 958:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 95c:	00000018 	andeq	r0, r0, r8, lsl r0
 960:	00000000 	andeq	r0, r0, r0
 964:	0000000c 	andeq	r0, r0, ip
 968:	00000000 	andeq	r0, r0, r0
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 978:	000000ec 	andeq	r0, r0, ip, ror #1
 97c:	7b780002 	blvc	1e0098c <__Stack_Size+0x1e0058c>
 980:	00040000 	andeq	r0, r4, r0
 984:	00000000 	andeq	r0, r0, r0
 988:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
 98c:	0000009c 	muleq	r0, ip, r0
 990:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 994:	00000088 	andeq	r0, r0, r8, lsl #1
 998:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 99c:	00000016 	andeq	r0, r0, r6, lsl r0
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	00000020 	andeq	r0, r0, r0, lsr #32
 9a8:	00000000 	andeq	r0, r0, r0
 9ac:	0000000c 	andeq	r0, r0, ip
 9b0:	080018b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip}
 9b4:	00000018 	andeq	r0, r0, r8, lsl r0
 9b8:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
 9bc:	00000030 	andeq	r0, r0, r0, lsr r0
 9c0:	00000000 	andeq	r0, r0, r0
 9c4:	00000012 	andeq	r0, r0, r2, lsl r0
 9c8:	00000000 	andeq	r0, r0, r0
 9cc:	00000016 	andeq	r0, r0, r6, lsl r0
 9d0:	00000000 	andeq	r0, r0, r0
 9d4:	00000016 	andeq	r0, r0, r6, lsl r0
 9d8:	00000000 	andeq	r0, r0, r0
 9dc:	00000018 	andeq	r0, r0, r8, lsl r0
 9e0:	00000000 	andeq	r0, r0, r0
 9e4:	00000016 	andeq	r0, r0, r6, lsl r0
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	00000018 	andeq	r0, r0, r8, lsl r0
 9f0:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
 9f4:	00000008 	andeq	r0, r0, r8
 9f8:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
 9fc:	00000008 	andeq	r0, r0, r8
 a00:	00000000 	andeq	r0, r0, r0
 a04:	0000000c 	andeq	r0, r0, ip
 a08:	00000000 	andeq	r0, r0, r0
 a0c:	00000012 	andeq	r0, r0, r2, lsl r0
 a10:	00000000 	andeq	r0, r0, r0
 a14:	00000012 	andeq	r0, r0, r2, lsl r0
 a18:	00000000 	andeq	r0, r0, r0
 a1c:	00000018 	andeq	r0, r0, r8, lsl r0
 a20:	00000000 	andeq	r0, r0, r0
 a24:	00000018 	andeq	r0, r0, r8, lsl r0
 a28:	00000000 	andeq	r0, r0, r0
 a2c:	00000018 	andeq	r0, r0, r8, lsl r0
 a30:	00000000 	andeq	r0, r0, r0
 a34:	00000016 	andeq	r0, r0, r6, lsl r0
 a38:	00000000 	andeq	r0, r0, r0
 a3c:	00000018 	andeq	r0, r0, r8, lsl r0
 a40:	0800190e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip}
 a44:	0000000c 	andeq	r0, r0, ip
 a48:	0800191a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip}
 a4c:	00000008 	andeq	r0, r0, r8
 a50:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
 a54:	00000040 	andeq	r0, r0, r0, asr #32
 a58:	00000000 	andeq	r0, r0, r0
 a5c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 a68:	0000001c 	andeq	r0, r0, ip, lsl r0
 a6c:	85860002 	strhi	r0, [r6, #2]
 a70:	00040000 	andeq	r0, r4, r0
 a74:	00000000 	andeq	r0, r0, r0
 a78:	08000134 	stmdaeq	r0, {r2, r4, r5, r8}
 a7c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 a88:	0000001c 	andeq	r0, r0, ip, lsl r0
 a8c:	85ee0002 	strbhi	r0, [lr, #2]!
 a90:	00040000 	andeq	r0, r4, r0
 a94:	00000000 	andeq	r0, r0, r0
 a98:	08001964 	stmdaeq	r0, {r2, r5, r6, r8, fp, ip}
 a9c:	00000050 	andeq	r0, r0, r0, asr r0
	...
 aa8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aac:	86dc0002 	ldrbhi	r0, [ip], r2
 ab0:	00040000 	andeq	r0, r4, r0
 ab4:	00000000 	andeq	r0, r0, r0
 ab8:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
 abc:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 ac8:	00000094 	muleq	r0, r4, r0
 acc:	8ada0002 	bhi	ff680adc <SCS_BASE+0x1f672adc>
 ad0:	00040000 	andeq	r0, r4, r0
 ad4:	00000000 	andeq	r0, r0, r0
 ad8:	080019e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip}
 adc:	00000024 	andeq	r0, r0, r4, lsr #32
 ae0:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
 ae4:	00000024 	andeq	r0, r0, r4, lsr #32
 ae8:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
 aec:	00000090 	muleq	r0, r0, r0
 af0:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 af4:	000000ac 	andeq	r0, r0, ip, lsr #1
 af8:	08001b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip}
 afc:	00000038 	andeq	r0, r0, r8, lsr r0
 b00:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
 b04:	00000048 	andeq	r0, r0, r8, asr #32
 b08:	08001bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip}
 b0c:	000000d8 	ldrdeq	r0, [r0], -r8
 b10:	08001cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip}
 b14:	0000008c 	andeq	r0, r0, ip, lsl #1
 b18:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 b1c:	00000024 	andeq	r0, r0, r4, lsr #32
 b20:	08001d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip}
 b24:	0000001c 	andeq	r0, r0, ip, lsl r0
 b28:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
 b2c:	00000040 	andeq	r0, r0, r0, asr #32
 b30:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
 b34:	00000300 	andeq	r0, r0, r0, lsl #6
 b38:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
 b3c:	000000cc 	andeq	r0, r0, ip, asr #1
 b40:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
 b44:	00000040 	andeq	r0, r0, r0, asr #32
 b48:	080021dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sp}
 b4c:	0000005c 	andeq	r0, r0, ip, asr r0
 b50:	08002238 	stmdaeq	r0, {r3, r4, r5, r9, sp}
 b54:	00000002 	andeq	r0, r0, r2
	...
 b60:	00000024 	andeq	r0, r0, r4, lsr #32
 b64:	98b40002 	ldmls	r4!, {r1}
 b68:	00040000 	andeq	r0, r4, r0
 b6c:	00000000 	andeq	r0, r0, r0
 b70:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
 b74:	00000024 	andeq	r0, r0, r4, lsr #32
 b78:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
 b7c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 b88:	0000019c 	muleq	r0, ip, r1
 b8c:	9a2f0002 	bls	bc0b9c <__Stack_Size+0xbc079c>
 b90:	00040000 	andeq	r0, r4, r0
	...
 b9c:	0000000c 	andeq	r0, r0, ip
 ba0:	00000000 	andeq	r0, r0, r0
 ba4:	0000000c 	andeq	r0, r0, ip
 ba8:	00000000 	andeq	r0, r0, r0
 bac:	0000000c 	andeq	r0, r0, ip
 bb0:	00000000 	andeq	r0, r0, r0
 bb4:	0000000c 	andeq	r0, r0, ip
 bb8:	00000000 	andeq	r0, r0, r0
 bbc:	0000000c 	andeq	r0, r0, ip
 bc0:	00000000 	andeq	r0, r0, r0
 bc4:	0000000c 	andeq	r0, r0, ip
 bc8:	00000000 	andeq	r0, r0, r0
 bcc:	0000000c 	andeq	r0, r0, ip
 bd0:	08002284 	stmdaeq	r0, {r2, r7, r9, sp}
 bd4:	00000010 	andeq	r0, r0, r0, lsl r0
 bd8:	00000000 	andeq	r0, r0, r0
 bdc:	0000000c 	andeq	r0, r0, ip
 be0:	00000000 	andeq	r0, r0, r0
 be4:	0000000e 	andeq	r0, r0, lr
 be8:	00000000 	andeq	r0, r0, r0
 bec:	00000010 	andeq	r0, r0, r0, lsl r0
 bf0:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
 bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf8:	00000000 	andeq	r0, r0, r0
 bfc:	00000012 	andeq	r0, r0, r2, lsl r0
 c00:	080022b0 	stmdaeq	r0, {r4, r5, r7, r9, sp}
 c04:	00000032 	andeq	r0, r0, r2, lsr r0
 c08:	080022e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sp}
 c0c:	00000032 	andeq	r0, r0, r2, lsr r0
 c10:	00000000 	andeq	r0, r0, r0
 c14:	00000024 	andeq	r0, r0, r4, lsr #32
 c18:	00000000 	andeq	r0, r0, r0
 c1c:	00000012 	andeq	r0, r0, r2, lsl r0
 c20:	00000000 	andeq	r0, r0, r0
 c24:	00000012 	andeq	r0, r0, r2, lsl r0
 c28:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
 c2c:	00000026 	andeq	r0, r0, r6, lsr #32
 c30:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
 c34:	00000026 	andeq	r0, r0, r6, lsr #32
 c38:	00000000 	andeq	r0, r0, r0
 c3c:	00000020 	andeq	r0, r0, r0, lsr #32
 c40:	08002360 	stmdaeq	r0, {r5, r6, r8, r9, sp}
 c44:	00000020 	andeq	r0, r0, r0, lsr #32
 c48:	00000000 	andeq	r0, r0, r0
 c4c:	0000001a 	andeq	r0, r0, sl, lsl r0
 c50:	00000000 	andeq	r0, r0, r0
 c54:	0000001a 	andeq	r0, r0, sl, lsl r0
 c58:	00000000 	andeq	r0, r0, r0
 c5c:	00000018 	andeq	r0, r0, r8, lsl r0
 c60:	00000000 	andeq	r0, r0, r0
 c64:	0000001c 	andeq	r0, r0, ip, lsl r0
 c68:	00000000 	andeq	r0, r0, r0
 c6c:	00000020 	andeq	r0, r0, r0, lsr #32
 c70:	00000000 	andeq	r0, r0, r0
 c74:	00000020 	andeq	r0, r0, r0, lsr #32
 c78:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
 c7c:	00000024 	andeq	r0, r0, r4, lsr #32
 c80:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
 c84:	00000024 	andeq	r0, r0, r4, lsr #32
 c88:	00000000 	andeq	r0, r0, r0
 c8c:	00000022 	andeq	r0, r0, r2, lsr #32
 c90:	00000000 	andeq	r0, r0, r0
 c94:	00000012 	andeq	r0, r0, r2, lsl r0
 c98:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
 c9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca0:	00000000 	andeq	r0, r0, r0
 ca4:	00000026 	andeq	r0, r0, r6, lsr #32
 ca8:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
 cac:	00000040 	andeq	r0, r0, r0, asr #32
 cb0:	00000000 	andeq	r0, r0, r0
 cb4:	00000038 	andeq	r0, r0, r8, lsr r0
 cb8:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 cbc:	00000020 	andeq	r0, r0, r0, lsr #32
 cc0:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
 cc4:	00000020 	andeq	r0, r0, r0, lsr #32
 cc8:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
 cd4:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd8:	00000000 	andeq	r0, r0, r0
 cdc:	000000a8 	andeq	r0, r0, r8, lsr #1
 ce0:	00000000 	andeq	r0, r0, r0
 ce4:	0000005c 	andeq	r0, r0, ip, asr r0
 ce8:	00000000 	andeq	r0, r0, r0
 cec:	0000005c 	andeq	r0, r0, ip, asr r0
 cf0:	00000000 	andeq	r0, r0, r0
 cf4:	00000020 	andeq	r0, r0, r0, lsr #32
 cf8:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
 cfc:	00000020 	andeq	r0, r0, r0, lsr #32
 d00:	00000000 	andeq	r0, r0, r0
 d04:	00000044 	andeq	r0, r0, r4, asr #32
 d08:	00000000 	andeq	r0, r0, r0
 d0c:	00000042 	andeq	r0, r0, r2, asr #32
 d10:	00000000 	andeq	r0, r0, r0
 d14:	00000006 	andeq	r0, r0, r6
 d18:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
 d1c:	0000000a 	andeq	r0, r0, sl
	...
 d28:	00000024 	andeq	r0, r0, r4, lsr #32
 d2c:	a5140002 	ldrge	r0, [r4, #-2]
 d30:	00040000 	andeq	r0, r4, r0
 d34:	00000000 	andeq	r0, r0, r0
 d38:	080024e0 	stmdaeq	r0, {r5, r6, r7, sl, sp}
 d3c:	00000020 	andeq	r0, r0, r0, lsr #32
 d40:	08002500 	stmdaeq	r0, {r8, sl, sp}
 d44:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 d50:	00000024 	andeq	r0, r0, r4, lsr #32
 d54:	a6590002 	ldrbge	r0, [r9], -r2
 d58:	00040000 	andeq	r0, r4, r0
 d5c:	00000000 	andeq	r0, r0, r0
 d60:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
 d64:	00000174 	andeq	r0, r0, r4, ror r1
 d68:	00000000 	andeq	r0, r0, r0
 d6c:	00000070 	andeq	r0, r0, r0, ror r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001b58 	andeq	r1, r0, r8, asr fp
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
       4:	00000004 	andeq	r0, r0, r4
}
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000bf1 	strdeq	r0, [r0], -r1
      10:	0000580c 	andeq	r5, r0, ip, lsl #16
      14:	00051f00 	andeq	r1, r5, r0, lsl #30
      18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      28:	000008c8 	andeq	r0, r0, r8, asr #17
      2c:	b6050402 	strlt	r0, [r5], -r2, lsl #8
      30:	02000007 	andeq	r0, r0, #7
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	07880502 	streq	r0, [r8, r2, lsl #10]
      38:	01020000 	mrseq	r0, (UNDEF: 2)
      3c:	00096706 	andeq	r6, r9, r6, lsl #14
      40:	33750300 	cmncc	r5, #0, 6
}
      44:	27020032 	smladxcs	r2, r2, r0, r0
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	c3070402 	movwgt	r0, #29698	; 0x7402
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	03000008 	movweq	r0, #8
      54:	00363175 	eorseq	r3, r6, r5, ror r1
      58:	005e2802 	subseq	r2, lr, r2, lsl #16


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      5c:	02020000 	andeq	r0, r2, #0
      60:	000b6007 	andeq	r6, fp, r7
      64:	38750300 	ldmdacc	r5!, {r8, r9}^
      68:	6f290200 	svcvs	0x00290200
      6c:	02000000 	andeq	r0, r0, #0
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
      70:	09650801 	stmdbeq	r5!, {r0, fp}^
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	c6040000 	strgt	r0, [r4], -r0
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
      78:	02000003 	andeq	r0, r0, #3
      7c:	0000812f 	andeq	r8, r0, pc, lsr #2
    }
          
    if(status != FLASH_BUSY)
      80:	004c0500 	subeq	r0, ip, r0, lsl #10
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      84:	42040000 	andmi	r0, r4, #0
      88:	02000002 	andeq	r0, r0, #2
      8c:	00009130 	andeq	r9, r0, r0, lsr r1
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	005e0500 	subseq	r0, lr, r0, lsl #10
      94:	01060000 	mrseq	r0, (UNDEF: 6)
      98:	0000006f 	andeq	r0, r0, pc, rrx
      9c:	00af3a02 	adceq	r3, pc, r2, lsl #20
      a0:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
      a4:	00000007 	andeq	r0, r0, r7
      a8:	00021807 	andeq	r1, r2, r7, lsl #16
      ac:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	00000597 	muleq	r0, r7, r5
      b4:	00963a02 	addseq	r3, r6, r2, lsl #20
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	01060000 	mrseq	r0, (UNDEF: 6)
      bc:	0000006f 	andeq	r0, r0, pc, rrx
      break; 
      
    default:
      break;
  }
}
      c0:	00d33c02 	sbcseq	r3, r3, r2, lsl #24
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	30070000 	andcc	r0, r7, r0
      c8:	0000001a 	andeq	r0, r0, sl, lsl r0
      cc:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
      d0:	06000100 	streq	r0, [r0], -r0, lsl #2
      d4:	00006f01 	andeq	r6, r0, r1, lsl #30
      d8:	ec3e0200 	lfm	f0, 4, [lr], #-0
      dc:	07000000 	streq	r0, [r0, -r0]
      e0:	000004ac 	andeq	r0, r0, ip, lsr #9
      e4:	08a00700 	stmiaeq	r0!, {r8, r9, sl}
      e8:	00010000 	andeq	r0, r1, r0
      ec:	0000a604 	andeq	sl, r0, r4, lsl #12
      f0:	d33e0200 	teqle	lr, #0, 4
      f4:	06000000 	streq	r0, [r0], -r0
      f8:	00006f01 	andeq	r6, r0, r1, lsl #30
      fc:	10410200 	subne	r0, r1, r0, lsl #4
     100:	07000001 	streq	r0, [r0, -r1]
     104:	00001008 	andeq	r1, r0, r8
     108:	0f720700 	svceq	0x00720700
     10c:	00010000 	andeq	r0, r1, r0
     110:	0000db04 	andeq	sp, r0, r4, lsl #22
     114:	f7410200 			; <UNDEFINED> instruction: 0xf7410200
     118:	02000000 	andeq	r0, r0, #0
     11c:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
     120:	1c090000 	stcne	0, cr0, [r9], {-0}
     124:	87014e03 	strhi	r4, [r1, -r3, lsl #28]
     128:	0a000001 	beq	134 <_Minimum_Stack_Size+0x34>
     12c:	004c5243 	subeq	r5, ip, r3, asr #4
     130:	76015003 	strvc	r5, [r1], -r3
     134:	00000000 	andeq	r0, r0, r0
     138:	4852430a 	ldmdami	r2, {r1, r3, r8, r9, lr}^
     13c:	01510300 	cmpeq	r1, r0, lsl #6
     140:	00000076 	andeq	r0, r0, r6, ror r0
     144:	44490a04 	strbmi	r0, [r9], #-2564	; 0xfffff5fc
     148:	52030052 	andpl	r0, r3, #82	; 0x52
     14c:	00007601 	andeq	r7, r0, r1, lsl #12
     150:	4f0a0800 	svcmi	0x000a0800
     154:	03005244 	movweq	r5, #580	; 0x244
     158:	00760153 	rsbseq	r0, r6, r3, asr r1
     15c:	0b0c0000 	bleq	300164 <__Stack_Size+0x2ffd64>
     160:	0000005f 	andeq	r0, r0, pc, asr r0
     164:	76015403 	strvc	r5, [r1], -r3, lsl #8
     168:	10000000 	andne	r0, r0, r0
     16c:	5252420a 	subspl	r4, r2, #-1610612736	; 0xa0000000
     170:	01550300 	cmpeq	r5, r0, lsl #6
     174:	00000076 	andeq	r0, r0, r6, ror r0
     178:	0cc20b14 	vstmiaeq	r2, {d16-d25}
     17c:	56030000 	strpl	r0, [r3], -r0
     180:	00007601 	andeq	r7, r0, r1, lsl #12
     184:	0c001800 	stceq	8, cr1, [r0], {-0}
     188:	00000863 	andeq	r0, r0, r3, ror #16
     18c:	22015703 	andcs	r5, r1, #786432	; 0xc0000
     190:	09000001 	stmdbeq	r0, {r0}
     194:	020b0350 	andeq	r0, fp, #80, 6	; 0x40000001
     198:	000003a4 	andeq	r0, r0, r4, lsr #7
     19c:	3152430a 	cmpcc	r2, sl, lsl #6
     1a0:	020d0300 	andeq	r0, sp, #0, 6
     1a4:	00000086 	andeq	r0, r0, r6, lsl #1
     1a8:	07420b00 	strbeq	r0, [r2, -r0, lsl #22]
     1ac:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
     1b0:	00005302 	andeq	r5, r0, r2, lsl #6
     1b4:	430a0200 	movwmi	r0, #41472	; 0xa200
     1b8:	03003252 	movweq	r3, #594	; 0x252
     1bc:	0086020f 	addeq	r0, r6, pc, lsl #4
     1c0:	0b040000 	bleq	1001c8 <__Stack_Size+0xffdc8>
     1c4:	0000074c 	andeq	r0, r0, ip, asr #14
     1c8:	53021003 	movwpl	r1, #8195	; 0x2003
     1cc:	06000000 	streq	r0, [r0], -r0
     1d0:	00051a0b 	andeq	r1, r5, fp, lsl #20
     1d4:	02110300 	andseq	r0, r1, #0, 6
     1d8:	00000086 	andeq	r0, r0, r6, lsl #1
     1dc:	07560b08 	ldrbeq	r0, [r6, -r8, lsl #22]
     1e0:	12030000 	andne	r0, r3, #0
     1e4:	00005302 	andeq	r5, r0, r2, lsl #6
     1e8:	e40b0a00 	str	r0, [fp], #-2560	; 0xfffff600
     1ec:	03000003 	movweq	r0, #3
     1f0:	00860213 	addeq	r0, r6, r3, lsl r2
     1f4:	0b0c0000 	bleq	3001fc <__Stack_Size+0x2ffdfc>
     1f8:	00000760 	andeq	r0, r0, r0, ror #14
     1fc:	53021403 	movwpl	r1, #9219	; 0x2403
     200:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     204:	0052530a 	subseq	r5, r2, sl, lsl #6
     208:	86021503 	strhi	r1, [r2], -r3, lsl #10
     20c:	10000000 	andne	r0, r0, r0
     210:	00076a0b 	andeq	r6, r7, fp, lsl #20
     214:	02160300 	andseq	r0, r6, #0, 6
     218:	00000053 	andeq	r0, r0, r3, asr r0
     21c:	47450a12 	smlaldmi	r0, r5, r2, sl
     220:	17030052 	smlsdne	r3, r2, r0, r0
     224:	00008602 	andeq	r8, r0, r2, lsl #12
     228:	740b1400 	strvc	r1, [fp], #-1024	; 0xfffffc00
     22c:	03000007 	movweq	r0, #7
     230:	00530218 	subseq	r0, r3, r8, lsl r2
     234:	0b160000 	bleq	58023c <__Stack_Size+0x57fe3c>
     238:	00000276 	andeq	r0, r0, r6, ror r2
     23c:	86021903 	strhi	r1, [r2], -r3, lsl #18
     240:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     244:	00077e0b 	andeq	r7, r7, fp, lsl #28
     248:	021a0300 	andseq	r0, sl, #0, 6
     24c:	00000053 	andeq	r0, r0, r3, asr r0
     250:	027c0b1a 	rsbseq	r0, ip, #26624	; 0x6800
     254:	1b030000 	blne	c025c <__Stack_Size+0xbfe5c>
     258:	00008602 	andeq	r8, r0, r2, lsl #12
     25c:	d30b1c00 	movwle	r1, #48128	; 0xbc00
     260:	0300000b 	movweq	r0, #11
     264:	0053021c 	subseq	r0, r3, ip, lsl r2
     268:	0b1e0000 	bleq	780270 <__Stack_Size+0x77fe70>
     26c:	00000494 	muleq	r0, r4, r4
     270:	86021d03 	strhi	r1, [r2], -r3, lsl #26
     274:	20000000 	andcs	r0, r0, r0
     278:	0007920b 	andeq	r9, r7, fp, lsl #4
     27c:	021e0300 	andseq	r0, lr, #0, 6
     280:	00000053 	andeq	r0, r0, r3, asr r0
     284:	4e430a22 	vmlami.f32	s1, s6, s5
     288:	1f030054 	svcne	0x00030054
     28c:	00008602 	andeq	r8, r0, r2, lsl #12
     290:	9c0b2400 	cfstrsls	mvf2, [fp], {-0}
     294:	03000007 	movweq	r0, #7
     298:	00530220 	subseq	r0, r3, r0, lsr #4
     29c:	0a260000 	beq	9802a4 <__Stack_Size+0x97fea4>
     2a0:	00435350 	subeq	r5, r3, r0, asr r3
     2a4:	86022103 	strhi	r2, [r2], -r3, lsl #2
     2a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     2ac:	0009fd0b 	andeq	pc, r9, fp, lsl #26
     2b0:	02220300 	eoreq	r0, r2, #0, 6
     2b4:	00000053 	andeq	r0, r0, r3, asr r0
     2b8:	52410a2a 	subpl	r0, r1, #172032	; 0x2a000
     2bc:	23030052 	movwcs	r0, #12370	; 0x3052
     2c0:	00008602 	andeq	r8, r0, r2, lsl #12
     2c4:	080b2c00 	stmdaeq	fp, {sl, fp, sp}
     2c8:	0300000a 	movweq	r0, #10
     2cc:	00530224 	subseq	r0, r3, r4, lsr #4
     2d0:	0a2e0000 	beq	b802d8 <__Stack_Size+0xb7fed8>
     2d4:	00524352 	subseq	r4, r2, r2, asr r3
     2d8:	86022503 	strhi	r2, [r2], -r3, lsl #10
     2dc:	30000000 	andcc	r0, r0, r0
     2e0:	000a130b 	andeq	r1, sl, fp, lsl #6
     2e4:	02260300 	eoreq	r0, r6, #0, 6
     2e8:	00000053 	andeq	r0, r0, r3, asr r0
     2ec:	02620b32 	rsbeq	r0, r2, #51200	; 0xc800
     2f0:	27030000 	strcs	r0, [r3, -r0]
     2f4:	00008602 	andeq	r8, r0, r2, lsl #12
     2f8:	1e0b3400 	cfcpysne	mvf3, mvf11
     2fc:	0300000a 	movweq	r0, #10
     300:	00530228 	subseq	r0, r3, r8, lsr #4
     304:	0b360000 	bleq	d8030c <__Stack_Size+0xd7ff0c>
     308:	00000267 	andeq	r0, r0, r7, ror #4
     30c:	86022903 	strhi	r2, [r2], -r3, lsl #18
     310:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     314:	000a290b 	andeq	r2, sl, fp, lsl #18
     318:	022a0300 	eoreq	r0, sl, #0, 6
     31c:	00000053 	andeq	r0, r0, r3, asr r0
     320:	026c0b3a 	rsbeq	r0, ip, #59392	; 0xe800
     324:	2b030000 	blcs	c032c <__Stack_Size+0xbff2c>
     328:	00008602 	andeq	r8, r0, r2, lsl #12
     32c:	340b3c00 	strcc	r3, [fp], #-3072	; 0xfffff400
     330:	0300000a 	movweq	r0, #10
     334:	0053022c 	subseq	r0, r3, ip, lsr #4
     338:	0b3e0000 	bleq	f80340 <__Stack_Size+0xf7ff40>
     33c:	00000271 	andeq	r0, r0, r1, ror r2
     340:	86022d03 	strhi	r2, [r2], -r3, lsl #26
     344:	40000000 	andmi	r0, r0, r0
     348:	000a3f0b 	andeq	r3, sl, fp, lsl #30
     34c:	022e0300 	eoreq	r0, lr, #0, 6
     350:	00000053 	andeq	r0, r0, r3, asr r0
     354:	023d0b42 	eorseq	r0, sp, #67584	; 0x10800
     358:	2f030000 	svccs	0x00030000
     35c:	00008602 	andeq	r8, r0, r2, lsl #12
     360:	4a0b4400 	bmi	2d1368 <__Stack_Size+0x2d0f68>
     364:	0300000a 	movweq	r0, #10
     368:	00530230 	subseq	r0, r3, r0, lsr r2
     36c:	0a460000 	beq	1180374 <__Stack_Size+0x117ff74>
     370:	00524344 	subseq	r4, r2, r4, asr #6
     374:	86023103 	strhi	r3, [r2], -r3, lsl #2
     378:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     37c:	000a550b 	andeq	r5, sl, fp, lsl #10
     380:	02320300 	eorseq	r0, r2, #0, 6
     384:	00000053 	andeq	r0, r0, r3, asr r0
     388:	07bf0b4a 	ldreq	r0, [pc, sl, asr #22]!
     38c:	33030000 	movwcc	r0, #12288	; 0x3000
     390:	00008602 	andeq	r8, r0, r2, lsl #12
     394:	600b4c00 	andvs	r4, fp, r0, lsl #24
     398:	0300000a 	movweq	r0, #10
     39c:	00530234 	subseq	r0, r3, r4, lsr r2
     3a0:	004e0000 	subeq	r0, lr, r0
     3a4:	0001e60c 	andeq	lr, r1, ip, lsl #12
     3a8:	02350300 	eorseq	r0, r5, #0, 6
     3ac:	00000193 	muleq	r0, r3, r1
     3b0:	38031c09 	stmdacc	r3, {r0, r3, sl, fp, ip}
     3b4:	00046e02 	andeq	r6, r4, r2, lsl #28
     3b8:	52530a00 	subspl	r0, r3, #0, 20
     3bc:	023a0300 	eorseq	r0, sl, #0, 6
     3c0:	00000086 	andeq	r0, r0, r6, lsl #1
     3c4:	07420b00 	strbeq	r0, [r2, -r0, lsl #22]
     3c8:	3b030000 	blcc	c03d0 <__Stack_Size+0xbffd0>
     3cc:	00005302 	andeq	r5, r0, r2, lsl #6
     3d0:	440a0200 	strmi	r0, [sl], #-512	; 0xfffffe00
     3d4:	3c030052 	stccc	0, cr0, [r3], {82}	; 0x52
     3d8:	00008602 	andeq	r8, r0, r2, lsl #12
     3dc:	4c0b0400 	cfstrsmi	mvf0, [fp], {-0}
     3e0:	03000007 	movweq	r0, #7
     3e4:	0053023d 	subseq	r0, r3, sp, lsr r2
     3e8:	0a060000 	beq	1803f0 <__Stack_Size+0x17fff0>
     3ec:	00525242 	subseq	r5, r2, r2, asr #4
     3f0:	86023e03 	strhi	r3, [r2], -r3, lsl #28
     3f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3f8:	0007560b 	andeq	r5, r7, fp, lsl #12
     3fc:	023f0300 	eorseq	r0, pc, #0, 6
     400:	00000053 	andeq	r0, r0, r3, asr r0
     404:	52430a0a 	subpl	r0, r3, #40960	; 0xa000
     408:	40030031 	andmi	r0, r3, r1, lsr r0
     40c:	00008602 	andeq	r8, r0, r2, lsl #12
     410:	600b0c00 	andvs	r0, fp, r0, lsl #24
     414:	03000007 	movweq	r0, #7
     418:	00530241 	subseq	r0, r3, r1, asr #4
     41c:	0a0e0000 	beq	380424 <__Stack_Size+0x380024>
     420:	00325243 	eorseq	r5, r2, r3, asr #4
     424:	86024203 	strhi	r4, [r2], -r3, lsl #4
     428:	10000000 	andne	r0, r0, r0
     42c:	00076a0b 	andeq	r6, r7, fp, lsl #20
     430:	02430300 	subeq	r0, r3, #0, 6
     434:	00000053 	andeq	r0, r0, r3, asr r0
     438:	52430a12 	subpl	r0, r3, #73728	; 0x12000
     43c:	44030033 	strmi	r0, [r3], #-51	; 0xffffffcd
     440:	00008602 	andeq	r8, r0, r2, lsl #12
     444:	740b1400 	strvc	r1, [fp], #-1024	; 0xfffffc00
     448:	03000007 	movweq	r0, #7
     44c:	00530245 	subseq	r0, r3, r5, asr #4
     450:	0b160000 	bleq	580458 <__Stack_Size+0x580058>
     454:	000001cb 	andeq	r0, r0, fp, asr #3
     458:	86024603 	strhi	r4, [r2], -r3, lsl #12
     45c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     460:	00077e0b 	andeq	r7, r7, fp, lsl #28
     464:	02470300 	subeq	r0, r7, #0, 6
     468:	00000053 	andeq	r0, r0, r3, asr r0
     46c:	180c001a 	stmdane	ip, {r1, r3, r4}
     470:	03000004 	movweq	r0, #4
     474:	03b00248 	movseq	r0, #72, 4	; 0x80000004
     478:	01060000 	mrseq	r0, (UNDEF: 6)
     47c:	0000006f 	andeq	r0, r0, pc, rrx
     480:	04a51c04 	strteq	r1, [r5], #3076	; 0xc04
     484:	d9070000 	stmdble	r7, {}	; <UNPREDICTABLE>
     488:	01000003 	tsteq	r0, r3
     48c:	0007c407 	andeq	ip, r7, r7, lsl #8
     490:	b6070200 	strlt	r0, [r7], -r0, lsl #4
     494:	03000000 	movweq	r0, #0
     498:	00046307 	andeq	r6, r4, r7, lsl #6
     49c:	7b070400 	blvc	1c14a4 <__Stack_Size+0x1c10a4>
     4a0:	05000003 	streq	r0, [r0, #-3]
     4a4:	06e10400 	strbteq	r0, [r1], r0, lsl #8
     4a8:	22040000 	andcs	r0, r4, #0
     4ac:	0000047a 	andeq	r0, r0, sl, ror r4
     4b0:	006f0106 	rsbeq	r0, pc, r6, lsl #2
     4b4:	23050000 	movwcs	r0, #20480	; 0x5000
     4b8:	000004cf 	andeq	r0, r0, pc, asr #9
     4bc:	00028207 	andeq	r8, r2, r7, lsl #4
     4c0:	ab070100 	blge	1c08c8 <__Stack_Size+0x1c04c8>
     4c4:	02000001 	andeq	r0, r0, #1
     4c8:	00097807 	andeq	r7, r9, r7, lsl #16
     4cc:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
     4d0:	00000722 	andeq	r0, r0, r2, lsr #14
     4d4:	04b02705 	ldrteq	r2, [r0], #1797	; 0x705
     4d8:	01060000 	mrseq	r0, (UNDEF: 6)
     4dc:	0000006f 	andeq	r0, r0, pc, rrx
     4e0:	05172e05 	ldreq	r2, [r7, #-3589]	; 0xfffff1fb
     4e4:	34070000 	strcc	r0, [r7], #-0
     4e8:	00000007 	andeq	r0, r0, r7
     4ec:	000bbd07 	andeq	fp, fp, r7, lsl #26
     4f0:	3b070400 	blcc	1c14f8 <__Stack_Size+0x1c10f8>
     4f4:	28000003 	stmdacs	r0, {r0, r1}
     4f8:	00036d07 	andeq	r6, r3, r7, lsl #26
     4fc:	96074800 	strls	r4, [r7], -r0, lsl #16
     500:	14000003 	strne	r0, [r0], #-3
     504:	00000007 	andeq	r0, r0, r7
     508:	7f071000 	svcvc	0x00071000
     50c:	1c000006 	stcne	0, cr0, [r0], {6}
     510:	0007a607 	andeq	sl, r7, r7, lsl #12
     514:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
     518:	00000870 	andeq	r0, r0, r0, ror r8
     51c:	04da3605 	ldrbeq	r3, [sl], #1541	; 0x605
     520:	040d0000 	streq	r0, [sp], #-0
     524:	054f3e05 	strbeq	r3, [pc, #-3589]	; fffff727 <SCS_BASE+0x1fff1727>
     528:	870e0000 	strhi	r0, [lr, -r0]
     52c:	05000000 	streq	r0, [r0, #-0]
     530:	00005340 	andeq	r5, r0, r0, asr #6
     534:	4f0e0000 	svcmi	0x000e0000
     538:	0500000b 	streq	r0, [r0, #-11]
     53c:	0004cf41 	andeq	ip, r4, r1, asr #30
     540:	640e0200 	strvs	r0, [lr], #-512	; 0xfffffe00
     544:	05000000 	streq	r0, [r0, #-0]
     548:	00051742 	andeq	r1, r5, r2, asr #14
     54c:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
     550:	00000954 	andeq	r0, r0, r4, asr r9
     554:	05224305 	streq	r4, [r2, #-773]!	; 0xfffffcfb
     558:	040d0000 	streq	r0, [sp], #-0
     55c:	05931a06 	ldreq	r1, [r3, #2566]	; 0xa06
     560:	3d0e0000 	stccc	0, cr0, [lr, #-0]
     564:	06000006 	streq	r0, [r0], -r6
     568:	0000651c 	andeq	r6, r0, ip, lsl r5
     56c:	910e0000 	mrsls	r0, (UNDEF: 14)
     570:	0600000b 	streq	r0, [r0], -fp
     574:	0000651d 	andeq	r6, r0, sp, lsl r5
     578:	900e0100 	andls	r0, lr, r0, lsl #2
     57c:	0600000a 	streq	r0, [r0], -sl
     580:	0000651e 	andeq	r6, r0, lr, lsl r5
     584:	a70e0200 	strge	r0, [lr, -r0, lsl #4]
     588:	06000008 	streq	r0, [r0], -r8
     58c:	0000ec1f 	andeq	lr, r0, pc, lsl ip
     590:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
     594:	00000247 	andeq	r0, r0, r7, asr #4
     598:	055a2006 	ldrbeq	r2, [sl, #-6]
     59c:	0a0d0000 	beq	3405a4 <__Stack_Size+0x3401a4>
     5a0:	05e31b07 	strbeq	r1, [r3, #2823]!	; 0xb07
     5a4:	cb0e0000 	blgt	3805ac <__Stack_Size+0x3801ac>
     5a8:	07000003 	streq	r0, [r0, -r3]
     5ac:	0000531d 	andeq	r5, r0, sp, lsl r3
     5b0:	f00e0000 			; <UNDEFINED> instruction: 0xf00e0000
     5b4:	07000004 	streq	r0, [r0, -r4]
     5b8:	0000531e 	andeq	r5, r0, lr, lsl r3
     5bc:	3a0e0200 	bcc	380dc4 <__Stack_Size+0x3809c4>
     5c0:	07000001 	streq	r0, [r0, -r1]
     5c4:	0000531f 	andeq	r5, r0, pc, lsl r3
     5c8:	1d0e0400 	cfstrsne	mvf0, [lr, #-0]
     5cc:	07000002 	streq	r0, [r0, -r2]
     5d0:	00005320 	andeq	r5, r0, r0, lsr #6
     5d4:	300e0600 	andcc	r0, lr, r0, lsl #12
     5d8:	07000004 	streq	r0, [r0, -r4]
     5dc:	00006521 	andeq	r6, r0, r1, lsr #10
     5e0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     5e4:	00000b09 	andeq	r0, r0, r9, lsl #22
     5e8:	059e2207 	ldreq	r2, [lr, #519]	; 0x207
     5ec:	100d0000 	andne	r0, sp, r0
     5f0:	063f1a08 	ldrteq	r1, [pc], -r8, lsl #20
     5f4:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
     5f8:	08000002 	stmdaeq	r0, {r1}
     5fc:	0000411c 	andeq	r4, r0, ip, lsl r1
     600:	010e0000 	mrseq	r0, (UNDEF: 14)
     604:	08000001 	stmdaeq	r0, {r0}
     608:	0000531d 	andeq	r5, r0, sp, lsl r3
     60c:	4b0e0400 	blmi	381614 <__Stack_Size+0x381214>
     610:	08000001 	stmdaeq	r0, {r0}
     614:	0000531e 	andeq	r5, r0, lr, lsl r3
     618:	ab0e0600 	blge	381e20 <__Stack_Size+0x381a20>
     61c:	0800000a 	stmdaeq	r0, {r1, r3}
     620:	0000531f 	andeq	r5, r0, pc, lsl r3
     624:	0f0e0800 	svceq	0x000e0800
     628:	08000005 	stmdaeq	r0, {r0, r2}
     62c:	00005320 	andeq	r5, r0, r0, lsr #6
     630:	540e0a00 	strpl	r0, [lr], #-2560	; 0xfffff600
     634:	08000005 	stmdaeq	r0, {r0, r2}
     638:	00005321 	andeq	r5, r0, r1, lsr #6
     63c:	04000c00 	streq	r0, [r0], #-3072	; 0xfffff400
     640:	00000a7e 	andeq	r0, r0, lr, ror sl
     644:	05ee2208 	strbeq	r2, [lr, #520]!	; 0x208
     648:	100f0000 	andne	r0, pc, r0
     64c:	00064a04 	andeq	r4, r6, r4, lsl #20
     650:	09af1100 	stmibeq	pc!, {r8, ip}	; <UNPREDICTABLE>
     654:	6f010000 	svcvs	0x00010000
     658:	0a000000 	beq	660 <__Stack_Size+0x260>
     65c:	00068630 	andeq	r8, r6, r0, lsr r6
     660:	09f10700 	ldmibeq	r1!, {r8, r9, sl}^
     664:	07000000 	streq	r0, [r0, -r0]
     668:	00000b73 	andeq	r0, r0, r3, ror fp
     66c:	05840701 	streq	r0, [r4, #1793]	; 0x701
     670:	07020000 	streq	r0, [r2, -r0]
     674:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
     678:	04260703 	strteq	r0, [r6], #-1795	; 0xfffff8fd
     67c:	07040000 	streq	r0, [r4, -r0]
     680:	00000949 	andeq	r0, r0, r9, asr #18
     684:	01060005 	tsteq	r6, r5
     688:	0000006f 	andeq	r0, r0, pc, rrx
     68c:	069f1b01 	ldreq	r1, [pc], r1, lsl #22
     690:	9f070000 	svcls	0x00070000
     694:	00000000 	andeq	r0, r0, r0
     698:	0007d307 	andeq	sp, r7, r7, lsl #6
     69c:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     6a0:	000001a0 	andeq	r0, r0, r0, lsr #3
     6a4:	06861b01 	streq	r1, [r6], r1, lsl #22
     6a8:	ff040000 			; <UNDEFINED> instruction: 0xff040000
     6ac:	0100000a 	tsteq	r0, sl
     6b0:	00064b1d 	andeq	r4, r6, sp, lsl fp
     6b4:	09381200 	ldmdbeq	r8!, {r9, ip}
     6b8:	2d010000 	stccs	0, cr0, [r1, #-0]
     6bc:	00004101 	andeq	r4, r0, r1, lsl #2
     6c0:	06df0100 	ldrbeq	r0, [pc], r0, lsl #2
     6c4:	72130000 	andsvc	r0, r3, #0
     6c8:	01000001 	tsteq	r0, r1
     6cc:	06df012d 	ldrbeq	r0, [pc], sp, lsr #2
     6d0:	67130000 	ldrvs	r0, [r3, -r0]
     6d4:	01000006 	tsteq	r0, r6
     6d8:	0065012d 	rsbeq	r0, r5, sp, lsr #2
     6dc:	14000000 	strne	r0, [r0], #-0
     6e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     6e4:	bd150074 	ldclt	0, cr0, [r5, #-464]	; 0xfffffe30
     6e8:	01000006 	tsteq	r0, r6
     6ec:	e61601f0 			; <UNDEFINED> instruction: 0xe61601f0
     6f0:	a4000006 	strge	r0, [r0], #-6
     6f4:	0c080001 	stceq	0, cr0, [r8], {1}
     6f8:	01000000 	mrseq	r0, (UNDEF: 0)
     6fc:	07e2179c 			; <UNDEFINED> instruction: 0x07e2179c
     700:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     704:	00000065 	andeq	r0, r0, r5, rrx
     708:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
     70c:	00000014 	andeq	r0, r0, r4, lsl r0
     710:	1b189c01 	blne	62771c <__Stack_Size+0x62731c>
     714:	01000006 	tsteq	r0, r6
     718:	01c40101 	biceq	r0, r4, r1, lsl #2
     71c:	00140800 	andseq	r0, r4, r0, lsl #16
     720:	9c010000 	stcls	0, cr0, [r1], {-0}
     724:	00068f19 	andeq	r8, r6, r9, lsl pc
     728:	01070100 	mrseq	r0, (UNDEF: 23)
     72c:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
     730:	0000004e 	andeq	r0, r0, lr, asr #32
     734:	07bb9c01 	ldreq	r9, [fp, r1, lsl #24]!
     738:	221a0000 	andscs	r0, sl, #0
     73c:	01000009 	tsteq	r0, r9
     740:	05e30109 	strbeq	r0, [r3, #265]!	; 0x109
     744:	91020000 	mrsls	r0, (UNDEF: 2)
     748:	01fc1b6c 	mvnseq	r1, ip, ror #22
     74c:	190b0800 	stmdbne	fp, {fp}
     750:	07640000 	strbeq	r0, [r4, -r0]!
     754:	011c0000 	tsteq	ip, r0
     758:	4a400350 	bmi	10014a0 <__Stack_Size+0x10010a0>
     75c:	51011c24 	tstpl	r1, r4, lsr #24
     760:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     764:	00020a1b 	andeq	r0, r2, fp, lsl sl
     768:	00191708 	andseq	r1, r9, r8, lsl #14
     76c:	00078500 	andeq	r8, r7, r0, lsl #10
     770:	50011c00 	andpl	r1, r1, r0, lsl #24
     774:	244a4003 	strbcs	r4, [sl], #-3
     778:	0351011c 	cmpeq	r1, #28, 2
     77c:	1c03830a 	stcne	3, cr8, [r3], {10}
     780:	31015201 	tstcc	r1, r1, lsl #4
     784:	02141b00 	andseq	r1, r4, #0, 22
     788:	19230800 	stmdbne	r3!, {fp}
     78c:	079f0000 	ldreq	r0, [pc, r0]
     790:	011c0000 	tsteq	ip, r0
     794:	4a400350 	bmi	10014dc <__Stack_Size+0x10010dc>
     798:	51011c24 	tstpl	r1, r4, lsr #24
     79c:	1d003101 	stfnes	f3, [r0, #-4]
     7a0:	08000220 	stmdaeq	r0, {r5, r9}
     7a4:	0000192f 	andeq	r1, r0, pc, lsr #18
     7a8:	0350011c 	cmpeq	r0, #28, 2
     7ac:	1c244a40 	stcne	10, cr4, [r4], #-256	; 0xffffff00
     7b0:	31015101 	tstcc	r1, r1, lsl #2
     7b4:	0152011c 	cmpeq	r2, ip, lsl r1
     7b8:	18000031 	stmdane	r0, {r0, r4, r5}
     7bc:	00000078 	andeq	r0, r0, r8, ror r0
     7c0:	00012801 	andeq	r2, r1, r1, lsl #16
     7c4:	14000000 	strne	r0, [r0], #-0
     7c8:	01000000 	mrseq	r0, (UNDEF: 0)
     7cc:	06b51e9c 	ssateq	r1, #22, ip, lsl #29
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	00300000 	eorseq	r0, r0, r0
     7d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7dc:	00000809 	andeq	r0, r0, r9, lsl #16
     7e0:	0006c61f 	andeq	ip, r6, pc, lsl r6
     7e4:	00000000 	andeq	r0, r0, r0
     7e8:	06d22000 	ldrbeq	r2, [r2], r0
     7ec:	51010000 	mrspl	r0, (UNDEF: 1)
     7f0:	00000021 	andeq	r0, r0, r1, lsr #32
     7f4:	06d21f00 	ldrbeq	r1, [r2], r0, lsl #30
     7f8:	00600000 	rsbeq	r0, r0, r0
     7fc:	c61f0000 	ldrgt	r0, [pc], -r0
     800:	80000006 	andhi	r0, r0, r6
     804:	00000000 	andeq	r0, r0, r0
     808:	0aec1900 	beq	ffb06c10 <SCS_BASE+0x1faf8c10>
     80c:	7b010000 	blvc	40814 <__Stack_Size+0x40414>
     810:	00022801 	andeq	r2, r2, r1, lsl #16
     814:	00002808 	andeq	r2, r0, r8, lsl #16
     818:	839c0100 	orrshi	r0, ip, #0, 2
     81c:	22000008 	andcs	r0, r0, #8
     820:	00746164 	rsbseq	r6, r4, r4, ror #2
     824:	65017b01 	strvs	r7, [r1, #-2817]	; 0xfffff4ff
     828:	ba000000 	blt	830 <__Stack_Size+0x430>
     82c:	1b000000 	blne	834 <__Stack_Size+0x434>
     830:	08000234 	stmdaeq	r0, {r2, r4, r5, r9}
     834:	0000193b 	andeq	r1, r0, fp, lsr r9
     838:	0000084c 	andeq	r0, r0, ip, asr #16
     83c:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
     840:	0044000c 	subeq	r0, r4, ip
     844:	51011c40 	tstpl	r1, r0, asr #24
     848:	00400802 	subeq	r0, r0, r2, lsl #16
     84c:	00023c1b 	andeq	r3, r2, fp, lsl ip
     850:	00194608 	andseq	r4, r9, r8, lsl #12
     854:	00086900 	andeq	r6, r8, r0, lsl #18
     858:	50011c00 	andpl	r1, r1, r0, lsl #24
     85c:	44000c05 	strmi	r0, [r0], #-3077	; 0xfffff3fb
     860:	011c4000 	tsteq	ip, r0
     864:	00740251 	rsbseq	r0, r4, r1, asr r2
     868:	02441d00 	subeq	r1, r4, #0, 26
     86c:	19510800 	ldmdbne	r1, {fp}^
     870:	011c0000 	tsteq	ip, r0
     874:	000c0550 	andeq	r0, ip, r0, asr r5
     878:	1c400044 	mcrrne	0, 4, r0, r0, cr4
     87c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     880:	19000040 	stmdbne	r0, {r6}
     884:	00000094 	muleq	r0, r4, r0
     888:	00018101 	andeq	r8, r1, r1, lsl #2
     88c:	4a000000 	bmi	894 <__Stack_Size+0x494>
     890:	01000000 	mrseq	r0, (UNDEF: 0)
     894:	0008eb9c 	muleq	r8, ip, fp
     898:	06372300 	ldrteq	r2, [r7], -r0, lsl #6
     89c:	81010000 	mrshi	r0, (UNDEF: 1)
     8a0:	00006501 	andeq	r6, r0, r1, lsl #10
     8a4:	0000db00 	andeq	sp, r0, r0, lsl #22
     8a8:	09732400 	ldmdbeq	r3!, {sl, sp}^
     8ac:	83010000 	movwhi	r0, #4096	; 0x1000
     8b0:	00006501 	andeq	r6, r0, r1, lsl #10
     8b4:	00012d00 	andeq	r2, r1, r0, lsl #26
     8b8:	00001b00 	andeq	r1, r0, r0, lsl #22
     8bc:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
     8c0:	08cd0000 	stmiaeq	sp, {}^	; <UNPREDICTABLE>
     8c4:	011c0000 	tsteq	ip, r0
     8c8:	30740250 	rsbscc	r0, r4, r0, asr r2
     8cc:	00001b00 	andeq	r1, r0, r0, lsl #22
     8d0:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
     8d4:	08e10000 	stmiaeq	r1!, {}^	; <UNPREDICTABLE>
     8d8:	011c0000 	tsteq	ip, r0
     8dc:	30750250 	rsbscc	r0, r5, r0, asr r2
     8e0:	00002500 	andeq	r2, r0, r0, lsl #10
     8e4:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
     8e8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     8ec:	00000918 	andeq	r0, r0, r8, lsl r9
     8f0:	50018d01 	andpl	r8, r1, r1, lsl #26
     8f4:	12080002 	andne	r0, r8, #2
     8f8:	01000000 	mrseq	r0, (UNDEF: 0)
     8fc:	0009299c 	muleq	r9, ip, r9
     900:	74732200 	ldrbtvc	r2, [r3], #-512	; 0xfffffe00
     904:	8d010072 	stchi	0, cr0, [r1, #-456]	; 0xfffffe38
     908:	00092901 	andeq	r2, r9, r1, lsl #18
     90c:	00016100 	andeq	r6, r1, r0, lsl #2
     910:	00692600 	rsbeq	r2, r9, r0, lsl #12
     914:	df018f01 	svcle	0x00018f01
     918:	82000006 	andhi	r0, r0, #6
     91c:	27000001 	strcs	r0, [r0, -r1]
     920:	0800025e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9}
     924:	00000809 	andeq	r0, r0, r9, lsl #16
     928:	2f041000 	svccs	0x00041000
     92c:	02000009 	andeq	r0, r0, #9
     930:	096e0801 	stmdbeq	lr!, {r0, fp}^
     934:	ed190000 	ldc	0, cr0, [r9, #-0]
     938:	01000003 	tsteq	r0, r3
     93c:	02620196 	rsbeq	r0, r2, #-2147483611	; 0x80000025
     940:	00340800 	eorseq	r0, r4, r0, lsl #16
     944:	9c010000 	stcls	0, cr0, [r1], {-0}
     948:	0000097f 	andeq	r0, r0, pc, ror r9
     94c:	00025823 	andeq	r5, r2, r3, lsr #16
     950:	01960100 	orrseq	r0, r6, r0, lsl #2
     954:	00000053 	andeq	r0, r0, r3, asr r0
     958:	000001de 	ldrdeq	r0, [r0], -lr
     95c:	00097324 	andeq	r7, r9, r4, lsr #6
     960:	01980100 	orrseq	r0, r8, r0, lsl #2
     964:	00000053 	andeq	r0, r0, r3, asr r0
     968:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     96c:	00028027 	andeq	r8, r2, r7, lsr #32
     970:	00080908 	andeq	r0, r8, r8, lsl #18
     974:	02962500 	addseq	r2, r6, #0, 10
     978:	08090800 	stmdaeq	r9, {fp}
     97c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     980:	00000200 	andeq	r0, r0, r0, lsl #4
     984:	9601a301 	strls	sl, [r1], -r1, lsl #6
     988:	14080002 	strne	r0, [r8], #-2
     98c:	01000000 	mrseq	r0, (UNDEF: 0)
     990:	0009c59c 	muleq	r9, ip, r5
     994:	02ce2300 	sbceq	r2, lr, #0, 6
     998:	a3010000 	movwge	r0, #4096	; 0x1000
     99c:	00005301 	andeq	r5, r0, r1, lsl #6
     9a0:	00021d00 	andeq	r1, r2, r0, lsl #26
     9a4:	02a01b00 	adceq	r1, r0, #0, 22
     9a8:	09360800 	ldmdbeq	r6!, {fp}
     9ac:	09bb0000 	ldmibeq	fp!, {}	; <UNPREDICTABLE>
     9b0:	011c0000 	tsteq	ip, r0
     9b4:	00740450 	rsbseq	r0, r4, r0, asr r4
     9b8:	25002538 	strcs	r2, [r0, #-1336]	; 0xfffffac8
     9bc:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
     9c0:	00000936 	andeq	r0, r0, r6, lsr r9
     9c4:	038d1900 	orreq	r1, sp, #0, 18
     9c8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     9cc:	0002aa01 	andeq	sl, r2, r1, lsl #20
     9d0:	00001408 	andeq	r1, r0, r8, lsl #8
     9d4:	139c0100 	orrsne	r0, ip, #0, 2
     9d8:	2300000a 	movwcs	r0, #10
     9dc:	000000c6 	andeq	r0, r0, r6, asr #1
     9e0:	4101a901 	tstmi	r1, r1, lsl #18
     9e4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     9e8:	1b000002 	blne	9f8 <__Stack_Size+0x5f8>
     9ec:	080002b4 	stmdaeq	r0, {r2, r4, r5, r7, r9}
     9f0:	0000097f 	andeq	r0, r0, pc, ror r9
     9f4:	00000a01 	andeq	r0, r0, r1, lsl #20
     9f8:	0450011c 	ldrbeq	r0, [r0], #-284	; 0xfffffee4
     9fc:	25400074 	strbcs	r0, [r0, #-116]	; 0xffffff8c
     a00:	02be2800 	adcseq	r2, lr, #0, 16
     a04:	097f0800 	ldmdbeq	pc!, {fp}^	; <UNPREDICTABLE>
     a08:	011c0000 	tsteq	ip, r0
     a0c:	01f30350 	mvnseq	r0, r0, asr r3
     a10:	19000050 	stmdbne	r0, {r4, r6}
     a14:	00000090 	muleq	r0, r0, r0
     a18:	0001b001 	andeq	fp, r1, r1
     a1c:	4a000000 	bmi	a24 <__Stack_Size+0x624>
     a20:	01000000 	mrseq	r0, (UNDEF: 0)
     a24:	000a7b9c 	muleq	sl, ip, fp
     a28:	06372300 	ldrteq	r2, [r7], -r0, lsl #6
     a2c:	b0010000 	andlt	r0, r1, r0
     a30:	00006501 	andeq	r6, r0, r1, lsl #10
     a34:	00026a00 	andeq	r6, r2, r0, lsl #20
     a38:	09732400 	ldmdbeq	r3!, {sl, sp}^
     a3c:	b2010000 	andlt	r0, r1, #0
     a40:	00006501 	andeq	r6, r0, r1, lsl #10
     a44:	0002bc00 	andeq	fp, r2, r0, lsl #24
     a48:	00001b00 	andeq	r1, r0, r0, lsl #22
     a4c:	195c0000 	ldmdbne	ip, {}^	; <UNPREDICTABLE>
     a50:	0a5d0000 	beq	1740a58 <__Stack_Size+0x1740658>
     a54:	011c0000 	tsteq	ip, r0
     a58:	30740250 	rsbscc	r0, r4, r0, asr r2
     a5c:	00001b00 	andeq	r1, r0, r0, lsl #22
     a60:	195c0000 	ldmdbne	ip, {}^	; <UNPREDICTABLE>
     a64:	0a710000 	beq	1c40a6c <__Stack_Size+0x1c4066c>
     a68:	011c0000 	tsteq	ip, r0
     a6c:	30750250 	rsbscc	r0, r5, r0, asr r2
     a70:	00002500 	andeq	r2, r0, r0, lsl #10
     a74:	195c0000 	ldmdbne	ip, {}^	; <UNPREDICTABLE>
     a78:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     a7c:	00000914 	andeq	r0, r0, r4, lsl r9
     a80:	be01bd01 	cdplt	13, 0, cr11, cr1, cr1, {0}
     a84:	12080002 	andne	r0, r8, #2
     a88:	01000000 	mrseq	r0, (UNDEF: 0)
     a8c:	000ab99c 	muleq	sl, ip, r9
     a90:	74732200 	ldrbtvc	r2, [r3], #-512	; 0xfffffe00
     a94:	bd010072 	stclt	0, cr0, [r1, #-456]	; 0xfffffe38
     a98:	00092901 	andeq	r2, r9, r1, lsl #18
     a9c:	0002f000 	andeq	pc, r2, r0
     aa0:	00692600 	rsbeq	r2, r9, r0, lsl #12
     aa4:	df01bf01 	svcle	0x0001bf01
     aa8:	11000006 	tstne	r0, r6
     aac:	27000003 	strcs	r0, [r0, -r3]
     ab0:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
     ab4:	0000195c 	andeq	r1, r0, ip, asr r9
     ab8:	03e91900 	mvneq	r1, #0, 18
     abc:	c6010000 	strgt	r0, [r1], -r0
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00003400 	andeq	r3, r0, r0, lsl #8
     ac8:	029c0100 	addseq	r0, ip, #0, 2
     acc:	2300000b 	movwcs	r0, #11
     ad0:	00000258 	andeq	r0, r0, r8, asr r2
     ad4:	5301c601 	movwpl	ip, #5633	; 0x1601
     ad8:	6d000000 	stcvs	0, cr0, [r0, #-0]
     adc:	24000003 	strcs	r0, [r0], #-3
     ae0:	00000973 	andeq	r0, r0, r3, ror r9
     ae4:	5301c801 	movwpl	ip, #6145	; 0x1801
     ae8:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     aec:	27000003 	strcs	r0, [r0, -r3]
     af0:	00000000 	andeq	r0, r0, r0
     af4:	0000195c 	andeq	r1, r0, ip, asr r9
     af8:	00000025 	andeq	r0, r0, r5, lsr #32
     afc:	00195c00 	andseq	r5, r9, r0, lsl #24
     b00:	fc190000 	ldc2	0, cr0, [r9], {-0}
     b04:	01000001 	tsteq	r0, r1
     b08:	000001d3 	ldrdeq	r0, [r0], -r3
     b0c:	00140000 	andseq	r0, r4, r0
     b10:	9c010000 	stcls	0, cr0, [r1], {-0}
     b14:	00000b48 	andeq	r0, r0, r8, asr #22
     b18:	0002ce23 	andeq	ip, r2, r3, lsr #28
     b1c:	01d30100 	bicseq	r0, r3, r0, lsl #2
     b20:	00000053 	andeq	r0, r0, r3, asr r0
     b24:	000003ac 	andeq	r0, r0, ip, lsr #7
     b28:	0000001b 	andeq	r0, r0, fp, lsl r0
     b2c:	000ab900 	andeq	fp, sl, r0, lsl #18
     b30:	000b3e00 	andeq	r3, fp, r0, lsl #28
     b34:	50011c00 	andpl	r1, r1, r0, lsl #24
     b38:	38007404 	stmdacc	r0, {r2, sl, ip, sp, lr}
     b3c:	00250025 	eoreq	r0, r5, r5, lsr #32
     b40:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
     b44:	0000000a 	andeq	r0, r0, sl
     b48:	00038919 	andeq	r8, r3, r9, lsl r9
     b4c:	01d90100 	bicseq	r0, r9, r0, lsl #2
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00000014 	andeq	r0, r0, r4, lsl r0
     b58:	0b969c01 	bleq	fe5a7b64 <SCS_BASE+0x1e599b64>
     b5c:	c6230000 	strtgt	r0, [r3], -r0
     b60:	01000000 	mrseq	r0, (UNDEF: 0)
     b64:	004101d9 	ldrdeq	r0, [r1], #-25	; 0xffffffe7
     b68:	03cd0000 	biceq	r0, sp, #0
     b6c:	001b0000 	andseq	r0, fp, r0
     b70:	02000000 	andeq	r0, r0, #0
     b74:	8400000b 	strhi	r0, [r0], #-11
     b78:	1c00000b 	stcne	0, cr0, [r0], {11}
     b7c:	74045001 	strvc	r5, [r4], #-1
     b80:	00254000 	eoreq	r4, r5, r0
     b84:	00000028 	andeq	r0, r0, r8, lsr #32
     b88:	000b0200 	andeq	r0, fp, r0, lsl #4
     b8c:	50011c00 	andpl	r1, r1, r0, lsl #24
     b90:	5001f303 	andpl	pc, r1, r3, lsl #6
     b94:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
     b98:	01000006 	tsteq	r0, r6
     b9c:	006501e0 	rsbeq	r0, r5, r0, ror #3
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	00200000 	eoreq	r0, r0, r0
     ba8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bac:	00019a19 	andeq	r9, r1, r9, lsl sl
     bb0:	01ec0100 	mvneq	r0, r0, lsl #2
     bb4:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
     bb8:	0000002c 	andeq	r0, r0, ip, lsr #32
     bbc:	0c039c01 	stceq	12, cr9, [r3], {1}
     bc0:	7e230000 	cdpvc	0, 2, cr0, cr3, cr0, {0}
     bc4:	0100000c 	tsteq	r0, ip
     bc8:	004101ec 	subeq	r0, r1, ip, ror #3
     bcc:	03f90000 	mvnseq	r0, #0
     bd0:	da1b0000 	ble	6c0bd8 <__Stack_Size+0x6c07d8>
     bd4:	67080002 	strvs	r0, [r8, -r2]
     bd8:	e5000019 	str	r0, [r0, #-25]	; 0xffffffe7
     bdc:	1c00000b 	stcne	0, cr0, [r0], {11}
     be0:	31015001 	tstcc	r1, r1
     be4:	02ec1b00 	rsceq	r1, ip, #0, 22
     be8:	19670800 	stmdbne	r7!, {fp}^
     bec:	0bf90000 	bleq	ffe40bf4 <SCS_BASE+0x1fe32bf4>
     bf0:	011c0000 	tsteq	ip, r0
     bf4:	fe090250 	mcr2	2, 0, r0, cr9, cr0, {2}
     bf8:	02f62500 	rscseq	r2, r6, #0, 10
     bfc:	19670800 	stmdbne	r7!, {fp}^
     c00:	2a000000 	bcs	c08 <__Stack_Size+0x808>
     c04:	00000486 	andeq	r0, r0, r6, lsl #9
     c08:	5303c301 	movwpl	ip, #13057	; 0x3301
     c0c:	fc000000 	stc2	0, cr0, [r0], {-0}
     c10:	30080002 	andcc	r0, r8, r2
     c14:	01000000 	mrseq	r0, (UNDEF: 0)
     c18:	000c5c9c 	muleq	ip, ip, ip
     c1c:	70622200 	rsbvc	r2, r2, r0, lsl #4
     c20:	c3010041 	movwgt	r0, #4161	; 0x1041
     c24:	00092903 	andeq	r2, r9, r3, lsl #18
     c28:	00043400 	andeq	r3, r4, r0, lsl #8
     c2c:	70622200 	rsbvc	r2, r2, r0, lsl #4
     c30:	c3010042 	movwgt	r0, #4162	; 0x1042
     c34:	00092903 	andeq	r2, r9, r3, lsl #18
     c38:	00045500 	andeq	r5, r4, r0, lsl #10
     c3c:	01452b00 	cmpeq	r5, r0, lsl #22
     c40:	c3010000 	movwgt	r0, #4096	; 0x1000
     c44:	0006df03 	andeq	sp, r6, r3, lsl #30
     c48:	24520100 	ldrbcs	r0, [r2], #-256	; 0xffffff00
     c4c:	00000011 	andeq	r0, r0, r1, lsl r0
     c50:	5303c501 	movwpl	ip, #13569	; 0x3501
     c54:	76000000 	strvc	r0, [r0], -r0
     c58:	00000004 	andeq	r0, r0, r4
     c5c:	000ca62a 	andeq	sl, ip, sl, lsr #12
     c60:	03d10100 	bicseq	r0, r1, #0, 2
     c64:	00000053 	andeq	r0, r0, r3, asr r0
     c68:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
     c6c:	00000024 	andeq	r0, r0, r4, lsr #32
     c70:	0ca79c01 	stceq	12, cr9, [r7], #4
     c74:	ea230000 	b	8c0c7c <__Stack_Size+0x8c087c>
     c78:	01000004 	tsteq	r0, r4
     c7c:	092903d1 	stmdbeq	r9!, {r0, r4, r6, r7, r8, r9}
     c80:	04af0000 	strteq	r0, [pc], #0	; c88 <__Stack_Size+0x888>
     c84:	5a230000 	bpl	8c0c8c <__Stack_Size+0x8c088c>
     c88:	0100000b 	tsteq	r0, fp
     c8c:	092903d1 	stmdbeq	r9!, {r0, r4, r6, r7, r8, r9}
     c90:	04cf0000 	strbeq	r0, [pc], #0	; c98 <__Stack_Size+0x898>
     c94:	db240000 	blle	900c9c <__Stack_Size+0x90089c>
     c98:	01000007 	tsteq	r0, r7
     c9c:	005303d3 	ldrsbeq	r0, [r3], #-51	; 0xffffffcd
     ca0:	04fd0000 	ldrbteq	r0, [sp], #0
     ca4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     ca8:	00000989 	andeq	r0, r0, r9, lsl #19
     cac:	50041801 	andpl	r1, r4, r1, lsl #16
     cb0:	bc080003 	stclt	0, cr0, [r8], {3}
     cb4:	01000000 	mrseq	r0, (UNDEF: 0)
     cb8:	000e499c 	muleq	lr, ip, r9
     cbc:	0fa02300 	svceq	0x00a02300
     cc0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     cc4:	00006504 	andeq	r6, r0, r4, lsl #10
     cc8:	00052c00 	andeq	r2, r5, r0, lsl #24
     ccc:	09402300 	stmdbeq	r0, {r8, r9, sp}^
     cd0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     cd4:	00004104 	andeq	r4, r0, r4, lsl #2
     cd8:	00054d00 	andeq	r4, r5, r0, lsl #26
     cdc:	04721a00 	ldrbteq	r1, [r2], #-2560	; 0xfffff600
     ce0:	1a010000 	bne	40ce8 <__Stack_Size+0x408e8>
     ce4:	00063f04 	andeq	r3, r6, r4, lsl #30
     ce8:	60910200 	addsvs	r0, r1, r0, lsl #4
     cec:	00035e1b 	andeq	r5, r3, fp, lsl lr
     cf0:	00197208 	andseq	r7, r9, r8, lsl #4
     cf4:	000d0000 	andeq	r0, sp, r0
     cf8:	50011c00 	andpl	r1, r1, r0, lsl #24
     cfc:	00007d02 	andeq	r7, r0, r2, lsl #26
     d00:	0003841b 	andeq	r8, r3, fp, lsl r4
     d04:	00197d08 	andseq	r7, r9, r8, lsl #26
     d08:	000d1700 	andeq	r1, sp, r0, lsl #14
     d0c:	50011c00 	andpl	r1, r1, r0, lsl #24
     d10:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
     d14:	1b004001 	blne	10d20 <__Stack_Size+0x10920>
     d18:	0800038a 	stmdaeq	r0, {r1, r3, r7, r8, r9}
     d1c:	00000bac 	andeq	r0, r0, ip, lsr #23
     d20:	00000d2a 	andeq	r0, r0, sl, lsr #26
     d24:	0150011c 	cmpeq	r0, ip, lsl r1
     d28:	921b003a 	andsls	r0, fp, #58	; 0x3a
     d2c:	88080003 	stmdahi	r8, {r0, r1}
     d30:	47000019 	smladmi	r0, r9, r0, r0
     d34:	1c00000d 	stcne	0, cr0, [r0], {13}
     d38:	0c055001 	stceq	0, cr5, [r5], {1}
     d3c:	40013800 	andmi	r3, r1, r0, lsl #16
     d40:	0251011c 	subseq	r0, r1, #28, 2
     d44:	1b00007d 	blne	f40 <__Stack_Size+0xb40>
     d48:	0800039e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9}
     d4c:	00001993 	muleq	r0, r3, r9
     d50:	00000d6b 	andeq	r0, r0, fp, ror #26
     d54:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
     d58:	0138000c 	teqeq	r8, ip
     d5c:	51011c40 	tstpl	r1, r0, asr #24
     d60:	05250a03 	streq	r0, [r5, #-2563]!	; 0xfffff5fd
     d64:	0252011c 	subseq	r0, r2, #28, 2
     d68:	1b000074 	blne	f40 <__Stack_Size+0xb40>
     d6c:	080003ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9}
     d70:	0000197d 	andeq	r1, r0, sp, ror r9
     d74:	00000d82 	andeq	r0, r0, r2, lsl #27
     d78:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
     d7c:	0044000c 	subeq	r0, r4, ip
     d80:	b41b0040 	ldrlt	r0, [fp], #-64	; 0xffffffc0
     d84:	ac080003 	stcge	0, cr0, [r8], {3}
     d88:	9500000b 	strls	r0, [r0, #-11]
     d8c:	1c00000d 	stcne	0, cr0, [r0], {13}
     d90:	3a015001 	bcc	54d9c <__Stack_Size+0x5499c>
     d94:	03bc1b00 			; <UNDEFINED> instruction: 0x03bc1b00
     d98:	19880800 	stmibne	r8, {fp}
     d9c:	0db20000 	ldceq	0, cr0, [r2]
     da0:	011c0000 	tsteq	ip, r0
     da4:	000c0550 	andeq	r0, ip, r0, asr r5
     da8:	1c400044 	mcrrne	0, 4, r0, r0, cr4
     dac:	7d025101 	stfvcs	f5, [r2, #-4]
     db0:	c81b0000 	ldmdagt	fp, {}	; <UNPREDICTABLE>
     db4:	93080003 	movwls	r0, #32771	; 0x8003
     db8:	d5000019 	strle	r0, [r0, #-25]	; 0xffffffe7
     dbc:	1c00000d 	stcne	0, cr0, [r0], {13}
     dc0:	0c055001 	stceq	0, cr5, [r5], {1}
     dc4:	40004400 	andmi	r4, r0, r0, lsl #8
     dc8:	0351011c 	cmpeq	r1, #28, 2
     dcc:	1c05250a 	cfstr32ne	mvfx2, [r5], {10}
     dd0:	31015201 	tstcc	r1, r1, lsl #4
     dd4:	03d81b00 	bicseq	r1, r8, #0, 22
     dd8:	197d0800 	ldmdbne	sp!, {fp}^
     ddc:	0dec0000 	stcleq	0, cr0, [ip]
     de0:	011c0000 	tsteq	ip, r0
     de4:	000c0550 	andeq	r0, ip, r0, asr r5
     de8:	00400048 	subeq	r0, r0, r8, asr #32
     dec:	0003de1b 	andeq	sp, r3, fp, lsl lr
     df0:	000bac08 	andeq	sl, fp, r8, lsl #24
     df4:	000dff00 	andeq	pc, sp, r0, lsl #30
     df8:	50011c00 	andpl	r1, r1, r0, lsl #24
     dfc:	1b003a01 	blne	f608 <__Stack_Size+0xf208>
     e00:	080003e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9}
     e04:	00001988 	andeq	r1, r0, r8, lsl #19
     e08:	00000e1c 	andeq	r0, r0, ip, lsl lr
     e0c:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
     e10:	0048000c 	subeq	r0, r8, ip
     e14:	51011c40 	tstpl	r1, r0, asr #24
     e18:	00007d02 	andeq	r7, r0, r2, lsl #26
     e1c:	0003f21b 	andeq	pc, r3, fp, lsl r2	; <UNPREDICTABLE>
     e20:	00199308 	andseq	r9, r9, r8, lsl #6
     e24:	000e3f00 	andeq	r3, lr, r0, lsl #30
     e28:	50011c00 	andpl	r1, r1, r0, lsl #24
     e2c:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
     e30:	011c4000 	tsteq	ip, r0
     e34:	250a0351 	strcs	r0, [sl, #-849]	; 0xfffffcaf
     e38:	52011c05 	andpl	r1, r1, #1280	; 0x500
     e3c:	27003101 	strcs	r3, [r0, -r1, lsl #2]
     e40:	080003fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9}
     e44:	0000199e 	muleq	r0, lr, r9
     e48:	08f42c00 	ldmeq	r4!, {sl, fp, sp}^
     e4c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     e50:	00040c01 	andeq	r0, r4, r1, lsl #24
     e54:	00041008 	andeq	r1, r4, r8
     e58:	fb9c0100 	blx	fe701262 <SCS_BASE+0x1e6f3262>
     e5c:	2d000011 	stccs	0, cr0, [r0, #-68]	; 0xffffffbc
     e60:	00000add 	ldrdeq	r0, [r0], -sp
     e64:	53020101 	movwpl	r0, #8449	; 0x2101
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	000cc724 	andeq	ip, ip, r4, lsr #14
     e70:	02020100 	andeq	r0, r2, #0, 2
     e74:	00000065 	andeq	r0, r0, r5, rrx
     e78:	00000579 	andeq	r0, r0, r9, ror r5
     e7c:	00006e1a 	andeq	r6, r0, sl, lsl lr
     e80:	02030100 	andeq	r0, r3, #0, 2
     e84:	000011fb 	strdeq	r1, [r0], -fp
     e88:	26489102 	strbcs	r9, [r8], -r2, lsl #2
     e8c:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
     e90:	0006df02 	andeq	sp, r6, r2, lsl #30
     e94:	0005a300 	andeq	sl, r5, r0, lsl #6
     e98:	03b42d00 			; <UNDEFINED> instruction: 0x03b42d00
     e9c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     ea0:	00006502 	andeq	r6, r0, r2, lsl #10
     ea4:	cb240000 	blgt	900eac <__Stack_Size+0x900aac>
     ea8:	01000004 	tsteq	r0, r4
     eac:	00650209 	rsbeq	r0, r5, r9, lsl #4
     eb0:	05fb0000 	ldrbeq	r0, [fp, #0]!
     eb4:	a62e0000 	strtge	r0, [lr], -r0
     eb8:	28080004 	stmdacs	r8, {r2}
     ebc:	e5000001 	str	r0, [r0, #-1]
     ec0:	2400000f 	strcs	r0, [r0], #-15
     ec4:	000003a7 	andeq	r0, r0, r7, lsr #7
     ec8:	41024501 	tstmi	r2, r1, lsl #10
     ecc:	1b000000 	blne	ed4 <__Stack_Size+0xad4>
     ed0:	1a000006 	bne	ef0 <__Stack_Size+0xaf0>
     ed4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     ed8:	76024601 	strvc	r4, [r2], -r1, lsl #12
     edc:	02000000 	andeq	r0, r0, #0
     ee0:	fa1a4091 	blx	69112c <__Stack_Size+0x690d2c>
     ee4:	01000002 	tsteq	r0, r2
     ee8:	120b0248 	andne	r0, fp, #72, 4	; 0x80000004
     eec:	91030000 	mrsls	r0, (UNDEF: 3)
     ef0:	491a7fbe 	ldmdbmi	sl, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
     ef4:	01000003 	tsteq	r0, r3
     ef8:	12100249 	andsne	r0, r0, #-1879048188	; 0x90000004
     efc:	91030000 	mrsls	r0, (UNDEF: 3)
     f00:	a31a7fbf 	tstge	sl, #764	; 0x2fc
     f04:	01000006 	tsteq	r0, r6
     f08:	0076024b 	rsbseq	r0, r6, fp, asr #4
     f0c:	91020000 	mrsls	r0, (UNDEF: 2)
     f10:	06e62f44 	strbteq	r2, [r6], r4, asr #30
     f14:	057e0000 	ldrbeq	r0, [lr, #-0]!
     f18:	00040800 	andeq	r0, r4, r0, lsl #16
     f1c:	9f010000 	svcls	0x00010000
     f20:	04d42702 	ldrbeq	r2, [r4], #1794	; 0x702
     f24:	19a90800 	stmibne	r9!, {fp}
     f28:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
     f2c:	b4080004 	strlt	r0, [r8], #-4
     f30:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
     f34:	1c00000f 	stcne	0, cr0, [r0], {15}
     f38:	08025001 	stmdaeq	r2, {r0, ip, lr}
     f3c:	1a270035 	bne	9c1018 <__Stack_Size+0x9c0c18>
     f40:	bf080005 	svclt	0x00080005
     f44:	27000019 	smladcs	r0, r9, r0, r0
     f48:	0800052a 	stmdaeq	r0, {r1, r3, r5, r8, sl}
     f4c:	000009c5 	andeq	r0, r0, r5, asr #19
     f50:	00053e27 	andeq	r3, r5, r7, lsr #28
     f54:	0019ca08 	andseq	ip, r9, r8, lsl #20
     f58:	05461b00 	strbeq	r1, [r6, #-2816]	; 0xfffff500
     f5c:	0a7b0800 	beq	1ec2f64 <__Stack_Size+0x1ec2b64>
     f60:	0f700000 	svceq	0x00700000
     f64:	011c0000 	tsteq	ip, r0
     f68:	73030550 	movwvc	r0, #13648	; 0x3550
     f6c:	00080027 	andeq	r0, r8, r7, lsr #32
     f70:	0005521b 	andeq	r5, r5, fp, lsl r2
     f74:	0019d508 	andseq	sp, r9, r8, lsl #10
     f78:	000f8a00 	andeq	r8, pc, r0, lsl #20
     f7c:	50011c00 	andpl	r1, r1, r0, lsl #24
     f80:	244a4003 	strbcs	r4, [sl], #-3
     f84:	0151011c 	cmpeq	r1, ip, lsl r1
     f88:	581b0031 	ldmdapl	fp, {r0, r4, r5}
     f8c:	ac080005 	stcge	0, cr0, [r8], {5}
     f90:	9e00000b 	cdpls	0, 0, cr0, cr0, cr11, {0}
     f94:	1c00000f 	stcne	0, cr0, [r0], {15}
     f98:	08025001 	stmdaeq	r2, {r0, ip, lr}
     f9c:	6c270064 	stcvs	0, cr0, [r7], #-400	; 0xfffffe70
     fa0:	fd080005 	stc2	0, cr0, [r8, #-20]	; 0xffffffec
     fa4:	1b000006 	blne	fc4 <__Stack_Size+0xbc4>
     fa8:	08000586 	stmdaeq	r0, {r1, r2, r7, r8, sl}
     fac:	000019d5 	ldrdeq	r1, [r0], -r5
     fb0:	00000fc2 	andeq	r0, r0, r2, asr #31
     fb4:	0350011c 	cmpeq	r0, #28, 2
     fb8:	1c244a40 	stcne	10, cr4, [r4], #-256	; 0xffffff00
     fbc:	7a025101 	bvc	953c8 <__Stack_Size+0x94fc8>
     fc0:	a6270000 	strtge	r0, [r7], -r0
     fc4:	ca080005 	bgt	200fe0 <__Stack_Size+0x200be0>
     fc8:	27000019 	smladcs	r0, r9, r0, r0
     fcc:	080005c8 	stmdaeq	r0, {r3, r6, r7, r8, sl}
     fd0:	00000a7b 	andeq	r0, r0, fp, ror sl
     fd4:	0005ce1d 	andeq	ip, r5, sp, lsl lr
     fd8:	000bac08 	andeq	sl, fp, r8, lsl #24
     fdc:	50011c00 	andpl	r1, r1, r0, lsl #24
     fe0:	00640802 	rsbeq	r0, r4, r2, lsl #16
     fe4:	05dc2e00 	ldrbeq	r2, [ip, #3584]	; 0xe00
     fe8:	00120800 	andseq	r0, r2, r0, lsl #16
     fec:	10380000 	eorsne	r0, r8, r0
     ff0:	ca240000 	bgt	900ff8 <__Stack_Size+0x900bf8>
     ff4:	01000009 	tsteq	r0, r9
     ff8:	06aa02c3 	strteq	r0, [sl], r3, asr #5
     ffc:	06520000 	ldrbeq	r0, [r2], -r0
    1000:	e7240000 	str	r0, [r4, -r0]!
    1004:	01000000 	mrseq	r0, (UNDEF: 0)
    1008:	004102c4 	subeq	r0, r1, r4, asr #5
    100c:	06710000 	ldrbteq	r0, [r1], -r0
    1010:	e6270000 	strt	r0, [r7], -r0
    1014:	e1080005 	tst	r8, r5
    1018:	1b000019 	blne	1084 <__Stack_Size+0xc84>
    101c:	080005ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl}
    1020:	00000bac 	andeq	r0, r0, ip, lsr #23
    1024:	0000102f 	andeq	r1, r0, pc, lsr #32
    1028:	0250011c 	subseq	r0, r0, #28, 2
    102c:	30006408 	andcc	r6, r0, r8, lsl #8
    1030:	080005ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl}
    1034:	00007902 	andeq	r7, r0, r2, lsl #18
    1038:	0004321b 	andeq	r3, r4, fp, lsl r2
    103c:	0019ec08 	andseq	lr, r9, r8, lsl #24
    1040:	00105400 	andseq	r5, r0, r0, lsl #8
    1044:	50011c00 	andpl	r1, r1, r0, lsl #24
    1048:	0c000c05 	stceq	12, cr0, [r0], {5}
    104c:	011c4001 	tsteq	ip, r1
    1050:	00340151 	eorseq	r0, r4, r1, asr r1
    1054:	00043c1b 	andeq	r3, r4, fp, lsl ip
    1058:	0019ec08 	andseq	lr, r9, r8, lsl #24
    105c:	00107200 	andseq	r7, r0, r0, lsl #4
    1060:	50011c00 	andpl	r1, r1, r0, lsl #24
    1064:	0c000c05 	stceq	12, cr0, [r0], {5}
    1068:	011c4001 	tsteq	ip, r1
    106c:	000a0351 	andeq	r0, sl, r1, asr r3
    1070:	581b0002 	ldmdapl	fp, {r1}
    1074:	5c080004 	stcpl	0, cr0, [r8], {4}
    1078:	8600000c 	strhi	r0, [r0], -ip
    107c:	1c000010 	stcne	0, cr0, [r0], {16}
    1080:	77025001 	strvc	r5, [r2, -r1]
    1084:	a01b0000 	andsge	r0, fp, r0
    1088:	03080004 	movweq	r0, #32772	; 0x8004
    108c:	a800000c 	stmdage	r0, {r2, r3}
    1090:	1c000010 	stcne	0, cr0, [r0], {16}
    1094:	77025001 	strvc	r5, [r2, -r1]
    1098:	51011c00 	tstpl	r1, r0, lsl #24
    109c:	276d0305 	strbcs	r0, [sp, -r5, lsl #6]!
    10a0:	011c0800 	tsteq	ip, r0, lsl #16
    10a4:	00350152 	eorseq	r0, r5, r2, asr r1
    10a8:	0005da1b 	andeq	sp, r5, fp, lsl sl
    10ac:	000c0308 	andeq	r0, ip, r8, lsl #6
    10b0:	0010ca00 	andseq	ip, r0, r0, lsl #20
    10b4:	50011c00 	andpl	r1, r1, r0, lsl #24
    10b8:	1c007702 	stcne	7, cr7, [r0], {2}
    10bc:	03055101 	movweq	r5, #20737	; 0x5101
    10c0:	0800278f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, r9, sl, sp}
    10c4:	0152011c 	cmpeq	r2, ip, lsl r1
    10c8:	fa1b0035 	blx	6c11a4 <__Stack_Size+0x6c0da4>
    10cc:	03080005 	movweq	r0, #32773	; 0x8005
    10d0:	ec00000c 	stc	0, cr0, [r0], {12}
    10d4:	1c000010 	stcne	0, cr0, [r0], {16}
    10d8:	77025001 	strvc	r5, [r2, -r1]
    10dc:	51011c00 	tstpl	r1, r0, lsl #24
    10e0:	27950305 	ldrcs	r0, [r5, r5, lsl #6]
    10e4:	011c0800 	tsteq	ip, r0, lsl #16
    10e8:	00360152 	eorseq	r0, r6, r2, asr r1
    10ec:	00060027 	andeq	r0, r6, r7, lsr #32
    10f0:	0019f708 	andseq	pc, r9, r8, lsl #14
    10f4:	060c1b00 	streq	r1, [ip], -r0, lsl #22
    10f8:	0c030800 	stceq	8, cr0, [r3], {-0}
    10fc:	11170000 	tstne	r7, r0
    1100:	011c0000 	tsteq	ip, r0
    1104:	00770250 	rsbseq	r0, r7, r0, asr r2
    1108:	0551011c 	ldrbeq	r0, [r1, #-284]	; 0xfffffee4
    110c:	00279c03 	eoreq	r9, r7, r3, lsl #24
    1110:	52011c08 	andpl	r1, r1, #8, 24	; 0x800
    1114:	1b003701 	blne	ed20 <__Stack_Size+0xe920>
    1118:	08000618 	stmdaeq	r0, {r3, r4, r9, sl}
    111c:	00000a7b 	andeq	r0, r0, fp, ror sl
    1120:	0000112e 	andeq	r1, r0, lr, lsr #2
    1124:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
    1128:	0027a403 	eoreq	sl, r7, r3, lsl #8
    112c:	921b0008 	andsls	r0, fp, #8
    1130:	a7080006 	strge	r0, [r8, -r6]
    1134:	4100000c 	tstmi	r0, ip
    1138:	1c000011 	stcne	0, cr0, [r0], {17}
    113c:	31015001 	tstcc	r1, r1
    1140:	06e21b00 	strbteq	r1, [r2], r0, lsl #22
    1144:	1a030800 	bne	c314c <__Stack_Size+0xc2d4c>
    1148:	115e0000 	cmpne	lr, r0
    114c:	011c0000 	tsteq	ip, r0
    1150:	000c0550 	andeq	r0, ip, r0, asr r5
    1154:	1c40010c 	stfnee	f0, [r0], {12}
    1158:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    115c:	fc1b0020 	ldc2	0, cr0, [fp], {32}
    1160:	46080006 	strmi	r0, [r8], -r6
    1164:	75000019 	strvc	r0, [r0, #-25]	; 0xffffffe7
    1168:	1c000011 	stcne	0, cr0, [r0], {17}
    116c:	0c055001 	stceq	0, cr5, [r5], {1}
    1170:	40013800 	andmi	r3, r1, r0, lsl #16
    1174:	07041b00 	streq	r1, [r4, -r0, lsl #22]
    1178:	19510800 	ldmdbne	r1, {fp}^
    117c:	11920000 	orrsne	r0, r2, r0
    1180:	011c0000 	tsteq	ip, r0
    1184:	000c0550 	andeq	r0, ip, r0, asr r5
    1188:	1c400138 	stfnee	f0, [r0], {56}	; 0x38
    118c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1190:	7a1b0040 	bvc	6c1298 <__Stack_Size+0x6c0e98>
    1194:	ec080007 	stc	0, cr0, [r8], {7}
    1198:	af000019 	svcge	0x00000019
    119c:	1c000011 	stcne	0, cr0, [r0], {17}
    11a0:	0c055001 	stceq	0, cr5, [r5], {1}
    11a4:	40010c00 	andmi	r0, r1, r0, lsl #24
    11a8:	0251011c 	subseq	r0, r1, #28, 2
    11ac:	27002008 	strcs	r2, [r0, -r8]
    11b0:	080007aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl}
    11b4:	0000195c 	andeq	r1, r0, ip, asr r9
    11b8:	0007c01b 	andeq	ip, r7, fp, lsl r0
    11bc:	000c0308 	andeq	r0, ip, r8, lsl #6
    11c0:	0011da00 	andseq	sp, r1, r0, lsl #20
    11c4:	50011c00 	andpl	r1, r1, r0, lsl #24
    11c8:	1c007702 	stcne	7, cr7, [r0], {2}
    11cc:	03055101 	movweq	r5, #20737	; 0x5101
    11d0:	080027b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp}
    11d4:	0152011c 	cmpeq	r2, ip, lsl r1
    11d8:	cc1b0037 	ldcgt	0, cr0, [fp], {55}	; 0x37
    11dc:	eb080007 	bl	201200 <__Stack_Size+0x200e00>
    11e0:	f1000008 	cps	#8
    11e4:	1c000011 	stcne	0, cr0, [r0], {17}
    11e8:	03055001 	movweq	r5, #20481	; 0x5001
    11ec:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
    11f0:	07e02700 	strbeq	r2, [r0, r0, lsl #14]!
    11f4:	0a7b0800 	beq	1ec31fc <__Stack_Size+0x1ec2dfc>
    11f8:	31000000 	mrscc	r0, (UNDEF: 0)
    11fc:	0000092f 	andeq	r0, r0, pc, lsr #18
    1200:	0000120b 	andeq	r1, r0, fp, lsl #4
    1204:	00011b32 	andeq	r1, r1, r2, lsr fp
    1208:	05000f00 	streq	r0, [r0, #-3840]	; 0xfffff100
    120c:	000004a5 	andeq	r0, r0, r5, lsr #9
    1210:	00069f05 	andeq	r9, r6, r5, lsl #30
    1214:	059c1900 	ldreq	r1, [ip, #2304]	; 0x900
    1218:	7d010000 	stcvc	0, cr0, [r1, #-0]
    121c:	00081c04 	andeq	r1, r8, r4, lsl #24
    1220:	00008c08 	andeq	r8, r0, r8, lsl #24
    1224:	5d9c0100 	ldfpls	f0, [ip]
    1228:	27000013 	smladcs	r0, r3, r0, r0
    122c:	08000822 	stmdaeq	r0, {r1, r5, fp}
    1230:	00001a0e 	andeq	r1, r0, lr, lsl #20
    1234:	00082a1b 	andeq	r2, r8, fp, lsl sl
    1238:	001a1908 	andseq	r1, sl, r8, lsl #18
    123c:	00124900 	andseq	r4, r2, r0, lsl #18
    1240:	50011c00 	andpl	r1, r1, r0, lsl #24
    1244:	243c4003 	ldrtcs	r4, [ip], #-3
    1248:	082e2700 	stmdaeq	lr!, {r8, r9, sl, sp}
    124c:	1a240800 	bne	903254 <__Stack_Size+0x902e54>
    1250:	421b0000 	andsmi	r0, fp, #0
    1254:	2f080008 	svccs	0x00080008
    1258:	6c00001a 	stcvs	0, cr0, [r0], {26}
    125c:	1c000012 	stcne	0, cr0, [r0], {18}
    1260:	0a035001 	beq	d526c <__Stack_Size+0xd4e6c>
    1264:	011c401d 	tsteq	ip, sp, lsl r0
    1268:	00310151 	eorseq	r0, r1, r1, asr r1
    126c:	00084e33 	andeq	r4, r8, r3, lsr lr
    1270:	001a3b08 	andseq	r3, sl, r8, lsl #22
    1274:	00128800 	andseq	r8, r2, r0, lsl #16
    1278:	50011c00 	andpl	r1, r1, r0, lsl #24
    127c:	00010c05 	andeq	r0, r1, r5, lsl #24
    1280:	011c1082 	tsteq	ip, r2, lsl #1
    1284:	00310151 	eorseq	r0, r1, r1, asr r1
    1288:	0008541b 	andeq	r5, r8, fp, lsl r4
    128c:	001a4708 	andseq	r4, sl, r8, lsl #14
    1290:	00129b00 	andseq	r9, r2, r0, lsl #22
    1294:	50011c00 	andpl	r1, r1, r0, lsl #24
    1298:	1b004001 	blne	112a4 <__Stack_Size+0x10ea4>
    129c:	0800085a 	stmdaeq	r0, {r1, r3, r4, r6, fp}
    12a0:	00001a52 	andeq	r1, r0, r2, asr sl
    12a4:	000012ae 	andeq	r1, r0, lr, lsr #5
    12a8:	0150011c 	cmpeq	r0, ip, lsl r1
    12ac:	601b0032 	andsvs	r0, fp, r2, lsr r0
    12b0:	5d080008 	stcpl	0, cr0, [r8, #-32]	; 0xffffffe0
    12b4:	c100001a 	tstgt	r0, sl, lsl r0
    12b8:	1c000012 	stcne	0, cr0, [r0], {18}
    12bc:	30015001 	andcc	r5, r1, r1
    12c0:	08661b00 	stmdaeq	r6!, {r8, r9, fp, ip}^
    12c4:	1a690800 	bne	1a432cc <__Stack_Size+0x1a42ecc>
    12c8:	12d40000 	sbcsne	r0, r4, #0
    12cc:	011c0000 	tsteq	ip, r0
    12d0:	00300150 	eorseq	r0, r0, r0, asr r1
    12d4:	00086e1b 	andeq	r6, r8, fp, lsl lr
    12d8:	001a7508 	andseq	r7, sl, r8, lsl #10
    12dc:	0012e900 	andseq	lr, r2, r0, lsl #18
    12e0:	50011c00 	andpl	r1, r1, r0, lsl #24
    12e4:	04000a03 	streq	r0, [r0], #-2563	; 0xfffff5fd
    12e8:	087a1b00 	ldmdaeq	sl!, {r8, r9, fp, ip}^
    12ec:	1a810800 	bne	fe0432f4 <SCS_BASE+0x1e0352f4>
    12f0:	13050000 	movwne	r0, #20480	; 0x5000
    12f4:	011c0000 	tsteq	ip, r0
    12f8:	3c400350 	mcrrcc	3, 5, r0, r0, cr0
    12fc:	51011c24 	tstpl	r1, r4, lsr #24
    1300:	24404c03 	strbcs	r4, [r0], #-3075	; 0xfffff3fd
    1304:	08801b00 	stmeq	r0, {r8, r9, fp, ip}
    1308:	1a8d0800 	bne	fe343310 <SCS_BASE+0x1e335310>
    130c:	13190000 	tstne	r9, #0
    1310:	011c0000 	tsteq	ip, r0
    1314:	00740250 	rsbseq	r0, r4, r0, asr r2
    1318:	08861b00 	stmeq	r6, {r8, r9, fp, ip}
    131c:	1a990800 	bne	fe643324 <SCS_BASE+0x1e635324>
    1320:	132d0000 			; <UNDEFINED> instruction: 0x132d0000
    1324:	011c0000 	tsteq	ip, r0
    1328:	39080250 	stmdbcc	r8, {r4, r6, r9}
    132c:	08901b00 	ldmeq	r0, {r8, r9, fp, ip}
    1330:	1aa50800 	bne	fe943338 <SCS_BASE+0x1e935338>
    1334:	13400000 	movtne	r0, #0
    1338:	011c0000 	tsteq	ip, r0
    133c:	00320150 	eorseq	r0, r2, r0, asr r1
    1340:	0008961b 	andeq	r9, r8, fp, lsl r6
    1344:	001ab108 	andseq	fp, sl, r8, lsl #2
    1348:	00135300 	andseq	r5, r3, r0, lsl #6
    134c:	50011c00 	andpl	r1, r1, r0, lsl #24
    1350:	27003001 	strcs	r3, [r0, -r1]
    1354:	0800089a 	stmdaeq	r0, {r1, r3, r4, r7, fp}
    1358:	00001abd 			; <UNDEFINED> instruction: 0x00001abd
    135c:	0a6b1900 	beq	1ac7764 <__Stack_Size+0x1ac7364>
    1360:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1364:	0008a804 	andeq	sl, r8, r4, lsl #16
    1368:	00012808 	andeq	r2, r1, r8, lsl #16
    136c:	0d9c0100 	ldfeqs	f0, [ip]
    1370:	1a000015 	bne	13cc <__Stack_Size+0xfcc>
    1374:	000005e4 	andeq	r0, r0, r4, ror #11
    1378:	4f04d401 	svcmi	0x0004d401
    137c:	02000005 	andeq	r0, r0, #5
    1380:	ca1b5491 	bgt	6d65cc <__Stack_Size+0x6d61cc>
    1384:	c9080008 	stmdbgt	r8, {r3}
    1388:	9c00001a 	stcls	0, cr0, [r0], {26}
    138c:	1c000013 	stcne	0, cr0, [r0], {19}
    1390:	74025001 	strvc	r5, [r2], #-1
    1394:	51011c00 	tstpl	r1, r0, lsl #24
    1398:	00549102 	subseq	r9, r4, r2, lsl #2
    139c:	0008e41b 	andeq	lr, r8, fp, lsl r4
    13a0:	001ac908 	andseq	ip, sl, r8, lsl #18
    13a4:	0013b600 	andseq	fp, r3, r0, lsl #12
    13a8:	50011c00 	andpl	r1, r1, r0, lsl #24
    13ac:	1c007402 	cfstrsne	mvf7, [r0], {2}
    13b0:	91025101 	tstls	r2, r1, lsl #2
    13b4:	021b0054 	andseq	r0, fp, #84	; 0x54
    13b8:	c9080009 	stmdbgt	r8, {r0, r3}
    13bc:	d300001a 	movwle	r0, #26
    13c0:	1c000013 	stcne	0, cr0, [r0], {19}
    13c4:	0c055001 	stceq	0, cr5, [r5], {1}
    13c8:	40010800 	andmi	r0, r1, r0, lsl #16
    13cc:	0251011c 	subseq	r0, r1, #28, 2
    13d0:	1b005491 	blne	1661c <__Stack_Size+0x1621c>
    13d4:	0800091a 	stmdaeq	r0, {r1, r3, r4, r8, fp}
    13d8:	00001ac9 	andeq	r1, r0, r9, asr #21
    13dc:	000013ed 	andeq	r1, r0, sp, ror #7
    13e0:	0250011c 	subseq	r0, r0, #28, 2
    13e4:	011c0074 	tsteq	ip, r4, ror r0
    13e8:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    13ec:	092e1b00 	stmdbeq	lr!, {r8, r9, fp, ip}
    13f0:	1ac90800 	bne	ff2433f8 <SCS_BASE+0x1f2353f8>
    13f4:	14070000 	strne	r0, [r7], #-0
    13f8:	011c0000 	tsteq	ip, r0
    13fc:	00740250 	rsbseq	r0, r4, r0, asr r2
    1400:	0251011c 	subseq	r0, r1, #28, 2
    1404:	1b005491 	blne	16650 <__Stack_Size+0x16250>
    1408:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
    140c:	00001ac9 	andeq	r1, r0, r9, asr #21
    1410:	00001421 	andeq	r1, r0, r1, lsr #8
    1414:	0250011c 	subseq	r0, r0, #28, 2
    1418:	011c007a 	tsteq	ip, sl, ror r0
    141c:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    1420:	09541b00 	ldmdbeq	r4, {r8, r9, fp, ip}^
    1424:	1a030800 	bne	c342c <__Stack_Size+0xc302c>
    1428:	143d0000 	ldrtne	r0, [sp], #-0
    142c:	011c0000 	tsteq	ip, r0
    1430:	007a0250 	rsbseq	r0, sl, r0, asr r2
    1434:	0451011c 	ldrbeq	r0, [r1], #-284	; 0xfffffee4
    1438:	02944c91 	addseq	r4, r4, #37120	; 0x9100
    143c:	096c1b00 	stmdbeq	ip!, {r8, r9, fp, ip}^
    1440:	1ac90800 	bne	ff243448 <SCS_BASE+0x1f235448>
    1444:	14570000 	ldrbne	r0, [r7], #-0
    1448:	011c0000 	tsteq	ip, r0
    144c:	00740250 	rsbseq	r0, r4, r0, asr r2
    1450:	0251011c 	subseq	r0, r1, #28, 2
    1454:	1b005491 	blne	166a0 <__Stack_Size+0x162a0>
    1458:	0800097e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp}
    145c:	00001ac9 	andeq	r1, r0, r9, asr #21
    1460:	00001471 	andeq	r1, r0, r1, ror r4
    1464:	0250011c 	subseq	r0, r0, #28, 2
    1468:	011c0074 	tsteq	ip, r4, ror r0
    146c:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    1470:	09941b00 	ldmibeq	r4, {r8, r9, fp, ip}
    1474:	1ac90800 	bne	ff24347c <SCS_BASE+0x1f23547c>
    1478:	148b0000 	strne	r0, [fp], #0
    147c:	011c0000 	tsteq	ip, r0
    1480:	00740250 	rsbseq	r0, r4, r0, asr r2
    1484:	0251011c 	subseq	r0, r1, #28, 2
    1488:	1b005491 	blne	166d4 <__Stack_Size+0x162d4>
    148c:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
    1490:	000019ec 	andeq	r1, r0, ip, ror #19
    1494:	000014a5 	andeq	r1, r0, r5, lsr #9
    1498:	0250011c 	subseq	r0, r0, #28, 2
    149c:	011c0074 	tsteq	ip, r4, ror r0
    14a0:	007a0251 	rsbseq	r0, sl, r1, asr r2
    14a4:	09a41b00 	stmibeq	r4!, {r8, r9, fp, ip}
    14a8:	1a030800 	bne	c34b0 <__Stack_Size+0xc30b0>
    14ac:	14bf0000 	ldrtne	r0, [pc], #0	; 14b4 <__Stack_Size+0x10b4>
    14b0:	011c0000 	tsteq	ip, r0
    14b4:	00740250 	rsbseq	r0, r4, r0, asr r2
    14b8:	0251011c 	subseq	r0, r1, #28, 2
    14bc:	1b000076 	blne	169c <__Stack_Size+0x129c>
    14c0:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
    14c4:	00001a03 	andeq	r1, r0, r3, lsl #20
    14c8:	000014d9 	ldrdeq	r1, [r0], -r9
    14cc:	0250011c 	subseq	r0, r0, #28, 2
    14d0:	011c0074 	tsteq	ip, r4, ror r0
    14d4:	00790251 	rsbseq	r0, r9, r1, asr r2
    14d8:	09b41b00 	ldmibeq	r4!, {r8, r9, fp, ip}
    14dc:	1ad40800 	bne	ff5034e4 <SCS_BASE+0x1f4f54e4>
    14e0:	14f30000 	ldrbtne	r0, [r3], #0
    14e4:	011c0000 	tsteq	ip, r0
    14e8:	00760250 	rsbseq	r0, r6, r0, asr r2
    14ec:	0251011c 	subseq	r0, r1, #28, 2
    14f0:	1d000075 	stcne	0, cr0, [r0, #-468]	; 0xfffffe2c
    14f4:	080009bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp}
    14f8:	00001ad4 	ldrdeq	r1, [r0], -r4
    14fc:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0xfffffee4
    1500:	3001000c 	andcc	r0, r1, ip
    1504:	51011c00 	tstpl	r1, r0, lsl #24
    1508:	00007502 	andeq	r7, r0, r2, lsl #10
    150c:	09de1900 	ldmibeq	lr, {r8, fp, ip}^
    1510:	25010000 	strcs	r0, [r1, #-0]
    1514:	0009d005 	andeq	sp, r9, r5
    1518:	00007c08 	andeq	r7, r0, r8, lsl #24
    151c:	ae9c0100 	fmlgee	f0, f4, f0
    1520:	1a000015 	bne	157c <__Stack_Size+0x117c>
    1524:	00000499 	muleq	r0, r9, r4
    1528:	93052701 	movwls	r2, #22273	; 0x5701
    152c:	02000005 	andeq	r0, r0, #5
    1530:	dc1b6c91 	ldcle	12, cr6, [fp], {145}	; 0x91
    1534:	df080009 	svcle	0x00080009
    1538:	4c00001a 	stcmi	0, cr0, [r0], {26}
    153c:	1c000015 	stcne	0, cr0, [r0], {21}
    1540:	40035001 	andmi	r5, r3, r1
    1544:	011c2447 	tsteq	ip, r7, asr #8
    1548:	00300151 	eorseq	r0, r0, r1, asr r1
    154c:	0009e61b 	andeq	lr, r9, fp, lsl r6
    1550:	001aeb08 	andseq	lr, sl, r8, lsl #22
    1554:	00156100 	andseq	r6, r5, r0, lsl #2
    1558:	50011c00 	andpl	r1, r1, r0, lsl #24
    155c:	05000a03 	streq	r0, [r0, #-2563]	; 0xfffff5fd
    1560:	0a001b00 	beq	8168 <__Stack_Size+0x7d68>
    1564:	1af60800 	bne	ffd8356c <SCS_BASE+0x1fd7556c>
    1568:	15750000 	ldrbne	r0, [r5, #-0]!
    156c:	011c0000 	tsteq	ip, r0
    1570:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
    1574:	0a181b00 	beq	60817c <__Stack_Size+0x607d7c>
    1578:	1af60800 	bne	ffd83580 <SCS_BASE+0x1fd75580>
    157c:	15890000 	strne	r0, [r9]
    1580:	011c0000 	tsteq	ip, r0
    1584:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
    1588:	0a301b00 	beq	c08190 <__Stack_Size+0xc07d90>
    158c:	1af60800 	bne	ffd83594 <SCS_BASE+0x1fd75594>
    1590:	159d0000 	ldrne	r0, [sp]
    1594:	011c0000 	tsteq	ip, r0
    1598:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
    159c:	0a481d00 	beq	12089a4 <__Stack_Size+0x12085a4>
    15a0:	1af60800 	bne	ffd835a8 <SCS_BASE+0x1fd755a8>
    15a4:	011c0000 	tsteq	ip, r0
    15a8:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
    15ac:	7c340000 	ldcvc	0, cr0, [r4], #-0
    15b0:	0100000b 	tsteq	r0, fp
    15b4:	0006df9b 	muleq	r6, fp, pc	; <UNPREDICTABLE>
    15b8:	000a4c00 	andeq	r4, sl, r0, lsl #24
    15bc:	0000b408 	andeq	fp, r0, r8, lsl #8
    15c0:	289c0100 	ldmcs	ip, {r8}
    15c4:	35000017 	strcc	r0, [r0, #-23]	; 0xffffffe9
    15c8:	000002a4 	andeq	r0, r0, r4, lsr #5
    15cc:	0041cd01 	subeq	ip, r1, r1, lsl #26
    15d0:	069f0000 	ldreq	r0, [pc], r0
    15d4:	ca350000 	bgt	d415dc <__Stack_Size+0xd411dc>
    15d8:	01000009 	tsteq	r0, r9
    15dc:	0006aae3 	andeq	sl, r6, r3, ror #21
    15e0:	0006eb00 	andeq	lr, r6, r0, lsl #22
    15e4:	00e73500 	rsceq	r3, r7, r0, lsl #10
    15e8:	e4010000 	str	r0, [r1], #-0
    15ec:	00000041 	andeq	r0, r0, r1, asr #32
    15f0:	000006eb 	andeq	r0, r0, fp, ror #13
    15f4:	000a5227 	andeq	r5, sl, r7, lsr #4
    15f8:	00121508 	andseq	r1, r2, r8, lsl #10
    15fc:	0a562700 	beq	158b204 <__Stack_Size+0x158ae04>
    1600:	135d0800 	cmpne	sp, #0, 16
    1604:	5a270000 	bpl	9c160c <__Stack_Size+0x9c120c>
    1608:	0d08000a 	stceq	0, cr0, [r8, #-40]	; 0xffffffd8
    160c:	27000015 	smladcs	r0, r5, r0, r0
    1610:	08000a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp}
    1614:	00000724 	andeq	r0, r0, r4, lsr #14
    1618:	000a661b 	andeq	r6, sl, fp, lsl r6
    161c:	001b0208 	andseq	r0, fp, r8, lsl #4
    1620:	00162d00 	andseq	r2, r6, r0, lsl #26
    1624:	50011c00 	andpl	r1, r1, r0, lsl #24
    1628:	23280a03 			; <UNDEFINED> instruction: 0x23280a03
    162c:	0a6c1b00 	beq	1b08234 <__Stack_Size+0x1b07e34>
    1630:	1b0d0800 	blne	343638 <__Stack_Size+0x343238>
    1634:	16400000 	strbne	r0, [r0], -r0
    1638:	011c0000 	tsteq	ip, r0
    163c:	00310150 	eorseq	r0, r1, r0, asr r1
    1640:	000a741b 	andeq	r7, sl, fp, lsl r4
    1644:	001b1808 	andseq	r1, fp, r8, lsl #16
    1648:	00165500 	andseq	r5, r6, r0, lsl #10
    164c:	50011c00 	andpl	r1, r1, r0, lsl #24
    1650:	55550a03 	ldrbpl	r0, [r5, #-2563]	; 0xfffff5fd
    1654:	0a7a1b00 	beq	1e8825c <__Stack_Size+0x1e87e5c>
    1658:	1b230800 	blne	8c3660 <__Stack_Size+0x8c3260>
    165c:	16680000 	strbtne	r0, [r8], -r0
    1660:	011c0000 	tsteq	ip, r0
    1664:	00300150 	eorseq	r0, r0, r0, asr r1
    1668:	000a801b 	andeq	r8, sl, fp, lsl r0
    166c:	001b2e08 	andseq	r2, fp, r8, lsl #28
    1670:	00167b00 	andseq	r7, r6, r0, lsl #22
    1674:	50011c00 	andpl	r1, r1, r0, lsl #24
    1678:	1b003a01 	blne	fe84 <__Stack_Size+0xfa84>
    167c:	08000a8a 	stmdaeq	r0, {r1, r3, r7, r9, fp}
    1680:	00000ca7 	andeq	r0, r0, r7, lsr #25
    1684:	00001695 	muleq	r0, r5, r6
    1688:	0150011c 	cmpeq	r0, ip, lsl r1
    168c:	51011c32 	tstpl	r1, r2, lsr ip
    1690:	e1000a03 	tst	r0, r3, lsl #20
    1694:	0a9a1b00 	beq	fe68829c <SCS_BASE+0x1e67a29c>
    1698:	0bac0800 	bleq	feb036a0 <SCS_BASE+0x1eaf56a0>
    169c:	16a90000 	strtne	r0, [r9], r0
    16a0:	011c0000 	tsteq	ip, r0
    16a4:	46080250 			; <UNDEFINED> instruction: 0x46080250
    16a8:	0a9e2700 	beq	fe78b2b0 <SCS_BASE+0x1e77d2b0>
    16ac:	1b390800 	blne	e436b4 <__Stack_Size+0xe432b4>
    16b0:	a61b0000 	ldrge	r0, [fp], -r0
    16b4:	4408000a 	strmi	r0, [r8], #-10
    16b8:	ce00001b 	mcrgt	0, 0, r0, cr0, cr11, {0}
    16bc:	1c000016 	stcne	0, cr0, [r0], {22}
    16c0:	0c055001 	stceq	0, cr5, [r5], {1}
    16c4:	40010800 	andmi	r0, r1, r0, lsl #16
    16c8:	0151011c 	cmpeq	r1, ip, lsl r1
    16cc:	b01b0031 	andslt	r0, fp, r1, lsr r0
    16d0:	eb08000a 	bl	201700 <__Stack_Size+0x201300>
    16d4:	e5000008 	str	r0, [r0, #-8]
    16d8:	1c000016 	stcne	0, cr0, [r0], {22}
    16dc:	03055001 	movweq	r5, #20481	; 0x5001
    16e0:	080027da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, sp}
    16e4:	0aba1b00 	beq	fee882ec <SCS_BASE+0x1ee7a2ec>
    16e8:	1a990800 	bne	fe6436f0 <SCS_BASE+0x1e6356f0>
    16ec:	16f90000 	ldrbtne	r0, [r9], r0
    16f0:	011c0000 	tsteq	ip, r0
    16f4:	7d080250 	sfmvc	f0, 4, [r8, #-320]	; 0xfffffec0
    16f8:	0ac22700 	beq	ff08b300 <SCS_BASE+0x1f07d300>
    16fc:	1b4f0800 	blne	13c3704 <__Stack_Size+0x13c3304>
    1700:	ce1b0000 	cdpgt	0, 1, cr0, cr11, cr0, {0}
    1704:	4408000a 	strmi	r0, [r8], #-10
    1708:	1e00001b 	mcrne	0, 0, r0, cr0, cr11, {0}
    170c:	1c000017 	stcne	0, cr0, [r0], {23}
    1710:	0c055001 	stceq	0, cr5, [r5], {1}
    1714:	40010800 	andmi	r0, r1, r0, lsl #16
    1718:	0151011c 	cmpeq	r1, ip, lsl r1
    171c:	e8270031 	stmda	r7!, {r0, r4, r5}
    1720:	4908000a 	stmdbmi	r8, {r1, r3}
    1724:	0000000e 	andeq	r0, r0, lr
    1728:	000c9536 	andeq	r9, ip, r6, lsr r5
    172c:	10390100 	eorsne	r0, r9, r0, lsl #2
    1730:	05000001 	streq	r0, [r0, #-1]
    1734:	00013003 	andeq	r3, r1, r3
    1738:	04723620 	ldrbteq	r3, [r2], #-1568	; 0xfffff9e0
    173c:	3a010000 	bcc	41744 <__Stack_Size+0x41344>
    1740:	0000063f 	andeq	r0, r0, pc, lsr r6
    1744:	01900305 	orrseq	r0, r0, r5, lsl #6
    1748:	5b312000 	blpl	c49750 <__Stack_Size+0xc49350>
    174c:	5b000017 	blpl	17b0 <__Stack_Size+0x13b0>
    1750:	37000017 	smladcc	r0, r7, r0, r0
    1754:	0000011b 	andeq	r0, r0, fp, lsl r1
    1758:	050003ff 	streq	r0, [r0, #-1023]	; 0xfffffc01
    175c:	00000065 	andeq	r0, r0, r5, rrx
    1760:	00002936 	andeq	r2, r0, r6, lsr r9
    1764:	713c0100 	teqvc	ip, r0, lsl #2
    1768:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    176c:	0001a003 	andeq	sl, r1, r3
    1770:	174a0520 	strbne	r0, [sl, -r0, lsr #10]
    1774:	00360000 	eorseq	r0, r6, r0
    1778:	01000005 	tsteq	r0, r5
    177c:	0017873d 	andseq	r8, r7, sp, lsr r7
    1780:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    1784:	05200001 	streq	r0, [r0, #-1]!
    1788:	00000053 	andeq	r0, r0, r3, asr r0
    178c:	00035d36 	andeq	r5, r3, r6, lsr sp
    1790:	873d0100 	ldrhi	r0, [sp, -r0, lsl #2]!
    1794:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    1798:	00013803 	andeq	r3, r1, r3, lsl #16
    179c:	092f3120 	stmdbeq	pc!, {r5, r8, ip, sp}	; <UNPREDICTABLE>
    17a0:	17ad0000 	strne	r0, [sp, r0]!
    17a4:	1b320000 	blne	c817ac <__Stack_Size+0xc813ac>
    17a8:	50000001 	andpl	r0, r0, r1
    17ac:	02d83600 	sbcseq	r3, r8, #0, 12
    17b0:	3f010000 	svccc	0x00010000
    17b4:	0000179d 	muleq	r0, sp, r7
    17b8:	013a0305 	teqeq	sl, r5, lsl #6
    17bc:	94362000 	ldrtls	r2, [r6], #-0
    17c0:	01000001 	tsteq	r0, r1
    17c4:	00007641 	andeq	r7, r0, r1, asr #12
    17c8:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    17cc:	36200001 	strtcc	r0, [r0], -r1
    17d0:	0000056e 	andeq	r0, r0, lr, ror #10
    17d4:	00414301 	subeq	r4, r1, r1, lsl #6
    17d8:	03050000 	movweq	r0, #20480	; 0x5000
    17dc:	20000108 	andcs	r0, r0, r8, lsl #2
    17e0:	00004336 	andeq	r4, r0, r6, lsr r3
    17e4:	766f0100 	strbtvc	r0, [pc], -r0, lsl #2
    17e8:	05000000 	streq	r0, [r0, #-0]
    17ec:	0000e403 	andeq	lr, r0, r3, lsl #8
    17f0:	05ae3620 	streq	r3, [lr, #1568]!	; 0x620
    17f4:	70010000 	andvc	r0, r1, r0
    17f8:	00000076 	andeq	r0, r0, r6, ror r0
    17fc:	00e80305 	rsceq	r0, r8, r5, lsl #6
    1800:	02362000 	eorseq	r2, r6, #0
    1804:	01000009 	tsteq	r0, r9
    1808:	00175b76 	andseq	r5, r7, r6, ror fp
    180c:	a0030500 	andge	r0, r3, r0, lsl #10
    1810:	36200006 	strtcc	r0, [r0], -r6
    1814:	00000c6d 	andeq	r0, r0, sp, ror #24
    1818:	175b7701 	ldrbne	r7, [fp, -r1, lsl #14]
    181c:	03050000 	movweq	r0, #20480	; 0x5000
    1820:	20000131 	andcs	r0, r0, r1, lsr r1
    1824:	00175b31 	andseq	r5, r7, r1, lsr fp
    1828:	00183400 	andseq	r3, r8, r0, lsl #8
    182c:	011b3200 	tsteq	fp, r0, lsl #4
    1830:	00ff0000 	rscseq	r0, pc, r0
    1834:	00066e36 	andeq	r6, r6, r6, lsr lr
    1838:	45780100 	ldrbmi	r0, [r8, #-256]!	; 0xffffff00
    183c:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    1840:	0005a003 	andeq	sl, r5, r3
    1844:	18240520 	stmdane	r4!, {r5, r8, sl}
    1848:	93360000 	teqls	r6, #0
    184c:	01000002 	tsteq	r0, r2
    1850:	0000767c 	andeq	r7, r0, ip, ror r6
    1854:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    1858:	36200000 	strtcc	r0, [r0], -r0
    185c:	00000112 	andeq	r0, r0, r2, lsl r1
    1860:	00767c01 	rsbseq	r7, r6, r1, lsl #24
    1864:	03050000 	movweq	r0, #20480	; 0x5000
    1868:	200000fc 	strdcs	r0, [r0], -ip
    186c:	00083836 	andeq	r3, r8, r6, lsr r8
    1870:	767c0100 	ldrbtvc	r0, [ip], -r0, lsl #2
    1874:	05000000 	streq	r0, [r0, #-0]
    1878:	00010403 	andeq	r0, r1, r3, lsl #8
    187c:	0b213620 	bleq	84f104 <__Stack_Size+0x84ed04>
    1880:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1884:	00000076 	andeq	r0, r0, r6, ror r0
    1888:	00f80305 	rscseq	r0, r8, r5, lsl #6
    188c:	04362000 	ldrteq	r2, [r6], #-0
    1890:	01000008 	tsteq	r0, r8
    1894:	0000767e 	andeq	r7, r0, lr, ror r6
    1898:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    189c:	36200000 	strtcc	r0, [r0], -r0
    18a0:	00000446 	andeq	r0, r0, r6, asr #8
    18a4:	00af8801 	adceq	r8, pc, r1, lsl #16
    18a8:	03050000 	movweq	r0, #20480	; 0x5000
    18ac:	20000100 	andcs	r0, r0, r0, lsl #2
    18b0:	0005d636 	andeq	sp, r5, r6, lsr r6
    18b4:	af8e0100 	svcge	0x008e0100
    18b8:	05000000 	streq	r0, [r0, #-0]
    18bc:	00000003 	andeq	r0, r0, r3
    18c0:	032e3820 			; <UNDEFINED> instruction: 0x032e3820
    18c4:	90010000 	andls	r0, r1, r0
    18c8:	000018cc 	andeq	r1, r0, ip, asr #17
    18cc:	00004105 	andeq	r4, r0, r5, lsl #2
    18d0:	07da3900 	ldrbeq	r3, [sl, r0, lsl #18]
    18d4:	fb010000 	blx	418de <__Stack_Size+0x414de>
    18d8:	00006501 	andeq	r6, r0, r1, lsl #10
    18dc:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    18e0:	3a200000 	bcc	8018e8 <__Stack_Size+0x8014e8>
    18e4:	00000881 	andeq	r0, r0, r1, lsl #17
    18e8:	8701fd01 	strhi	pc, [r1, -r1, lsl #26]
    18ec:	31000017 	tstcc	r0, r7, lsl r0
    18f0:	00000065 	andeq	r0, r0, r5, rrx
    18f4:	000018ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    18f8:	00011b32 	andeq	r1, r1, r2, lsr fp
    18fc:	3a003f00 	bcc	11504 <__Stack_Size+0x11104>
    1900:	00000acf 	andeq	r0, r0, pc, asr #21
    1904:	ef01fe01 	svc	0x0001fe01
    1908:	3b000018 	blcc	1970 <__Stack_Size+0x1570>
    190c:	00000c84 	andeq	r0, r0, r4, lsl #25
    1910:	00000c84 	andeq	r0, r0, r4, lsl #25
    1914:	3b02a407 	blcc	aa938 <__Stack_Size+0xaa538>
    1918:	00000bdd 	ldrdeq	r0, [r0], -sp
    191c:	00000bdd 	ldrdeq	r0, [r0], -sp
    1920:	3b02c007 	blcc	b1944 <__Stack_Size+0xb1544>
    1924:	0000022f 	andeq	r0, r0, pc, lsr #4
    1928:	0000022f 	andeq	r0, r0, pc, lsr #4
    192c:	3b02fc07 	blcc	c0950 <__Stack_Size+0xc0550>
    1930:	00000818 	andeq	r0, r0, r8, lsl r8
    1934:	00000818 	andeq	r0, r0, r8, lsl r8
    1938:	3c02b207 	sfmcc	f3, 1, [r2], {7}
    193c:	00000853 	andeq	r0, r0, r3, asr r8
    1940:	00000853 	andeq	r0, r0, r3, asr r8
    1944:	bf3cf708 	svclt	0x003cf708
    1948:	bf000002 	svclt	0x00000002
    194c:	08000002 	stmdaeq	r0, {r1}
    1950:	031a3cec 	tsteq	sl, #236, 24	; 0xec00
    1954:	031a0000 	tsteq	sl, #0
    1958:	f6080000 			; <UNDEFINED> instruction: 0xf6080000
    195c:	000ae83c 	andeq	lr, sl, ip, lsr r8
    1960:	000ae800 	andeq	lr, sl, r0, lsl #16
    1964:	3c650100 	stfcce	f0, [r5], #-0
    1968:	00000825 	andeq	r0, r0, r5, lsr #16
    196c:	00000825 	andeq	r0, r0, r5, lsr #16
    1970:	b13c3909 	teqlt	ip, r9, lsl #18
    1974:	b100000c 	tstlt	r0, ip
    1978:	0800000c 	stmdaeq	r0, {r2, r3}
    197c:	09bd3ce1 	ldmibeq	sp!, {r0, r5, r6, r7, sl, fp, ip, sp}
    1980:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    1984:	df080000 	svcle	0x00080000
    1988:	0000d03c 	andeq	sp, r0, ip, lsr r0
    198c:	0000d000 	andeq	sp, r0, r0
    1990:	3ce00800 	stclcc	8, cr0, [r0]
    1994:	000007ef 	andeq	r0, r0, pc, ror #15
    1998:	000007ef 	andeq	r0, r0, pc, ror #15
    199c:	f23ce508 	vrshl.s64	d14, d8, d12
    19a0:	f2000001 	vhadd.s8	d0, d0, d1
    19a4:	08000001 	stmdaeq	r0, {r0}
    19a8:	03f53ce4 	mvnseq	r3, #228, 24	; 0xe400
    19ac:	03f50000 	mvnseq	r0, #0
    19b0:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    19b4:	0001bb3c 	andeq	fp, r1, ip, lsr fp
    19b8:	0001bb00 	andeq	fp, r1, r0, lsl #22
    19bc:	3cc90400 	cfstrdcc	mvd0, [r9], {0}
    19c0:	00000b81 	andeq	r0, r0, r1, lsl #23
    19c4:	00000b81 	andeq	r0, r0, r1, lsl #23
    19c8:	8c3cba04 	ldchi	10, cr11, [ip], #-16
    19cc:	8c000005 	stchi	0, cr0, [r0], {5}
    19d0:	04000005 	streq	r0, [r0], #-5
    19d4:	045b3bb9 	ldrbeq	r3, [fp], #-3001	; 0xfffff447
    19d8:	045b0000 	ldrbeq	r0, [fp], #-0
    19dc:	b0070000 	andlt	r0, r7, r0
    19e0:	08d53c02 	ldmeq	r5, {r1, sl, fp, ip, sp}^
    19e4:	08d50000 	ldmeq	r5, {}^	; <UNPREDICTABLE>
    19e8:	480a0000 	stmdami	sl, {}	; <UNPREDICTABLE>
    19ec:	0006ae3c 	andeq	sl, r6, ip, lsr lr
    19f0:	0006ae00 	andeq	sl, r6, r0, lsl #28
    19f4:	3be20500 	blcc	ff882dfc <SCS_BASE+0x1f874dfc>
    19f8:	00000121 	andeq	r0, r0, r1, lsr #2
    19fc:	00000121 	andeq	r0, r0, r1, lsr #2
    1a00:	3c011006 	stccc	0, cr1, [r1], {6}
    1a04:	000002e4 	andeq	r0, r0, r4, ror #5
    1a08:	000002e4 	andeq	r0, r0, r4, ror #5
    1a0c:	383ce105 	ldmdacc	ip!, {r0, r2, r8, sp, lr, pc}
    1a10:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1a14:	0b000000 	bleq	1a1c <__Stack_Size+0x161c>
    1a18:	05463cfd 	strbeq	r3, [r6, #-3325]	; 0xfffff303
    1a1c:	05460000 	strbeq	r0, [r6, #-0]
    1a20:	fe0b0000 	cdp2	0, 0, cr0, cr11, cr0, {0}
    1a24:	0001d03c 	andeq	sp, r1, ip, lsr r0
    1a28:	0001d000 	andeq	sp, r1, r0
    1a2c:	3bff0b00 	blcc	fffc4634 <SCS_BASE+0x1ffb6634>
    1a30:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    1a34:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    1a38:	3b01120b 	blcc	4626c <__Stack_Size+0x45e6c>
    1a3c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1a40:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1a44:	3c01130b 	stccc	3, cr1, [r1], {11}
    1a48:	0000015a 	andeq	r0, r0, sl, asr r1
    1a4c:	0000015a 	andeq	r0, r0, sl, asr r1
    1a50:	d03cb504 	eorsle	fp, ip, r4, lsl #10
    1a54:	d0000006 	andle	r0, r0, r6
    1a58:	04000006 	streq	r0, [r0], #-6
    1a5c:	06283bb3 			; <UNDEFINED> instruction: 0x06283bb3
    1a60:	06280000 	strteq	r0, [r8], -r0
    1a64:	060b0000 	streq	r0, [fp], -r0
    1a68:	01843b01 	orreq	r3, r4, r1, lsl #22
    1a6c:	01840000 	orreq	r0, r4, r0
    1a70:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    1a74:	064d3b01 	strbeq	r3, [sp], -r1, lsl #22
    1a78:	064d0000 	strbeq	r0, [sp], -r0
    1a7c:	070b0000 	streq	r0, [fp, -r0]
    1a80:	00f33b01 	rscseq	r3, r3, r1, lsl #22
    1a84:	00f30000 	rscseq	r0, r3, r0
    1a88:	020b0000 	andeq	r0, fp, #0
    1a8c:	0af43b01 	beq	ffd10698 <SCS_BASE+0x1fd02698>
    1a90:	0af40000 	beq	ffd01a98 <SCS_BASE+0x1fcf3a98>
    1a94:	030b0000 	movweq	r0, #45056	; 0xb000
    1a98:	07103b01 	ldreq	r3, [r0, -r1, lsl #22]
    1a9c:	07100000 	ldreq	r0, [r0, -r0]
    1aa0:	190b0000 	stmdbne	fp, {}	; <UNPREDICTABLE>
    1aa4:	00183b01 	andseq	r3, r8, r1, lsl #22
    1aa8:	00180000 	andseq	r0, r8, r0
    1aac:	040b0000 	streq	r0, [fp], #-0
    1ab0:	06ff3b01 	ldrbteq	r3, [pc], r1, lsl #22
    1ab4:	06ff0000 	ldrbteq	r0, [pc], r0
    1ab8:	0a0b0000 	beq	2c1ac0 <__Stack_Size+0x2c16c0>
    1abc:	088c3b01 	stmeq	ip, {r0, r8, r9, fp, ip, sp}
    1ac0:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    1ac4:	050b0000 	streq	r0, [fp, #-0]
    1ac8:	017a3c01 	cmneq	sl, r1, lsl #24
    1acc:	017a0000 	cmneq	sl, r0
    1ad0:	db050000 	blle	141ad8 <__Stack_Size+0x1416d8>
    1ad4:	0003063c 	andeq	r0, r3, ip, lsr r6
    1ad8:	00030600 	andeq	r0, r3, r0, lsl #12
    1adc:	3be80500 	blcc	ffa02ee4 <SCS_BASE+0x1f9f4ee4>
    1ae0:	000004d6 	ldrdeq	r0, [r0], -r6
    1ae4:	000004d6 	ldrdeq	r0, [r0], -r6
    1ae8:	3c010f06 	stccc	15, cr0, [r1], {6}
    1aec:	00000b36 	andeq	r0, r0, r6, lsr fp
    1af0:	00000b36 	andeq	r0, r0, r6, lsr fp
    1af4:	5d3bff06 	ldcpl	15, cr15, [fp, #-24]!	; 0xffffffe8
    1af8:	5d000006 	stcpl	0, cr0, [r0, #-24]	; 0xffffffe8
    1afc:	06000006 	streq	r0, [r0], -r6
    1b00:	9d3c0100 	ldflss	f0, [ip, #-0]
    1b04:	9d000009 	stcls	0, cr0, [r0, #-36]	; 0xffffffdc
    1b08:	09000009 	stmdbeq	r0, {r0, r3}
    1b0c:	06ee3c38 			; <UNDEFINED> instruction: 0x06ee3c38
    1b10:	06ee0000 	strbteq	r0, [lr], r0
    1b14:	3a090000 	bcc	241b1c <__Stack_Size+0x24171c>
    1b18:	0002ab3c 	andeq	sl, r2, ip, lsr fp
    1b1c:	0002ab00 	andeq	sl, r2, r0, lsl #22
    1b20:	3c3c0c00 	ldccc	12, cr0, [ip], #-0
    1b24:	000005f7 	strdeq	r0, [r0], -r7
    1b28:	000005f7 	strdeq	r0, [r0], -r7
    1b2c:	c73c3d0c 	ldrgt	r3, [ip, -ip, lsl #26]!
    1b30:	c7000005 	strgt	r0, [r0, -r5]
    1b34:	0c000005 	stceq	0, cr0, [r0], {5}
    1b38:	02f13c3e 	rscseq	r3, r1, #15872	; 0x3e00
    1b3c:	02f10000 	rscseq	r0, r1, #0
    1b40:	190d0000 	stmdbne	sp, {}	; <UNPREDICTABLE>
    1b44:	0004023c 	andeq	r0, r4, ip, lsr r2
    1b48:	00040200 	andeq	r0, r4, r0, lsl #4
    1b4c:	3bdd0500 	blcc	ff742f54 <SCS_BASE+0x1f734f54>
    1b50:	000008e6 	andeq	r0, r0, r6, ror #17
    1b54:	000008e6 	andeq	r0, r0, r6, ror #17
    1b58:	00011a0b 	andeq	r1, r1, fp, lsl #20
    1b5c:	00000539 	andeq	r0, r0, r9, lsr r5
    1b60:	03840004 	orreq	r0, r4, #4
    1b64:	01040000 	mrseq	r0, (UNDEF: 4)
    1b68:	00000bf1 	strdeq	r0, [r0], -r1
    1b6c:	000cf90c 	andeq	pc, ip, ip, lsl #18
    1b70:	00051f00 	andeq	r1, r5, r0, lsl #30
    1b74:	0000f800 	andeq	pc, r0, r0, lsl #16
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	0005a900 	andeq	sl, r5, r0, lsl #18
    1b80:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1b84:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    1b88:	88050202 	stmdahi	r5, {r1, r9}
    1b8c:	02000007 	andeq	r0, r0, #7
    1b90:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    1b94:	75030000 	strvc	r0, [r3, #-0]
    1b98:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    1b9c:	00004527 	andeq	r4, r0, r7, lsr #10
    1ba0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1ba4:	000008c3 	andeq	r0, r0, r3, asr #17
    1ba8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    1bac:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    1bb0:	02000000 	andeq	r0, r0, #0
    1bb4:	0b600702 	bleq	18037c4 <__Stack_Size+0x18033c4>
    1bb8:	75030000 	strvc	r0, [r3, #-0]
    1bbc:	29020038 	stmdbcs	r2, {r3, r4, r5}
    1bc0:	00000068 	andeq	r0, r0, r8, rrx
    1bc4:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    1bc8:	04000009 	streq	r0, [r0], #-9
    1bcc:	000003c6 	andeq	r0, r0, r6, asr #7
    1bd0:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    1bd4:	45050000 	strmi	r0, [r5, #-0]
    1bd8:	04000000 	streq	r0, [r0], #-0
    1bdc:	00000242 	andeq	r0, r0, r2, asr #4
    1be0:	008a3002 	addeq	r3, sl, r2
    1be4:	57050000 	strpl	r0, [r5, -r0]
    1be8:	06000000 	streq	r0, [r0], -r0
    1bec:	00006801 	andeq	r6, r0, r1, lsl #16
    1bf0:	a83c0200 	ldmdage	ip!, {r9}
    1bf4:	07000000 	streq	r0, [r0, -r0]
    1bf8:	00001a30 	andeq	r1, r0, r0, lsr sl
    1bfc:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    1c00:	00010054 	andeq	r0, r1, r4, asr r0
    1c04:	ba070402 	blt	1c2c14 <__Stack_Size+0x1c2814>
    1c08:	09000008 	stmdbeq	r0, {r3}
    1c0c:	020b0350 	andeq	r0, fp, #80, 6	; 0x40000001
    1c10:	000002c0 	andeq	r0, r0, r0, asr #5
    1c14:	3152430a 	cmpcc	r2, sl, lsl #6
    1c18:	020d0300 	andeq	r0, sp, #0, 6
    1c1c:	0000007f 	andeq	r0, r0, pc, ror r0
    1c20:	07420b00 	strbeq	r0, [r2, -r0, lsl #22]
    1c24:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    1c28:	00004c02 	andeq	r4, r0, r2, lsl #24
    1c2c:	430a0200 	movwmi	r0, #41472	; 0xa200
    1c30:	03003252 	movweq	r3, #594	; 0x252
    1c34:	007f020f 	rsbseq	r0, pc, pc, lsl #4
    1c38:	0b040000 	bleq	101c40 <__Stack_Size+0x101840>
    1c3c:	0000074c 	andeq	r0, r0, ip, asr #14
    1c40:	4c021003 	stcmi	0, cr1, [r2], {3}
    1c44:	06000000 	streq	r0, [r0], -r0
    1c48:	00051a0b 	andeq	r1, r5, fp, lsl #20
    1c4c:	02110300 	andseq	r0, r1, #0, 6
    1c50:	0000007f 	andeq	r0, r0, pc, ror r0
    1c54:	07560b08 	ldrbeq	r0, [r6, -r8, lsl #22]
    1c58:	12030000 	andne	r0, r3, #0
    1c5c:	00004c02 	andeq	r4, r0, r2, lsl #24
    1c60:	e40b0a00 	str	r0, [fp], #-2560	; 0xfffff600
    1c64:	03000003 	movweq	r0, #3
    1c68:	007f0213 	rsbseq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
    1c6c:	0b0c0000 	bleq	301c74 <__Stack_Size+0x301874>
    1c70:	00000760 	andeq	r0, r0, r0, ror #14
    1c74:	4c021403 	cfstrsmi	mvf1, [r2], {3}
    1c78:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c7c:	0052530a 	subseq	r5, r2, sl, lsl #6
    1c80:	7f021503 	svcvc	0x00021503
    1c84:	10000000 	andne	r0, r0, r0
    1c88:	00076a0b 	andeq	r6, r7, fp, lsl #20
    1c8c:	02160300 	andseq	r0, r6, #0, 6
    1c90:	0000004c 	andeq	r0, r0, ip, asr #32
    1c94:	47450a12 	smlaldmi	r0, r5, r2, sl
    1c98:	17030052 	smlsdne	r3, r2, r0, r0
    1c9c:	00007f02 	andeq	r7, r0, r2, lsl #30
    1ca0:	740b1400 	strvc	r1, [fp], #-1024	; 0xfffffc00
    1ca4:	03000007 	movweq	r0, #7
    1ca8:	004c0218 	subeq	r0, ip, r8, lsl r2
    1cac:	0b160000 	bleq	581cb4 <__Stack_Size+0x5818b4>
    1cb0:	00000276 	andeq	r0, r0, r6, ror r2
    1cb4:	7f021903 	svcvc	0x00021903
    1cb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1cbc:	00077e0b 	andeq	r7, r7, fp, lsl #28
    1cc0:	021a0300 	andseq	r0, sl, #0, 6
    1cc4:	0000004c 	andeq	r0, r0, ip, asr #32
    1cc8:	027c0b1a 	rsbseq	r0, ip, #26624	; 0x6800
    1ccc:	1b030000 	blne	c1cd4 <__Stack_Size+0xc18d4>
    1cd0:	00007f02 	andeq	r7, r0, r2, lsl #30
    1cd4:	d30b1c00 	movwle	r1, #48128	; 0xbc00
    1cd8:	0300000b 	movweq	r0, #11
    1cdc:	004c021c 	subeq	r0, ip, ip, lsl r2
    1ce0:	0b1e0000 	bleq	781ce8 <__Stack_Size+0x7818e8>
    1ce4:	00000494 	muleq	r0, r4, r4
    1ce8:	7f021d03 	svcvc	0x00021d03
    1cec:	20000000 	andcs	r0, r0, r0
    1cf0:	0007920b 	andeq	r9, r7, fp, lsl #4
    1cf4:	021e0300 	andseq	r0, lr, #0, 6
    1cf8:	0000004c 	andeq	r0, r0, ip, asr #32
    1cfc:	4e430a22 	vmlami.f32	s1, s6, s5
    1d00:	1f030054 	svcne	0x00030054
    1d04:	00007f02 	andeq	r7, r0, r2, lsl #30
    1d08:	9c0b2400 	cfstrsls	mvf2, [fp], {-0}
    1d0c:	03000007 	movweq	r0, #7
    1d10:	004c0220 	subeq	r0, ip, r0, lsr #4
    1d14:	0a260000 	beq	981d1c <__Stack_Size+0x98191c>
    1d18:	00435350 	subeq	r5, r3, r0, asr r3
    1d1c:	7f022103 	svcvc	0x00022103
    1d20:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1d24:	0009fd0b 	andeq	pc, r9, fp, lsl #26
    1d28:	02220300 	eoreq	r0, r2, #0, 6
    1d2c:	0000004c 	andeq	r0, r0, ip, asr #32
    1d30:	52410a2a 	subpl	r0, r1, #172032	; 0x2a000
    1d34:	23030052 	movwcs	r0, #12370	; 0x3052
    1d38:	00007f02 	andeq	r7, r0, r2, lsl #30
    1d3c:	080b2c00 	stmdaeq	fp, {sl, fp, sp}
    1d40:	0300000a 	movweq	r0, #10
    1d44:	004c0224 	subeq	r0, ip, r4, lsr #4
    1d48:	0a2e0000 	beq	b81d50 <__Stack_Size+0xb81950>
    1d4c:	00524352 	subseq	r4, r2, r2, asr r3
    1d50:	7f022503 	svcvc	0x00022503
    1d54:	30000000 	andcc	r0, r0, r0
    1d58:	000a130b 	andeq	r1, sl, fp, lsl #6
    1d5c:	02260300 	eoreq	r0, r6, #0, 6
    1d60:	0000004c 	andeq	r0, r0, ip, asr #32
    1d64:	02620b32 	rsbeq	r0, r2, #51200	; 0xc800
    1d68:	27030000 	strcs	r0, [r3, -r0]
    1d6c:	00007f02 	andeq	r7, r0, r2, lsl #30
    1d70:	1e0b3400 	cfcpysne	mvf3, mvf11
    1d74:	0300000a 	movweq	r0, #10
    1d78:	004c0228 	subeq	r0, ip, r8, lsr #4
    1d7c:	0b360000 	bleq	d81d84 <__Stack_Size+0xd81984>
    1d80:	00000267 	andeq	r0, r0, r7, ror #4
    1d84:	7f022903 	svcvc	0x00022903
    1d88:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1d8c:	000a290b 	andeq	r2, sl, fp, lsl #18
    1d90:	022a0300 	eoreq	r0, sl, #0, 6
    1d94:	0000004c 	andeq	r0, r0, ip, asr #32
    1d98:	026c0b3a 	rsbeq	r0, ip, #59392	; 0xe800
    1d9c:	2b030000 	blcs	c1da4 <__Stack_Size+0xc19a4>
    1da0:	00007f02 	andeq	r7, r0, r2, lsl #30
    1da4:	340b3c00 	strcc	r3, [fp], #-3072	; 0xfffff400
    1da8:	0300000a 	movweq	r0, #10
    1dac:	004c022c 	subeq	r0, ip, ip, lsr #4
    1db0:	0b3e0000 	bleq	f81db8 <__Stack_Size+0xf819b8>
    1db4:	00000271 	andeq	r0, r0, r1, ror r2
    1db8:	7f022d03 	svcvc	0x00022d03
    1dbc:	40000000 	andmi	r0, r0, r0
    1dc0:	000a3f0b 	andeq	r3, sl, fp, lsl #30
    1dc4:	022e0300 	eoreq	r0, lr, #0, 6
    1dc8:	0000004c 	andeq	r0, r0, ip, asr #32
    1dcc:	023d0b42 	eorseq	r0, sp, #67584	; 0x10800
    1dd0:	2f030000 	svccs	0x00030000
    1dd4:	00007f02 	andeq	r7, r0, r2, lsl #30
    1dd8:	4a0b4400 	bmi	2d2de0 <__Stack_Size+0x2d29e0>
    1ddc:	0300000a 	movweq	r0, #10
    1de0:	004c0230 	subeq	r0, ip, r0, lsr r2
    1de4:	0a460000 	beq	1181dec <__Stack_Size+0x11819ec>
    1de8:	00524344 	subseq	r4, r2, r4, asr #6
    1dec:	7f023103 	svcvc	0x00023103
    1df0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1df4:	000a550b 	andeq	r5, sl, fp, lsl #10
    1df8:	02320300 	eorseq	r0, r2, #0, 6
    1dfc:	0000004c 	andeq	r0, r0, ip, asr #32
    1e00:	07bf0b4a 	ldreq	r0, [pc, sl, asr #22]!
    1e04:	33030000 	movwcc	r0, #12288	; 0x3000
    1e08:	00007f02 	andeq	r7, r0, r2, lsl #30
    1e0c:	600b4c00 	andvs	r4, fp, r0, lsl #24
    1e10:	0300000a 	movweq	r0, #10
    1e14:	004c0234 	subeq	r0, ip, r4, lsr r2
    1e18:	004e0000 	subeq	r0, lr, r0
    1e1c:	0001e60c 	andeq	lr, r1, ip, lsl #12
    1e20:	02350300 	eorseq	r0, r5, #0, 6
    1e24:	000000af 	andeq	r0, r0, pc, lsr #1
    1e28:	38031c09 	stmdacc	r3, {r0, r3, sl, fp, ip}
    1e2c:	00038a02 	andeq	r8, r3, r2, lsl #20
    1e30:	52530a00 	subspl	r0, r3, #0, 20
    1e34:	023a0300 	eorseq	r0, sl, #0, 6
    1e38:	0000007f 	andeq	r0, r0, pc, ror r0
    1e3c:	07420b00 	strbeq	r0, [r2, -r0, lsl #22]
    1e40:	3b030000 	blcc	c1e48 <__Stack_Size+0xc1a48>
    1e44:	00004c02 	andeq	r4, r0, r2, lsl #24
    1e48:	440a0200 	strmi	r0, [sl], #-512	; 0xfffffe00
    1e4c:	3c030052 	stccc	0, cr0, [r3], {82}	; 0x52
    1e50:	00007f02 	andeq	r7, r0, r2, lsl #30
    1e54:	4c0b0400 	cfstrsmi	mvf0, [fp], {-0}
    1e58:	03000007 	movweq	r0, #7
    1e5c:	004c023d 	subeq	r0, ip, sp, lsr r2
    1e60:	0a060000 	beq	181e68 <__Stack_Size+0x181a68>
    1e64:	00525242 	subseq	r5, r2, r2, asr #4
    1e68:	7f023e03 	svcvc	0x00023e03
    1e6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e70:	0007560b 	andeq	r5, r7, fp, lsl #12
    1e74:	023f0300 	eorseq	r0, pc, #0, 6
    1e78:	0000004c 	andeq	r0, r0, ip, asr #32
    1e7c:	52430a0a 	subpl	r0, r3, #40960	; 0xa000
    1e80:	40030031 	andmi	r0, r3, r1, lsr r0
    1e84:	00007f02 	andeq	r7, r0, r2, lsl #30
    1e88:	600b0c00 	andvs	r0, fp, r0, lsl #24
    1e8c:	03000007 	movweq	r0, #7
    1e90:	004c0241 	subeq	r0, ip, r1, asr #4
    1e94:	0a0e0000 	beq	381e9c <__Stack_Size+0x381a9c>
    1e98:	00325243 	eorseq	r5, r2, r3, asr #4
    1e9c:	7f024203 	svcvc	0x00024203
    1ea0:	10000000 	andne	r0, r0, r0
    1ea4:	00076a0b 	andeq	r6, r7, fp, lsl #20
    1ea8:	02430300 	subeq	r0, r3, #0, 6
    1eac:	0000004c 	andeq	r0, r0, ip, asr #32
    1eb0:	52430a12 	subpl	r0, r3, #73728	; 0x12000
    1eb4:	44030033 	strmi	r0, [r3], #-51	; 0xffffffcd
    1eb8:	00007f02 	andeq	r7, r0, r2, lsl #30
    1ebc:	740b1400 	strvc	r1, [fp], #-1024	; 0xfffffc00
    1ec0:	03000007 	movweq	r0, #7
    1ec4:	004c0245 	subeq	r0, ip, r5, asr #4
    1ec8:	0b160000 	bleq	581ed0 <__Stack_Size+0x581ad0>
    1ecc:	000001cb 	andeq	r0, r0, fp, asr #3
    1ed0:	7f024603 	svcvc	0x00024603
    1ed4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1ed8:	00077e0b 	andeq	r7, r7, fp, lsl #28
    1edc:	02470300 	subeq	r0, r7, #0, 6
    1ee0:	0000004c 	andeq	r0, r0, ip, asr #32
    1ee4:	180c001a 	stmdane	ip, {r1, r3, r4}
    1ee8:	03000004 	movweq	r0, #4
    1eec:	02cc0248 	sbceq	r0, ip, #72, 4	; 0x80000004
    1ef0:	920d0000 	andls	r0, sp, #0
    1ef4:	0100000d 	tsteq	r0, sp
    1ef8:	000b108c 	andeq	r1, fp, ip, lsl #1
    1efc:	00001408 	andeq	r1, r0, r8, lsl #8
    1f00:	0e9c0100 	fmleqe	f0, f4, f0
    1f04:	00000d08 	andeq	r0, r0, r8, lsl #26
    1f08:	3e017d01 	cdpcc	13, 0, cr7, cr1, cr1, {0}
    1f0c:	0408000b 	streq	r0, [r8], #-11
    1f10:	01000000 	mrseq	r0, (UNDEF: 0)
    1f14:	0003c79c 	muleq	r3, ip, r7
    1f18:	0b420f00 	bleq	1085b20 <__Stack_Size+0x1085720>
    1f1c:	05030800 	streq	r0, [r3, #-2048]	; 0xfffff800
    1f20:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1f24:	00000cd3 	ldrdeq	r0, [r0], -r3
    1f28:	5001dc01 	andpl	sp, r1, r1, lsl #24
    1f2c:	1408000b 	strne	r0, [r8], #-11
    1f30:	01000000 	mrseq	r0, (UNDEF: 0)
    1f34:	0004019c 	muleq	r4, ip, r1
    1f38:	0b5c1000 	bleq	1705f40 <__Stack_Size+0x1705b40>
    1f3c:	050e0800 	streq	r0, [lr, #-2048]	; 0xfffff800
    1f40:	03f70000 	mvnseq	r0, #0
    1f44:	01110000 	tsteq	r1, r0
    1f48:	4a400350 	bmi	1002c90 <__Stack_Size+0x1002890>
    1f4c:	51011124 	tstpl	r1, r4, lsr #2
    1f50:	0f003101 	svceq	0x00003101
    1f54:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
    1f58:	0000051a 	andeq	r0, r0, sl, lsl r5
    1f5c:	0d410e00 	stcleq	14, cr0, [r1, #-0]
    1f60:	4d010000 	stcmi	0, cr0, [r1, #-0]
    1f64:	000b7402 	andeq	r7, fp, r2, lsl #8
    1f68:	00003408 	andeq	r3, r0, r8, lsl #8
    1f6c:	499c0100 	ldmibmi	ip, {r8}
    1f70:	10000004 	andne	r0, r0, r4
    1f74:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
    1f78:	00000526 	andeq	r0, r0, r6, lsr #10
    1f7c:	00000435 	andeq	r0, r0, r5, lsr r4
    1f80:	05500111 	ldrbeq	r0, [r0, #-273]	; 0xfffffeef
    1f84:	0138000c 	teqeq	r8, ip
    1f88:	51011140 	tstpl	r1, r0, asr #2
    1f8c:	05250a03 	streq	r0, [r5, #-2563]!	; 0xfffff5fd
    1f90:	0b941200 	bleq	fe506798 <SCS_BASE+0x1e4f8798>
    1f94:	05310800 	ldreq	r0, [r1, #-2048]!	; 0xfffff800
    1f98:	01110000 	tsteq	r1, r0
    1f9c:	000c0550 	andeq	r0, ip, r0, asr r5
    1fa0:	00400138 	subeq	r0, r0, r8, lsr r1
    1fa4:	0d6e0e00 	stcleq	14, cr0, [lr, #-0]
    1fa8:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1fac:	000ba802 	andeq	sl, fp, r2, lsl #16
    1fb0:	00003008 	andeq	r3, r0, r8
    1fb4:	7b9c0100 	blvc	fe7023bc <SCS_BASE+0x1e6f43bc>
    1fb8:	13000004 	movwne	r0, #4
    1fbc:	01007273 	tsteq	r0, r3, ror r2
    1fc0:	003a0262 	eorseq	r0, sl, r2, ror #4
    1fc4:	c2120000 	andsgt	r0, r2, #0
    1fc8:	3108000b 	tstcc	r8, fp
    1fcc:	11000005 	tstne	r0, r5
    1fd0:	75025001 	strvc	r5, [r2, #-1]
    1fd4:	14000000 	strne	r0, [r0], #-0
    1fd8:	00000d53 	andeq	r0, r0, r3, asr sp
    1fdc:	01035301 	tsteq	r3, r1, lsl #6
    1fe0:	00047b15 	andeq	r7, r4, r5, lsl fp
    1fe4:	000c0000 	andeq	r0, ip, r0
    1fe8:	00000208 	andeq	r0, r0, r8, lsl #4
    1fec:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1ff0:	00000194 	muleq	r0, r4, r1
    1ff4:	006f1d01 	rsbeq	r1, pc, r1, lsl #26
    1ff8:	af170000 	svcge	0x00170000
    1ffc:	af000004 	svcge	0x00000004
    2000:	18000004 	stmdane	r0, {r2}
    2004:	000000a8 	andeq	r0, r0, r8, lsr #1
    2008:	050003ff 	streq	r0, [r0, #-1023]	; 0xfffffc01
    200c:	0000005e 	andeq	r0, r0, lr, asr r0
    2010:	00002919 	andeq	r2, r0, r9, lsl r9
    2014:	02470100 	subeq	r0, r7, #0, 2
    2018:	000004c0 	andeq	r0, r0, r0, asr #9
    201c:	00049e05 	andeq	r9, r4, r5, lsl #28
    2020:	035d1900 	cmpeq	sp, #0, 18
    2024:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2028:	0004d102 	andeq	sp, r4, r2, lsl #2
    202c:	004c0500 	subeq	r0, ip, r0, lsl #10
    2030:	02190000 	andseq	r0, r9, #0
    2034:	01000009 	tsteq	r0, r9
    2038:	04af024a 	strteq	r0, [pc], #586	; 2040 <__Stack_Size+0x1c40>
    203c:	af170000 	svcge	0x00170000
    2040:	f2000004 	vhadd.s8	d0, d0, d4
    2044:	1a000004 	bne	205c <__Stack_Size+0x1c5c>
    2048:	000000a8 	andeq	r0, r0, r8, lsr #1
    204c:	6e1900ff 	mrcvs	0, 0, r0, cr9, cr15, {7}
    2050:	01000006 	tsteq	r0, r6
    2054:	04fe024b 	ldrbteq	r0, [lr], #587	; 0x24b
    2058:	e2050000 	and	r0, r5, #0
    205c:	1b000004 	blne	2074 <__Stack_Size+0x1c74>
    2060:	00000d34 	andeq	r0, r0, r4, lsr sp
    2064:	00000d34 	andeq	r0, r0, r4, lsr sp
    2068:	e31c1501 	tst	ip, #4194304	; 0x400000
    206c:	e300000c 	movw	r0, #12
    2070:	0400000c 	streq	r0, [r0], #-12
    2074:	1b1c02fe 	blne	702c74 <__Stack_Size+0x702874>
    2078:	1b000006 	blne	2098 <__Stack_Size+0x1c98>
    207c:	01000006 	tsteq	r0, r6
    2080:	221b01d9 	andscs	r0, fp, #1073741878	; 0x40000036
    2084:	2200000d 	andcs	r0, r0, #13
    2088:	0500000d 	streq	r0, [r0, #-13]
    208c:	0d801bf8 	vstreq	d1, [r0, #992]	; 0x3e0
    2090:	0d800000 	stceq	0, cr0, [r0]
    2094:	ed050000 	stc	0, cr0, [r5, #-0]
    2098:	00012900 	andeq	r2, r1, r0, lsl #18
    209c:	0e000400 	cfcpyseq	mvf0, mvf0
    20a0:	04000005 	streq	r0, [r0], #-5
    20a4:	000bf101 	andeq	pc, fp, r1, lsl #2
    20a8:	0da10c00 	stceq	12, cr0, [r1]
    20ac:	051f0000 	ldreq	r0, [pc, #-0]	; 20b4 <__Stack_Size+0x1cb4>
    20b0:	069f0000 	ldreq	r0, [pc], r0
    20b4:	04020000 	streq	r0, [r2], #-0
    20b8:	0007b605 	andeq	fp, r7, r5, lsl #12
    20bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    20c0:	00000788 	andeq	r0, r0, r8, lsl #15
    20c4:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    20c8:	02000009 	andeq	r0, r0, #9
    20cc:	08c30704 	stmiaeq	r3, {r2, r8, r9, sl}^
    20d0:	02020000 	andeq	r0, r2, #0
    20d4:	000b6007 	andeq	r6, fp, r7
    20d8:	38750300 	ldmdacc	r5!, {r8, r9}^
    20dc:	4a290200 	bmi	a428e4 <__Stack_Size+0xa424e4>
    20e0:	02000000 	andeq	r0, r0, #0
    20e4:	09650801 	stmdbeq	r5!, {r0, fp}^
    20e8:	04020000 	streq	r0, [r2], #-0
    20ec:	0008ba07 	andeq	fp, r8, r7, lsl #20
    20f0:	00680400 	rsbeq	r0, r8, r0, lsl #8
    20f4:	00680000 	rsbeq	r0, r8, r0
    20f8:	51050000 	mrspl	r0, (UNDEF: 5)
    20fc:	11000000 	mrsne	r0, (UNDEF: 0)
    2100:	00400600 	subeq	r0, r0, r0, lsl #12
    2104:	ca070000 	bgt	1c210c <__Stack_Size+0x1c1d0c>
    2108:	0100000d 	tsteq	r0, sp
    210c:	00007e16 	andeq	r7, r0, r6, lsl lr
    2110:	47030500 	strmi	r0, [r3, -r0, lsl #10]
    2114:	06080027 	streq	r0, [r8], -r7, lsr #32
    2118:	00000058 	andeq	r0, r0, r8, asr r0
    211c:	00006804 	andeq	r6, r0, r4, lsl #16
    2120:	00009300 	andeq	r9, r0, r0, lsl #6
    2124:	00510500 	subseq	r0, r1, r0, lsl #10
    2128:	00420000 	subeq	r0, r2, r0
    212c:	000e2907 	andeq	r2, lr, r7, lsl #18
    2130:	a4300100 	ldrtge	r0, [r0], #-256	; 0xffffff00
    2134:	05000000 	streq	r0, [r0, #-0]
    2138:	00270403 	eoreq	r0, r7, r3, lsl #8
    213c:	00830608 	addeq	r0, r3, r8, lsl #12
    2140:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    2144:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    2148:	05000000 	streq	r0, [r0, #-0]
    214c:	00000051 	andeq	r0, r0, r1, asr r0
    2150:	ec070003 	stc	0, cr0, [r7], {3}
    2154:	0100000d 	tsteq	r0, sp
    2158:	0000ca83 	andeq	ip, r0, r3, lsl #21
    215c:	00030500 	andeq	r0, r3, r0, lsl #10
    2160:	06080027 	streq	r0, [r8], -r7, lsr #32
    2164:	000000a9 	andeq	r0, r0, r9, lsr #1
    2168:	000dac07 	andeq	sl, sp, r7, lsl #24
    216c:	e08b0100 	add	r0, fp, r0, lsl #2
    2170:	05000000 	streq	r0, [r0, #-0]
    2174:	0026ee03 	eoreq	lr, r6, r3, lsl #28
    2178:	00580608 	subseq	r0, r8, r8, lsl #12
    217c:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    2180:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    2184:	05000000 	streq	r0, [r0, #-0]
    2188:	00000051 	andeq	r0, r0, r1, asr r0
    218c:	0a070031 	beq	1c2258 <__Stack_Size+0x1c1e58>
    2190:	0100000e 	tsteq	r0, lr
    2194:	0001069e 	muleq	r1, lr, r6
    2198:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    219c:	06080026 	streq	r0, [r8], -r6, lsr #32
    21a0:	000000e5 	andeq	r0, r0, r5, ror #1
    21a4:	00004004 	andeq	r4, r0, r4
    21a8:	00011b00 	andeq	r1, r1, r0, lsl #22
    21ac:	00510500 	subseq	r0, r1, r0, lsl #10
    21b0:	00190000 	andseq	r0, r9, r0
    21b4:	000e4b07 	andeq	r4, lr, r7, lsl #22
    21b8:	0bb80100 	bleq	fee025c0 <SCS_BASE+0x1edf45c0>
    21bc:	05000001 	streq	r0, [r0, #-1]
    21c0:	00000103 	andeq	r0, r0, r3, lsl #2
    21c4:	035d0020 	cmpeq	sp, #32
    21c8:	00040000 	andeq	r0, r4, r0
    21cc:	00000560 	andeq	r0, r0, r0, ror #10
    21d0:	0bf10104 	bleq	ffc425e8 <SCS_BASE+0x1fc345e8>
    21d4:	7a0c0000 	bvc	3021dc <__Stack_Size+0x301ddc>
    21d8:	1f00000e 	svcne	0x0000000e
    21dc:	58000005 	stmdapl	r0, {r0, r2}
    21e0:	00000001 	andeq	r0, r0, r1
    21e4:	e6000000 	str	r0, [r0], -r0
    21e8:	02000006 	andeq	r0, r0, #6
    21ec:	07b60504 	ldreq	r0, [r6, r4, lsl #10]!
    21f0:	02020000 	andeq	r0, r2, #0
    21f4:	00078805 	andeq	r8, r7, r5, lsl #16
    21f8:	06010200 	streq	r0, [r1], -r0, lsl #4
    21fc:	00000967 	andeq	r0, r0, r7, ror #18
    2200:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    2204:	45270200 	strmi	r0, [r7, #-512]!	; 0xfffffe00
    2208:	02000000 	andeq	r0, r0, #0
    220c:	08c30704 	stmiaeq	r3, {r2, r8, r9, sl}^
    2210:	75030000 	strvc	r0, [r3, #-0]
    2214:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    2218:	00005728 	andeq	r5, r0, r8, lsr #14
    221c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2220:	00000b60 	andeq	r0, r0, r0, ror #22
    2224:	00387503 	eorseq	r7, r8, r3, lsl #10
    2228:	00682902 	rsbeq	r2, r8, r2, lsl #18
    222c:	01020000 	mrseq	r0, (UNDEF: 2)
    2230:	00096508 	andeq	r6, r9, r8, lsl #10
    2234:	03c60400 	biceq	r0, r6, #0, 8
    2238:	2f020000 	svccs	0x00020000
    223c:	0000007a 	andeq	r0, r0, sl, ror r0
    2240:	00004505 	andeq	r4, r0, r5, lsl #10
    2244:	68010600 	stmdavs	r1, {r9, sl}
    2248:	02000000 	andeq	r0, r0, #0
    224c:	0000983a 	andeq	r9, r0, sl, lsr r8
    2250:	07fe0700 	ldrbeq	r0, [lr, r0, lsl #14]!
    2254:	07000000 	streq	r0, [r0, -r0]
    2258:	00000218 	andeq	r0, r0, r8, lsl r2
    225c:	97040001 	strls	r0, [r4, -r1]
    2260:	02000005 	andeq	r0, r0, #5
    2264:	00007f3a 	andeq	r7, r0, sl, lsr pc
    2268:	07040200 	streq	r0, [r4, -r0, lsl #4]
    226c:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    2270:	00680106 	rsbeq	r0, r8, r6, lsl #2
    2274:	1c030000 	stcne	0, cr0, [r3], {-0}
    2278:	000000d5 	ldrdeq	r0, [r0], -r5
    227c:	0003d907 	andeq	sp, r3, r7, lsl #18
    2280:	c4070100 	strgt	r0, [r7], #-256	; 0xffffff00
    2284:	02000007 	andeq	r0, r0, #7
    2288:	0000b607 	andeq	fp, r0, r7, lsl #12
    228c:	63070300 	movwvs	r0, #29440	; 0x7300
    2290:	04000004 	streq	r0, [r0], #-4
    2294:	00037b07 	andeq	r7, r3, r7, lsl #22
    2298:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    229c:	000006e1 	andeq	r0, r0, r1, ror #13
    22a0:	00aa2203 	adceq	r2, sl, r3, lsl #4
    22a4:	04080000 	streq	r0, [r8], #-0
    22a8:	0000005e 	andeq	r0, r0, lr, asr r0
    22ac:	0009af09 	andeq	sl, r9, r9, lsl #30
    22b0:	00680100 	rsbeq	r0, r8, r0, lsl #2
    22b4:	30060000 	andcc	r0, r6, r0
    22b8:	0000011b 	andeq	r0, r0, fp, lsl r1
    22bc:	0009f107 	andeq	pc, r9, r7, lsl #2
    22c0:	73070000 	movwvc	r0, #28672	; 0x7000
    22c4:	0100000b 	tsteq	r0, fp
    22c8:	00058407 	andeq	r8, r5, r7, lsl #8
    22cc:	b3070200 	movwlt	r0, #29184	; 0x7200
    22d0:	0300000b 	movweq	r0, #11
    22d4:	00042607 	andeq	r2, r4, r7, lsl #12
    22d8:	49070400 	stmdbmi	r7, {sl}
    22dc:	05000009 	streq	r0, [r0, #-9]
    22e0:	0eca0a00 	vdiveq.f32	s1, s20, s0
    22e4:	41010000 	mrsmi	r0, (UNDEF: 1)
    22e8:	08000c04 	stmdaeq	r0, {r2, sl, fp}
    22ec:	0000000c 	andeq	r0, r0, ip
    22f0:	a30b9c01 	movwge	r9, #48129	; 0xbc01
    22f4:	0100000e 	tsteq	r0, lr
    22f8:	00009876 	andeq	r9, r0, r6, ror r8
    22fc:	000c1000 	andeq	r1, ip, r0
    2300:	00010008 	andeq	r0, r1, r8
    2304:	c29c0100 	addsgt	r0, ip, #0, 2
    2308:	0c000001 	stceq	0, cr0, [r0], {1}
    230c:	000002db 	ldrdeq	r0, [r0], -fp
    2310:	00e07601 	rsceq	r7, r0, r1, lsl #12
    2314:	06ff0000 	ldrbteq	r0, [pc], r0
    2318:	730c0000 	movwvc	r0, #49152	; 0xc000
    231c:	01000038 	tsteq	r0, r8, lsr r0
    2320:	00004c76 	andeq	r4, r0, r6, ror ip
    2324:	00072b00 	andeq	r2, r7, r0, lsl #22
    2328:	0e850d00 	cdpeq	13, 8, cr0, cr5, cr0, {0}
    232c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2330:	0000004c 	andeq	r0, r0, ip, asr #32
    2334:	0000074c 	andeq	r0, r0, ip, asr #14
    2338:	000eff0d 	andeq	pc, lr, sp, lsl #30
    233c:	5e790100 	rpwple	f0, f1, f0
    2340:	76000000 	strvc	r0, [r0], -r0
    2344:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    2348:	000002fa 	strdeq	r0, [r0], -sl
    234c:	01c27a01 	biceq	r7, r2, r1, lsl #20
    2350:	91020000 	mrsls	r0, (UNDEF: 2)
    2354:	01300f57 	teqeq	r0, r7, asr pc
    2358:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    235c:	01000030 	tsteq	r0, r0, lsr r0
    2360:	00003a89 	andeq	r3, r0, r9, lsl #21
    2364:	00079500 	andeq	r9, r7, r0, lsl #10
    2368:	0c661000 	stcleq	0, cr1, [r6], #-0
    236c:	03280800 			; <UNDEFINED> instruction: 0x03280800
    2370:	01b70000 			; <UNDEFINED> instruction: 0x01b70000
    2374:	01110000 	tsteq	r1, r0
    2378:	00780251 	rsbseq	r0, r8, r1, asr r2
    237c:	0c881200 	sfmeq	f1, 4, [r8], {0}
    2380:	03330800 	teqeq	r3, #0, 16
    2384:	00000000 	andeq	r0, r0, r0
    2388:	0000d505 	andeq	sp, r0, r5, lsl #10
    238c:	0e691300 	cdpeq	3, 6, cr1, cr9, cr0, {0}
    2390:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2394:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
    2398:	0000005c 	andeq	r0, r0, ip, asr r0
    239c:	02409c01 	subeq	r9, r0, #256	; 0x100
    23a0:	2a140000 	bcs	5023a8 <__Stack_Size+0x501fa8>
    23a4:	0e08000d 	cdpeq	0, 0, cr0, cr8, cr13, {0}
    23a8:	14000000 	strne	r0, [r0], #-0
    23ac:	15000002 	strne	r0, [r0, #-2]
    23b0:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    23b4:	02406701 	subeq	r6, r0, #262144	; 0x40000
    23b8:	01fa0000 	mvnseq	r0, r0
    23bc:	00160000 	andseq	r0, r6, r0
    23c0:	000d2e12 	andeq	r2, sp, r2, lsl lr
    23c4:	00033e08 	andeq	r3, r3, r8, lsl #28
    23c8:	0d381700 	ldceq	7, cr1, [r8, #-0]
    23cc:	012c0800 			; <UNDEFINED> instruction: 0x012c0800
    23d0:	01110000 	tsteq	r1, r0
    23d4:	00740250 	rsbseq	r0, r4, r0, asr r2
    23d8:	1a100000 	bne	4023e0 <__Stack_Size+0x401fe0>
    23dc:	4908000d 	stmdbmi	r8, {r0, r2, r3}
    23e0:	30000003 	andcc	r0, r0, r3
    23e4:	11000002 	tstne	r0, r2
    23e8:	33015001 	movwcc	r5, #4097	; 0x1001
    23ec:	05510111 	ldrbeq	r0, [r1, #-273]	; 0xfffffeef
    23f0:	0006a103 	andeq	sl, r6, r3, lsl #2
    23f4:	58180020 	ldmdapl	r8, {r5}
    23f8:	5408000d 	strpl	r0, [r8], #-13
    23fc:	11000003 	tstne	r0, r3
    2400:	33015001 	movwcc	r5, #4097	; 0x1001
    2404:	04190000 	ldreq	r0, [r9], #-0
    2408:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    240c:	0eda1300 	cdpeq	3, 13, cr1, cr10, cr0, {0}
    2410:	bd010000 	stclt	0, cr0, [r1, #-0]
    2414:	00000000 	andeq	r0, r0, r0
    2418:	00000020 	andeq	r0, r0, r0, lsr #32
    241c:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
    2420:	e70e0000 	str	r0, [lr, -r0]
    2424:	0100000e 	tsteq	r0, lr
    2428:	00003ac0 	andeq	r3, r0, r0, asr #21
    242c:	10030500 	andne	r0, r3, r0, lsl #10
    2430:	00200001 	eoreq	r0, r0, r1
    2434:	00005e1a 	andeq	r5, r0, sl, lsl lr
    2438:	00027e00 	andeq	r7, r2, r0, lsl #28
    243c:	00a31b00 	adceq	r1, r3, r0, lsl #22
    2440:	003f0000 	eorseq	r0, pc, r0
    2444:	000acf1c 	andeq	ip, sl, ip, lsl pc
    2448:	6e210100 	sufvss	f0, f1, f0
    244c:	05000002 	streq	r0, [r0, #-2]
    2450:	0006a103 	andeq	sl, r6, r3, lsl #2
    2454:	029a1a20 	addseq	r1, sl, #32, 20	; 0x20000
    2458:	029a0000 	addseq	r0, sl, #0
    245c:	001d0000 	andseq	r0, sp, r0
    2460:	00005e05 	andeq	r5, r0, r5, lsl #28
    2464:	00291e00 	eoreq	r1, r9, r0, lsl #28
    2468:	24010000 	strcs	r0, [r1], #-0
    246c:	000002aa 	andeq	r0, r0, sl, lsr #5
    2470:	00028f05 	andeq	r8, r2, r5, lsl #30
    2474:	035d1e00 	cmpeq	sp, #0, 28
    2478:	25010000 	strcs	r0, [r1, #-0]
    247c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2480:	00004c05 	andeq	r4, r0, r5, lsl #24
    2484:	02931e00 	addseq	r1, r3, #0, 28
    2488:	27010000 	strcs	r0, [r1, -r0]
    248c:	0000006f 	andeq	r0, r0, pc, rrx
    2490:	000b211e 	andeq	r2, fp, lr, lsl r1
    2494:	6f270100 	svcvs	0x00270100
    2498:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    249c:	00000112 	andeq	r0, r0, r2, lsl r1
    24a0:	006f2701 	rsbeq	r2, pc, r1, lsl #14
    24a4:	461e0000 	ldrmi	r0, [lr], -r0
    24a8:	01000004 	tsteq	r0, r4
    24ac:	00005e28 	andeq	r5, r0, r8, lsr #28
    24b0:	05d61e00 	ldrbeq	r1, [r6, #3584]	; 0xe00
    24b4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    24b8:	00000098 	muleq	r0, r8, r0
    24bc:	00032e1e 	andeq	r2, r3, lr, lsl lr
    24c0:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    24c4:	05000003 	streq	r0, [r0, #-3]
    24c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    24cc:	000eb01c 	andeq	fp, lr, ip, lsl r0
    24d0:	5e380100 	rsfple	f0, f0, f0
    24d4:	05000000 	streq	r0, [r0, #-0]
    24d8:	00010c03 	andeq	r0, r1, r3, lsl #24
    24dc:	08811c20 	stmeq	r1, {r5, sl, fp, ip}
    24e0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    24e4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    24e8:	010e0305 	tsteq	lr, r5, lsl #6
    24ec:	911f2000 	tstls	pc, r0
    24f0:	9100000e 	tstls	r0, lr
    24f4:	0300000e 	movweq	r0, #14
    24f8:	09141fbd 	ldmdbeq	r4, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    24fc:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    2500:	33010000 	movwcc	r0, #4096	; 0x1000
    2504:	0006bd1f 	andeq	fp, r6, pc, lsl sp
    2508:	0006bd00 	andeq	fp, r6, r0, lsl #26
    250c:	1f670100 	svcne	0x00670100
    2510:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    2514:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    2518:	f2201e04 			; <UNDEFINED> instruction: 0xf2201e04
    251c:	f200000e 	vhadd.s8	d0, d0, d14
    2520:	0500000e 	streq	r0, [r0, #-14]
    2524:	2a000272 	bcs	2ef4 <__Stack_Size+0x2af4>
    2528:	04000002 	streq	r0, [r0], #-2
    252c:	00071a00 	andeq	r1, r7, r0, lsl #20
    2530:	f1010400 			; <UNDEFINED> instruction: 0xf1010400
    2534:	0c00000b 	stceq	0, cr0, [r0], {11}
    2538:	00000fa5 	andeq	r0, r0, r5, lsr #31
    253c:	0000051f 	andeq	r0, r0, pc, lsl r5
    2540:	00000180 	andeq	r0, r0, r0, lsl #3
    2544:	00000000 	andeq	r0, r0, r0
    2548:	0000084b 	andeq	r0, r0, fp, asr #16
    254c:	b6050402 	strlt	r0, [r5], -r2, lsl #8
    2550:	02000007 	andeq	r0, r0, #7
    2554:	07880502 	streq	r0, [r8, r2, lsl #10]
    2558:	01020000 	mrseq	r0, (UNDEF: 2)
    255c:	00096706 	andeq	r6, r9, r6, lsl #14
    2560:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2564:	000008c3 	andeq	r0, r0, r3, asr #17
    2568:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    256c:	4c280200 	sfmmi	f0, 4, [r8], #-0
    2570:	02000000 	andeq	r0, r0, #0
    2574:	0b600702 	bleq	1804184 <__Stack_Size+0x1803d84>
    2578:	75030000 	strvc	r0, [r3, #-0]
    257c:	29020038 	stmdbcs	r2, {r3, r4, r5}
    2580:	0000005d 	andeq	r0, r0, sp, asr r0
    2584:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    2588:	02000009 	andeq	r0, r0, #9
    258c:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
    2590:	04040000 	streq	r0, [r4], #-0
    2594:	00000053 	andeq	r0, r0, r3, asr r0
    2598:	000f5a05 	andeq	r5, pc, r5, lsl #20
    259c:	005d0100 	subseq	r0, sp, r0, lsl #2
    25a0:	30030000 	andcc	r0, r3, r0
    25a4:	0000009a 	muleq	r0, sl, r0
    25a8:	000f6e06 	andeq	r6, pc, r6, lsl #28
    25ac:	04060000 	streq	r0, [r6], #-0
    25b0:	01000010 	tsteq	r0, r0, lsl r0
    25b4:	000f9706 	andeq	r9, pc, r6, lsl #14
    25b8:	f6060200 			; <UNDEFINED> instruction: 0xf6060200
    25bc:	0300000f 	movweq	r0, #15
    25c0:	0f5b0700 	svceq	0x005b0700
    25c4:	37030000 	strcc	r0, [r3, -r0]
    25c8:	00000071 	andeq	r0, r0, r1, ror r0
    25cc:	00006b08 	andeq	r6, r0, r8, lsl #22
    25d0:	0000b400 	andeq	fp, r0, r0, lsl #8
    25d4:	00410900 	subeq	r0, r1, r0, lsl #18
    25d8:	04000000 	streq	r0, [r0], #-0
    25dc:	0000a504 	andeq	sl, r0, r4, lsl #10
    25e0:	0f0d0a00 	svceq	0x000d0a00
    25e4:	03300000 	teqeq	r0, #0
    25e8:	0001577f 	andeq	r5, r1, pc, ror r7
    25ec:	24e80b00 	strbtcs	r0, [r8], #2816	; 0xb00
    25f0:	81030000 	mrshi	r0, (UNDEF: 3)
    25f4:	00000158 	andeq	r0, r0, r8, asr r1
    25f8:	123a0b00 	eorsne	r0, sl, #0, 22
    25fc:	82030000 	andhi	r0, r3, #0
    2600:	00000158 	andeq	r0, r0, r8, asr r1
    2604:	0fdd0b04 	svceq	0x00dd0b04
    2608:	85030000 	strhi	r0, [r3, #-0]
    260c:	00000158 	andeq	r0, r0, r8, asr r1
    2610:	0f7a0b08 	svceq	0x007a0b08
    2614:	86030000 	strhi	r0, [r3], -r0
    2618:	00000158 	andeq	r0, r0, r8, asr r1
    261c:	0fb00b0c 	svceq	0x00b00b0c
    2620:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    2624:	0000016d 	andeq	r0, r0, sp, ror #2
    2628:	0f310b10 	svceq	0x00310b10
    262c:	a3030000 	movwge	r0, #12288	; 0x3000
    2630:	0000016d 	andeq	r0, r0, sp, ror #2
    2634:	0fc10b14 	svceq	0x00c10b14
    2638:	ad030000 	stcge	0, cr0, [r3, #-0]
    263c:	00000187 	andeq	r0, r0, r7, lsl #3
    2640:	12060b18 	andne	r0, r6, #24, 22	; 0x6000
    2644:	af030000 	svcge	0x00030000
    2648:	000000b4 	strheq	r0, [r0], -r4
    264c:	15480b1c 	strbne	r0, [r8, #-2844]	; 0xfffff4e4
    2650:	b0030000 	andlt	r0, r3, r0
    2654:	000000b4 	strheq	r0, [r0], -r4
    2658:	14460b20 	strbne	r0, [r6], #-2848	; 0xfffff4e0
    265c:	b1030000 	mrslt	r0, (UNDEF: 3)
    2660:	000000b4 	strheq	r0, [r0], -r4
    2664:	0f1a0b24 	svceq	0x001a0b24
    2668:	b5030000 	strlt	r0, [r3, #-0]
    266c:	0000018d 	andeq	r0, r0, sp, lsl #3
    2670:	32b00b28 	adcscc	r0, r0, #40, 22	; 0xa000
    2674:	b7030000 	strlt	r0, [r3, -r0]
    2678:	00000053 	andeq	r0, r0, r3, asr r0
    267c:	040c002c 	streq	r0, [ip], #-44	; 0xffffffd4
    2680:	00015704 	andeq	r5, r1, r4, lsl #14
    2684:	009a0800 	addseq	r0, sl, r0, lsl #16
    2688:	016d0000 	cmneq	sp, r0
    268c:	53090000 	movwpl	r0, #36864	; 0x9000
    2690:	00000000 	andeq	r0, r0, r0
    2694:	015e0404 	cmpeq	lr, r4, lsl #8
    2698:	9a080000 	bls	2026a0 <__Stack_Size+0x2022a0>
    269c:	87000000 	strhi	r0, [r0, -r0]
    26a0:	09000001 	stmdbeq	r0, {r0}
    26a4:	00000053 	andeq	r0, r0, r3, asr r0
    26a8:	00005309 	andeq	r5, r0, r9, lsl #6
    26ac:	04040000 	streq	r0, [r4], #-0
    26b0:	00000173 	andeq	r0, r0, r3, ror r1
    26b4:	0e07040d 	cdpeq	4, 0, cr0, cr7, cr13, {0}
    26b8:	0300000f 	movweq	r0, #15
    26bc:	0000bab9 			; <UNDEFINED> instruction: 0x0000bab9
    26c0:	0d340e00 	ldceq	14, cr0, [r4, #-0]
    26c4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    26c8:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
    26cc:	00000068 	andeq	r0, r0, r8, rrx
    26d0:	01b99c01 			; <UNDEFINED> instruction: 0x01b99c01
    26d4:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
    26d8:	2208000d 	andcs	r0, r8, #13
    26dc:	00000002 	andeq	r0, r0, r2
    26e0:	000f5410 	andeq	r5, pc, r0, lsl r4	; <UNPREDICTABLE>
    26e4:	ca1a0100 	bgt	682aec <__Stack_Size+0x6826ec>
    26e8:	05000001 	streq	r0, [r0, #-1]
    26ec:	0006e203 	andeq	lr, r6, r3, lsl #4
    26f0:	00411120 	subeq	r1, r1, r0, lsr #2
    26f4:	44120000 	ldrmi	r0, [r2], #-0
    26f8:	0300000f 	movweq	r0, #15
    26fc:	00018fee 	andeq	r8, r1, lr, ror #31
    2700:	0f621000 	svceq	0x00621000
    2704:	1b010000 	blne	4270c <__Stack_Size+0x4230c>
    2708:	000001eb 	andeq	r0, r0, fp, ror #3
    270c:	01140305 	tsteq	r4, r5, lsl #6
    2710:	53112000 	tstpl	r1, #0
    2714:	13000000 	movwne	r0, #0
    2718:	00000158 	andeq	r0, r0, r8, asr r1
    271c:	00000200 	andeq	r0, r0, r0, lsl #4
    2720:	00006414 	andeq	r6, r0, r4, lsl r4
    2724:	10000600 	andne	r0, r0, r0, lsl #12
    2728:	00000f8d 	andeq	r0, r0, sp, lsl #31
    272c:	01f02501 	mvnseq	r2, r1, lsl #10
    2730:	03050000 	movweq	r0, #20480	; 0x5000
    2734:	20000038 	andcs	r0, r0, r8, lsr r0
    2738:	000f2610 	andeq	r2, pc, r0, lsl r6	; <UNPREDICTABLE>
    273c:	f0300100 			; <UNDEFINED> instruction: 0xf0300100
    2740:	05000001 	streq	r0, [r0, #-1]
    2744:	00001c03 	andeq	r1, r0, r3, lsl #24
    2748:	0fef1520 	svceq	0x00ef1520
    274c:	0fef0000 	svceq	0x00ef0000
    2750:	1a040000 	bne	102758 <__Stack_Size+0x102358>
    2754:	000af400 	andeq	pc, sl, r0, lsl #8
    2758:	25000400 	strcs	r0, [r0, #-1024]	; 0xfffffc00
    275c:	04000008 	streq	r0, [r0], #-8
    2760:	000bf101 	andeq	pc, fp, r1, lsl #2
    2764:	10ac0c00 	adcne	r0, ip, r0, lsl #24
    2768:	051f0000 	ldreq	r0, [pc, #-0]	; 2770 <__Stack_Size+0x2370>
    276c:	01900000 	orrseq	r0, r0, r0
    2770:	00000000 	andeq	r0, r0, r0
    2774:	08dd0000 	ldmeq	sp, {}^	; <UNPREDICTABLE>
    2778:	04020000 	streq	r0, [r2], #-0
    277c:	0007b605 	andeq	fp, r7, r5, lsl #12
    2780:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    2784:	00000788 	andeq	r0, r0, r8, lsl #15
    2788:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    278c:	03000009 	movweq	r0, #9
    2790:	00323375 	eorseq	r3, r2, r5, ror r3
    2794:	00452702 	subeq	r2, r5, r2, lsl #14
    2798:	04020000 	streq	r0, [r2], #-0
    279c:	0008c307 	andeq	ip, r8, r7, lsl #6
    27a0:	31750300 	cmncc	r5, r0, lsl #6
    27a4:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    27a8:	00000057 	andeq	r0, r0, r7, asr r0
    27ac:	60070202 	andvs	r0, r7, r2, lsl #4
    27b0:	0300000b 	movweq	r0, #11
    27b4:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    27b8:	00006829 	andeq	r6, r0, r9, lsr #16
    27bc:	08010200 	stmdaeq	r1, {r9}
    27c0:	00000965 	andeq	r0, r0, r5, ror #18
    27c4:	ba070402 	blt	1c37d4 <__Stack_Size+0x1c33d4>
    27c8:	04000008 	streq	r0, [r0], #-8
    27cc:	0000116e 	andeq	r1, r0, lr, ror #2
    27d0:	00006801 	andeq	r6, r0, r1, lsl #16
    27d4:	9f160400 	svcls	0x00160400
    27d8:	05000000 	streq	r0, [r0, #-0]
    27dc:	000012ec 	andeq	r1, r0, ip, ror #5
    27e0:	14060500 	strne	r0, [r6], #-1280	; 0xfffffb00
    27e4:	05010000 	streq	r0, [r1, #-0]
    27e8:	000010f9 	strdeq	r1, [r0], -r9
    27ec:	155c0502 	ldrbne	r0, [ip, #-1282]	; 0xfffffafe
    27f0:	00030000 	andeq	r0, r3, r0
    27f4:	00104606 	andseq	r4, r0, r6, lsl #12
    27f8:	27030800 	strcs	r0, [r3, -r0, lsl #16]
    27fc:	000000c4 	andeq	r0, r0, r4, asr #1
    2800:	0012b507 	andseq	fp, r2, r7, lsl #10
    2804:	c4290300 	strtgt	r0, [r9], #-768	; 0xfffffd00
    2808:	00000000 	andeq	r0, r0, r0
    280c:	00124007 	andseq	r4, r2, r7
    2810:	4c2a0300 	stcmi	3, cr0, [sl], #-0
    2814:	04000000 	streq	r0, [r0], #-0
    2818:	5e040800 	cdppl	8, 0, cr0, cr4, cr0, {0}
    281c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2820:	000013ea 	andeq	r1, r0, sl, ror #7
    2824:	009f2c03 	addseq	r2, pc, r3, lsl #24
    2828:	5a040000 	bpl	102830 <__Stack_Size+0x102430>
    282c:	0100000f 	tsteq	r0, pc
    2830:	00000068 	andeq	r0, r0, r8, rrx
    2834:	00fe3003 	rscseq	r3, lr, r3
    2838:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    283c:	0000000f 	andeq	r0, r0, pc
    2840:	00100405 	andseq	r0, r0, r5, lsl #8
    2844:	97050100 	strls	r0, [r5, -r0, lsl #2]
    2848:	0200000f 	andeq	r0, r0, #15
    284c:	000ff605 	andeq	pc, pc, r5, lsl #12
    2850:	09000300 	stmdbeq	r0, {r8, r9}
    2854:	00000f5b 	andeq	r0, r0, fp, asr pc
    2858:	00d53703 	sbcseq	r3, r5, r3, lsl #14
    285c:	9c060000 	stcls	0, cr0, [r6], {-0}
    2860:	0c000013 	stceq	0, cr0, [r0], {19}
    2864:	01463b03 	cmpeq	r6, r3, lsl #22
    2868:	22070000 	andcs	r0, r7, #0
    286c:	03000011 	movweq	r0, #17
    2870:	00004c53 	andeq	r4, r0, r3, asr ip
    2874:	f7070000 			; <UNDEFINED> instruction: 0xf7070000
    2878:	03000014 	movweq	r0, #20
    287c:	00004c54 	andeq	r4, r0, r4, asr ip
    2880:	b3070200 	movwlt	r0, #29184	; 0x7200
    2884:	03000032 	movweq	r0, #50	; 0x32
    2888:	00004c55 	andeq	r4, r0, r5, asr ip
    288c:	1a070400 	bne	1c3894 <__Stack_Size+0x1c3494>
    2890:	03000014 	movweq	r0, #20
    2894:	00015556 	andeq	r5, r1, r6, asr r5
    2898:	0a000800 	beq	48a0 <__Stack_Size+0x44a0>
    289c:	000000c4 	andeq	r0, r0, r4, asr #1
    28a0:	00000155 	andeq	r0, r0, r5, asr r1
    28a4:	00004c0b 	andeq	r4, r0, fp, lsl #24
    28a8:	04080000 	streq	r0, [r8], #-0
    28ac:	00000146 	andeq	r0, r0, r6, asr #2
    28b0:	00139d09 	andseq	r9, r3, r9, lsl #26
    28b4:	09570300 	ldmdbeq	r7, {r8, r9}^
    28b8:	06000001 	streq	r0, [r0], -r1
    28bc:	000013e2 	andeq	r1, r0, r2, ror #7
    28c0:	8b5b0302 	blhi	16c34d0 <__Stack_Size+0x16c30d0>
    28c4:	07000001 	streq	r0, [r0, -r1]
    28c8:	0000121a 	andeq	r1, r0, sl, lsl r2
    28cc:	005e5d03 	subseq	r5, lr, r3, lsl #26
    28d0:	07000000 	streq	r0, [r0, -r0]
    28d4:	00001336 	andeq	r1, r0, r6, lsr r3
    28d8:	005e5e03 	subseq	r5, lr, r3, lsl #28
    28dc:	00010000 	andeq	r0, r1, r0
    28e0:	0013e309 	andseq	lr, r3, r9, lsl #6
    28e4:	66600300 	strbtvs	r0, [r0], -r0, lsl #6
    28e8:	0c000001 	stceq	0, cr0, [r0], {1}
    28ec:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    28f0:	01ba6503 			; <UNDEFINED> instruction: 0x01ba6503
    28f4:	620d0000 	andvs	r0, sp, #0
    28f8:	03003162 	movweq	r3, #354	; 0x162
    28fc:	00005e67 	andeq	r5, r0, r7, ror #28
    2900:	620d0000 	andvs	r0, sp, #0
    2904:	03003062 	movweq	r3, #98	; 0x62
    2908:	00005e68 	andeq	r5, r0, r8, ror #28
    290c:	0e000100 	adfeqs	f0, f0, f0
    2910:	d6620302 	strbtle	r0, [r2], -r2, lsl #6
    2914:	0f000001 	svceq	0x00000001
    2918:	64030077 	strvs	r0, [r3], #-119	; 0xffffff89
    291c:	0000004c 	andeq	r0, r0, ip, asr #32
    2920:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    2924:	01966a03 	orrseq	r6, r6, r3, lsl #20
    2928:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    292c:	0000156c 	andeq	r1, r0, ip, ror #10
    2930:	01ba6b03 			; <UNDEFINED> instruction: 0x01ba6b03
    2934:	9f060000 	svcls	0x00060000
    2938:	1c000010 	stcne	0, cr0, [r0], {16}
    293c:	02726d03 	rsbseq	r6, r2, #3, 26	; 0xc0
    2940:	5a070000 	bpl	1c2948 <__Stack_Size+0x1c2548>
    2944:	03000014 	movweq	r0, #20
    2948:	00005e6f 	andeq	r5, r0, pc, ror #28
    294c:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    2950:	03000010 	movweq	r0, #16
    2954:	00005e70 	andeq	r5, r0, r0, ror lr
    2958:	ea070100 	b	1c2d60 <__Stack_Size+0x1c2960>
    295c:	03000011 	movweq	r0, #17
    2960:	0001d671 	andeq	sp, r1, r1, ror r6
    2964:	c5070200 	strgt	r0, [r7, #-512]	; 0xfffffe00
    2968:	03000010 	movweq	r0, #16
    296c:	0001d672 	andeq	sp, r1, r2, ror r6
    2970:	ca070400 	bgt	1c3978 <__Stack_Size+0x1c3578>
    2974:	03000012 	movweq	r0, #18
    2978:	0001d673 	andeq	sp, r1, r3, ror r6
    297c:	f9070600 			; <UNDEFINED> instruction: 0xf9070600
    2980:	03000013 	movweq	r0, #19
    2984:	00005e75 	andeq	r5, r0, r5, ror lr
    2988:	e7070800 	str	r0, [r7, -r0, lsl #16]
    298c:	03000014 	movweq	r0, #20
    2990:	00005e76 	andeq	r5, r0, r6, ror lr
    2994:	d6070900 	strle	r0, [r7], -r0, lsl #18
    2998:	03000012 	movweq	r0, #18
    299c:	00005e77 	andeq	r5, r0, r7, ror lr
    29a0:	24070a00 	strcs	r0, [r7], #-2560	; 0xfffff600
    29a4:	03000013 	movweq	r0, #19
    29a8:	00005e78 	andeq	r5, r0, r8, ror lr
    29ac:	83070b00 	movwhi	r0, #31488	; 0x7b00
    29b0:	03000013 	movweq	r0, #19
    29b4:	00005e79 	andeq	r5, r0, r9, ror lr
    29b8:	cb070c00 	blgt	1c59c0 <__Stack_Size+0x1c55c0>
    29bc:	03000014 	movweq	r0, #20
    29c0:	00015b7c 	andeq	r5, r1, ip, ror fp
    29c4:	09001000 	stmdbeq	r0, {ip}
    29c8:	000010a0 	andeq	r1, r0, r0, lsr #1
    29cc:	01e17d03 	mvneq	r7, r3, lsl #26
    29d0:	0d060000 	stceq	0, cr0, [r6, #-0]
    29d4:	3000000f 	andcc	r0, r0, pc
    29d8:	031a7f03 	tsteq	sl, #3, 30
    29dc:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
    29e0:	03000024 	movweq	r0, #36	; 0x24
    29e4:	00031b81 	andeq	r1, r3, r1, lsl #23
    29e8:	3a070000 	bcc	1c29f0 <__Stack_Size+0x1c25f0>
    29ec:	03000012 	movweq	r0, #18
    29f0:	00031b82 	andeq	r1, r3, r2, lsl #23
    29f4:	dd070400 	cfstrsle	mvf0, [r7, #-0]
    29f8:	0300000f 	movweq	r0, #15
    29fc:	00031b85 	andeq	r1, r3, r5, lsl #23
    2a00:	7a070800 	bvc	1c4a08 <__Stack_Size+0x1c4608>
    2a04:	0300000f 	movweq	r0, #15
    2a08:	00031b86 	andeq	r1, r3, r6, lsl #23
    2a0c:	b0070c00 	andlt	r0, r7, r0, lsl #24
    2a10:	0300000f 	movweq	r0, #15
    2a14:	00033098 	muleq	r3, r8, r0
    2a18:	31071000 	mrscc	r1, (UNDEF: 7)
    2a1c:	0300000f 	movweq	r0, #15
    2a20:	000330a3 	andeq	r3, r3, r3, lsr #1
    2a24:	c1071400 	tstgt	r7, r0, lsl #8
    2a28:	0300000f 	movweq	r0, #15
    2a2c:	00034aad 	andeq	r4, r3, sp, lsr #21
    2a30:	06071800 	streq	r1, [r7], -r0, lsl #16
    2a34:	03000012 	movweq	r0, #18
    2a38:	000155af 	andeq	r5, r1, pc, lsr #11
    2a3c:	48071c00 	stmdami	r7, {sl, fp, ip}
    2a40:	03000015 	movweq	r0, #21
    2a44:	000155b0 			; <UNDEFINED> instruction: 0x000155b0
    2a48:	46072000 	strmi	r2, [r7], -r0
    2a4c:	03000014 	movweq	r0, #20
    2a50:	000155b1 			; <UNDEFINED> instruction: 0x000155b1
    2a54:	1a072400 	bne	1cba5c <__Stack_Size+0x1cb65c>
    2a58:	0300000f 	movweq	r0, #15
    2a5c:	000350b5 	strheq	r5, [r3], -r5	; <UNPREDICTABLE>
    2a60:	b0072800 	andlt	r2, r7, r0, lsl #16
    2a64:	03000032 	movweq	r0, #50	; 0x32
    2a68:	00005eb7 			; <UNDEFINED> instruction: 0x00005eb7
    2a6c:	10002c00 	andne	r2, r0, r0, lsl #24
    2a70:	031a0408 	tsteq	sl, #8, 8	; 0x8000000
    2a74:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    2a78:	30000000 	andcc	r0, r0, r0
    2a7c:	0b000003 	bleq	2a90 <__Stack_Size+0x2690>
    2a80:	0000005e 	andeq	r0, r0, lr, asr r0
    2a84:	21040800 	tstcs	r4, r0, lsl #16
    2a88:	0a000003 	beq	2a9c <__Stack_Size+0x269c>
    2a8c:	000000fe 	strdeq	r0, [r0], -lr
    2a90:	0000034a 	andeq	r0, r0, sl, asr #6
    2a94:	00005e0b 	andeq	r5, r0, fp, lsl #28
    2a98:	005e0b00 	subseq	r0, lr, r0, lsl #22
    2a9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2aa0:	00033604 	andeq	r3, r3, r4, lsl #12
    2aa4:	09041100 	stmdbeq	r4, {r8, ip}
    2aa8:	00000f0e 	andeq	r0, r0, lr, lsl #30
    2aac:	027db903 	rsbseq	fp, sp, #49152	; 0xc000
    2ab0:	60060000 	andvs	r0, r6, r0
    2ab4:	24000010 	strcs	r0, [r0], #-16
    2ab8:	03d6bb03 	bicseq	fp, r6, #3072	; 0xc00
    2abc:	52070000 	andpl	r0, r7, #0
    2ac0:	03000013 	movweq	r0, #19
    2ac4:	00031bbd 			; <UNDEFINED> instruction: 0x00031bbd
    2ac8:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    2acc:	03000012 	movweq	r0, #18
    2ad0:	00031bbe 			; <UNDEFINED> instruction: 0x00031bbe
    2ad4:	c2070400 	andgt	r0, r7, #0, 8
    2ad8:	03000011 	movweq	r0, #17
    2adc:	00031bbf 			; <UNDEFINED> instruction: 0x00031bbf
    2ae0:	74070800 	strvc	r0, [r7], #-2048	; 0xfffff800
    2ae4:	03000012 	movweq	r0, #18
    2ae8:	00031bc0 	andeq	r1, r3, r0, asr #23
    2aec:	78070c00 	stmdavc	r7, {sl, fp}
    2af0:	03000010 	movweq	r0, #16
    2af4:	00031bc1 	andeq	r1, r3, r1, asr #23
    2af8:	23071000 	movwcs	r1, #28672	; 0x7000
    2afc:	03000014 	movweq	r0, #20
    2b00:	00031bc2 	andeq	r1, r3, r2, asr #23
    2b04:	03071400 	movweq	r1, #29696	; 0x7400
    2b08:	03000015 	movweq	r0, #21
    2b0c:	00031bc3 	andeq	r1, r3, r3, asr #23
    2b10:	0c071800 	stceq	8, cr1, [r7], {-0}
    2b14:	03000011 	movweq	r0, #17
    2b18:	00031bc4 	andeq	r1, r3, r4, asr #23
    2b1c:	d4071c00 	strle	r1, [r7], #-3072	; 0xfffff400
    2b20:	03000011 	movweq	r0, #17
    2b24:	00031bc5 	andeq	r1, r3, r5, asr #23
    2b28:	09002000 	stmdbeq	r0, {sp}
    2b2c:	00001061 	andeq	r1, r0, r1, rrx
    2b30:	035dc703 	cmpeq	sp, #786432	; 0xc0000
    2b34:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    2b38:	041a1605 	ldreq	r1, [sl], #-1541	; 0xfffff9fb
    2b3c:	4d070000 	stcmi	0, cr0, [r7, #-0]
    2b40:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    2b44:	00003a18 	andeq	r3, r0, r8, lsl sl
    2b48:	27070000 	strcs	r0, [r7, -r0]
    2b4c:	05000010 	streq	r0, [r0, #-16]
    2b50:	00005e19 	andeq	r5, r0, r9, lsl lr
    2b54:	87070400 	strhi	r0, [r7, -r0, lsl #8]
    2b58:	05000010 	streq	r0, [r0, #-16]
    2b5c:	00005e1a 	andeq	r5, r0, sl, lsl lr
    2b60:	d9070500 	stmdble	r7, {r8, sl}
    2b64:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2b68:	00005e1b 	andeq	r5, r0, fp, lsl lr
    2b6c:	09000600 	stmdbeq	r0, {r9, sl}
    2b70:	00001589 	andeq	r1, r0, r9, lsl #11
    2b74:	03e11c05 	mvneq	r1, #1280	; 0x500
    2b78:	af040000 	svcge	0x00040000
    2b7c:	01000009 	tsteq	r0, r9
    2b80:	00000068 	andeq	r0, r0, r8, rrx
    2b84:	045a3006 	ldrbeq	r3, [sl], #-6
    2b88:	f1050000 			; <UNDEFINED> instruction: 0xf1050000
    2b8c:	00000009 	andeq	r0, r0, r9
    2b90:	000b7305 	andeq	r7, fp, r5, lsl #6
    2b94:	84050100 	strhi	r0, [r5], #-256	; 0xffffff00
    2b98:	02000005 	andeq	r0, r0, #5
    2b9c:	000bb305 	andeq	fp, fp, r5, lsl #6
    2ba0:	26050300 	strcs	r0, [r5], -r0, lsl #6
    2ba4:	04000004 	streq	r0, [r0], #-4
    2ba8:	00094905 	andeq	r4, r9, r5, lsl #18
    2bac:	13000500 	movwne	r0, #1280	; 0x500
    2bb0:	000013ab 	andeq	r1, r0, fp, lsr #7
    2bb4:	0dd4c901 	ldcleq	9, cr12, [r4, #4]
    2bb8:	00180800 	andseq	r0, r8, r0, lsl #16
    2bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bc0:	0000047b 	andeq	r0, r0, fp, ror r4
    2bc4:	00128614 	andseq	r8, r2, r4, lsl r6
    2bc8:	7bcb0100 	blvc	ff2c2fd0 <SCS_BASE+0x1f2b4fd0>
    2bcc:	00000004 	andeq	r0, r0, r4
    2bd0:	02720408 	rsbseq	r0, r2, #8, 8	; 0x8000000
    2bd4:	8c150000 	ldchi	0, cr0, [r5], {-0}
    2bd8:	01000012 	tsteq	r0, r2, lsl r0
    2bdc:	000decdb 	ldrdeq	lr, [sp], -fp
    2be0:	00000c08 	andeq	r0, r0, r8, lsl #24
    2be4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    2be8:	00001368 	andeq	r1, r0, r8, ror #6
    2bec:	0df8e801 	ldcleq	8, cr14, [r8, #4]!
    2bf0:	00140800 	andseq	r0, r4, r0, lsl #16
    2bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bf8:	00146b15 	andseq	r6, r4, r5, lsl fp
    2bfc:	0cfb0100 	ldfeqe	f0, [fp]
    2c00:	0208000e 	andeq	r0, r8, #14
    2c04:	01000000 	mrseq	r0, (UNDEF: 0)
    2c08:	151b169c 	ldrne	r1, [fp, #-1692]	; 0xfffff964
    2c0c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2c10:	0000fe01 	andeq	pc, r0, r1, lsl #28
    2c14:	000e1000 	andeq	r1, lr, r0
    2c18:	00005c08 	andeq	r5, r0, r8, lsl #24
    2c1c:	fb9c0100 	blx	fe703026 <SCS_BASE+0x1e6f5026>
    2c20:	17000004 	strne	r0, [r0, -r4]
    2c24:	000012c0 	andeq	r1, r0, r0, asr #5
    2c28:	5e010801 	cdppl	8, 0, cr0, cr1, cr1, {0}
    2c2c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2c30:	18000007 	stmdane	r0, {r0, r1, r2}
    2c34:	000013cd 	andeq	r1, r0, sp, asr #7
    2c38:	55010d01 	strpl	r0, [r1, #-3329]	; 0xfffff2ff
    2c3c:	e2000001 	and	r0, r0, #1
    2c40:	19000007 	stmdbne	r0, {r0, r1, r2}
    2c44:	08000e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp}
    2c48:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2c4c:	00000074 	andeq	r0, r0, r4, ror r0
    2c50:	0010db16 	andseq	sp, r0, r6, lsl fp
    2c54:	01340100 	teqeq	r4, r0, lsl #2
    2c58:	000000fe 	strdeq	r0, [r0], -lr
    2c5c:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
    2c60:	00000024 	andeq	r0, r0, r4, lsr #32
    2c64:	05269c01 	streq	r9, [r6, #-3073]!	; 0xfffff3ff
    2c68:	c0170000 	andsgt	r0, r7, r0
    2c6c:	01000012 	tsteq	r0, r2, lsl r0
    2c70:	005e0134 	subseq	r0, lr, r4, lsr r1
    2c74:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    2c78:	16000000 	strne	r0, [r0], -r0
    2c7c:	00001498 	muleq	r0, r8, r4
    2c80:	fe018e01 	cdp2	14, 0, cr8, cr1, cr1, {0}
    2c84:	90000000 	andls	r0, r0, r0
    2c88:	1008000e 	andne	r0, r8, lr
    2c8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c90:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    2c94:	132c1700 			; <UNDEFINED> instruction: 0x132c1700
    2c98:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2c9c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ca0:	00085e00 	andeq	r5, r8, r0, lsl #28
    2ca4:	138b1b00 	orrne	r1, fp, #0, 22
    2ca8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2cac:	00005e01 	andeq	r5, r0, r1, lsl #28
    2cb0:	00510100 	subseq	r0, r1, r0, lsl #2
    2cb4:	00119916 	andseq	r9, r1, r6, lsl r9
    2cb8:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    2cbc:	000000c4 	andeq	r0, r0, r4, asr #1
    2cc0:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
    2cc4:	00000018 	andeq	r0, r0, r8, lsl r0
    2cc8:	058a9c01 	streq	r9, [sl, #3073]	; 0xc01
    2ccc:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    2cd0:	01000038 	tsteq	r0, r8, lsr r0
    2cd4:	004c01a3 	subeq	r0, ip, r3, lsr #3
    2cd8:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    2cdc:	16000000 	strne	r0, [r0], -r0
    2ce0:	00001305 	andeq	r1, r0, r5, lsl #6
    2ce4:	c401c101 	strgt	ip, [r1], #-257	; 0xfffffeff
    2ce8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2cec:	2c08000e 	stccs	0, cr0, [r8], {14}
    2cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    2cf4:	0005b59c 	muleq	r5, ip, r5
    2cf8:	38581700 	ldmdacc	r8, {r8, r9, sl, ip}^
    2cfc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2d00:	00004c01 	andeq	r4, r0, r1, lsl #24
    2d04:	0008b900 	andeq	fp, r8, r0, lsl #18
    2d08:	73130000 	tstvc	r3, #0
    2d0c:	01000015 	tsteq	r0, r5, lsl r0
    2d10:	000ee46a 	andeq	lr, lr, sl, ror #8
    2d14:	00002408 	andeq	r2, r0, r8, lsl #8
    2d18:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    2d1c:	1c000005 	stcne	0, cr0, [r0], {5}
    2d20:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
    2d24:	00000a54 	andeq	r0, r0, r4, asr sl
    2d28:	000ef61c 	andeq	pc, lr, ip, lsl r6	; <UNPREDICTABLE>
    2d2c:	000a5f08 	andeq	r5, sl, r8, lsl #30
    2d30:	0efa1c00 	cdpeq	12, 15, cr1, cr10, cr0, {0}
    2d34:	0a6a0800 	beq	1a84d3c <__Stack_Size+0x1a8493c>
    2d38:	13000000 	movwne	r0, #0
    2d3c:	00001229 	andeq	r1, r0, r9, lsr #4
    2d40:	0f088401 	svceq	0x00088401
    2d44:	00e00800 	rsceq	r0, r0, r0, lsl #16
    2d48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d4c:	0000080d 	andeq	r0, r0, sp, lsl #16
    2d50:	000f201d 	andeq	r2, pc, sp, lsl r0	; <UNPREDICTABLE>
    2d54:	000a7508 	andeq	r7, sl, r8, lsl #10
    2d58:	00060f00 	andeq	r0, r6, r0, lsl #30
    2d5c:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d60:	00007402 	andeq	r7, r0, r2, lsl #8
    2d64:	000f2a1d 	andeq	r2, pc, sp, lsl sl	; <UNPREDICTABLE>
    2d68:	000a8108 	andeq	r8, sl, r8, lsl #2
    2d6c:	00062a00 	andeq	r2, r6, r0, lsl #20
    2d70:	50011a00 	andpl	r1, r1, r0, lsl #20
    2d74:	1a007402 	bne	1fd84 <__Stack_Size+0x1f984>
    2d78:	0a035101 	beq	d7184 <__Stack_Size+0xd6d84>
    2d7c:	1d000200 	sfmne	f0, 4, [r0, #-0]
    2d80:	08000f32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp}
    2d84:	00000a8d 	andeq	r0, r0, sp, lsl #21
    2d88:	00000643 	andeq	r0, r0, r3, asr #12
    2d8c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    2d90:	011a0074 	tsteq	sl, r4, ror r0
    2d94:	00400151 	subeq	r0, r0, r1, asr r1
    2d98:	000f3a1d 	andeq	r3, pc, sp, lsl sl	; <UNPREDICTABLE>
    2d9c:	000a9908 	andeq	r9, sl, r8, lsl #18
    2da0:	00065d00 	andeq	r5, r6, r0, lsl #26
    2da4:	50011a00 	andpl	r1, r1, r0, lsl #20
    2da8:	1a007402 	bne	1fdb8 <__Stack_Size+0x1f9b8>
    2dac:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    2db0:	421d0040 	andsmi	r0, sp, #64	; 0x40
    2db4:	a508000f 	strge	r0, [r8, #-15]
    2db8:	7700000a 	strvc	r0, [r0, -sl]
    2dbc:	1a000006 	bne	2ddc <__Stack_Size+0x29dc>
    2dc0:	74025001 	strvc	r5, [r2], #-1
    2dc4:	51011a00 	tstpl	r1, r0, lsl #20
    2dc8:	00800802 	addeq	r0, r0, r2, lsl #16
    2dcc:	000f481d 	andeq	r4, pc, sp, lsl r8	; <UNPREDICTABLE>
    2dd0:	000ab108 	andeq	fp, sl, r8, lsl #2
    2dd4:	00068b00 	andeq	r8, r6, r0, lsl #22
    2dd8:	50011a00 	andpl	r1, r1, r0, lsl #20
    2ddc:	00007402 	andeq	r7, r0, r2, lsl #8
    2de0:	000f541d 	andeq	r5, pc, sp, lsl r4	; <UNPREDICTABLE>
    2de4:	000abd08 	andeq	fp, sl, r8, lsl #26
    2de8:	00069f00 	andeq	r9, r6, r0, lsl #30
    2dec:	50011a00 	andpl	r1, r1, r0, lsl #20
    2df0:	00007402 	andeq	r7, r0, r2, lsl #8
    2df4:	000f5a1d 	andeq	r5, pc, sp, lsl sl	; <UNPREDICTABLE>
    2df8:	000ac908 	andeq	ip, sl, r8, lsl #18
    2dfc:	0006b300 	andeq	fp, r6, r0, lsl #6
    2e00:	50011a00 	andpl	r1, r1, r0, lsl #20
    2e04:	00007402 	andeq	r7, r0, r2, lsl #8
    2e08:	000f621d 	andeq	r6, pc, sp, lsl r2	; <UNPREDICTABLE>
    2e0c:	000a8108 	andeq	r8, sl, r8, lsl #2
    2e10:	0006cc00 	andeq	ip, r6, r0, lsl #24
    2e14:	50011a00 	andpl	r1, r1, r0, lsl #20
    2e18:	011a3101 	tsteq	sl, r1, lsl #2
    2e1c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2e20:	0f6a1d00 	svceq	0x006a1d00
    2e24:	0aa50800 	beq	fe944e2c <SCS_BASE+0x1e936e2c>
    2e28:	06e50000 	strbteq	r0, [r5], r0
    2e2c:	011a0000 	tsteq	sl, r0
    2e30:	1a310150 	bne	c43378 <__Stack_Size+0xc42f78>
    2e34:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    2e38:	721d00c0 	andsvc	r0, sp, #192	; 0xc0
    2e3c:	8d08000f 	stchi	0, cr0, [r8, #-60]	; 0xffffffc4
    2e40:	fe00000a 	cdp2	0, 0, cr0, cr0, cr10, {0}
    2e44:	1a000006 	bne	2e64 <__Stack_Size+0x2a64>
    2e48:	31015001 	tstcc	r1, r1
    2e4c:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2e50:	1d002008 	stcne	0, cr2, [r0, #-32]	; 0xffffffe0
    2e54:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
    2e58:	00000ad5 	ldrdeq	r0, [r0], -r5
    2e5c:	00000717 	andeq	r0, r0, r7, lsl r7
    2e60:	0150011a 	cmpeq	r0, sl, lsl r1
    2e64:	51011a31 	tstpl	r1, r1, lsr sl
    2e68:	00007402 	andeq	r7, r0, r2, lsl #8
    2e6c:	000f841d 	andeq	r8, pc, sp, lsl r4	; <UNPREDICTABLE>
    2e70:	000a8108 	andeq	r8, sl, r8, lsl #2
    2e74:	00073100 	andeq	r3, r7, r0, lsl #2
    2e78:	50011a00 	andpl	r1, r1, r0, lsl #20
    2e7c:	011a3201 	tsteq	sl, r1, lsl #4
    2e80:	000a0351 	andeq	r0, sl, r1, asr r3
    2e84:	8e1d0006 	cdphi	0, 1, cr0, cr13, cr6, {0}
    2e88:	a508000f 	strge	r0, [r8, #-15]
    2e8c:	4b00000a 	blmi	2ebc <__Stack_Size+0x2abc>
    2e90:	1a000007 	bne	2eb4 <__Stack_Size+0x2ab4>
    2e94:	32015001 	andcc	r5, r1, #1
    2e98:	0351011a 	cmpeq	r1, #-2147483642	; 0x80000006
    2e9c:	0001000a 	andeq	r0, r1, sl
    2ea0:	000f961d 	andeq	r9, pc, sp, lsl r6	; <UNPREDICTABLE>
    2ea4:	000ad508 	andeq	sp, sl, r8, lsl #10
    2ea8:	00076400 	andeq	r6, r7, r0, lsl #8
    2eac:	50011a00 	andpl	r1, r1, r0, lsl #20
    2eb0:	011a3201 	tsteq	sl, r1, lsl #4
    2eb4:	00740251 	rsbseq	r0, r4, r1, asr r2
    2eb8:	0f9e1d00 	svceq	0x009e1d00
    2ebc:	0a8d0800 	beq	fe344ec4 <SCS_BASE+0x1e336ec4>
    2ec0:	077d0000 	ldrbeq	r0, [sp, -r0]!
    2ec4:	011a0000 	tsteq	sl, r0
    2ec8:	1a320150 	bne	c83410 <__Stack_Size+0xc83010>
    2ecc:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    2ed0:	a61d0020 	ldrge	r0, [sp], -r0, lsr #32
    2ed4:	8108000f 	tsthi	r8, pc
    2ed8:	9600000a 	strls	r0, [r0], -sl
    2edc:	1a000007 	bne	2f00 <__Stack_Size+0x2b00>
    2ee0:	33015001 	movwcc	r5, #4097	; 0x1001
    2ee4:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    2ee8:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
    2eec:	08000fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp}
    2ef0:	00000a99 	muleq	r0, r9, sl
    2ef4:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    2ef8:	0150011a 	cmpeq	r0, sl, lsl r1
    2efc:	51011a33 	tstpl	r1, r3, lsr sl
    2f00:	01100a03 	tsteq	r0, r3, lsl #20
    2f04:	0fb81d00 	svceq	0x00b81d00
    2f08:	0abd0800 	beq	fef44f10 <SCS_BASE+0x1ef36f10>
    2f0c:	07c90000 	strbeq	r0, [r9, r0]
    2f10:	011a0000 	tsteq	sl, r0
    2f14:	1a330150 	bne	cc345c <__Stack_Size+0xcc305c>
    2f18:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    2f1c:	c21d0040 	andsgt	r0, sp, #64	; 0x40
    2f20:	d508000f 	strle	r0, [r8, #-15]
    2f24:	e300000a 	movw	r0, #10
    2f28:	1a000007 	bne	2f4c <__Stack_Size+0x2b4c>
    2f2c:	33015001 	movwcc	r5, #4097	; 0x1001
    2f30:	0351011a 	cmpeq	r1, #-2147483642	; 0x80000006
    2f34:	0030000a 	eorseq	r0, r0, sl
    2f38:	000fca1d 	andeq	ip, pc, sp, lsl sl	; <UNPREDICTABLE>
    2f3c:	000a8d08 	andeq	r8, sl, r8, lsl #26
    2f40:	0007fc00 	andeq	pc, r7, r0, lsl #24
    2f44:	50011a00 	andpl	r1, r1, r0, lsl #20
    2f48:	011a3301 	tsteq	sl, r1, lsl #6
    2f4c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2f50:	0fd01e00 	svceq	0x00d01e00
    2f54:	0ae10800 	beq	ff844f5c <SCS_BASE+0x1f836f5c>
    2f58:	011a0000 	tsteq	sl, r0
    2f5c:	00740250 	rsbseq	r0, r4, r0, asr r2
    2f60:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
    2f64:	01000011 	tsteq	r0, r1, lsl r0
    2f68:	00c4015d 	sbceq	r0, r4, sp, asr r1
    2f6c:	0fe80000 	svceq	0x00e80000
    2f70:	000c0800 	andeq	r0, ip, r0, lsl #16
    2f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f78:	0000084b 	andeq	r0, r0, fp, asr #16
    2f7c:	00385817 	eorseq	r5, r8, r7, lsl r8
    2f80:	015d0100 	cmpeq	sp, r0, lsl #2
    2f84:	0000004c 	andeq	r0, r0, ip, asr #32
    2f88:	000008da 	ldrdeq	r0, [r0], -sl
    2f8c:	000fee1f 	andeq	lr, pc, pc, lsl lr	; <UNPREDICTABLE>
    2f90:	000aec08 	andeq	lr, sl, r8, lsl #24
    2f94:	51011a00 	tstpl	r1, r0, lsl #20
    2f98:	008c0305 	addeq	r0, ip, r5, lsl #6
    2f9c:	00002000 	andeq	r2, r0, r0
    2fa0:	00153716 	andseq	r3, r5, r6, lsl r7
    2fa4:	016a0100 	cmneq	sl, r0, lsl #2
    2fa8:	000000c4 	andeq	r0, r0, r4, asr #1
    2fac:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
    2fb0:	0000000c 	andeq	r0, r0, ip
    2fb4:	08899c01 	stmeq	r9, {r0, sl, fp, ip, pc}
    2fb8:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    2fbc:	01000038 	tsteq	r0, r8, lsr r0
    2fc0:	004c016a 	subeq	r0, ip, sl, ror #2
    2fc4:	08fb0000 	ldmeq	fp!, {}^	; <UNPREDICTABLE>
    2fc8:	fa1f0000 	blx	7c2fd0 <__Stack_Size+0x7c2bd0>
    2fcc:	ec08000f 	stc	0, cr0, [r8], {15}
    2fd0:	1a00000a 	bne	3000 <__Stack_Size+0x2c00>
    2fd4:	03055101 	movweq	r5, #20737	; 0x5101
    2fd8:	20000094 	mulcs	r0, r4, r0
    2fdc:	35160000 	ldrcc	r0, [r6, #-0]
    2fe0:	01000014 	tsteq	r0, r4, lsl r0
    2fe4:	00c40177 	sbceq	r0, r4, r7, ror r1
    2fe8:	10000000 	andne	r0, r0, r0
    2fec:	00200800 	eoreq	r0, r0, r0, lsl #16
    2ff0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ff4:	000008cd 	andeq	r0, r0, sp, asr #17
    2ff8:	00385817 	eorseq	r5, r8, r7, lsl r8
    2ffc:	01770100 	cmneq	r7, r0, lsl #2
    3000:	0000004c 	andeq	r0, r0, ip, asr #32
    3004:	0000091c 	andeq	r0, r0, ip, lsl r9
    3008:	0012fd18 	andseq	pc, r2, r8, lsl sp	; <UNPREDICTABLE>
    300c:	017a0100 	cmneq	sl, r0, lsl #2
    3010:	0000005e 	andeq	r0, r0, lr, asr r0
    3014:	00000956 	andeq	r0, r0, r6, asr r9
    3018:	00101420 	andseq	r1, r0, r0, lsr #8
    301c:	000aec08 	andeq	lr, sl, r8, lsl #24
    3020:	44210000 	strtmi	r0, [r1], #-0
    3024:	0100000f 	tsteq	r0, pc
    3028:	0003522e 	andeq	r5, r3, lr, lsr #4
    302c:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    3030:	21200000 			; <UNDEFINED> instruction: 0x21200000
    3034:	000030d1 	ldrdeq	r3, [r0], -r1
    3038:	03d63e01 	bicseq	r3, r6, #1, 28
    303c:	03050000 	movweq	r0, #20480	; 0x5000
    3040:	200000bc 	strhcs	r0, [r0], -ip
    3044:	00115521 	andseq	r5, r1, r1, lsr #10
    3048:	8b280100 	blhi	a03450 <__Stack_Size+0xa03050>
    304c:	05000001 	streq	r0, [r0, #-1]
    3050:	0000e003 	andeq	lr, r0, r3
    3054:	14bf2220 	ldrtne	r2, [pc], #544	; 305c <__Stack_Size+0x2c5c>
    3058:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    305c:	00000272 	andeq	r0, r0, r2, ror r2
    3060:	00112e22 	andseq	r2, r1, r2, lsr #28
    3064:	7b220700 	blvc	884c6c <__Stack_Size+0x88486c>
    3068:	23000004 	movwcs	r0, #4
    306c:	00000926 	andeq	r0, r0, r6, lsr #18
    3070:	00000926 	andeq	r0, r0, r6, lsr #18
    3074:	00006f24 	andeq	r6, r0, r4, lsr #30
    3078:	25001100 	strcs	r1, [r0, #-256]	; 0xffffff00
    307c:	0000005e 	andeq	r0, r0, lr, asr r0
    3080:	000dca22 	andeq	ip, sp, r2, lsr #20
    3084:	362f0800 	strtcc	r0, [pc], -r0, lsl #16
    3088:	25000009 	strcs	r0, [r0, #-9]
    308c:	00000916 	andeq	r0, r0, r6, lsl r9
    3090:	00092623 	andeq	r2, r9, r3, lsr #12
    3094:	00094b00 	andeq	r4, r9, r0, lsl #22
    3098:	006f2400 	rsbeq	r2, pc, r0, lsl #8
    309c:	00420000 	subeq	r0, r2, r0
    30a0:	000e2922 	andeq	r2, lr, r2, lsr #18
    30a4:	56300800 	ldrtpl	r0, [r0], -r0, lsl #16
    30a8:	25000009 	strcs	r0, [r0, #-9]
    30ac:	0000093b 	andeq	r0, r0, fp, lsr r9
    30b0:	00092623 	andeq	r2, r9, r3, lsr #12
    30b4:	00096b00 	andeq	r6, r9, r0, lsl #22
    30b8:	006f2400 	rsbeq	r2, pc, r0, lsl #8
    30bc:	00030000 	andeq	r0, r3, r0
    30c0:	000dec22 	andeq	lr, sp, r2, lsr #24
    30c4:	76320800 	ldrtvc	r0, [r2], -r0, lsl #16
    30c8:	25000009 	strcs	r0, [r0, #-9]
    30cc:	0000095b 	andeq	r0, r0, fp, asr r9
    30d0:	000dac22 	andeq	sl, sp, r2, lsr #24
    30d4:	86330800 	ldrthi	r0, [r3], -r0, lsl #16
    30d8:	25000009 	strcs	r0, [r0, #-9]
    30dc:	00000916 	andeq	r0, r0, r6, lsl r9
    30e0:	00092623 	andeq	r2, r9, r3, lsr #12
    30e4:	00099b00 	andeq	r9, r9, r0, lsl #22
    30e8:	006f2400 	rsbeq	r2, pc, r0, lsl #8
    30ec:	00310000 	eorseq	r0, r1, r0
    30f0:	000e0a22 	andeq	r0, lr, r2, lsr #20
    30f4:	a6340800 	ldrtge	r0, [r4], -r0, lsl #16
    30f8:	25000009 	strcs	r0, [r0, #-9]
    30fc:	0000098b 	andeq	r0, r0, fp, lsl #19
    3100:	00005e23 	andeq	r5, r0, r3, lsr #28
    3104:	0009bb00 	andeq	fp, r9, r0, lsl #22
    3108:	006f2400 	rsbeq	r2, pc, r0, lsl #8
    310c:	00190000 	andseq	r0, r9, r0
    3110:	000e4b22 	andeq	r4, lr, r2, lsr #22
    3114:	ab350800 	blge	d4511c <__Stack_Size+0xd44d1c>
    3118:	21000009 	tstcs	r0, r9
    311c:	00001012 	andeq	r1, r0, r2, lsl r0
    3120:	005e1801 	subseq	r1, lr, r1, lsl #16
    3124:	03050000 	movweq	r0, #20480	; 0x5000
    3128:	20000118 	andcs	r0, r0, r8, lsl r1
    312c:	00032e22 	andeq	r2, r3, r2, lsr #28
    3130:	e21a0100 	ands	r0, sl, #0, 2
    3134:	26000009 	strcs	r0, [r0], -r9
    3138:	0000003a 	andeq	r0, r0, sl, lsr r0
    313c:	0010d021 	andseq	sp, r0, r1, lsr #32
    3140:	1a1c0100 	bne	703548 <__Stack_Size+0x703148>
    3144:	05000004 	streq	r0, [r0, #-4]
    3148:	00005403 	andeq	r5, r0, r3, lsl #8
    314c:	12ae2120 	adcne	r2, lr, #32, 2
    3150:	4b010000 	blmi	43158 <__Stack_Size+0x42d58>
    3154:	000000ca 	andeq	r0, r0, sl, asr #1
    3158:	008c0305 	addeq	r0, ip, r5, lsl #6
    315c:	d5212000 	strle	r2, [r1, #-0]!
    3160:	01000014 	tsteq	r0, r4, lsl r0
    3164:	0000ca51 	andeq	ip, r0, r1, asr sl
    3168:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    316c:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    3170:	000000ca 	andeq	r0, r0, sl, asr #1
    3174:	00000a2a 	andeq	r0, r0, sl, lsr #20
    3178:	00006f24 	andeq	r6, r0, r4, lsr #30
    317c:	21000300 	mrscs	r0, LR_irq
    3180:	0000113b 	andeq	r1, r0, fp, lsr r1
    3184:	0a1a5701 	beq	698d90 <__Stack_Size+0x698990>
    3188:	03050000 	movweq	r0, #20480	; 0x5000
    318c:	2000009c 	mulcs	r0, ip, r0
    3190:	00101a27 	andseq	r1, r0, r7, lsr #20
    3194:	01070100 	mrseq	r0, (UNDEF: 23)
    3198:	00000a4d 	andeq	r0, r0, sp, asr #20
    319c:	011c0305 	tsteq	ip, r5, lsl #6
    31a0:	04282000 	strteq	r2, [r8], #-0
    31a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    31a8:	10b72900 	adcsne	r2, r7, r0, lsl #18
    31ac:	10b70000 	adcsne	r0, r7, r0
    31b0:	54060000 	strpl	r0, [r6], #-0
    31b4:	00134a29 	andseq	r4, r3, r9, lsr #20
    31b8:	00134a00 	andseq	r4, r3, r0, lsl #20
    31bc:	29440600 	stmdbcs	r4, {r9, sl}^
    31c0:	00001092 	muleq	r0, r2, r0
    31c4:	00001092 	muleq	r0, r2, r0
    31c8:	b82a1a09 	stmdalt	sl!, {r0, r3, r9, fp, ip}
    31cc:	b8000011 	stmdalt	r0, {r0, r4}
    31d0:	0a000011 	beq	321c <__Stack_Size+0x2e1c>
    31d4:	3c2a0262 	sfmcc	f0, 4, [sl], #-392	; 0xfffffe78
    31d8:	3c000010 	stccc	0, cr0, [r0], {16}
    31dc:	0a000010 	beq	3224 <__Stack_Size+0x2e24>
    31e0:	2e2a026a 	cdpcs	2, 2, cr0, cr10, cr10, {3}
    31e4:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
    31e8:	0a000010 	beq	3230 <__Stack_Size+0x2e30>
    31ec:	542a026c 	strtpl	r0, [sl], #-620	; 0xfffffd94
    31f0:	54000010 	strpl	r0, [r0], #-16
    31f4:	0a000010 	beq	323c <__Stack_Size+0x2e3c>
    31f8:	622a0284 	eorvs	r0, sl, #132, 4	; 0x40000008
    31fc:	62000011 	andvs	r0, r0, #17
    3200:	0a000011 	beq	324c <__Stack_Size+0x2e4c>
    3204:	872a0283 	strhi	r0, [sl, -r3, lsl #5]!
    3208:	87000014 	smladhi	r0, r4, r0, r0
    320c:	0a000014 	beq	3264 <__Stack_Size+0x2e64>
    3210:	952a0278 	strls	r0, [sl, #-632]!	; 0xfffffd88
    3214:	95000015 	strls	r0, [r0, #-21]	; 0xffffffeb
    3218:	0a000015 	beq	3274 <__Stack_Size+0x2e74>
    321c:	f22a0289 	vhsub.s32	d0, d26, d9
    3220:	f200000e 	vhadd.s8	d0, d0, d14
    3224:	0a00000e 	beq	3264 <__Stack_Size+0x2e64>
    3228:	502a0272 	eorpl	r0, sl, r2, ror r2
    322c:	50000012 	andpl	r0, r0, r2, lsl r0
    3230:	0a000012 	beq	3280 <__Stack_Size+0x2e80>
    3234:	d929026d 	stmdble	r9!, {r0, r2, r3, r5, r6, r9}
    3238:	d9000011 	stmdble	r0, {r0, r4}
    323c:	03000011 	movweq	r0, #17
    3240:	117e29eb 	cmnne	lr, fp, ror #19
    3244:	117e0000 	cmnne	lr, r0
    3248:	e7030000 	str	r0, [r3, -r0]
    324c:	0004c800 	andeq	ip, r4, r0, lsl #16
    3250:	60000400 	andvs	r0, r0, r0, lsl #8
    3254:	0400000a 	streq	r0, [r0], #-10
    3258:	000bf101 	andeq	pc, fp, r1, lsl #2
    325c:	15b80c00 	ldrne	r0, [r8, #3072]!	; 0xc00
    3260:	051f0000 	ldreq	r0, [pc, #-0]	; 3268 <__Stack_Size+0x2e68>
    3264:	02200000 	eoreq	r0, r0, #0
    3268:	00000000 	andeq	r0, r0, r0
    326c:	0af00000 	beq	ffc03274 <SCS_BASE+0x1fbf5274>
    3270:	04020000 	streq	r0, [r2], #-0
    3274:	0007b605 	andeq	fp, r7, r5, lsl #12
    3278:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    327c:	00000788 	andeq	r0, r0, r8, lsl #15
    3280:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    3284:	03000009 	movweq	r0, #9
    3288:	00323375 	eorseq	r3, r2, r5, ror r3
    328c:	00452702 	subeq	r2, r5, r2, lsl #14
    3290:	04020000 	streq	r0, [r2], #-0
    3294:	0008c307 	andeq	ip, r8, r7, lsl #6
    3298:	31750300 	cmncc	r5, r0, lsl #6
    329c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    32a0:	00000057 	andeq	r0, r0, r7, asr r0
    32a4:	60070202 	andvs	r0, r7, r2, lsl #4
    32a8:	0300000b 	movweq	r0, #11
    32ac:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    32b0:	00006829 	andeq	r6, r0, r9, lsr #16
    32b4:	08010200 	stmdaeq	r1, {r9}
    32b8:	00000965 	andeq	r0, r0, r5, ror #18
    32bc:	0003c604 	andeq	ip, r3, r4, lsl #12
    32c0:	7a2f0200 	bvc	bc3ac8 <__Stack_Size+0xbc36c8>
    32c4:	05000000 	streq	r0, [r0, #-0]
    32c8:	00000045 	andeq	r0, r0, r5, asr #32
    32cc:	00680106 	rsbeq	r0, r8, r6, lsl #2
    32d0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    32d4:	00000098 	muleq	r0, r8, r0
    32d8:	0004ac07 	andeq	sl, r4, r7, lsl #24
    32dc:	a0070000 	andge	r0, r7, r0
    32e0:	01000008 	tsteq	r0, r8
    32e4:	00a60400 	adceq	r0, r6, r0, lsl #8
    32e8:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    32ec:	0000007f 	andeq	r0, r0, pc, ror r0
    32f0:	ba070402 	blt	1c4300 <__Stack_Size+0x1c3f00>
    32f4:	08000008 	stmdaeq	r0, {r3}
    32f8:	014e031c 	cmpeq	lr, ip, lsl r3
    32fc:	0000010f 	andeq	r0, r0, pc, lsl #2
    3300:	4c524309 	mrrcmi	3, 0, r4, r2, cr9
    3304:	01500300 	cmpeq	r0, r0, lsl #6
    3308:	0000006f 	andeq	r0, r0, pc, rrx
    330c:	52430900 	subpl	r0, r3, #0, 18
    3310:	51030048 	tstpl	r3, r8, asr #32
    3314:	00006f01 	andeq	r6, r0, r1, lsl #30
    3318:	49090400 	stmdbmi	r9, {sl}
    331c:	03005244 	movweq	r5, #580	; 0x244
    3320:	006f0152 	rsbeq	r0, pc, r2, asr r1	; <UNPREDICTABLE>
    3324:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3328:	0052444f 	subseq	r4, r2, pc, asr #8
    332c:	6f015303 	svcvs	0x00015303
    3330:	0c000000 	stceq	0, cr0, [r0], {-0}
    3334:	00005f0a 	andeq	r5, r0, sl, lsl #30
    3338:	01540300 	cmpeq	r4, r0, lsl #6
    333c:	0000006f 	andeq	r0, r0, pc, rrx
    3340:	52420910 	subpl	r0, r2, #16, 18	; 0x40000
    3344:	55030052 	strpl	r0, [r3, #-82]	; 0xffffffae
    3348:	00006f01 	andeq	r6, r0, r1, lsl #30
    334c:	c20a1400 	andgt	r1, sl, #0, 8
    3350:	0300000c 	movweq	r0, #12
    3354:	006f0156 	rsbeq	r0, pc, r6, asr r1	; <UNPREDICTABLE>
    3358:	00180000 	andseq	r0, r8, r0
    335c:	0008630b 	andeq	r6, r8, fp, lsl #6
    3360:	01570300 	cmpeq	r7, r0, lsl #6
    3364:	000000aa 	andeq	r0, r0, sl, lsr #1
    3368:	005e040c 	subseq	r0, lr, ip, lsl #8
    336c:	5a0d0000 	bpl	343374 <__Stack_Size+0x342f74>
    3370:	0100000f 	tsteq	r0, pc
    3374:	00000068 	andeq	r0, r0, r8, rrx
    3378:	014a3004 	cmpeq	sl, r4
    337c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    3380:	0000000f 	andeq	r0, r0, pc
    3384:	00100407 	andseq	r0, r0, r7, lsl #8
    3388:	97070100 	strls	r0, [r7, -r0, lsl #2]
    338c:	0200000f 	andeq	r0, r0, #15
    3390:	000ff607 	andeq	pc, pc, r7, lsl #12
    3394:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    3398:	00000f5b 	andeq	r0, r0, fp, asr pc
    339c:	01213704 			; <UNDEFINED> instruction: 0x01213704
    33a0:	af0d0000 	svcge	0x000d0000
    33a4:	01000009 	tsteq	r0, r9
    33a8:	00000068 	andeq	r0, r0, r8, rrx
    33ac:	018a3005 	orreq	r3, sl, r5
    33b0:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    33b4:	00000009 	andeq	r0, r0, r9
    33b8:	000b7307 	andeq	r7, fp, r7, lsl #6
    33bc:	84070100 	strhi	r0, [r7], #-256	; 0xffffff00
    33c0:	02000005 	andeq	r0, r0, #5
    33c4:	000bb307 	andeq	fp, fp, r7, lsl #6
    33c8:	26070300 	strcs	r0, [r7], -r0, lsl #6
    33cc:	04000004 	streq	r0, [r0], #-4
    33d0:	00094907 	andeq	r4, r9, r7, lsl #18
    33d4:	0e000500 	cfsh32eq	mvfx0, mvfx0, #0
    33d8:	00001620 	andeq	r1, r0, r0, lsr #12
    33dc:	01012601 	tsteq	r1, r1, lsl #12
    33e0:	000001a4 	andeq	r0, r0, r4, lsr #3
    33e4:	0015e90f 	andseq	lr, r5, pc, lsl #18
    33e8:	01260100 			; <UNDEFINED> instruction: 0x01260100
    33ec:	00000098 	muleq	r0, r8, r0
    33f0:	15ab1000 	strne	r1, [fp, #0]!
    33f4:	73010000 	movwvc	r0, #4096	; 0x1000
    33f8:	00102001 	andseq	r2, r0, r1
    33fc:	00002808 	andeq	r2, r0, r8, lsl #16
    3400:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
    3404:	11000001 	tstne	r0, r1
    3408:	0000166d 	andeq	r1, r0, sp, ror #12
    340c:	3a017301 	bcc	60018 <__Stack_Size+0x5fc18>
    3410:	74000000 	strvc	r0, [r0], #-0
    3414:	12000009 	andne	r0, r0, #9
    3418:	00001683 	andeq	r1, r0, r3, lsl #13
    341c:	1b017301 	blne	60028 <__Stack_Size+0x5fc28>
    3420:	01000001 	tsteq	r0, r1
    3424:	656c1351 	strbvs	r1, [ip, #-849]!	; 0xfffffcaf
    3428:	7301006e 	movwvc	r0, #4206	; 0x106e
    342c:	00005e01 	andeq	r5, r0, r1, lsl #28
    3430:	14520100 	ldrbne	r0, [r2], #-256	; 0xffffff00
    3434:	00786469 	rsbseq	r6, r8, r9, ror #8
    3438:	5e017501 	cfsh32pl	mvfx7, mvfx1, #1
    343c:	92000000 	andls	r0, r0, #0
    3440:	00000009 	andeq	r0, r0, r9
    3444:	00134a15 	andseq	r4, r3, r5, lsl sl
    3448:	4a270100 	bmi	9c3850 <__Stack_Size+0x9c3450>
    344c:	48000001 	stmdami	r0, {r0}
    3450:	38080010 	stmdacc	r8, {r4}
    3454:	01000000 	mrseq	r0, (UNDEF: 0)
    3458:	0002639c 	muleq	r2, ip, r3
    345c:	33d61600 	bicscc	r1, r6, #0, 12
    3460:	2a010000 	bcs	43468 <__Stack_Size+0x43068>
    3464:	0000004c 	andeq	r0, r0, ip, asr #32
    3468:	018a1701 	orreq	r1, sl, r1, lsl #14
    346c:	104a0000 	subne	r0, sl, r0
    3470:	000a0800 	andeq	r0, sl, r0, lsl #16
    3474:	2d010000 	stccs	0, cr0, [r1, #-0]
    3478:	00019718 	andeq	r9, r1, r8, lsl r7
    347c:	0009c900 	andeq	ip, r9, r0, lsl #18
    3480:	104a1900 	subne	r1, sl, r0, lsl #18
    3484:	000a0800 	andeq	r0, sl, r0, lsl #16
    3488:	97180000 	ldrls	r0, [r8, -r0]
    348c:	c9000001 	stmdbgt	r0, {r0}
    3490:	1a000009 	bne	34bc <__Stack_Size+0x30bc>
    3494:	08001054 	stmdaeq	r0, {r2, r4, r6, ip}
    3498:	00000487 	andeq	r0, r0, r7, lsl #9
    349c:	0550011b 	ldrbeq	r0, [r0, #-283]	; 0xfffffee5
    34a0:	0110000c 	tsteq	r0, ip
    34a4:	51011b40 	tstpl	r1, r0, asr #22
    34a8:	20000a03 	andcs	r0, r0, r3, lsl #20
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	00163e1c 	andseq	r3, r6, ip, lsl lr
    34b4:	005a0100 	subseq	r0, sl, r0, lsl #2
    34b8:	04000000 	streq	r0, [r0], #-0
    34bc:	01000000 	mrseq	r0, (UNDEF: 0)
    34c0:	0002829c 	muleq	r2, ip, r2
    34c4:	00001d00 	andeq	r1, r0, r0, lsl #26
    34c8:	01f70000 	mvnseq	r0, r0
    34cc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    34d0:	0000018a 	andeq	r0, r0, sl, lsl #3
    34d4:	08001080 	stmdaeq	r0, {r7, ip}
    34d8:	00000018 	andeq	r0, r0, r8, lsl r0
    34dc:	02df9c01 	sbcseq	r9, pc, #256	; 0x100
    34e0:	97180000 	ldrls	r0, [r8, -r0]
    34e4:	dd000001 	stcle	0, cr0, [r0, #-4]
    34e8:	1f000009 	svcne	0x00000009
    34ec:	00000208 	andeq	r0, r0, r8, lsl #4
    34f0:	000002cb 	andeq	r0, r0, fp, asr #5
    34f4:	00019718 	andeq	r9, r1, r8, lsl r7
    34f8:	000a1700 	andeq	r1, sl, r0, lsl #14
    34fc:	108c2000 	addne	r2, ip, r0
    3500:	04870800 	streq	r0, [r7], #2048	; 0x800
    3504:	011b0000 	tsteq	fp, r0
    3508:	000c0550 	andeq	r0, ip, r0, asr r5
    350c:	1b400110 	blne	1003954 <__Stack_Size+0x1003554>
    3510:	0a035101 	beq	d791c <__Stack_Size+0xd751c>
    3514:	00002000 	andeq	r2, r0, r0
    3518:	00109220 	andseq	r9, r0, r0, lsr #4
    351c:	00049208 	andeq	r9, r4, r8, lsl #4
    3520:	50011b00 	andpl	r1, r1, r0, lsl #22
    3524:	10000c05 	andne	r0, r0, r5, lsl #24
    3528:	00004001 	andeq	r4, r0, r1
    352c:	0015a215 	andseq	sl, r5, r5, lsl r2
    3530:	4a470100 	bmi	11c3938 <__Stack_Size+0x11c3538>
    3534:	98000001 	stmdals	r0, {r0}
    3538:	24080010 	strcs	r0, [r8], #-16
    353c:	01000000 	mrseq	r0, (UNDEF: 0)
    3540:	0003099c 	muleq	r3, ip, r9
    3544:	10ac1a00 	adcne	r1, ip, r0, lsl #20
    3548:	018a0800 	orreq	r0, sl, r0, lsl #16
    354c:	011b0000 	tsteq	fp, r0
    3550:	00740250 	rsbseq	r0, r4, r0, asr r2
    3554:	d51c0000 	ldrle	r0, [ip, #-0]
    3558:	01000008 	tsteq	r0, r8
    355c:	0010bc5f 	andseq	fp, r0, pc, asr ip
    3560:	00000408 	andeq	r0, r0, r8, lsl #8
    3564:	289c0100 	ldmcs	ip, {r8}
    3568:	1d000003 	stcne	0, cr0, [r0, #-12]
    356c:	080010c0 	stmdaeq	r0, {r6, r7, ip}
    3570:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3574:	10b72100 	adcsne	r2, r7, r0, lsl #2
    3578:	3b010000 	blcc	43580 <__Stack_Size+0x43180>
    357c:	0010c001 	andseq	ip, r0, r1
    3580:	00003808 	andeq	r3, r0, r8, lsl #16
    3584:	919c0100 	orrsls	r0, ip, r0, lsl #2
    3588:	22000003 	andcs	r0, r0, #3
    358c:	00001602 	andeq	r1, r0, r2, lsl #12
    3590:	3a013d01 	bcc	5299c <__Stack_Size+0x5259c>
    3594:	2a000000 	bcs	359c <__Stack_Size+0x319c>
    3598:	2200000a 	andcs	r0, r0, #10
    359c:	000015cd 	andeq	r1, r0, sp, asr #11
    35a0:	3a013d01 	bcc	529ac <__Stack_Size+0x525ac>
    35a4:	63000000 	movwvs	r0, #0
    35a8:	2200000a 	andcs	r0, r0, #10
    35ac:	00001611 	andeq	r1, r0, r1, lsl r6
    35b0:	3a013d01 	bcc	529bc <__Stack_Size+0x525bc>
    35b4:	8c000000 	stchi	0, cr0, [r0], {-0}
    35b8:	2300000a 	movwcs	r0, #10
    35bc:	080010d8 	stmdaeq	r0, {r3, r4, r6, r7, ip}
    35c0:	000001a4 	andeq	r0, r0, r4, lsr #3
    35c4:	00000381 	andeq	r0, r0, r1, lsl #7
    35c8:	0152011b 	cmpeq	r2, fp, lsl r1
    35cc:	e6200038 			; <UNDEFINED> instruction: 0xe6200038
    35d0:	a4080010 	strge	r0, [r8], #-16
    35d4:	1b000001 	blne	35e0 <__Stack_Size+0x31e0>
    35d8:	34015201 	strcc	r5, [r1], #-513	; 0xfffffdff
    35dc:	e8210000 	stmda	r1!, {}	; <UNPREDICTABLE>
    35e0:	0100000a 	tsteq	r0, sl
    35e4:	10f8015d 	rscsne	r0, r8, sp, asr r1
    35e8:	002a0800 	eoreq	r0, sl, r0, lsl #16
    35ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f0:	00000429 	andeq	r0, r0, r9, lsr #8
    35f4:	74616424 	strbtvc	r6, [r1], #-1060	; 0xfffffbdc
    35f8:	015d0100 	cmpeq	sp, r0, lsl #2
    35fc:	0000005e 	andeq	r0, r0, lr, asr r0
    3600:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3604:	0015c225 	andseq	ip, r5, r5, lsr #4
    3608:	015f0100 	cmpeq	pc, r0, lsl #2
    360c:	0000006f 	andeq	r0, r0, pc, rrx
    3610:	0007e725 	andeq	lr, r7, r5, lsr #14
    3614:	01600100 	cmneq	r0, r0, lsl #2
    3618:	0000006f 	andeq	r0, r0, pc, rrx
    361c:	00110623 	andseq	r0, r1, r3, lsr #12
    3620:	00049d08 	andeq	r9, r4, r8, lsl #26
    3624:	0003e200 	andeq	lr, r3, r0, lsl #4
    3628:	50011b00 	andpl	r1, r1, r0, lsl #22
    362c:	23003501 	movwcs	r3, #1281	; 0x501
    3630:	08001110 	stmdaeq	r0, {r4, r8, ip}
    3634:	000004a8 	andeq	r0, r0, r8, lsr #9
    3638:	00000401 	andeq	r0, r0, r1, lsl #8
    363c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    3640:	011b0074 	tsteq	fp, r4, ror r0
    3644:	c0080251 	andgt	r0, r8, r1, asr r2
    3648:	0152011b 	cmpeq	r2, fp, lsl r1
    364c:	18230031 	stmdane	r3!, {r0, r4, r5}
    3650:	b3080011 	movwlt	r0, #32785	; 0x8011
    3654:	19000004 	stmdbne	r0, {r2}
    3658:	1b000004 	blne	3670 <__Stack_Size+0x3270>
    365c:	31015001 	tstcc	r1, r1
    3660:	0151011b 	cmpeq	r1, fp, lsl r1
    3664:	1e1a0031 	mrcne	0, 0, r0, cr10, cr1, {1}
    3668:	bf080011 	svclt	0x00080011
    366c:	1b000004 	blne	3684 <__Stack_Size+0x3284>
    3670:	31015001 	tstcc	r1, r1
    3674:	f2260000 	vhadd.s32	d0, d6, d0
    3678:	06000015 			; <UNDEFINED> instruction: 0x06000015
    367c:	00004c2d 	andeq	r4, r0, sp, lsr #24
    3680:	005e2700 	subseq	r2, lr, r0, lsl #14
    3684:	04440000 	strbeq	r0, [r4], #-0
    3688:	a3280000 			; <UNDEFINED> instruction: 0xa3280000
    368c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3690:	0e4b2600 	cdpeq	6, 4, cr2, cr11, cr0, {0}
    3694:	35070000 	strcc	r0, [r7, #-0]
    3698:	00000434 	andeq	r0, r0, r4, lsr r4
    369c:	00167329 	andseq	r7, r6, r9, lsr #6
    36a0:	3a0d0100 	bcc	343aa8 <__Stack_Size+0x3436a8>
    36a4:	05000000 	streq	r0, [r0, #-0]
    36a8:	00012803 	andeq	r2, r1, r3, lsl #16
    36ac:	16312920 	ldrtne	r2, [r1], -r0, lsr #18
    36b0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    36b4:	0000005e 	andeq	r0, r0, lr, asr r0
    36b8:	01240305 			; <UNDEFINED> instruction: 0x01240305
    36bc:	2e292000 	cdpcs	0, 2, cr2, cr9, cr0, {0}
    36c0:	01000003 	tsteq	r0, r3
    36c4:	00048215 	andeq	r8, r4, r5, lsl r2
    36c8:	20030500 	andcs	r0, r3, r0, lsl #10
    36cc:	05200001 	streq	r0, [r0, #-1]!
    36d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    36d4:	0006ae2a 	andeq	sl, r6, sl, lsr #28
    36d8:	0006ae00 	andeq	sl, r6, r0, lsl #28
    36dc:	2ae20800 	bcs	ff8856e4 <SCS_BASE+0x1f8776e4>
    36e0:	000002e4 	andeq	r0, r0, r4, ror #5
    36e4:	000002e4 	andeq	r0, r0, r4, ror #5
    36e8:	9a2ae108 	bls	abbb10 <__Stack_Size+0xabb710>
    36ec:	9a000001 	bls	36f8 <__Stack_Size+0x32f8>
    36f0:	05000001 	streq	r0, [r0, #-1]
    36f4:	164c2a57 			; <UNDEFINED> instruction: 0x164c2a57
    36f8:	164c0000 	strbne	r0, [ip], -r0
    36fc:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    3700:	0015dc2b 	andseq	sp, r5, fp, lsr #24
    3704:	0015dc00 	andseq	sp, r5, r0, lsl #24
    3708:	02880a00 	addeq	r0, r8, #0, 20
    370c:	0016602b 	andseq	r6, r6, fp, lsr #32
    3710:	00166000 	andseq	r6, r6, r0
    3714:	02710a00 	rsbseq	r0, r1, #0, 20
    3718:	0008bf00 	andeq	fp, r8, r0, lsl #30
    371c:	da000400 	ble	4724 <__Stack_Size+0x4324>
    3720:	0400000c 	streq	r0, [r0], #-12
    3724:	000bf101 	andeq	pc, fp, r1, lsl #2
    3728:	17000c00 	strne	r0, [r0, -r0, lsl #24]
    372c:	051f0000 	ldreq	r0, [pc, #-0]	; 3734 <__Stack_Size+0x3334>
    3730:	02800000 	addeq	r0, r0, #0
    3734:	00000000 	andeq	r0, r0, r0
    3738:	0c7d0000 	ldcleq	0, cr0, [sp], #-0
    373c:	04020000 	streq	r0, [r2], #-0
    3740:	0007b605 	andeq	fp, r7, r5, lsl #12
    3744:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    3748:	00000788 	andeq	r0, r0, r8, lsl #15
    374c:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    3750:	03000009 	movweq	r0, #9
    3754:	00323375 	eorseq	r3, r2, r5, ror r3
    3758:	00452702 	subeq	r2, r5, r2, lsl #14
    375c:	04020000 	streq	r0, [r2], #-0
    3760:	0008c307 	andeq	ip, r8, r7, lsl #6
    3764:	31750300 	cmncc	r5, r0, lsl #6
    3768:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    376c:	00000057 	andeq	r0, r0, r7, asr r0
    3770:	60070202 	andvs	r0, r7, r2, lsl #4
    3774:	0300000b 	movweq	r0, #11
    3778:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    377c:	00006829 	andeq	r6, r0, r9, lsr #16
    3780:	08010200 	stmdaeq	r1, {r9}
    3784:	00000965 	andeq	r0, r0, r5, ror #18
    3788:	0003c604 	andeq	ip, r3, r4, lsl #12
    378c:	7a2f0200 	bvc	bc3f94 <__Stack_Size+0xbc3b94>
    3790:	05000000 	streq	r0, [r0, #-0]
    3794:	00000045 	andeq	r0, r0, r5, asr #32
    3798:	00024204 	andeq	r4, r2, r4, lsl #4
    379c:	8a300200 	bhi	c03fa4 <__Stack_Size+0xc03ba4>
    37a0:	05000000 	streq	r0, [r0, #-0]
    37a4:	00000057 	andeq	r0, r0, r7, asr r0
    37a8:	00680106 	rsbeq	r0, r8, r6, lsl #2
    37ac:	3c020000 	stccc	0, cr0, [r2], {-0}
    37b0:	000000a8 	andeq	r0, r0, r8, lsr #1
    37b4:	001a3007 	andseq	r3, sl, r7
    37b8:	53080000 	movwpl	r0, #32768	; 0x8000
    37bc:	01005445 	tsteq	r0, r5, asr #8
    37c0:	07170400 	ldreq	r0, [r7, -r0, lsl #8]
    37c4:	3c020000 	stccc	0, cr0, [r2], {-0}
    37c8:	0000008f 	andeq	r0, r0, pc, lsl #1
    37cc:	00680106 	rsbeq	r0, r8, r6, lsl #2
    37d0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    37d4:	000000cc 	andeq	r0, r0, ip, asr #1
    37d8:	0004ac07 	andeq	sl, r4, r7, lsl #24
    37dc:	a0070000 	andge	r0, r7, r0
    37e0:	01000008 	tsteq	r0, r8
    37e4:	00a60400 	adceq	r0, r6, r0, lsl #8
    37e8:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    37ec:	000000b3 	strheq	r0, [r0], -r3
    37f0:	ba070402 	blt	1c4800 <__Stack_Size+0x1c4400>
    37f4:	09000008 	stmdbeq	r0, {r3}
    37f8:	010c0324 	tsteq	ip, r4, lsr #6
    37fc:	0000015a 	andeq	r0, r0, sl, asr r1
    3800:	5243410a 	subpl	r4, r3, #-2147483646	; 0x80000002
    3804:	010e0300 	mrseq	r0, ELR_hyp
    3808:	0000006f 	andeq	r0, r0, pc, rrx
    380c:	176d0b00 	strbne	r0, [sp, -r0, lsl #22]!
    3810:	0f030000 	svceq	0x00030000
    3814:	00006f01 	andeq	r6, r0, r1, lsl #30
    3818:	6a0b0400 	bvs	2c4820 <__Stack_Size+0x2c4420>
    381c:	03000017 	movweq	r0, #23
    3820:	006f0110 	rsbeq	r0, pc, r0, lsl r1	; <UNPREDICTABLE>
    3824:	0a080000 	beq	20382c <__Stack_Size+0x20342c>
    3828:	03005253 	movweq	r5, #595	; 0x253
    382c:	006f0111 	rsbeq	r0, pc, r1, lsl r1	; <UNPREDICTABLE>
    3830:	0a0c0000 	beq	303838 <__Stack_Size+0x303438>
    3834:	03005243 	movweq	r5, #579	; 0x243
    3838:	006f0112 	rsbeq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    383c:	0a100000 	beq	403844 <__Stack_Size+0x403444>
    3840:	03005241 	movweq	r5, #577	; 0x241
    3844:	006f0113 	rsbeq	r0, pc, r3, lsl r1	; <UNPREDICTABLE>
    3848:	0b140000 	bleq	503850 <__Stack_Size+0x503450>
    384c:	00001915 	andeq	r1, r0, r5, lsl r9
    3850:	6f011403 	svcvs	0x00011403
    3854:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3858:	52424f0a 	subpl	r4, r2, #10, 30	; 0x28
    385c:	01150300 	tsteq	r5, r0, lsl #6
    3860:	0000006f 	andeq	r0, r0, pc, rrx
    3864:	171a0b1c 			; <UNDEFINED> instruction: 0x171a0b1c
    3868:	16030000 	strne	r0, [r3], -r0
    386c:	00006f01 	andeq	r6, r0, r1, lsl #30
    3870:	0c002000 	stceq	0, cr2, [r0], {-0}
    3874:	0000191e 	andeq	r1, r0, lr, lsl r9
    3878:	de011703 	cdple	7, 0, cr1, cr1, cr3, {0}
    387c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3880:	01190310 	tsteq	r9, r0, lsl r3
    3884:	000001d8 	ldrdeq	r0, [r0], -r8
    3888:	5044520a 	subpl	r5, r4, sl, lsl #4
    388c:	011b0300 	tsteq	fp, r0, lsl #6
    3890:	0000007f 	andeq	r0, r0, pc, ror r0
    3894:	18ef0b00 	stmiane	pc!, {r8, r9, fp}^	; <UNPREDICTABLE>
    3898:	1c030000 	stcne	0, cr0, [r3], {-0}
    389c:	00007f01 	andeq	r7, r0, r1, lsl #30
    38a0:	f40b0200 	vst1.8	{d0-d3}, [fp], r0
    38a4:	03000018 	movweq	r0, #24
    38a8:	007f011d 	rsbseq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    38ac:	0b040000 	bleq	1038b4 <__Stack_Size+0x1034b4>
    38b0:	000018fa 	strdeq	r1, [r0], -sl
    38b4:	7f011e03 	svcvc	0x00011e03
    38b8:	06000000 	streq	r0, [r0], -r0
    38bc:	0017330b 	andseq	r3, r7, fp, lsl #6
    38c0:	011f0300 	tsteq	pc, r0, lsl #6
    38c4:	0000007f 	andeq	r0, r0, pc, ror r0
    38c8:	17380b08 	ldrne	r0, [r8, -r8, lsl #22]!
    38cc:	20030000 	andcs	r0, r3, r0
    38d0:	00007f01 	andeq	r7, r0, r1, lsl #30
    38d4:	3d0b0a00 	vstrcc	s0, [fp, #-0]
    38d8:	03000017 	movweq	r0, #23
    38dc:	007f0121 	rsbseq	r0, pc, r1, lsr #2
    38e0:	0b0c0000 	bleq	3038e8 <__Stack_Size+0x3034e8>
    38e4:	00001742 	andeq	r1, r0, r2, asr #14
    38e8:	7f012203 	svcvc	0x00012203
    38ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    38f0:	185a0c00 	ldmdane	sl, {sl, fp}^
    38f4:	23030000 	movwcs	r0, #12288	; 0x3000
    38f8:	00016601 	andeq	r6, r1, r1, lsl #12
    38fc:	68010600 	stmdavs	r1, {r9, sl}
    3900:	04000000 	streq	r0, [r0], #-0
    3904:	00020f1c 	andeq	r0, r2, ip, lsl pc
    3908:	03d90700 	bicseq	r0, r9, #0, 14
    390c:	07010000 	streq	r0, [r1, -r0]
    3910:	000007c4 	andeq	r0, r0, r4, asr #15
    3914:	00b60702 	adcseq	r0, r6, r2, lsl #14
    3918:	07030000 	streq	r0, [r3, -r0]
    391c:	00000463 	andeq	r0, r0, r3, ror #8
    3920:	037b0704 	cmneq	fp, #4, 14	; 0x100000
    3924:	00050000 	andeq	r0, r5, r0
    3928:	0006e104 	andeq	lr, r6, r4, lsl #2
    392c:	e4220400 	strt	r0, [r2], #-1024	; 0xfffffc00
    3930:	0d000001 	stceq	0, cr0, [r0, #-4]
    3934:	0000184a 	andeq	r1, r0, sl, asr #16
    3938:	0f033f01 	svceq	0x00033f01
    393c:	01000002 	tsteq	r0, r2
    3940:	00000238 	andeq	r0, r0, r8, lsr r2
    3944:	0017ad0e 	andseq	sl, r7, lr, lsl #26
    3948:	03410100 	movteq	r0, #4352	; 0x1100
    394c:	0000020f 	andeq	r0, r0, pc, lsl #4
    3950:	06d00f00 	ldrbeq	r0, [r0], r0, lsl #30
    3954:	56010000 	strpl	r0, [r1], -r0
    3958:	08001124 	stmdaeq	r0, {r2, r5, r8, ip}
    395c:	00000018 	andeq	r0, r0, r8, lsl r0
    3960:	025d9c01 	subseq	r9, sp, #256	; 0x100
    3964:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    3968:	01000016 	tsteq	r0, r6, lsl r0
    396c:	00003a56 	andeq	r3, r0, r6, asr sl
    3970:	000abe00 	andeq	fp, sl, r0, lsl #28
    3974:	650f0000 	strvs	r0, [pc, #-0]	; 397c <__Stack_Size+0x357c>
    3978:	01000018 	tsteq	r0, r8, lsl r0
    397c:	0000006a 	andeq	r0, r0, sl, rrx
    3980:	00001800 	andeq	r1, r0, r0, lsl #16
    3984:	829c0100 	addshi	r0, ip, #0, 2
    3988:	10000002 	andne	r0, r0, r2
    398c:	00001834 	andeq	r1, r0, r4, lsr r8
    3990:	003a6a01 	eorseq	r6, sl, r1, lsl #20
    3994:	0adf0000 	beq	ff7c399c <SCS_BASE+0x1f7b599c>
    3998:	0f000000 	svceq	0x00000000
    399c:	0000015a 	andeq	r0, r0, sl, asr r1
    39a0:	113c7e01 	teqne	ip, r1, lsl #28
    39a4:	00180800 	andseq	r0, r8, r0, lsl #16
    39a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    39ac:	000002a7 	andeq	r0, r0, r7, lsr #5
    39b0:	00194710 	andseq	r4, r9, r0, lsl r7
    39b4:	3a7e0100 	bcc	1f83dbc <__Stack_Size+0x1f839bc>
    39b8:	00000000 	andeq	r0, r0, r0
    39bc:	0000000b 	andeq	r0, r0, fp
    39c0:	0003f511 	andeq	pc, r3, r1, lsl r5	; <UNPREDICTABLE>
    39c4:	54900100 	ldrpl	r0, [r0], #256	; 0x100
    39c8:	18080011 	stmdane	r8, {r0, r4}
    39cc:	01000000 	mrseq	r0, (UNDEF: 0)
    39d0:	058c119c 	streq	r1, [ip, #412]	; 0x19c
    39d4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    39d8:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
    39dc:	00000010 	andeq	r0, r0, r0, lsl r0
    39e0:	9a129c01 	bls	4aa9ec <__Stack_Size+0x4aa5ec>
    39e4:	01000018 	tsteq	r0, r8, lsl r0
    39e8:	003a0296 	mlaseq	sl, r6, r2, r0
    39ec:	00000000 	andeq	r0, r0, r0
    39f0:	000c0000 	andeq	r0, ip, r0
    39f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39f8:	00174712 	andseq	r4, r7, r2, lsl r7
    39fc:	02a30100 	adceq	r0, r3, #0, 2
    3a00:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a04:	00000000 	andeq	r0, r0, r0
    3a08:	0000000c 	andeq	r0, r0, ip
    3a0c:	00139c01 	andseq	r9, r3, r1, lsl #24
    3a10:	01000018 	tsteq	r0, r8, lsl r0
    3a14:	00a802b1 	strhteq	r0, [r8], r1
    3a18:	00000000 	andeq	r0, r0, r0
    3a1c:	00100000 	andseq	r0, r0, r0
    3a20:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a24:	00000320 	andeq	r0, r0, r0, lsr #6
    3a28:	0016c014 	andseq	ip, r6, r4, lsl r0
    3a2c:	02b30100 	adcseq	r0, r3, #0, 2
    3a30:	000000a8 	andeq	r0, r0, r8, lsr #1
    3a34:	00000b21 	andeq	r0, r0, r1, lsr #22
    3a38:	16dc1300 	ldrbne	r1, [ip], r0, lsl #6
    3a3c:	c7010000 	strgt	r0, [r1, -r0]
    3a40:	0000a802 	andeq	sl, r0, r2, lsl #16
    3a44:	00000000 	andeq	r0, r0, r0
    3a48:	00001000 	andeq	r1, r0, r0
    3a4c:	4b9c0100 	blmi	fe703e54 <SCS_BASE+0x1e6f5e54>
    3a50:	14000003 	strne	r0, [r0], #-3
    3a54:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    3a58:	a802c901 	stmdage	r2, {r0, r8, fp, lr, pc}
    3a5c:	46000000 	strmi	r0, [r0], -r0
    3a60:	0000000b 	andeq	r0, r0, fp
    3a64:	00168815 	andseq	r8, r6, r5, lsl r8
    3a68:	02e20100 	rsceq	r0, r2, #0, 2
    3a6c:	00000000 	andeq	r0, r0, r0
    3a70:	00000018 	andeq	r0, r0, r8, lsl r0
    3a74:	03809c01 	orreq	r9, r0, #256	; 0x100
    3a78:	0c160000 	ldceq	0, cr0, [r6], {-0}
    3a7c:	01000019 	tsteq	r0, r9, lsl r0
    3a80:	004c02e2 	subeq	r0, ip, r2, ror #5
    3a84:	0b6c0000 	bleq	1b03a8c <__Stack_Size+0x1b0368c>
    3a88:	e9170000 	ldmdb	r7, {}	; <UNPREDICTABLE>
    3a8c:	01000015 	tsteq	r0, r5, lsl r0
    3a90:	00cc02e2 	sbceq	r0, ip, r2, ror #5
    3a94:	51010000 	mrspl	r0, (UNDEF: 1)
    3a98:	17da1300 	ldrbne	r1, [sl, r0, lsl #6]
    3a9c:	01010000 	mrseq	r0, (UNDEF: 1)
    3aa0:	0000a803 	andeq	sl, r0, r3, lsl #16
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	00002000 	andeq	r2, r0, r0
    3aac:	bb9c0100 	bllt	fe703eb4 <SCS_BASE+0x1e6f5eb4>
    3ab0:	16000003 	strne	r0, [r0], -r3
    3ab4:	000018c8 	andeq	r1, r0, r8, asr #17
    3ab8:	4c030101 	stfmis	f0, [r3], {1}
    3abc:	a6000000 	strge	r0, [r0], -r0
    3ac0:	1400000b 	strne	r0, [r0], #-11
    3ac4:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    3ac8:	a8030301 	stmdage	r3, {r0, r8, r9}
    3acc:	e0000000 	and	r0, r0, r0
    3ad0:	0000000b 	andeq	r0, r0, fp
    3ad4:	0001bb15 	andeq	fp, r1, r5, lsl fp
    3ad8:	032e0100 			; <UNDEFINED> instruction: 0x032e0100
    3adc:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
    3ae0:	0000000c 	andeq	r0, r0, ip
    3ae4:	03e09c01 	mvneq	r9, #256	; 0x100
    3ae8:	c8170000 	ldmdagt	r7, {}	; <UNPREDICTABLE>
    3aec:	01000018 	tsteq	r0, r8, lsl r0
    3af0:	004c032e 	subeq	r0, ip, lr, lsr #6
    3af4:	50010000 	andpl	r0, r1, r0
    3af8:	021a1800 	andseq	r1, sl, #0, 16
    3afc:	11880000 	orrne	r0, r8, r0
    3b00:	00280800 	eoreq	r0, r8, r0, lsl #16
    3b04:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b08:	0000040c 	andeq	r0, r0, ip, lsl #8
    3b0c:	00022b19 	andeq	r2, r2, r9, lsl fp
    3b10:	000bff00 	andeq	pc, fp, r0, lsl #30
    3b14:	11961a00 	orrsne	r1, r6, r0, lsl #20
    3b18:	000e0800 	andeq	r0, lr, r0, lsl #16
    3b1c:	2b1b0000 	blcs	6c3b24 <__Stack_Size+0x6c3724>
    3b20:	00000002 	andeq	r0, r0, r2
    3b24:	16fa1c00 	ldrbtne	r1, [sl], r0, lsl #24
    3b28:	85010000 	strhi	r0, [r1, #-0]
    3b2c:	04240103 	strteq	r0, [r4], #-259	; 0xfffffefd
    3b30:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    3b34:	03870100 	orreq	r0, r7, #0, 2
    3b38:	0000006f 	andeq	r0, r0, pc, rrx
    3b3c:	192c1300 	stmdbne	ip!, {r8, r9, ip}
    3b40:	66010000 	strvs	r0, [r1], -r0
    3b44:	00020f03 	andeq	r0, r2, r3, lsl #30
    3b48:	0011b000 	andseq	fp, r1, r0
    3b4c:	00003808 	andeq	r3, r0, r8, lsl #16
    3b50:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    3b54:	16000004 	strne	r0, [r0], -r4
    3b58:	000017f8 	strdeq	r1, [r0], -r8
    3b5c:	3a036601 	bcc	dd368 <__Stack_Size+0xdcf68>
    3b60:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3b64:	1400000c 	strne	r0, [r0], #-12
    3b68:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
    3b6c:	0f036801 	svceq	0x00036801
    3b70:	3c000002 	stccc	0, cr0, [r0], {2}
    3b74:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    3b78:	0000040c 	andeq	r0, r0, ip, lsl #8
    3b7c:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
    3b80:	00000268 	andeq	r0, r0, r8, ror #4
    3b84:	81037001 	tsthi	r3, r1
    3b88:	1f000004 	svcne	0x00000004
    3b8c:	00000268 	andeq	r0, r0, r8, ror #4
    3b90:	00041920 	andeq	r1, r4, r0, lsr #18
    3b94:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3b98:	b8210000 	stmdalt	r1!, {}	; <UNPREDICTABLE>
    3b9c:	1a080011 	bne	203be8 <__Stack_Size+0x2037e8>
    3ba0:	21000002 	tstcs	r0, r2
    3ba4:	080011d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, ip}
    3ba8:	0000021a 	andeq	r0, r0, sl, lsl r2
    3bac:	0b812200 	bleq	fe04c3b4 <SCS_BASE+0x1e03e3b4>
    3bb0:	ad010000 	stcge	0, cr0, [r1, #-0]
    3bb4:	0000020f 	andeq	r0, r0, pc, lsl #4
    3bb8:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
    3bbc:	00000040 	andeq	r0, r0, r0, asr #32
    3bc0:	04f29c01 	ldrbteq	r9, [r2], #3073	; 0xc01
    3bc4:	c3100000 	tstgt	r0, #0
    3bc8:	01000017 	tsteq	r0, r7, lsl r0
    3bcc:	00003aad 	andeq	r3, r0, sp, lsr #21
    3bd0:	000c7100 	andeq	r7, ip, r0, lsl #2
    3bd4:	17b22300 	ldrne	r2, [r2, r0, lsl #6]!
    3bd8:	af010000 	svcge	0x00010000
    3bdc:	0000020f 	andeq	r0, r0, pc, lsl #4
    3be0:	00000c9d 	muleq	r0, sp, ip
    3be4:	0011f424 	andseq	pc, r1, r4, lsr #8
    3be8:	00042408 	andeq	r2, r4, r8, lsl #8
    3bec:	0004e000 	andeq	lr, r4, r0
    3bf0:	50012500 	andpl	r2, r1, r0, lsl #10
    3bf4:	0fff0a03 	svceq	0x00ff0a03
    3bf8:	12142600 	andsne	r2, r4, #0, 12
    3bfc:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
    3c00:	01250000 			; <UNDEFINED> instruction: 0x01250000
    3c04:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    3c08:	2200000f 	andcs	r0, r0, #15
    3c0c:	0000171f 	andeq	r1, r0, pc, lsl r7
    3c10:	020fd401 	andeq	sp, pc, #16777216	; 0x1000000
    3c14:	00000000 	andeq	r0, r0, r0
    3c18:	003c0000 	eorseq	r0, ip, r0
    3c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c20:	00000541 	andeq	r0, r0, r1, asr #10
    3c24:	0017b223 	andseq	fp, r7, r3, lsr #4
    3c28:	0fd60100 	svceq	0x00d60100
    3c2c:	c7000002 	strgt	r0, [r0, -r2]
    3c30:	2400000c 	strcs	r0, [r0], #-12
    3c34:	00000000 	andeq	r0, r0, r0
    3c38:	00000424 	andeq	r0, r0, r4, lsr #8
    3c3c:	0000052f 	andeq	r0, r0, pc, lsr #10
    3c40:	03500125 	cmpeq	r0, #1073741833	; 0x40000009
    3c44:	000fff0a 	andeq	pc, pc, sl, lsl #30
    3c48:	00000026 	andeq	r0, r0, r6, lsr #32
    3c4c:	00042400 	andeq	r2, r4, r0, lsl #8
    3c50:	50012500 	andpl	r2, r1, r0, lsl #10
    3c54:	0fff0a03 	svceq	0x00ff0a03
    3c58:	a9220000 	stmdbge	r2!, {}	; <UNPREDICTABLE>
    3c5c:	01000016 	tsteq	r0, r6, lsl r0
    3c60:	00020ff7 	strdeq	r0, [r2], -r7
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	00007000 	andeq	r7, r0, r0
    3c6c:	a39c0100 	orrsge	r0, ip, #0, 2
    3c70:	23000005 	movwcs	r0, #5
    3c74:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
    3c78:	020ff901 	andeq	pc, pc, #16384	; 0x4000
    3c7c:	0cf10000 	ldcleq	0, cr0, [r1]
    3c80:	00240000 	eoreq	r0, r4, r0
    3c84:	24000000 	strcs	r0, [r0], #-0
    3c88:	7e000004 	cdpvc	0, 0, cr0, cr0, cr4, {0}
    3c8c:	25000005 	strcs	r0, [r0, #-5]
    3c90:	0a035001 	beq	d7c9c <__Stack_Size+0xd789c>
    3c94:	24000fff 	strcs	r0, [r0], #-4095	; 0xfffff001
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	00000424 	andeq	r0, r0, r4, lsr #8
    3ca0:	00000593 	muleq	r0, r3, r5
    3ca4:	03500125 	cmpeq	r0, #1073741833	; 0x40000009
    3ca8:	000fff0a 	andeq	pc, pc, sl, lsl #30
    3cac:	00000026 	andeq	r0, r0, r6, lsr #32
    3cb0:	00042400 	andeq	r2, r4, r0, lsl #8
    3cb4:	50012500 	andpl	r2, r1, r0, lsl #10
    3cb8:	00003f01 	andeq	r3, r0, r1, lsl #30
    3cbc:	000e9113 	andeq	r9, lr, r3, lsl r1
    3cc0:	01360100 	teqeq	r6, r0, lsl #2
    3cc4:	0000020f 	andeq	r0, r0, pc, lsl #4
    3cc8:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
    3ccc:	00000048 	andeq	r0, r0, r8, asr #32
    3cd0:	06239c01 	strteq	r9, [r3], -r1, lsl #24
    3cd4:	9e160000 	cdpls	0, 1, cr0, cr6, cr0, {0}
    3cd8:	01000037 	tsteq	r0, r7, lsr r0
    3cdc:	003a0136 	eorseq	r0, sl, r6, lsr r1
    3ce0:	0d260000 	stceq	0, cr0, [r6, #-0]
    3ce4:	2f160000 	svccs	0x00160000
    3ce8:	01000018 	tsteq	r0, r8, lsl r0
    3cec:	003a0136 	eorseq	r0, sl, r6, lsr r1
    3cf0:	0d520000 	ldcleq	0, cr0, [r2, #-0]
    3cf4:	b2140000 	andslt	r0, r4, #0
    3cf8:	01000017 	tsteq	r0, r7, lsl r0
    3cfc:	020f0138 	andeq	r0, pc, #56, 2
    3d00:	0d7e0000 	ldcleq	0, cr0, [lr, #-0]
    3d04:	34240000 	strtcc	r0, [r4], #-0
    3d08:	24080012 	strcs	r0, [r8], #-18	; 0xffffffee
    3d0c:	00000004 	andeq	r0, r0, r4
    3d10:	25000006 	strcs	r0, [r0, #-6]
    3d14:	3f015001 	svccc	0x00015001
    3d18:	124c2400 	subne	r2, ip, #0, 8
    3d1c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
    3d20:	06130000 	ldreq	r0, [r3], -r0
    3d24:	01250000 			; <UNDEFINED> instruction: 0x01250000
    3d28:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3d2c:	00125a26 	andseq	r5, r2, r6, lsr #20
    3d30:	00042408 	andeq	r2, r4, r8, lsl #8
    3d34:	50012500 	andpl	r2, r1, r0, lsl #10
    3d38:	00003f01 	andeq	r3, r0, r1, lsl #30
    3d3c:	0018b213 	andseq	fp, r8, r3, lsl r2
    3d40:	01710100 	cmneq	r1, r0, lsl #2
    3d44:	0000020f 	andeq	r0, r0, pc, lsl #4
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	00000038 	andeq	r0, r0, r8, lsr r0
    3d50:	06909c01 	ldreq	r9, [r0], r1, lsl #24
    3d54:	9e160000 	cdpls	0, 1, cr0, cr6, cr0, {0}
    3d58:	01000037 	tsteq	r0, r7, lsr r0
    3d5c:	003a0171 	eorseq	r0, sl, r1, ror r1
    3d60:	0db30000 	ldceq	0, cr0, [r3]
    3d64:	2f160000 	svccs	0x00160000
    3d68:	01000018 	tsteq	r0, r8, lsl r0
    3d6c:	004c0171 	subeq	r0, ip, r1, ror r1
    3d70:	0ddf0000 	ldcleq	0, cr0, [pc]	; 3d78 <__Stack_Size+0x3978>
    3d74:	b2140000 	andslt	r0, r4, #0
    3d78:	01000017 	tsteq	r0, r7, lsl r0
    3d7c:	020f0173 	andeq	r0, pc, #-1073741796	; 0xc000001c
    3d80:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3d84:	00240000 	eoreq	r0, r4, r0
    3d88:	24000000 	strcs	r0, [r0], #-0
    3d8c:	80000004 	andhi	r0, r0, r4
    3d90:	25000006 	strcs	r0, [r0, #-6]
    3d94:	3f015001 	svccc	0x00015001
    3d98:	00002600 	andeq	r2, r0, r0, lsl #12
    3d9c:	04240000 	strteq	r0, [r4], #-0
    3da0:	01250000 			; <UNDEFINED> instruction: 0x01250000
    3da4:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3da8:	187e1300 	ldmdane	lr!, {r8, r9, ip}^
    3dac:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    3db0:	00020f01 	andeq	r0, r2, r1, lsl #30
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	00004800 	andeq	r4, r0, r0, lsl #16
    3dbc:	fd9c0100 	ldc2	1, cr0, [ip]
    3dc0:	16000006 	strne	r0, [r0], -r6
    3dc4:	0000379e 	muleq	r0, lr, r7
    3dc8:	3a019901 	bcc	6a1d4 <__Stack_Size+0x69dd4>
    3dcc:	2a000000 	bcs	3dd4 <__Stack_Size+0x39d4>
    3dd0:	1600000e 	strne	r0, [r0], -lr
    3dd4:	0000182f 	andeq	r1, r0, pc, lsr #16
    3dd8:	5e019901 	cdppl	9, 0, cr9, cr1, cr1, {0}
    3ddc:	56000000 	strpl	r0, [r0], -r0
    3de0:	1400000e 	strne	r0, [r0], #-14
    3de4:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
    3de8:	0f019b01 	svceq	0x00019b01
    3dec:	77000002 	strvc	r0, [r0, -r2]
    3df0:	2400000e 	strcs	r0, [r0], #-14
    3df4:	00000000 	andeq	r0, r0, r0
    3df8:	00000424 	andeq	r0, r0, r4, lsr #8
    3dfc:	000006ed 	andeq	r0, r0, sp, ror #13
    3e00:	01500125 	cmpeq	r0, r5, lsr #2
    3e04:	0026003f 	eoreq	r0, r6, pc, lsr r0
    3e08:	24000000 	strcs	r0, [r0], #-0
    3e0c:	25000004 	strcs	r0, [r0, #-4]
    3e10:	3f015001 	svccc	0x00015001
    3e14:	d3130000 	tstle	r3, #0
    3e18:	01000018 	tsteq	r0, r8, lsl r0
    3e1c:	020f01ca 	andeq	r0, pc, #-2147483598	; 0x80000032
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	009c0000 	addseq	r0, ip, r0
    3e28:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e2c:	000007d3 	ldrdeq	r0, [r0], -r3
    3e30:	00190016 	andseq	r0, r9, r6, lsl r0
    3e34:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3e38:	0000003a 	andeq	r0, r0, sl, lsr r0
    3e3c:	00000ea1 	andeq	r0, r0, r1, lsr #29
    3e40:	00182a14 	andseq	r2, r8, r4, lsl sl
    3e44:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3e48:	0000004c 	andeq	r0, r0, ip, asr #32
    3e4c:	00000eea 	andeq	r0, r0, sl, ror #29
    3e50:	0017ee14 	andseq	lr, r7, r4, lsl lr
    3e54:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3e58:	0000004c 	andeq	r0, r0, ip, asr #32
    3e5c:	00000f36 	andeq	r0, r0, r6, lsr pc
    3e60:	00169714 	andseq	r9, r6, r4, lsl r7
    3e64:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3e68:	0000004c 	andeq	r0, r0, ip, asr #32
    3e6c:	00000f8a 	andeq	r0, r0, sl, lsl #31
    3e70:	0017d014 	andseq	sp, r7, r4, lsl r0
    3e74:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3e78:	0000004c 	andeq	r0, r0, ip, asr #32
    3e7c:	00000fde 	ldrdeq	r0, [r0], -lr
    3e80:	0017b214 	andseq	fp, r7, r4, lsl r2
    3e84:	01ce0100 	biceq	r0, lr, r0, lsl #2
    3e88:	0000020f 	andeq	r0, r0, pc, lsl #4
    3e8c:	00001026 	andeq	r1, r0, r6, lsr #32
    3e90:	00000024 	andeq	r0, r0, r4, lsr #32
    3e94:	00042400 	andeq	r2, r4, r0, lsl #8
    3e98:	00078a00 	andeq	r8, r7, r0, lsl #20
    3e9c:	50012500 	andpl	r2, r1, r0, lsl #10
    3ea0:	24003f01 	strcs	r3, [r0], #-3841	; 0xfffff0ff
    3ea4:	00000000 	andeq	r0, r0, r0
    3ea8:	00000424 	andeq	r0, r0, r4, lsr #8
    3eac:	0000079d 	muleq	r0, sp, r7
    3eb0:	01500125 	cmpeq	r0, r5, lsr #2
    3eb4:	0024003f 	eoreq	r0, r4, pc, lsr r0
    3eb8:	24000000 	strcs	r0, [r0], #-0
    3ebc:	b0000004 	andlt	r0, r0, r4
    3ec0:	25000007 	strcs	r0, [r0, #-7]
    3ec4:	3f015001 	svccc	0x00015001
    3ec8:	00002400 	andeq	r2, r0, r0, lsl #8
    3ecc:	04240000 	strteq	r0, [r4], #-0
    3ed0:	07c30000 	strbeq	r0, [r3, r0]
    3ed4:	01250000 			; <UNDEFINED> instruction: 0x01250000
    3ed8:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3edc:	00000026 	andeq	r0, r0, r6, lsr #32
    3ee0:	00042400 	andeq	r2, r4, r0, lsl #8
    3ee4:	50012500 	andpl	r2, r1, r0, lsl #10
    3ee8:	00003f01 	andeq	r3, r0, r1, lsl #30
    3eec:	00179513 	andseq	r9, r7, r3, lsl r5
    3ef0:	02190100 	andseq	r0, r9, #0, 2
    3ef4:	0000020f 	andeq	r0, r0, pc, lsl #4
    3ef8:	00000000 	andeq	r0, r0, r0
    3efc:	0000008c 	andeq	r0, r0, ip, lsl #1
    3f00:	08499c01 	stmdaeq	r9, {r0, sl, fp, ip, pc}^
    3f04:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    3f08:	01000015 	tsteq	r0, r5, lsl r0
    3f0c:	00cc0219 	sbceq	r0, ip, r9, lsl r2
    3f10:	107c0000 	rsbsne	r0, ip, r0
    3f14:	b2140000 	andslt	r0, r4, #0
    3f18:	01000017 	tsteq	r0, r7, lsl r0
    3f1c:	020f021b 	andeq	r0, pc, #-1342177279	; 0xb0000001
    3f20:	109d0000 	addsne	r0, sp, r0
    3f24:	00240000 	eoreq	r0, r4, r0
    3f28:	24000000 	strcs	r0, [r0], #-0
    3f2c:	22000004 	andcs	r0, r0, #4
    3f30:	25000008 	strcs	r0, [r0, #-8]
    3f34:	0a035001 	beq	d7f40 <__Stack_Size+0xd7b40>
    3f38:	24000fff 	strcs	r0, [r0], #-4095	; 0xfffff001
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	00000424 	andeq	r0, r0, r4, lsr #8
    3f44:	00000837 	andeq	r0, r0, r7, lsr r8
    3f48:	03500125 	cmpeq	r0, #1073741833	; 0x40000009
    3f4c:	000fff0a 	andeq	pc, pc, sl, lsl #30
    3f50:	00000026 	andeq	r0, r0, r6, lsr #32
    3f54:	00042400 	andeq	r2, r4, r0, lsl #8
    3f58:	50012500 	andpl	r2, r1, r0, lsl #10
    3f5c:	0fff0a03 	svceq	0x00ff0a03
    3f60:	72270000 	eorvc	r0, r7, #0
    3f64:	01000017 	tsteq	r0, r7, lsl r0
    3f68:	020f026a 	andeq	r0, pc, #-1610612730	; 0xa0000006
    3f6c:	00000000 	andeq	r0, r0, r0
    3f70:	00540000 	subseq	r0, r4, r0
    3f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f78:	00178d16 	andseq	r8, r7, r6, lsl sp
    3f7c:	026a0100 	rsbeq	r0, sl, #0, 2
    3f80:	0000004c 	andeq	r0, r0, ip, asr #32
    3f84:	000010d2 	ldrdeq	r1, [r0], -r2
    3f88:	0016a116 	andseq	sl, r6, r6, lsl r1
    3f8c:	026a0100 	rsbeq	r0, sl, #0, 2
    3f90:	0000004c 	andeq	r0, r0, ip, asr #32
    3f94:	000010f3 	strdeq	r1, [r0], -r3
    3f98:	00182116 	andseq	r2, r8, r6, lsl r1
    3f9c:	026a0100 	rsbeq	r0, sl, #0, 2
    3fa0:	0000004c 	andeq	r0, r0, ip, asr #32
    3fa4:	00001114 	andeq	r1, r0, r4, lsl r1
    3fa8:	0017b214 	andseq	fp, r7, r4, lsl r2
    3fac:	026c0100 	rsbeq	r0, ip, #0, 2
    3fb0:	0000020f 	andeq	r0, r0, pc, lsl #4
    3fb4:	00001135 	andeq	r1, r0, r5, lsr r1
    3fb8:	00000024 	andeq	r0, r0, r4, lsr #32
    3fbc:	00042400 	andeq	r2, r4, r0, lsl #8
    3fc0:	0008b200 	andeq	fp, r8, r0, lsl #4
    3fc4:	50012500 	andpl	r2, r1, r0, lsl #10
    3fc8:	26003f01 	strcs	r3, [r0], -r1, lsl #30
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	00000424 	andeq	r0, r0, r4, lsr #8
    3fd4:	01500125 	cmpeq	r0, r5, lsr #2
    3fd8:	0000003f 	andeq	r0, r0, pc, lsr r0
    3fdc:	000001ad 	andeq	r0, r0, sp, lsr #3
    3fe0:	0f310004 	svceq	0x00310004
    3fe4:	01040000 	mrseq	r0, (UNDEF: 4)
    3fe8:	00000bf1 	strdeq	r0, [r0], -r1
    3fec:	0019770c 	andseq	r7, r9, ip, lsl #14
    3ff0:	00051f00 	andeq	r1, r5, r0, lsl #30
    3ff4:	00034000 	andeq	r4, r3, r0
    3ff8:	00000000 	andeq	r0, r0, r0
    3ffc:	000f8f00 	andeq	r8, pc, r0, lsl #30
    4000:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4004:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    4008:	88050202 	stmdahi	r5, {r1, r9}
    400c:	02000007 	andeq	r0, r0, #7
    4010:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    4014:	75030000 	strvc	r0, [r3, #-0]
    4018:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    401c:	00004527 	andeq	r4, r0, r7, lsr #10
    4020:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4024:	000008c3 	andeq	r0, r0, r3, asr #17
    4028:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    402c:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    4030:	02000000 	andeq	r0, r0, #0
    4034:	0b600702 	bleq	1805c44 <__Stack_Size+0x1805844>
    4038:	75030000 	strvc	r0, [r3, #-0]
    403c:	29020038 	stmdbcs	r2, {r3, r4, r5}
    4040:	00000068 	andeq	r0, r0, r8, rrx
    4044:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    4048:	04000009 	streq	r0, [r0], #-9
    404c:	000003c6 	andeq	r0, r0, r6, asr #7
    4050:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    4054:	45050000 	strmi	r0, [r5, #-0]
    4058:	06000000 	streq	r0, [r0], -r0
    405c:	00006801 	andeq	r6, r0, r1, lsl #16
    4060:	983c0200 	ldmdals	ip!, {r9}
    4064:	07000000 	streq	r0, [r0, -r0]
    4068:	00001a30 	andeq	r1, r0, r0, lsr sl
    406c:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    4070:	00010054 	andeq	r0, r1, r4, asr r0
    4074:	00071704 	andeq	r1, r7, r4, lsl #14
    4078:	7f3c0200 	svcvc	0x003c0200
    407c:	02000000 	andeq	r0, r0, #0
    4080:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
    4084:	10090000 	andne	r0, r9, r0
    4088:	e5017803 	str	r7, [r1, #-2051]	; 0xfffff7fd
    408c:	0a000000 	beq	4094 <__Stack_Size+0x3c94>
    4090:	0300524b 	movweq	r5, #587	; 0x24b
    4094:	006f017a 	rsbeq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    4098:	0a000000 	beq	40a0 <__Stack_Size+0x3ca0>
    409c:	03005250 	movweq	r5, #592	; 0x250
    40a0:	006f017b 	rsbeq	r0, pc, fp, ror r1	; <UNPREDICTABLE>
    40a4:	0a040000 	beq	1040ac <__Stack_Size+0x103cac>
    40a8:	00524c52 	subseq	r4, r2, r2, asr ip
    40ac:	6f017c03 	svcvs	0x00017c03
    40b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    40b4:	0052530a 	subseq	r5, r2, sl, lsl #6
    40b8:	6f017d03 	svcvs	0x00017d03
    40bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    40c0:	19d10b00 	ldmibne	r1, {r8, r9, fp}^
    40c4:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
    40c8:	0000aa01 	andeq	sl, r0, r1, lsl #20
    40cc:	02ab0c00 	adceq	r0, fp, #0, 24
    40d0:	2d010000 	stccs	0, cr0, [r1, #-0]
    40d4:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
    40d8:	0000000c 	andeq	r0, r0, ip
    40dc:	01149c01 	tsteq	r4, r1, lsl #24
    40e0:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    40e4:	01000019 	tsteq	r0, r9, lsl r0
    40e8:	00004c2d 	andeq	r4, r0, sp, lsr #24
    40ec:	00500100 	subseq	r0, r0, r0, lsl #2
    40f0:	0005f70c 	andeq	pc, r5, ip, lsl #14
    40f4:	7c440100 	stfvce	f0, [r4], {-0}
    40f8:	0c080012 	stceq	0, cr0, [r8], {18}
    40fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4100:	0001379c 	muleq	r1, ip, r7
    4104:	19680d00 	stmdbne	r8!, {r8, sl, fp}^
    4108:	44010000 	strmi	r0, [r1], #-0
    410c:	0000005e 	andeq	r0, r0, lr, asr r0
    4110:	0c005001 	stceq	0, cr5, [r0], {1}
    4114:	000005c7 	andeq	r0, r0, r7, asr #11
    4118:	12885401 	addne	r5, r8, #16777216	; 0x1000000
    411c:	000c0800 	andeq	r0, ip, r0, lsl #16
    4120:	9c010000 	stcls	0, cr0, [r1], {-0}
    4124:	0000015a 	andeq	r0, r0, sl, asr r1
    4128:	0005cf0d 	andeq	ip, r5, sp, lsl #30
    412c:	4c540100 	ldfmie	f0, [r4], {-0}
    4130:	01000000 	mrseq	r0, (UNDEF: 0)
    4134:	900e0050 	andls	r0, lr, r0, asr r0
    4138:	01000019 	tsteq	r0, r9, lsl r0
    413c:	00000064 	andeq	r0, r0, r4, rrx
    4140:	00001000 	andeq	r1, r0, r0
    4144:	0e9c0100 	fmleqe	f0, f4, f0
    4148:	0000195c 	andeq	r1, r0, ip, asr r9
    414c:	00007101 	andeq	r7, r0, r1, lsl #2
    4150:	00100000 	andseq	r0, r0, r0
    4154:	9c010000 	stcls	0, cr0, [r1], {-0}
    4158:	0019be0f 	andseq	fp, r9, pc, lsl #28
    415c:	98800100 	stmls	r0, {r8}
    4160:	00000000 	andeq	r0, r0, r0
    4164:	14000000 	strne	r0, [r0], #-0
    4168:	01000000 	mrseq	r0, (UNDEF: 0)
    416c:	19a3109c 	stmibne	r3!, {r2, r3, r4, r7, ip}
    4170:	80010000 	andhi	r0, r1, r0
    4174:	0000004c 	andeq	r0, r0, ip, asr #32
    4178:	0000115f 	andeq	r1, r0, pc, asr r1
    417c:	0017b911 	andseq	fp, r7, r1, lsl r9
    4180:	98820100 	stmls	r2, {r8}
    4184:	80000000 	andhi	r0, r0, r0
    4188:	00000011 	andeq	r0, r0, r1, lsl r0
    418c:	00074500 	andeq	r4, r7, r0, lsl #10
    4190:	34000400 	strcc	r0, [r0], #-1024	; 0xfffffc00
    4194:	04000010 	streq	r0, [r0], #-16
    4198:	000bf101 	andeq	pc, fp, r1, lsl #2
    419c:	1a440c00 	bne	11071a4 <__Stack_Size+0x1106da4>
    41a0:	051f0000 	ldreq	r0, [pc, #-0]	; 41a8 <__Stack_Size+0x3da8>
    41a4:	03780000 	cmneq	r8, #0
    41a8:	00000000 	andeq	r0, r0, r0
    41ac:	10600000 	rsbne	r0, r0, r0
    41b0:	04020000 	streq	r0, [r2], #-0
    41b4:	0007b605 	andeq	fp, r7, r5, lsl #12
    41b8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    41bc:	00000788 	andeq	r0, r0, r8, lsl #15
    41c0:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    41c4:	03000009 	movweq	r0, #9
    41c8:	00323375 	eorseq	r3, r2, r5, ror r3
    41cc:	00452702 	subeq	r2, r5, r2, lsl #14
    41d0:	04020000 	streq	r0, [r2], #-0
    41d4:	0008c307 	andeq	ip, r8, r7, lsl #6
    41d8:	31750300 	cmncc	r5, r0, lsl #6
    41dc:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    41e0:	00000057 	andeq	r0, r0, r7, asr r0
    41e4:	60070202 	andvs	r0, r7, r2, lsl #4
    41e8:	0300000b 	movweq	r0, #11
    41ec:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    41f0:	00006829 	andeq	r6, r0, r9, lsr #16
    41f4:	08010200 	stmdaeq	r1, {r9}
    41f8:	00000965 	andeq	r0, r0, r5, ror #18
    41fc:	0003c604 	andeq	ip, r3, r4, lsl #12
    4200:	7a2f0200 	bvc	bc4a08 <__Stack_Size+0xbc4608>
    4204:	05000000 	streq	r0, [r0, #-0]
    4208:	00000045 	andeq	r0, r0, r5, asr #32
    420c:	00680106 	rsbeq	r0, r8, r6, lsl #2
    4210:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    4214:	00000098 	muleq	r0, r8, r0
    4218:	0004ac07 	andeq	sl, r4, r7, lsl #24
    421c:	a0070000 	andge	r0, r7, r0
    4220:	01000008 	tsteq	r0, r8
    4224:	00a60400 	adceq	r0, r6, r0, lsl #8
    4228:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    422c:	0000007f 	andeq	r0, r0, pc, ror r0
    4230:	ba070402 	blt	1c5240 <__Stack_Size+0x1c4e40>
    4234:	08000008 	stmdaeq	r0, {r3}
    4238:	014e031c 	cmpeq	lr, ip, lsl r3
    423c:	0000010f 	andeq	r0, r0, pc, lsl #2
    4240:	4c524309 	mrrcmi	3, 0, r4, r2, cr9
    4244:	01500300 	cmpeq	r0, r0, lsl #6
    4248:	0000006f 	andeq	r0, r0, pc, rrx
    424c:	52430900 	subpl	r0, r3, #0, 18
    4250:	51030048 	tstpl	r3, r8, asr #32
    4254:	00006f01 	andeq	r6, r0, r1, lsl #30
    4258:	49090400 	stmdbmi	r9, {sl}
    425c:	03005244 	movweq	r5, #580	; 0x244
    4260:	006f0152 	rsbeq	r0, pc, r2, asr r1	; <UNPREDICTABLE>
    4264:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    4268:	0052444f 	subseq	r4, r2, pc, asr #8
    426c:	6f015303 	svcvs	0x00015303
    4270:	0c000000 	stceq	0, cr0, [r0], {-0}
    4274:	00005f0a 	andeq	r5, r0, sl, lsl #30
    4278:	01540300 	cmpeq	r4, r0, lsl #6
    427c:	0000006f 	andeq	r0, r0, pc, rrx
    4280:	52420910 	subpl	r0, r2, #16, 18	; 0x40000
    4284:	55030052 	strpl	r0, [r3, #-82]	; 0xffffffae
    4288:	00006f01 	andeq	r6, r0, r1, lsl #30
    428c:	c20a1400 	andgt	r1, sl, #0, 8
    4290:	0300000c 	movweq	r0, #12
    4294:	006f0156 	rsbeq	r0, pc, r6, asr r1	; <UNPREDICTABLE>
    4298:	00180000 	andseq	r0, r8, r0
    429c:	0008630b 	andeq	r6, r8, fp, lsl #6
    42a0:	01570300 	cmpeq	r7, r0, lsl #6
    42a4:	000000aa 	andeq	r0, r0, sl, lsr #1
    42a8:	59031808 	stmdbpl	r3, {r3, fp, ip}
    42ac:	00014c01 	andeq	r4, r1, r1, lsl #24
    42b0:	1b7a0a00 	blne	1e86ab8 <__Stack_Size+0x1e866b8>
    42b4:	5b030000 	blpl	c42bc <__Stack_Size+0xc3ebc>
    42b8:	00006f01 	andeq	r6, r0, r1, lsl #30
    42bc:	5f0a0000 	svcpl	0x000a0000
    42c0:	0300001b 	movweq	r0, #27
    42c4:	006f015c 	rsbeq	r0, pc, ip, asr r1	; <UNPREDICTABLE>
    42c8:	0a040000 	beq	1042d0 <__Stack_Size+0x103ed0>
    42cc:	00001a5d 	andeq	r1, r0, sp, asr sl
    42d0:	5c015d03 	stcpl	13, cr5, [r1], {3}
    42d4:	08000001 	stmdaeq	r0, {r0}
    42d8:	006f0c00 	rsbeq	r0, pc, r0, lsl #24
    42dc:	015c0000 	cmpeq	ip, r0
    42e0:	a30d0000 	movwge	r0, #53248	; 0xd000
    42e4:	03000000 	movweq	r0, #0
    42e8:	014c0500 	cmpeq	ip, r0, lsl #10
    42ec:	480b0000 	stmdami	fp, {}	; <UNPREDICTABLE>
    42f0:	0300001b 	movweq	r0, #27
    42f4:	011b015e 	tsteq	fp, lr, asr r1
    42f8:	01060000 	mrseq	r0, (UNDEF: 6)
    42fc:	00000068 	andeq	r0, r0, r8, rrx
    4300:	018c2304 	orreq	r2, ip, r4, lsl #6
    4304:	82070000 	andhi	r0, r7, #0
    4308:	01000002 	tsteq	r0, r2
    430c:	0001ab07 	andeq	sl, r1, r7, lsl #22
    4310:	78070200 	stmdavc	r7, {r9}
    4314:	03000009 	movweq	r0, #9
    4318:	07220400 	streq	r0, [r2, -r0, lsl #8]!
    431c:	27040000 	strcs	r0, [r4, -r0]
    4320:	0000016d 	andeq	r0, r0, sp, ror #2
    4324:	00680106 	rsbeq	r0, r8, r6, lsl #2
    4328:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    432c:	000001d4 	ldrdeq	r0, [r0], -r4
    4330:	00073407 	andeq	r3, r7, r7, lsl #8
    4334:	bd070000 	stclt	0, cr0, [r7, #-0]
    4338:	0400000b 	streq	r0, [r0], #-11
    433c:	00033b07 	andeq	r3, r3, r7, lsl #22
    4340:	6d072800 	stcvs	8, cr2, [r7, #-0]
    4344:	48000003 	stmdami	r0, {r0, r1}
    4348:	00039607 	andeq	r9, r3, r7, lsl #12
    434c:	00071400 	andeq	r1, r7, r0, lsl #8
    4350:	10000000 	andne	r0, r0, r0
    4354:	00067f07 	andeq	r7, r6, r7, lsl #30
    4358:	a6071c00 	strge	r1, [r7], -r0, lsl #24
    435c:	18000007 	stmdane	r0, {r0, r1, r2}
    4360:	08700400 	ldmdaeq	r0!, {sl}^
    4364:	36040000 	strcc	r0, [r4], -r0
    4368:	00000197 	muleq	r0, r7, r1
    436c:	3e04040e 	cdpcc	4, 0, cr0, cr4, cr14, {0}
    4370:	0000020c 	andeq	r0, r0, ip, lsl #4
    4374:	0000870f 	andeq	r8, r0, pc, lsl #14
    4378:	4c400400 	cfstrdmi	mvd0, [r0], {-0}
    437c:	00000000 	andeq	r0, r0, r0
    4380:	000b4f0f 	andeq	r4, fp, pc, lsl #30
    4384:	8c410400 	cfstrdhi	mvd0, [r1], {-0}
    4388:	02000001 	andeq	r0, r0, #1
    438c:	0000640f 	andeq	r6, r0, pc, lsl #8
    4390:	d4420400 	strble	r0, [r2], #-1024	; 0xfffffc00
    4394:	03000001 	movweq	r0, #1
    4398:	09540400 	ldmdbeq	r4, {sl}^
    439c:	43040000 	movwmi	r0, #16384	; 0x4000
    43a0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    43a4:	00680106 	rsbeq	r0, r8, r6, lsl #2
    43a8:	47040000 	strmi	r0, [r4, -r0]
    43ac:	00000230 	andeq	r0, r0, r0, lsr r2
    43b0:	001a2c07 	andseq	r2, sl, r7, lsl #24
    43b4:	e5070000 	str	r0, [r7, #-0]
    43b8:	01000019 	tsteq	r0, r9, lsl r0
    43bc:	1b550400 	blne	15453c4 <__Stack_Size+0x1544fc4>
    43c0:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    43c4:	00000217 	andeq	r0, r0, r7, lsl r2
    43c8:	001a7c10 	andseq	r7, sl, r0, lsl ip
    43cc:	00330100 	eorseq	r0, r3, r0, lsl #2
    43d0:	b0000000 	andlt	r0, r0, r0
    43d4:	01000000 	mrseq	r0, (UNDEF: 0)
    43d8:	0003169c 	muleq	r3, ip, r6
    43dc:	1b641100 	blne	19087e4 <__Stack_Size+0x19083e4>
    43e0:	33010000 	movwcc	r0, #4096	; 0x1000
    43e4:	00000316 	andeq	r0, r0, r6, lsl r3
    43e8:	000011c1 	andeq	r1, r0, r1, asr #3
    43ec:	00000012 	andeq	r0, r0, r2, lsl r0
    43f0:	00073c00 	andeq	r3, r7, r0, lsl #24
    43f4:	00027700 	andeq	r7, r2, r0, lsl #14
    43f8:	50011300 	andpl	r1, r1, r0, lsl #6
    43fc:	01133401 	tsteq	r3, r1, lsl #8
    4400:	00310151 	eorseq	r0, r1, r1, asr r1
    4404:	00000012 	andeq	r0, r0, r2, lsl r0
    4408:	00073c00 	andeq	r3, r7, r0, lsl #24
    440c:	00029000 	andeq	r9, r2, r0
    4410:	50011300 	andpl	r1, r1, r0, lsl #6
    4414:	13400802 	movtne	r0, #2050	; 0x802
    4418:	31015101 	tstcc	r1, r1, lsl #2
    441c:	00001200 	andeq	r1, r0, r0, lsl #4
    4420:	073c0000 	ldreq	r0, [ip, -r0]!
    4424:	02a80000 	adceq	r0, r8, #0
    4428:	01130000 	tsteq	r3, r0
    442c:	13380150 	teqne	r8, #80, 2
    4430:	31015101 	tstcc	r1, r1, lsl #2
    4434:	00001200 	andeq	r1, r0, r0, lsl #4
    4438:	073c0000 	ldreq	r0, [ip, -r0]!
    443c:	02c00000 	sbceq	r0, r0, #0
    4440:	01130000 	tsteq	r3, r0
    4444:	13400150 	movtne	r0, #336	; 0x150
    4448:	31015101 	tstcc	r1, r1, lsl #2
    444c:	00001200 	andeq	r1, r0, r0, lsl #4
    4450:	073c0000 	ldreq	r0, [ip, -r0]!
    4454:	02d90000 	sbcseq	r0, r9, #0
    4458:	01130000 	tsteq	r3, r0
    445c:	20080250 	andcs	r0, r8, r0, asr r2
    4460:	01510113 	cmpeq	r1, r3, lsl r1
    4464:	00120031 	andseq	r0, r2, r1, lsr r0
    4468:	3c000000 	stccc	0, cr0, [r0], {-0}
    446c:	f2000007 	vhadd.s8	d0, d0, d7
    4470:	13000002 	movwne	r0, #2
    4474:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4478:	51011380 	smlabbpl	r1, r0, r3, r1
    447c:	12003101 	andne	r3, r0, #1073741824	; 0x40000000
    4480:	00000000 	andeq	r0, r0, r0
    4484:	0000073c 	andeq	r0, r0, ip, lsr r7
    4488:	0000030c 	andeq	r0, r0, ip, lsl #6
    448c:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    4490:	1301000a 	movwne	r0, #4106	; 0x100a
    4494:	31015101 	tstcc	r1, r1, lsl #2
    4498:	00001400 	andeq	r1, r0, r0, lsl #8
    449c:	073c0000 	ldreq	r0, [ip, -r0]!
    44a0:	15000000 	strne	r0, [r0, #-0]
    44a4:	00010f04 	andeq	r0, r1, r4, lsl #30
    44a8:	1b961000 	blne	fe5884b0 <SCS_BASE+0x1e57a4b0>
    44ac:	6b010000 	blvs	444b4 <__Stack_Size+0x440b4>
    44b0:	00000000 	andeq	r0, r0, r0
    44b4:	00000016 	andeq	r0, r0, r6, lsl r0
    44b8:	035e9c01 	cmpeq	lr, #256	; 0x100
    44bc:	00120000 	andseq	r0, r2, r0
    44c0:	3c000000 	stccc	0, cr0, [r0], {-0}
    44c4:	49000007 	stmdbmi	r0, {r0, r1, r2}
    44c8:	13000003 	movwne	r0, #3
    44cc:	31015001 	tstcc	r1, r1
    44d0:	01510113 	cmpeq	r1, r3, lsl r1
    44d4:	00160031 	andseq	r0, r6, r1, lsr r0
    44d8:	3c000000 	stccc	0, cr0, [r0], {-0}
    44dc:	13000007 	movwne	r0, #7
    44e0:	31015001 	tstcc	r1, r1
    44e4:	01510113 	cmpeq	r1, r3, lsl r1
    44e8:	10000030 	andne	r0, r0, r0, lsr r0
    44ec:	0000017a 	andeq	r0, r0, sl, ror r1
    44f0:	12947c01 	addsne	r7, r4, #256	; 0x100
    44f4:	00a40800 	adceq	r0, r4, r0, lsl #16
    44f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    44fc:	000003ea 	andeq	r0, r0, sl, ror #7
    4500:	001b6417 	andseq	r6, fp, r7, lsl r4
    4504:	167c0100 	ldrbtne	r0, [ip], -r0, lsl #2
    4508:	01000003 	tsteq	r0, r3
    450c:	1b6a1150 	blne	1a88a54 <__Stack_Size+0x1a88654>
    4510:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4514:	000003ea 	andeq	r0, r0, sl, ror #7
    4518:	00001283 	andeq	r1, r0, r3, lsl #5
    451c:	001ab918 	andseq	fp, sl, r8, lsl r9
    4520:	3a7e0100 	bcc	1f84928 <__Stack_Size+0x1f84528>
    4524:	a4000000 	strge	r0, [r0], #-0
    4528:	18000012 	stmdane	r0, {r1, r4}
    452c:	00001b19 	andeq	r1, r0, r9, lsl fp
    4530:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    4534:	12d30000 	sbcsne	r0, r3, #0
    4538:	de180000 	cdple	0, 1, cr0, cr8, cr0, {0}
    453c:	01000019 	tsteq	r0, r9, lsl r0
    4540:	00003a7e 	andeq	r3, r0, lr, ror sl
    4544:	00130f00 	andseq	r0, r3, r0, lsl #30
    4548:	6f701900 	svcvs	0x00701900
    454c:	7e010073 	mcrvc	0, 0, r0, cr1, cr3, {3}
    4550:	0000003a 	andeq	r0, r0, sl, lsr r0
    4554:	00001345 	andeq	r1, r0, r5, asr #6
    4558:	001aaa18 	andseq	sl, sl, r8, lsl sl
    455c:	3a7f0100 	bcc	1fc4964 <__Stack_Size+0x1fc4564>
    4560:	a3000000 	movwge	r0, #0
    4564:	18000013 	stmdane	r0, {r0, r1, r4}
    4568:	00001a64 	andeq	r1, r0, r4, ror #20
    456c:	003a7f01 	eorseq	r7, sl, r1, lsl #30
    4570:	13cd0000 	bicne	r0, sp, #0
    4574:	15000000 	strne	r0, [r0, #-0]
    4578:	00020c04 	andeq	r0, r2, r4, lsl #24
    457c:	1a151000 	bne	548584 <__Stack_Size+0x548184>
    4580:	e5010000 	str	r0, [r1, #-0]
    4584:	00000000 	andeq	r0, r0, r0
    4588:	00000010 	andeq	r0, r0, r0, lsl r0
    458c:	04139c01 	ldreq	r9, [r3], #-3073	; 0xfffff3ff
    4590:	6a170000 	bvs	5c4598 <__Stack_Size+0x5c4198>
    4594:	0100001b 	tsteq	r0, fp, lsl r0
    4598:	0003eae5 	andeq	lr, r3, r5, ror #21
    459c:	00500100 	subseq	r0, r0, r0, lsl #2
    45a0:	0004021a 	andeq	r0, r4, sl, lsl r2
    45a4:	5ef60100 	cdppl	1, 15, cr0, cr6, cr0, {0}
    45a8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    45ac:	0c080013 	stceq	0, cr0, [r8], {19}
    45b0:	01000000 	mrseq	r0, (UNDEF: 0)
    45b4:	0004589c 	muleq	r4, ip, r8
    45b8:	1b641100 	blne	19089c0 <__Stack_Size+0x19085c0>
    45bc:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    45c0:	00000316 	andeq	r0, r0, r6, lsl r3
    45c4:	00001421 	andeq	r1, r0, r1, lsr #8
    45c8:	00008717 	andeq	r8, r0, r7, lsl r7
    45cc:	4cf60100 	ldfmie	f0, [r6]
    45d0:	01000000 	mrseq	r0, (UNDEF: 0)
    45d4:	17b91851 	sbfxne	r1, r1, #16, #26
    45d8:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    45dc:	0000005e 	andeq	r0, r0, lr, asr r0
    45e0:	00001442 	andeq	r1, r0, r2, asr #8
    45e4:	1aeb1b00 	bne	ffacb1ec <SCS_BASE+0x1fabd1ec>
    45e8:	10010000 	andne	r0, r1, r0
    45ec:	00004c01 	andeq	r4, r0, r1, lsl #24
    45f0:	00000000 	andeq	r0, r0, r0
    45f4:	00000600 	andeq	r0, r0, r0, lsl #12
    45f8:	839c0100 	orrshi	r0, ip, #0, 2
    45fc:	1c000004 	stcne	0, cr0, [r0], {4}
    4600:	00001b64 	andeq	r1, r0, r4, ror #22
    4604:	16011001 	strne	r1, [r1], -r1
    4608:	6c000003 	stcvs	0, cr0, [r0], {3}
    460c:	00000014 	andeq	r0, r0, r4, lsl r0
    4610:	001b7f1b 	andseq	r7, fp, fp, lsl pc
    4614:	01210100 			; <UNDEFINED> instruction: 0x01210100
    4618:	0000005e 	andeq	r0, r0, lr, asr r0
    461c:	00000000 	andeq	r0, r0, r0
    4620:	0000000c 	andeq	r0, r0, ip
    4624:	04cc9c01 	strbeq	r9, [ip], #3073	; 0xc01
    4628:	641c0000 	ldrvs	r0, [ip], #-0
    462c:	0100001b 	tsteq	r0, fp, lsl r0
    4630:	03160121 	tsteq	r6, #1073741832	; 0x40000008
    4634:	148d0000 	strne	r0, [sp], #0
    4638:	871d0000 	ldrhi	r0, [sp, -r0]
    463c:	01000000 	mrseq	r0, (UNDEF: 0)
    4640:	004c0121 	subeq	r0, ip, r1, lsr #2
    4644:	51010000 	mrspl	r0, (UNDEF: 1)
    4648:	0017b91e 	andseq	fp, r7, lr, lsl r9
    464c:	01230100 			; <UNDEFINED> instruction: 0x01230100
    4650:	0000005e 	andeq	r0, r0, lr, asr r0
    4654:	000014ae 	andeq	r1, r0, lr, lsr #9
    4658:	19ed1b00 	stmibne	sp!, {r8, r9, fp, ip}^
    465c:	3b010000 	blcc	44664 <__Stack_Size+0x44264>
    4660:	00004c01 	andeq	r4, r0, r1, lsl #24
    4664:	00000000 	andeq	r0, r0, r0
    4668:	00000600 	andeq	r0, r0, r0, lsl #12
    466c:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
    4670:	1c000004 	stcne	0, cr0, [r0], {4}
    4674:	00001b64 	andeq	r1, r0, r4, ror #22
    4678:	16013b01 	strne	r3, [r1], -r1, lsl #22
    467c:	d8000003 	stmdale	r0, {r0, r1}
    4680:	00000014 	andeq	r0, r0, r4, lsl r0
    4684:	0002e41f 	andeq	lr, r2, pc, lsl r4
    4688:	014d0100 	mrseq	r0, (UNDEF: 93)
    468c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
    4690:	00000004 	andeq	r0, r0, r4
    4694:	052a9c01 	streq	r9, [sl, #-3073]!	; 0xfffff3ff
    4698:	641d0000 	ldrvs	r0, [sp], #-0
    469c:	0100001b 	tsteq	r0, fp, lsl r0
    46a0:	0316014d 	tsteq	r6, #1073741843	; 0x40000013
    46a4:	50010000 	andpl	r0, r1, r0
    46a8:	0000871d 	andeq	r8, r0, sp, lsl r7
    46ac:	014d0100 	mrseq	r0, (UNDEF: 93)
    46b0:	0000004c 	andeq	r0, r0, ip, asr #32
    46b4:	1f005101 	svcne	0x00005101
    46b8:	000006ae 	andeq	r0, r0, lr, lsr #13
    46bc:	48016001 	stmdami	r1, {r0, sp, lr}
    46c0:	04080013 	streq	r0, [r8], #-19	; 0xffffffed
    46c4:	01000000 	mrseq	r0, (UNDEF: 0)
    46c8:	00055d9c 	muleq	r5, ip, sp
    46cc:	1b641d00 	blne	190bad4 <__Stack_Size+0x190b6d4>
    46d0:	60010000 	andvs	r0, r1, r0
    46d4:	00031601 	andeq	r1, r3, r1, lsl #12
    46d8:	1d500100 	ldfnee	f0, [r0, #-0]
    46dc:	00000087 	andeq	r0, r0, r7, lsl #1
    46e0:	4c016001 	stcmi	0, cr6, [r1], {1}
    46e4:	01000000 	mrseq	r0, (UNDEF: 0)
    46e8:	361f0051 			; <UNDEFINED> instruction: 0x361f0051
    46ec:	0100001a 	tsteq	r0, sl, lsl r0
    46f0:	00000176 	andeq	r0, r0, r6, ror r1
    46f4:	000a0000 	andeq	r0, sl, r0
    46f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    46fc:	0000059e 	muleq	r0, lr, r5
    4700:	001b641d 	andseq	r6, fp, sp, lsl r4
    4704:	01760100 	cmneq	r6, r0, lsl #2
    4708:	00000316 	andeq	r0, r0, r6, lsl r3
    470c:	871d5001 	ldrhi	r5, [sp, -r1]
    4710:	01000000 	mrseq	r0, (UNDEF: 0)
    4714:	004c0176 	subeq	r0, ip, r6, ror r1
    4718:	51010000 	mrspl	r0, (UNDEF: 1)
    471c:	001a251d 	andseq	r2, sl, sp, lsl r5
    4720:	01760100 	cmneq	r6, r0, lsl #2
    4724:	00000230 	andeq	r0, r0, r0, lsr r2
    4728:	1f005201 	svcne	0x00005201
    472c:	00001b24 	andeq	r1, r0, r4, lsr #22
    4730:	00019001 	andeq	r9, r1, r1
    4734:	04000000 	streq	r0, [r0], #-0
    4738:	01000000 	mrseq	r0, (UNDEF: 0)
    473c:	0005d19c 	muleq	r5, ip, r1
    4740:	1b641d00 	blne	190bb48 <__Stack_Size+0x190b748>
    4744:	90010000 	andls	r0, r1, r0
    4748:	00031601 	andeq	r1, r3, r1, lsl #12
    474c:	1d500100 	ldfnee	f0, [r0, #-0]
    4750:	00001ab1 			; <UNDEFINED> instruction: 0x00001ab1
    4754:	4c019001 	stcmi	0, cr9, [r1], {1}
    4758:	01000000 	mrseq	r0, (UNDEF: 0)
    475c:	061f0051 			; <UNDEFINED> instruction: 0x061f0051
    4760:	0100001b 	tsteq	r0, fp, lsl r0
    4764:	000001a2 	andeq	r0, r0, r2, lsr #3
    4768:	00100000 	andseq	r0, r0, r0
    476c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4770:	00000614 	andeq	r0, r0, r4, lsl r6
    4774:	001b641d 	andseq	r6, fp, sp, lsl r4
    4778:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    477c:	00000316 	andeq	r0, r0, r6, lsl r3
    4780:	871d5001 	ldrhi	r5, [sp, -r1]
    4784:	01000000 	mrseq	r0, (UNDEF: 0)
    4788:	004c01a2 	subeq	r0, ip, r2, lsr #3
    478c:	51010000 	mrspl	r0, (UNDEF: 1)
    4790:	706d7420 	rsbvc	r7, sp, r0, lsr #8
    4794:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    4798:	0000003a 	andeq	r0, r0, sl, lsr r0
    479c:	000014f9 	strdeq	r1, [r0], -r9
    47a0:	1a881f00 	bne	fe20c3a8 <SCS_BASE+0x1e1fe3a8>
    47a4:	c3010000 	movwgt	r0, #4096	; 0x1000
    47a8:	00000001 	andeq	r0, r0, r1
    47ac:	00001c00 	andeq	r1, r0, r0, lsl #24
    47b0:	5b9c0100 	blpl	fe704bb8 <SCS_BASE+0x1e6f6bb8>
    47b4:	1c000006 	stcne	0, cr0, [r0], {6}
    47b8:	00001a6c 	andeq	r1, r0, ip, ror #20
    47bc:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    47c0:	1a000000 	bne	47c8 <__Stack_Size+0x43c8>
    47c4:	1c000015 	stcne	0, cr0, [r0], {21}
    47c8:	00001ac5 	andeq	r1, r0, r5, asr #21
    47cc:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    47d0:	3b000000 	blcc	47d8 <__Stack_Size+0x43d8>
    47d4:	1e000015 	mcrne	0, 0, r0, cr0, cr5, {0}
    47d8:	00001aaa 	andeq	r1, r0, sl, lsr #21
    47dc:	3a01c501 	bcc	75be8 <__Stack_Size+0x757e8>
    47e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    47e4:	00000015 	andeq	r0, r0, r5, lsl r0
    47e8:	001a011f 	andseq	r0, sl, pc, lsl r1
    47ec:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    47f0:	00000000 	andeq	r0, r0, r0
    47f4:	0000000c 	andeq	r0, r0, ip
    47f8:	06809c01 	streq	r9, [r0], r1, lsl #24
    47fc:	e91d0000 	ldmdb	sp, {}	; <UNPREDICTABLE>
    4800:	01000015 	tsteq	r0, r5, lsl r0
    4804:	009801dc 			; <UNDEFINED> instruction: 0x009801dc
    4808:	50010000 	andpl	r0, r1, r0
    480c:	03061f00 	movweq	r1, #28416	; 0x6f00
    4810:	07010000 	streq	r0, [r1, -r0]
    4814:	00134c02 	andseq	r4, r3, r2, lsl #24
    4818:	00005408 	andeq	r5, r0, r8, lsl #8
    481c:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    4820:	1c000006 	stcne	0, cr0, [r0], {6}
    4824:	00001a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4828:	3a020701 	bcc	86434 <__Stack_Size+0x86034>
    482c:	94000000 	strls	r0, [r0], #-0
    4830:	1d000015 	stcne	0, cr0, [r0, #-84]	; 0xffffffac
    4834:	000015e9 	andeq	r1, r0, r9, ror #11
    4838:	98020701 	stmdals	r2, {r0, r8, r9, sl}
    483c:	01000000 	mrseq	r0, (UNDEF: 0)
    4840:	6d742051 	ldclvs	0, cr2, [r4, #-324]!	; 0xfffffebc
    4844:	09010070 	stmdbeq	r1, {r4, r5, r6}
    4848:	00003a02 	andeq	r3, r0, r2, lsl #20
    484c:	0015b500 	andseq	fp, r5, r0, lsl #10
    4850:	1b2f1e00 	blne	bcc058 <__Stack_Size+0xbcbc58>
    4854:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4858:	00003a02 	andeq	r3, r0, r2, lsl #20
    485c:	0015e600 	andseq	lr, r5, r0, lsl #12
    4860:	1aaa1e00 	bne	fea8c068 <SCS_BASE+0x1ea7e068>
    4864:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4868:	00003a02 	andeq	r3, r0, r2, lsl #20
    486c:	00160d00 	andseq	r0, r6, r0, lsl #26
    4870:	1afe1e00 	bne	fff8c078 <SCS_BASE+0x1ff7e078>
    4874:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4878:	00003a02 	andeq	r3, r0, r2, lsl #20
    487c:	00162c00 	andseq	r2, r6, r0, lsl #24
    4880:	341f0000 	ldrcc	r0, [pc], #-0	; 4888 <__Stack_Size+0x4488>
    4884:	0100001b 	tsteq	r0, fp, lsl r0
    4888:	00000239 	andeq	r0, r0, r9, lsr r2
    488c:	002a0000 	eoreq	r0, sl, r0
    4890:	9c010000 	stcls	0, cr0, [r1], {-0}
    4894:	0000073c 	andeq	r0, r0, ip, lsr r7
    4898:	001a6c1c 	andseq	r6, sl, ip, lsl ip
    489c:	02390100 	eorseq	r0, r9, #0, 2
    48a0:	0000005e 	andeq	r0, r0, lr, asr r0
    48a4:	00001663 	andeq	r1, r0, r3, ror #12
    48a8:	001ac51c 	andseq	ip, sl, ip, lsl r5
    48ac:	02390100 	eorseq	r0, r9, #0, 2
    48b0:	0000005e 	andeq	r0, r0, lr, asr r0
    48b4:	00001684 	andeq	r1, r0, r4, lsl #13
    48b8:	706d7420 	rsbvc	r7, sp, r0, lsr #8
    48bc:	023b0100 	eorseq	r0, fp, #0, 2
    48c0:	0000003a 	andeq	r0, r0, sl, lsr r0
    48c4:	000016a5 	andeq	r1, r0, r5, lsr #13
    48c8:	1ad42100 	bne	ff50ccd0 <SCS_BASE+0x1f4fecd0>
    48cc:	1ad40000 	bne	ff5048d4 <SCS_BASE+0x1f4f68d4>
    48d0:	14050000 	strne	r0, [r5], #-0
    48d4:	098d0001 	stmibeq	sp, {r0}
    48d8:	00040000 	andeq	r0, r4, r0
    48dc:	00001225 	andeq	r1, r0, r5, lsr #4
    48e0:	0bf10104 	bleq	ffc44cf8 <SCS_BASE+0x1fc36cf8>
    48e4:	400c0000 	andmi	r0, ip, r0
    48e8:	1f00001c 	svcne	0x0000001c
    48ec:	08000005 	stmdaeq	r0, {r0, r2}
    48f0:	00000004 	andeq	r0, r0, r4
    48f4:	97000000 	strls	r0, [r0, -r0]
    48f8:	02000012 	andeq	r0, r0, #18
    48fc:	07b60504 	ldreq	r0, [r6, r4, lsl #10]!
    4900:	02020000 	andeq	r0, r2, #0
    4904:	00078805 	andeq	r8, r7, r5, lsl #16
    4908:	06010200 	streq	r0, [r1], -r0, lsl #4
    490c:	00000967 	andeq	r0, r0, r7, ror #18
    4910:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    4914:	45270200 	strmi	r0, [r7, #-512]!	; 0xfffffe00
    4918:	02000000 	andeq	r0, r0, #0
    491c:	08c30704 	stmiaeq	r3, {r2, r8, r9, sl}^
    4920:	75030000 	strvc	r0, [r3, #-0]
    4924:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    4928:	00005728 	andeq	r5, r0, r8, lsr #14
    492c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4930:	00000b60 	andeq	r0, r0, r0, ror #22
    4934:	00387503 	eorseq	r7, r8, r3, lsl #10
    4938:	00682902 	rsbeq	r2, r8, r2, lsl #18
    493c:	01020000 	mrseq	r0, (UNDEF: 2)
    4940:	00096508 	andeq	r6, r9, r8, lsl #10
    4944:	03c60400 	biceq	r0, r6, #0, 8
    4948:	2f020000 	svccs	0x00020000
    494c:	0000007a 	andeq	r0, r0, sl, ror r0
    4950:	00004505 	andeq	r4, r0, r5, lsl #10
    4954:	1f150400 	svcne	0x00150400
    4958:	33020000 	movwcc	r0, #8192	; 0x2000
    495c:	0000008a 	andeq	r0, r0, sl, lsl #1
    4960:	00007a06 	andeq	r7, r0, r6, lsl #20
    4964:	68010700 	stmdavs	r1, {r8, r9, sl}
    4968:	02000000 	andeq	r0, r0, #0
    496c:	0000a83c 	andeq	sl, r0, ip, lsr r8
    4970:	1a300800 	bne	c06978 <__Stack_Size+0xc06578>
    4974:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4978:	00544553 	subseq	r4, r4, r3, asr r5
    497c:	88040001 	stmdahi	r4, {r0}
    4980:	02000020 	andeq	r0, r0, #32
    4984:	00008f3c 	andeq	r8, r0, ip, lsr pc
    4988:	68010700 	stmdavs	r1, {r8, r9, sl}
    498c:	02000000 	andeq	r0, r0, #0
    4990:	0000cc3e 	andeq	ip, r0, lr, lsr ip
    4994:	04ac0800 	strteq	r0, [ip], #2048	; 0x800
    4998:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    499c:	000008a0 	andeq	r0, r0, r0, lsr #17
    49a0:	a6040001 	strge	r0, [r4], -r1
    49a4:	02000000 	andeq	r0, r0, #0
    49a8:	0000b33e 	andeq	fp, r0, lr, lsr r3
    49ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    49b0:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    49b4:	03033c0a 	movweq	r3, #15370	; 0x3c0a
    49b8:	017f0181 	cmneq	pc, r1, lsl #3
    49bc:	a00b0000 	andge	r0, fp, r0
    49c0:	0300001e 	movweq	r0, #30
    49c4:	018f0183 	orreq	r0, pc, r3, lsl #3
    49c8:	0b000000 	bleq	49d0 <__Stack_Size+0x45d0>
    49cc:	00000742 	andeq	r0, r0, r2, asr #14
    49d0:	94018403 	strls	r8, [r1], #-1027	; 0xfffffbfd
    49d4:	08000001 	stmdaeq	r0, {r0}
    49d8:	001e640b 	andseq	r6, lr, fp, lsl #8
    49dc:	01850300 	orreq	r0, r5, r0, lsl #6
    49e0:	000001a4 	andeq	r0, r0, r4, lsr #3
    49e4:	1d0b0b80 	vstrne	d0, [fp, #-512]	; 0xfffffe00
    49e8:	86030000 	strhi	r0, [r3], -r0
    49ec:	00019401 	andeq	r9, r1, r1, lsl #8
    49f0:	7a0c8800 	bvc	3269f8 <__Stack_Size+0x3265f8>
    49f4:	0300001e 	movweq	r0, #30
    49f8:	01a90187 			; <UNDEFINED> instruction: 0x01a90187
    49fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4a00:	0007560c 	andeq	r5, r7, ip, lsl #12
    4a04:	01880300 	orreq	r0, r8, r0, lsl #6
    4a08:	00000194 	muleq	r0, r4, r1
    4a0c:	c60c0108 	strgt	r0, [ip], -r8, lsl #2
    4a10:	0300001d 	movweq	r0, #29
    4a14:	01ae0189 			; <UNDEFINED> instruction: 0x01ae0189
    4a18:	01800000 	orreq	r0, r0, r0
    4a1c:	0007600c 	andeq	r6, r7, ip
    4a20:	018a0300 	orreq	r0, sl, r0, lsl #6
    4a24:	00000194 	muleq	r0, r4, r1
    4a28:	a60c0188 	strge	r0, [ip], -r8, lsl #3
    4a2c:	0300001b 	movweq	r0, #27
    4a30:	01b3018b 			; <UNDEFINED> instruction: 0x01b3018b
    4a34:	02000000 	andeq	r0, r0, #0
    4a38:	00076a0c 	andeq	r6, r7, ip, lsl #20
    4a3c:	018c0300 	orreq	r0, ip, r0, lsl #6
    4a40:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    4a44:	490d0208 	stmdbmi	sp, {r3, r9}
    4a48:	03005250 	movweq	r5, #592	; 0x250
    4a4c:	01d8018d 	bicseq	r0, r8, sp, lsl #3
    4a50:	03000000 	movweq	r0, #0
    4a54:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
    4a58:	018f0000 	orreq	r0, pc, r0
    4a5c:	d70f0000 	strle	r0, [pc, -r0]
    4a60:	01000000 	mrseq	r0, (UNDEF: 0)
    4a64:	017f0500 	cmneq	pc, r0, lsl #10
    4a68:	3a0e0000 	bcc	384a70 <__Stack_Size+0x384670>
    4a6c:	a4000000 	strge	r0, [r0], #-0
    4a70:	0f000001 	svceq	0x00000001
    4a74:	000000d7 	ldrdeq	r0, [r0], -r7
    4a78:	7f05001d 	svcvc	0x0005001d
    4a7c:	05000001 	streq	r0, [r0, #-1]
    4a80:	0000017f 	andeq	r0, r0, pc, ror r1
    4a84:	00017f05 	andeq	r7, r1, r5, lsl #30
    4a88:	017f0500 	cmneq	pc, r0, lsl #10
    4a8c:	3a0e0000 	bcc	384a94 <__Stack_Size+0x384694>
    4a90:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4a94:	0f000001 	svceq	0x00000001
    4a98:	000000d7 	ldrdeq	r0, [r0], -r7
    4a9c:	6f0e003d 	svcvs	0x000e003d
    4aa0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4aa4:	0f000001 	svceq	0x00000001
    4aa8:	000000d7 	ldrdeq	r0, [r0], -r7
    4aac:	c805000e 	stmdagt	r5, {r1, r2, r3}
    4ab0:	10000001 	andne	r0, r0, r1
    4ab4:	00001dec 	andeq	r1, r0, ip, ror #27
    4ab8:	de018e03 	cdple	14, 0, cr8, cr1, cr3, {0}
    4abc:	11000000 	mrsne	r0, (UNDEF: 0)
    4ac0:	01900340 	orrseq	r0, r0, r0, asr #6
    4ac4:	000002a9 	andeq	r0, r0, r9, lsr #5
    4ac8:	001cae0b 	andseq	sl, ip, fp, lsl #28
    4acc:	01920300 	orrseq	r0, r2, r0, lsl #6
    4ad0:	0000007f 	andeq	r0, r0, pc, ror r0
    4ad4:	1d060b00 	vstrne	d0, [r6, #-0]
    4ad8:	93030000 	movwls	r0, #12288	; 0x3000
    4adc:	00006f01 	andeq	r6, r0, r1, lsl #30
    4ae0:	750b0400 	strvc	r0, [fp, #-1024]	; 0xfffffc00
    4ae4:	0300001e 	movweq	r0, #30
    4ae8:	006f0194 	mlseq	pc, r4, r1, r0	; <UNPREDICTABLE>
    4aec:	0b080000 	bleq	204af4 <__Stack_Size+0x2046f4>
    4af0:	00001dc0 	andeq	r1, r0, r0, asr #27
    4af4:	6f019503 	svcvs	0x00019503
    4af8:	0c000000 	stceq	0, cr0, [r0], {-0}
    4afc:	52435312 	subpl	r5, r3, #1207959552	; 0x48000000
    4b00:	01960300 	orrseq	r0, r6, r0, lsl #6
    4b04:	0000006f 	andeq	r0, r0, pc, rrx
    4b08:	43431210 	movtmi	r1, #12816	; 0x3210
    4b0c:	97030052 	smlsdls	r3, r2, r0, r0
    4b10:	00006f01 	andeq	r6, r0, r1, lsl #30
    4b14:	e10b1400 	tst	fp, r0, lsl #8
    4b18:	0300001d 	movweq	r0, #29
    4b1c:	02b90198 	adcseq	r0, r9, #152, 2	; 0x26
    4b20:	0b180000 	bleq	604b28 <__Stack_Size+0x604728>
    4b24:	00001de6 	andeq	r1, r0, r6, ror #27
    4b28:	6f019903 	svcvs	0x00019903
    4b2c:	24000000 	strcs	r0, [r0], #-0
    4b30:	001d9b0b 	andseq	r9, sp, fp, lsl #22
    4b34:	019a0300 	orrseq	r0, sl, r0, lsl #6
    4b38:	0000006f 	andeq	r0, r0, pc, rrx
    4b3c:	1e840b28 	vdivne.f64	d0, d4, d24
    4b40:	9b030000 	blls	c4b48 <__Stack_Size+0xc4748>
    4b44:	00006f01 	andeq	r6, r0, r1, lsl #30
    4b48:	7f0b2c00 	svcvc	0x000b2c00
    4b4c:	0300001e 	movweq	r0, #30
    4b50:	006f019c 	mlseq	pc, ip, r1, r0	; <UNPREDICTABLE>
    4b54:	0b300000 	bleq	c04b5c <__Stack_Size+0xc0475c>
    4b58:	00001e1a 	andeq	r1, r0, sl, lsl lr
    4b5c:	6f019d03 	svcvs	0x00019d03
    4b60:	34000000 	strcc	r0, [r0], #-0
    4b64:	001d720b 	andseq	r7, sp, fp, lsl #4
    4b68:	019e0300 	orrseq	r0, lr, r0, lsl #6
    4b6c:	0000006f 	andeq	r0, r0, pc, rrx
    4b70:	1fb00b38 	svcne	0x00b00b38
    4b74:	9f030000 	svcls	0x00030000
    4b78:	00006f01 	andeq	r6, r0, r1, lsl #30
    4b7c:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
    4b80:	0000006f 	andeq	r0, r0, pc, rrx
    4b84:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    4b88:	0000d70f 	andeq	sp, r0, pc, lsl #14
    4b8c:	05000200 	streq	r0, [r0, #-512]	; 0xfffffe00
    4b90:	000002a9 	andeq	r0, r0, r9, lsr #5
    4b94:	001ec110 	andseq	ip, lr, r0, lsl r1
    4b98:	01a00300 	lsleq	r0, r0, #6
    4b9c:	000001e9 	andeq	r0, r0, r9, ror #3
    4ba0:	1a040413 	bne	105bf4 <__Stack_Size+0x1057f4>
    4ba4:	00000303 	andeq	r0, r0, r3, lsl #6
    4ba8:	00063d14 	andeq	r3, r6, r4, lsl sp
    4bac:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    4bb0:	00000000 	andeq	r0, r0, r0
    4bb4:	000b9114 	andeq	r9, fp, r4, lsl r1
    4bb8:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    4bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    4bc0:	000a9014 	andeq	r9, sl, r4, lsl r0
    4bc4:	5e1e0400 	cfmulspl	mvf0, mvf14, mvf0
    4bc8:	02000000 	andeq	r0, r0, #0
    4bcc:	0008a714 	andeq	sl, r8, r4, lsl r7
    4bd0:	cc1f0400 	cfldrsgt	mvf0, [pc], {-0}
    4bd4:	03000000 	movweq	r0, #0
    4bd8:	02470400 	subeq	r0, r7, #0, 8
    4bdc:	20040000 	andcs	r0, r4, r0
    4be0:	000002ca 	andeq	r0, r0, sl, asr #5
    4be4:	001fff15 	andseq	pc, pc, r5, lsl pc	; <UNPREDICTABLE>
    4be8:	00240100 	eoreq	r0, r4, r0, lsl #2
    4bec:	34000000 	strcc	r0, [r0], #-0
    4bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    4bf4:	0003339c 	muleq	r3, ip, r3
    4bf8:	31051600 	tstcc	r5, r0, lsl #12
    4bfc:	26010000 	strcs	r0, [r1], -r0
    4c00:	0000003a 	andeq	r0, r0, sl, lsr r0
    4c04:	000016e2 	andeq	r1, r0, r2, ror #13
    4c08:	1f6b1500 	svcne	0x006b1500
    4c0c:	3b010000 	blcc	44c14 <__Stack_Size+0x44814>
    4c10:	00000000 	andeq	r0, r0, r0
    4c14:	00000030 	andeq	r0, r0, r0, lsr r0
    4c18:	03589c01 	cmpeq	r8, #256	; 0x100
    4c1c:	05160000 	ldreq	r0, [r6, #-0]
    4c20:	01000031 	tsteq	r0, r1, lsr r0
    4c24:	00003a3d 	andeq	r3, r0, sp, lsr sl
    4c28:	00170100 	andseq	r0, r7, r0, lsl #2
    4c2c:	36150000 	ldrcc	r0, [r5], -r0
    4c30:	0100000b 	tsteq	r0, fp
    4c34:	0013a061 	andseq	sl, r3, r1, rrx
    4c38:	00001408 	andeq	r1, r0, r8, lsl #8
    4c3c:	7d9c0100 	ldfvcs	f0, [ip]
    4c40:	17000003 	strne	r0, [r0, -r3]
    4c44:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    4c48:	003a6101 	eorseq	r6, sl, r1, lsl #2
    4c4c:	17390000 	ldrne	r0, [r9, -r0]!
    4c50:	15000000 	strne	r0, [r0, #-0]
    4c54:	0000065d 	andeq	r0, r0, sp, asr r6
    4c58:	13b47401 			; <UNDEFINED> instruction: 0x13b47401
    4c5c:	00840800 	addeq	r0, r4, r0, lsl #16
    4c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c64:	000003eb 	andeq	r0, r0, fp, ror #7
    4c68:	001bca18 	andseq	ip, fp, r8, lsl sl
    4c6c:	eb740100 	bl	1d05074 <__Stack_Size+0x1d04c74>
    4c70:	01000003 	tsteq	r0, r3
    4c74:	1e691650 	mcrne	6, 3, r1, cr9, cr0, {2}
    4c78:	76010000 	strvc	r0, [r1], -r0
    4c7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4c80:	0000175a 	andeq	r1, r0, sl, asr r7
    4c84:	001aaa16 	andseq	sl, sl, r6, lsl sl
    4c88:	3a760100 	bcc	1d85090 <__Stack_Size+0x1d84c90>
    4c8c:	b1000000 	mrslt	r0, (UNDEF: 0)
    4c90:	16000017 			; <UNDEFINED> instruction: 0x16000017
    4c94:	00001afe 	strdeq	r1, [r0], -lr
    4c98:	003a7601 	eorseq	r7, sl, r1, lsl #12
    4c9c:	17f00000 	ldrbne	r0, [r0, r0]!
    4ca0:	39160000 	ldmdbcc	r6, {}	; <UNPREDICTABLE>
    4ca4:	0100001c 	tsteq	r0, ip, lsl r0
    4ca8:	00003a77 	andeq	r3, r0, r7, ror sl
    4cac:	00183b00 	andseq	r3, r8, r0, lsl #22
    4cb0:	1e201600 	cfmadda32ne	mvax0, mvax1, mvfx0, mvfx0
    4cb4:	77010000 	strvc	r0, [r1, -r0]
    4cb8:	0000003a 	andeq	r0, r0, sl, lsr r0
    4cbc:	00001875 	andeq	r1, r0, r5, ror r8
    4cc0:	03041900 	movweq	r1, #18688	; 0x4900
    4cc4:	15000003 	strne	r0, [r0, #-3]
    4cc8:	00001e54 	andeq	r1, r0, r4, asr lr
    4ccc:	0000a801 	andeq	sl, r0, r1, lsl #16
    4cd0:	000c0000 	andeq	r0, ip, r0
    4cd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cd8:	00000414 	andeq	r0, r0, r4, lsl r4
    4cdc:	001bca18 	andseq	ip, fp, r8, lsl sl
    4ce0:	eba80100 	bl	fea050e8 <SCS_BASE+0x1e9f70e8>
    4ce4:	01000003 	tsteq	r0, r3
    4ce8:	29150050 	ldmdbcs	r5, {r4, r6}
    4cec:	0100001c 	tsteq	r0, ip, lsl r0
    4cf0:	000000b8 	strheq	r0, [r0], -r8
    4cf4:	00000400 	andeq	r0, r0, r0, lsl #8
    4cf8:	339c0100 	orrscc	r0, ip, #0, 2
    4cfc:	1a000004 	bne	4d14 <__Stack_Size+0x4914>
    4d00:	00000000 	andeq	r0, r0, r0
    4d04:	00000943 	andeq	r0, r0, r3, asr #18
    4d08:	1c591500 	cfldr64ne	mvdx1, [r9], {-0}
    4d0c:	c4010000 	strgt	r0, [r1], #-0
    4d10:	00000000 	andeq	r0, r0, r0
    4d14:	00000004 	andeq	r0, r0, r4
    4d18:	04529c01 	ldrbeq	r9, [r2], #-3073	; 0xfffff3ff
    4d1c:	001a0000 	andseq	r0, sl, r0
    4d20:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    4d24:	00000009 	andeq	r0, r0, r9
    4d28:	001e8915 	andseq	r8, lr, r5, lsl r9
    4d2c:	00d00100 	sbcseq	r0, r0, r0, lsl #2
    4d30:	04000000 	streq	r0, [r0], #-0
    4d34:	01000000 	mrseq	r0, (UNDEF: 0)
    4d38:	0004719c 	muleq	r4, ip, r1
    4d3c:	00001a00 	andeq	r1, r0, r0, lsl #20
    4d40:	09590000 	ldmdbeq	r9, {}^	; <UNPREDICTABLE>
    4d44:	15000000 	strne	r0, [r0, #-0]
    4d48:	00001cc7 	andeq	r1, r0, r7, asr #25
    4d4c:	0000dc01 	andeq	sp, r0, r1, lsl #24
    4d50:	00040000 	andeq	r0, r4, r0
    4d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d58:	00000490 	muleq	r0, r0, r4
    4d5c:	0000001a 	andeq	r0, r0, sl, lsl r0
    4d60:	00096400 	andeq	r6, r9, r0, lsl #8
    4d64:	5f150000 	svcpl	0x00150000
    4d68:	0100001d 	tsteq	r0, sp, lsl r0
    4d6c:	000000ea 	andeq	r0, r0, sl, ror #1
    4d70:	00000600 	andeq	r0, r0, r0, lsl #12
    4d74:	c89c0100 	ldmgt	ip, {r8}
    4d78:	17000004 	strne	r0, [r0, -r4]
    4d7c:	00001f7a 	andeq	r1, r0, sl, ror pc
    4d80:	003aea01 	eorseq	lr, sl, r1, lsl #20
    4d84:	18af0000 	stmiane	pc!, {}	; <UNPREDICTABLE>
    4d88:	001b0000 	andseq	r0, fp, r0
    4d8c:	6f000000 	svcvs	0x00000000
    4d90:	1c000009 	stcne	0, cr0, [r0], {9}
    4d94:	f3055001 	vhadd.u8	d5, d5, d1
    4d98:	24345001 	ldrtcs	r5, [r4], #-1
    4d9c:	f91d0000 			; <UNDEFINED> instruction: 0xf91d0000
    4da0:	0100001d 	tsteq	r0, sp, lsl r0
    4da4:	00003af9 	strdeq	r3, [r0], -r9
    4da8:	00000000 	andeq	r0, r0, r0
    4dac:	00000400 	andeq	r0, r0, r0, lsl #8
    4db0:	eb9c0100 	bl	fe7051b8 <SCS_BASE+0x1e6f71b8>
    4db4:	1a000004 	bne	4dcc <__Stack_Size+0x49cc>
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	0000097a 	andeq	r0, r0, sl, ror r9
    4dc0:	1bda1e00 	blne	ff68c5c8 <SCS_BASE+0x1f67e5c8>
    4dc4:	05010000 	streq	r0, [r1, #-0]
    4dc8:	00004c01 	andeq	r4, r0, r1, lsl #24
    4dcc:	00000000 	andeq	r0, r0, r0
    4dd0:	00001000 	andeq	r1, r0, r0
    4dd4:	1f9c0100 	svcne	0x009c0100
    4dd8:	00001f48 	andeq	r1, r0, r8, asr #30
    4ddc:	a8011201 	stmdage	r1, {r0, r9, ip}
    4de0:	00000000 	andeq	r0, r0, r0
    4de4:	20000000 	andcs	r0, r0, r0
    4de8:	01000000 	mrseq	r0, (UNDEF: 0)
    4dec:	00054c9c 	muleq	r5, ip, ip
    4df0:	063d2000 	ldrteq	r2, [sp], -r0
    4df4:	12010000 	andne	r0, r1, #0
    4df8:	00005e01 	andeq	r5, r0, r1, lsl #28
    4dfc:	0018d000 	andseq	sp, r8, r0
    4e00:	200b2100 	andcs	r2, fp, r0, lsl #2
    4e04:	14010000 	strne	r0, [r1], #-0
    4e08:	0000a801 	andeq	sl, r0, r1, lsl #16
    4e0c:	0018f100 	andseq	pc, r8, r0, lsl #2
    4e10:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    4e14:	15010070 	strne	r0, [r1, #-112]	; 0xffffff90
    4e18:	00003a01 	andeq	r3, r0, r1, lsl #20
    4e1c:	00191800 	andseq	r1, r9, r0, lsl #16
    4e20:	77230000 	strvc	r0, [r3, -r0]!
    4e24:	0100001d 	tsteq	r0, sp, lsl r0
    4e28:	0000012e 	andeq	r0, r0, lr, lsr #2
    4e2c:	000c0000 	andeq	r0, ip, r0
    4e30:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e34:	00000571 	andeq	r0, r0, r1, ror r5
    4e38:	00063d24 	andeq	r3, r6, r4, lsr #26
    4e3c:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    4e40:	0000005e 	andeq	r0, r0, lr, asr r0
    4e44:	23005001 	movwcs	r5, #1
    4e48:	00001bab 	andeq	r1, r0, fp, lsr #23
    4e4c:	00013d01 	andeq	r3, r1, r1, lsl #26
    4e50:	1c000000 	stcne	0, cr0, [r0], {-0}
    4e54:	01000000 	mrseq	r0, (UNDEF: 0)
    4e58:	0005989c 	muleq	r5, ip, r8
    4e5c:	063d2000 	ldrteq	r2, [sp], -r0
    4e60:	3d010000 	stccc	0, cr0, [r1, #-0]
    4e64:	00005e01 	andeq	r5, r0, r1, lsl #28
    4e68:	00193700 	andseq	r3, r9, r0, lsl #14
    4e6c:	db1e0000 	blle	784e74 <__Stack_Size+0x784a74>
    4e70:	0100001c 	tsteq	r0, ip, lsl r0
    4e74:	004c014d 	subeq	r0, ip, sp, asr #2
    4e78:	00000000 	andeq	r0, r0, r0
    4e7c:	00100000 	andseq	r0, r0, r0
    4e80:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e84:	001fdd1f 	andseq	sp, pc, pc, lsl sp	; <UNPREDICTABLE>
    4e88:	015a0100 	cmpeq	sl, r0, lsl #2
    4e8c:	000000a8 	andeq	r0, r0, r8, lsr #1
    4e90:	00000000 	andeq	r0, r0, r0
    4e94:	00000020 	andeq	r0, r0, r0, lsr #32
    4e98:	05f99c01 	ldrbeq	r9, [r9, #3073]!	; 0xc01
    4e9c:	3d200000 	stccc	0, cr0, [r0, #-0]
    4ea0:	01000006 	tsteq	r0, r6
    4ea4:	005e015a 	subseq	r0, lr, sl, asr r1
    4ea8:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    4eac:	93210000 			; <UNDEFINED> instruction: 0x93210000
    4eb0:	0100001f 	tsteq	r0, pc, lsl r0
    4eb4:	00a8015c 	adceq	r0, r8, ip, asr r1
    4eb8:	19790000 	ldmdbne	r9!, {}^	; <UNPREDICTABLE>
    4ebc:	74220000 	strtvc	r0, [r2], #-0
    4ec0:	0100706d 	tsteq	r0, sp, rrx
    4ec4:	003a015d 	eorseq	r0, sl, sp, asr r1
    4ec8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    4ecc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4ed0:	00001ca6 	andeq	r1, r0, r6, lsr #25
    4ed4:	3a017701 	bcc	62ae0 <__Stack_Size+0x626e0>
    4ed8:	00000000 	andeq	r0, r0, r0
    4edc:	0c000000 	stceq	0, cr0, [r0], {-0}
    4ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ee4:	04d6239c 	ldrbeq	r2, [r6], #924	; 0x39c
    4ee8:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4eec:	00143801 	andseq	r3, r4, r1, lsl #16
    4ef0:	00001408 	andeq	r1, r0, r8, lsl #8
    4ef4:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    4ef8:	20000006 	andcs	r0, r0, r6
    4efc:	00001f86 	andeq	r1, r0, r6, lsl #31
    4f00:	3a018901 	bcc	6730c <__Stack_Size+0x66f0c>
    4f04:	bf000000 	svclt	0x00000000
    4f08:	20000019 	andcs	r0, r0, r9, lsl r0
    4f0c:	000014fc 	strdeq	r1, [r0], -ip
    4f10:	3a018901 	bcc	6731c <__Stack_Size+0x66f1c>
    4f14:	e0000000 	and	r0, r0, r0
    4f18:	00000019 	andeq	r0, r0, r9, lsl r0
    4f1c:	00012125 	andeq	r2, r1, r5, lsr #2
    4f20:	01990100 	orrseq	r0, r9, r0, lsl #2
    4f24:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
    4f28:	00000018 	andeq	r0, r0, r8, lsl r0
    4f2c:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    4f30:	58260000 	stmdapl	r6!, {}	; <UNPREDICTABLE>
    4f34:	85080014 	strhi	r0, [r8, #-20]	; 0xffffffec
    4f38:	00000009 	andeq	r0, r0, r9
    4f3c:	001d2327 	andseq	r2, sp, r7, lsr #6
    4f40:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    4f44:	00000000 	andeq	r0, r0, r0
    4f48:	00000010 	andeq	r0, r0, r0, lsl r0
    4f4c:	40239c01 	eormi	r9, r3, r1, lsl #24
    4f50:	0100001e 	tsteq	r0, lr, lsl r0
    4f54:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    4f58:	00180000 	andseq	r0, r8, r0
    4f5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f60:	000006ad 	andeq	r0, r0, sp, lsr #13
    4f64:	001fd020 	andseq	sp, pc, r0, lsr #32
    4f68:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    4f6c:	0000005e 	andeq	r0, r0, lr, asr r0
    4f70:	00001a01 	andeq	r1, r0, r1, lsl #20
    4f74:	0015e924 	andseq	lr, r5, r4, lsr #18
    4f78:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    4f7c:	000000cc 	andeq	r0, r0, ip, asr #1
    4f80:	23005101 	movwcs	r5, #257	; 0x101
    4f84:	00001e27 	andeq	r1, r0, r7, lsr #28
    4f88:	0001d801 	andeq	sp, r1, r1, lsl #16
    4f8c:	20000000 	andcs	r0, r0, r0
    4f90:	01000000 	mrseq	r0, (UNDEF: 0)
    4f94:	0006f29c 	muleq	r6, ip, r2
    4f98:	1cf82000 	ldclne	0, cr2, [r8]
    4f9c:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    4fa0:	00003a01 	andeq	r3, r0, r1, lsl #20
    4fa4:	001a3b00 	andseq	r3, sl, r0, lsl #22
    4fa8:	15e92400 	strbne	r2, [r9, #1024]!	; 0x400
    4fac:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    4fb0:	0000cc01 	andeq	ip, r0, r1, lsl #24
    4fb4:	21510100 	cmpcs	r1, r0, lsl #2
    4fb8:	00001aaa 	andeq	r1, r0, sl, lsr #21
    4fbc:	3a01da01 	bcc	7b7c8 <__Stack_Size+0x7b3c8>
    4fc0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4fc4:	0000001a 	andeq	r0, r0, sl, lsl r0
    4fc8:	001c7823 	andseq	r7, ip, r3, lsr #16
    4fcc:	02000100 	andeq	r0, r0, #0, 2
    4fd0:	00000000 	andeq	r0, r0, r0
    4fd4:	00000050 	andeq	r0, r0, r0, asr r0
    4fd8:	07799c01 	ldrbeq	r9, [r9, -r1, lsl #24]!
    4fdc:	f8200000 			; <UNDEFINED> instruction: 0xf8200000
    4fe0:	0100001c 	tsteq	r0, ip, lsl r0
    4fe4:	003a0200 	eorseq	r0, sl, r0, lsl #4
    4fe8:	1aaa0000 	bne	fea84ff0 <SCS_BASE+0x1ea76ff0>
    4fec:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    4ff0:	0100001f 	tsteq	r0, pc, lsl r0
    4ff4:	005e0200 	subseq	r0, lr, r0, lsl #4
    4ff8:	1acb0000 	bne	ff2c5000 <SCS_BASE+0x1f2b7000>
    4ffc:	10200000 	eorne	r0, r0, r0
    5000:	0100001c 	tsteq	r0, ip, lsl r0
    5004:	005e0201 	subseq	r0, lr, r1, lsl #4
    5008:	1aec0000 	bne	ffb05010 <SCS_BASE+0x1faf7010>
    500c:	2f210000 	svccs	0x00210000
    5010:	0100001b 	tsteq	r0, fp, lsl r0
    5014:	003a0203 	eorseq	r0, sl, r3, lsl #4
    5018:	1b0d0000 	blne	345020 <__Stack_Size+0x344c20>
    501c:	9b210000 	blls	845024 <__Stack_Size+0x844c24>
    5020:	0100001e 	tsteq	r0, lr, lsl r0
    5024:	003a0203 	eorseq	r0, sl, r3, lsl #4
    5028:	1b5e0000 	blne	1785030 <__Stack_Size+0x1784c30>
    502c:	b5210000 	strlt	r0, [r1, #-0]!
    5030:	0100001f 	tsteq	r0, pc, lsl r0
    5034:	003a0203 	eorseq	r0, sl, r3, lsl #4
    5038:	1bb10000 	blne	fec45040 <SCS_BASE+0x1ec37040>
    503c:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    5040:	0100001e 	tsteq	r0, lr, lsl r0
    5044:	003a0204 	eorseq	r0, sl, r4, lsl #4
    5048:	1c080000 	stcne	0, cr0, [r8], {-0}
    504c:	1f000000 	svcne	0x00000000
    5050:	00001ecd 	andeq	r1, r0, sp, asr #29
    5054:	a8022a01 	stmdage	r2, {r0, r9, fp, sp}
    5058:	00000000 	andeq	r0, r0, r0
    505c:	20000000 	andcs	r0, r0, r0
    5060:	01000000 	mrseq	r0, (UNDEF: 0)
    5064:	0007d49c 	muleq	r7, ip, r4
    5068:	1cf82000 	ldclne	0, cr2, [r8]
    506c:	2a010000 	bcs	45074 <__Stack_Size+0x44c74>
    5070:	00003a02 	andeq	r3, r0, r2, lsl #20
    5074:	001c7b00 	andseq	r7, ip, r0, lsl #22
    5078:	17b92100 	ldrne	r2, [r9, r0, lsl #2]!
    507c:	2c010000 	stccs	0, cr0, [r1], {-0}
    5080:	0000a802 	andeq	sl, r0, r2, lsl #16
    5084:	001c9c00 	andseq	r9, ip, r0, lsl #24
    5088:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    508c:	2d010070 	stccs	0, cr0, [r1, #-448]	; 0xfffffe40
    5090:	00003a02 	andeq	r3, r0, r2, lsl #20
    5094:	001cc300 	andseq	ip, ip, r0, lsl #6
    5098:	1d942100 	ldfnes	f2, [r4]
    509c:	2d010000 	stccs	0, cr0, [r1, #-0]
    50a0:	00003a02 	andeq	r3, r0, r2, lsl #20
    50a4:	001ce700 	andseq	lr, ip, r0, lsl #14
    50a8:	a0230000 	eorge	r0, r3, r0
    50ac:	0100001d 	tsteq	r0, sp, lsl r0
    50b0:	00000250 	andeq	r0, r0, r0, asr r2
    50b4:	00180000 	andseq	r0, r8, r0
    50b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    50bc:	0000080b 	andeq	r0, r0, fp, lsl #16
    50c0:	001cf820 	andseq	pc, ip, r0, lsr #16
    50c4:	02500100 	subseq	r0, r0, #0, 2
    50c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    50cc:	00001d1c 	andeq	r1, r0, ip, lsl sp
    50d0:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    50d4:	02520100 	subseq	r0, r2, #0, 2
    50d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    50dc:	00001d3d 	andeq	r1, r0, sp, lsr sp
    50e0:	1ef32300 	cdpne	3, 15, cr2, cr3, cr0, {0}
    50e4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    50e8:	00000002 	andeq	r0, r0, r2
    50ec:	00001c00 	andeq	r1, r0, r0, lsl #24
    50f0:	429c0100 	addsmi	r0, ip, #0, 2
    50f4:	20000008 	andcs	r0, r0, r8
    50f8:	00001cf8 	strdeq	r1, [r0], -r8
    50fc:	3a026801 	bcc	9f108 <__Stack_Size+0x9ed08>
    5100:	6f000000 	svcvs	0x00000000
    5104:	2200001d 	andcs	r0, r0, #29
    5108:	00706d74 	rsbseq	r6, r0, r4, ror sp
    510c:	3a026a01 	bcc	9f918 <__Stack_Size+0x9f518>
    5110:	90000000 	andls	r0, r0, r0
    5114:	0000001d 	andeq	r0, r0, sp, lsl r0
    5118:	001d3a1f 	andseq	r3, sp, pc, lsl sl
    511c:	02860100 	addeq	r0, r6, #0, 2
    5120:	000000a8 	andeq	r0, r0, r8, lsr #1
    5124:	00000000 	andeq	r0, r0, r0
    5128:	00000020 	andeq	r0, r0, r0, lsr #32
    512c:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    5130:	f8200000 			; <UNDEFINED> instruction: 0xf8200000
    5134:	0100001c 	tsteq	r0, ip, lsl r0
    5138:	003a0286 	eorseq	r0, sl, r6, lsl #5
    513c:	1dcf0000 	stclne	0, cr0, [pc]	; 5144 <__Stack_Size+0x4d44>
    5140:	b9210000 	stmdblt	r1!, {}	; <UNPREDICTABLE>
    5144:	01000017 	tsteq	r0, r7, lsl r0
    5148:	00a80288 	adceq	r0, r8, r8, lsl #5
    514c:	1df00000 	ldclne	0, cr0, [r0]
    5150:	74220000 	strtvc	r0, [r2], #-0
    5154:	0100706d 	tsteq	r0, sp, rrx
    5158:	003a028a 	eorseq	r0, sl, sl, lsl #5
    515c:	1e170000 	cdpne	0, 1, cr0, cr7, cr0, {0}
    5160:	94210000 	strtls	r0, [r1], #-0
    5164:	0100001d 	tsteq	r0, sp, lsl r0
    5168:	003a028a 	eorseq	r0, sl, sl, lsl #5
    516c:	1e3b0000 	cdpne	0, 3, cr0, cr11, cr0, {0}
    5170:	1f000000 	svcne	0x00000000
    5174:	00001ea5 	andeq	r1, r0, r5, lsr #29
    5178:	3a02ae01 	bcc	b0984 <__Stack_Size+0xb0584>
    517c:	00000000 	andeq	r0, r0, r0
    5180:	30000000 	andcc	r0, r0, r0
    5184:	01000000 	mrseq	r0, (UNDEF: 0)
    5188:	0008f89c 	muleq	r8, ip, r8
    518c:	1cf82000 	ldclne	0, cr2, [r8]
    5190:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5194:	00003a02 	andeq	r3, r0, r2, lsl #20
    5198:	001e6d00 	andseq	r6, lr, r0, lsl #26
    519c:	1f1b2100 	svcne	0x001b2100
    51a0:	b0010000 	andlt	r0, r1, r0
    51a4:	00003a02 	andeq	r3, r0, r2, lsl #20
    51a8:	001ec000 	andseq	ip, lr, r0
    51ac:	1aaa2100 	bne	fea8d5b4 <SCS_BASE+0x1ea7f5b4>
    51b0:	b1010000 	mrslt	r0, (UNDEF: 1)
    51b4:	00003a02 	andeq	r3, r0, r2, lsl #20
    51b8:	001f0d00 	andseq	r0, pc, r0, lsl #26
    51bc:	1d942100 	ldfnes	f2, [r4]
    51c0:	b1010000 	mrslt	r0, (UNDEF: 1)
    51c4:	00003a02 	andeq	r3, r0, r2, lsl #20
    51c8:	001f5c00 	andseq	r5, pc, r0, lsl #24
    51cc:	fb1f0000 	blx	7c51d6 <__Stack_Size+0x7c4dd6>
    51d0:	0100001b 	tsteq	r0, fp, lsl r0
    51d4:	003a02dc 	ldrsbteq	r0, [sl], -ip
    51d8:	00000000 	andeq	r0, r0, r0
    51dc:	00140000 	andseq	r0, r4, r0
    51e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    51e4:	00000943 	andeq	r0, r0, r3, asr #18
    51e8:	001cf820 	andseq	pc, ip, r0, lsr #16
    51ec:	02dc0100 	sbcseq	r0, ip, #0, 2
    51f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    51f4:	00001fd9 	ldrdeq	r1, [r0], -r9
    51f8:	001c6b21 	andseq	r6, ip, r1, lsr #22
    51fc:	02de0100 	sbcseq	r0, lr, #0, 2
    5200:	0000003a 	andeq	r0, r0, sl, lsr r0
    5204:	00001ffa 	strdeq	r1, [r0], -sl
    5208:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    520c:	02df0100 	sbcseq	r0, pc, #0, 2
    5210:	0000003a 	andeq	r0, r0, sl, lsr r0
    5214:	00002019 	andeq	r2, r0, r9, lsl r0
    5218:	1fa32800 	svcne	0x00a32800
    521c:	1fa30000 	svcne	0x00a30000
    5220:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    5224:	001fc128 	andseq	ip, pc, r8, lsr #2
    5228:	001fc100 	andseq	ip, pc, r0, lsl #2
    522c:	28280500 	stmdacs	r8!, {r8, sl}
    5230:	00001d14 	andeq	r1, r0, r4, lsl sp
    5234:	00001d14 	andeq	r1, r0, r4, lsl sp
    5238:	09282c05 	stmdbeq	r8!, {r0, r2, sl, fp, sp}
    523c:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    5240:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    5244:	1dcb282b 	stclne	8, cr2, [fp, #172]	; 0xac
    5248:	1dcb0000 	stclne	0, cr0, [fp]
    524c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5250:	001c9928 	andseq	r9, ip, r8, lsr #18
    5254:	001c9900 	andseq	r9, ip, r0, lsl #18
    5258:	282f0500 	stmdacs	pc!, {r8, sl}	; <UNPREDICTABLE>
    525c:	00001ddb 	ldrdeq	r1, [r0], -fp
    5260:	00001ddb 	ldrdeq	r1, [r0], -fp
    5264:	79001f05 	stmdbvc	r0, {r0, r2, r8, r9, sl, fp, ip}
    5268:	04000008 	streq	r0, [r0], #-8
    526c:	00148f00 	andseq	r8, r4, r0, lsl #30
    5270:	f1010400 			; <UNDEFINED> instruction: 0xf1010400
    5274:	0c00000b 	stceq	0, cr0, [r0], {11}
    5278:	00002061 	andeq	r2, r0, r1, rrx
    527c:	0000051f 	andeq	r0, r0, pc, lsl r5
    5280:	00000500 	andeq	r0, r0, r0, lsl #10
    5284:	00000000 	andeq	r0, r0, r0
    5288:	000015b5 			; <UNDEFINED> instruction: 0x000015b5
    528c:	b6050402 	strlt	r0, [r5], -r2, lsl #8
    5290:	02000007 	andeq	r0, r0, #7
    5294:	07880502 	streq	r0, [r8, r2, lsl #10]
    5298:	01020000 	mrseq	r0, (UNDEF: 2)
    529c:	00096706 	andeq	r6, r9, r6, lsl #14
    52a0:	33750300 	cmncc	r5, #0, 6
    52a4:	27020032 	smladxcs	r2, r2, r0, r0
    52a8:	00000045 	andeq	r0, r0, r5, asr #32
    52ac:	c3070402 	movwgt	r0, #29698	; 0x7402
    52b0:	03000008 	movweq	r0, #8
    52b4:	00363175 	eorseq	r3, r6, r5, ror r1
    52b8:	00572802 	subseq	r2, r7, r2, lsl #16
    52bc:	02020000 	andeq	r0, r2, #0
    52c0:	000b6007 	andeq	r6, fp, r7
    52c4:	38750300 	ldmdacc	r5!, {r8, r9}^
    52c8:	68290200 	stmdavs	r9!, {r9}
    52cc:	02000000 	andeq	r0, r0, #0
    52d0:	09650801 	stmdbeq	r5!, {r0, fp}^
    52d4:	75030000 	strvc	r0, [r3, #-0]
    52d8:	02003863 	andeq	r3, r0, #6488064	; 0x630000
    52dc:	00007a2d 	andeq	r7, r0, sp, lsr #20
    52e0:	00680400 	rsbeq	r0, r8, r0, lsl #8
    52e4:	c6050000 	strgt	r0, [r5], -r0
    52e8:	02000003 	andeq	r0, r0, #3
    52ec:	00008a2f 	andeq	r8, r0, pc, lsr #20
    52f0:	00450600 	subeq	r0, r5, r0, lsl #12
    52f4:	76030000 	strvc	r0, [r3], -r0
    52f8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    52fc:	00009a31 	andeq	r9, r0, r1, lsr sl
    5300:	00680600 	rsbeq	r0, r8, r0, lsl #12
    5304:	01070000 	mrseq	r0, (UNDEF: 7)
    5308:	00000068 	andeq	r0, r0, r8, rrx
    530c:	00b83c02 	adcseq	r3, r8, r2, lsl #24
    5310:	30080000 	andcc	r0, r8, r0
    5314:	0000001a 	andeq	r0, r0, sl, lsl r0
    5318:	54455309 	strbpl	r5, [r5], #-777	; 0xfffffcf7
    531c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    5320:	00000717 	andeq	r0, r0, r7, lsl r7
    5324:	009f3c02 	addseq	r3, pc, r2, lsl #24
    5328:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    532c:	02000020 	andeq	r0, r0, #32
    5330:	00009f3c 	andeq	r9, r0, ip, lsr pc
    5334:	68010700 	stmdavs	r1, {r8, r9, sl}
    5338:	02000000 	andeq	r0, r0, #0
    533c:	0000e73e 	andeq	lr, r0, lr, lsr r7
    5340:	04ac0800 	strteq	r0, [ip], #2048	; 0x800
    5344:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5348:	000008a0 	andeq	r0, r0, r0, lsr #17
    534c:	a6050001 	strge	r0, [r5], -r1
    5350:	02000000 	andeq	r0, r0, #0
    5354:	0000ce3e 	andeq	ip, r0, lr, lsr lr
    5358:	68010700 	stmdavs	r1, {r8, r9, sl}
    535c:	02000000 	andeq	r0, r0, #0
    5360:	00010b41 	andeq	r0, r1, r1, asr #22
    5364:	10080800 	andne	r0, r8, r0, lsl #16
    5368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    536c:	00000f72 	andeq	r0, r0, r2, ror pc
    5370:	db050001 	blle	14537c <__Stack_Size+0x144f7c>
    5374:	02000000 	andeq	r0, r0, #0
    5378:	0000f241 	andeq	pc, r0, r1, asr #4
    537c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5380:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    5384:	aa03280a 	bge	cf3b4 <__Stack_Size+0xcefb4>
    5388:	0001a801 	andeq	sl, r1, r1, lsl #16
    538c:	52430b00 	subpl	r0, r3, #0, 22
    5390:	01ac0300 			; <UNDEFINED> instruction: 0x01ac0300
    5394:	0000007f 	andeq	r0, r0, pc, ror r0
    5398:	20e20c00 	rsccs	r0, r2, r0, lsl #24
    539c:	ad030000 	stcge	0, cr0, [r3, #-0]
    53a0:	00007f01 	andeq	r7, r0, r1, lsl #30
    53a4:	430b0400 	movwmi	r0, #46080	; 0xb400
    53a8:	03005249 	movweq	r5, #585	; 0x249
    53ac:	007f01ae 	rsbseq	r0, pc, lr, lsr #3
    53b0:	0c080000 	stceq	0, cr0, [r8], {-0}
    53b4:	00002147 	andeq	r2, r0, r7, asr #2
    53b8:	7f01af03 	svcvc	0x0001af03
    53bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    53c0:	0020280c 	eoreq	r2, r0, ip, lsl #16
    53c4:	01b00300 	lslseq	r0, r0, #6
    53c8:	0000007f 	andeq	r0, r0, pc, ror r0
    53cc:	21690c10 	cmncs	r9, r0, lsl ip
    53d0:	b1030000 	mrslt	r0, (UNDEF: 3)
    53d4:	00007f01 	andeq	r7, r0, r1, lsl #30
    53d8:	7a0c1400 	bvc	30a3e0 <__Stack_Size+0x309fe0>
    53dc:	03000021 	movweq	r0, #33	; 0x21
    53e0:	007f01b2 	ldrhteq	r0, [pc], #-18
    53e4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    53e8:	000020f6 	strdeq	r2, [r0], -r6
    53ec:	7f01b303 	svcvc	0x0001b303
    53f0:	1c000000 	stcne	0, cr0, [r0], {-0}
    53f4:	0020910c 	eoreq	r9, r0, ip, lsl #2
    53f8:	01b40300 			; <UNDEFINED> instruction: 0x01b40300
    53fc:	0000007f 	andeq	r0, r0, pc, ror r0
    5400:	53430b20 	movtpl	r0, #15136	; 0x3b20
    5404:	b5030052 	strlt	r0, [r3, #-82]	; 0xffffffae
    5408:	00007f01 	andeq	r7, r0, r1, lsl #30
    540c:	0d002400 	cfstrseq	mvf2, [r0, #-0]
    5410:	0000201c 	andeq	r2, r0, ip, lsl r0
    5414:	1d01b603 	stcne	6, cr11, [r1, #-12]
    5418:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    541c:	f9190414 			; <UNDEFINED> instruction: 0xf9190414
    5420:	0f000001 	svceq	0x00000001
    5424:	00002221 	andeq	r2, r0, r1, lsr #4
    5428:	003a1b04 	eorseq	r1, sl, r4, lsl #22
    542c:	0f000000 	svceq	0x00000000
    5430:	000020e7 	andeq	r2, r0, r7, ror #1
    5434:	003a1c04 	eorseq	r1, sl, r4, lsl #24
    5438:	0f040000 	svceq	0x00040000
    543c:	00002279 	andeq	r2, r0, r9, ror r2
    5440:	003a1d04 	eorseq	r1, sl, r4, lsl #26
    5444:	0f080000 	svceq	0x00080000
    5448:	0000223d 	andeq	r2, r0, sp, lsr r2
    544c:	003a1e04 	eorseq	r1, sl, r4, lsl #28
    5450:	0f0c0000 	svceq	0x000c0000
    5454:	000021c2 	andeq	r2, r0, r2, asr #3
    5458:	003a1f04 	eorseq	r1, sl, r4, lsl #30
    545c:	00100000 	andseq	r0, r0, r0
    5460:	0020af05 	eoreq	sl, r0, r5, lsl #30
    5464:	b4200400 	strtlt	r0, [r0], #-1024	; 0xfffffc00
    5468:	10000001 	andne	r0, r0, r1
    546c:	00000038 	andeq	r0, r0, r8, lsr r0
    5470:	14647c01 	strbtne	r7, [r4], #-3073	; 0xfffff3ff
    5474:	003c0800 	eorseq	r0, ip, r0, lsl #16
    5478:	9c010000 	stcls	0, cr0, [r1], {-0}
    547c:	00054611 	andeq	r4, r5, r1, lsl r6
    5480:	a09f0100 	addsge	r0, pc, r0, lsl #2
    5484:	38080014 	stmdacc	r8, {r2, r4}
    5488:	01000000 	mrseq	r0, (UNDEF: 0)
    548c:	0002389c 	muleq	r2, ip, r8
    5490:	22601200 	rsbcs	r1, r0, #0, 4
    5494:	9f010000 	svcls	0x00010000
    5498:	0000003a 	andeq	r0, r0, sl, lsr r0
    549c:	11005001 	tstne	r0, r1
    54a0:	000021a4 	andeq	r2, r0, r4, lsr #3
    54a4:	0000e901 	andeq	lr, r0, r1, lsl #18
    54a8:	00140000 	andseq	r0, r4, r0
    54ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    54b0:	0000026c 	andeq	r0, r0, ip, ror #4
    54b4:	0021ae13 	eoreq	sl, r1, r3, lsl lr
    54b8:	5ee90100 	cdppl	1, 14, cr0, cr9, cr0, {0}
    54bc:	44000000 	strmi	r0, [r0], #-0
    54c0:	14000020 	strne	r0, [r0], #-32	; 0xffffffe0
    54c4:	00001aaa 	andeq	r1, r0, sl, lsr #21
    54c8:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    54cc:	20650000 	rsbcs	r0, r5, r0
    54d0:	15000000 	strne	r0, [r0, #-0]
    54d4:	000022e3 	andeq	r2, r0, r3, ror #5
    54d8:	00010601 	andeq	r0, r1, r1, lsl #12
    54dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    54e0:	01000000 	mrseq	r0, (UNDEF: 0)
    54e4:	0002919c 	muleq	r2, ip, r1
    54e8:	15e91600 	strbne	r1, [r9, #1536]!	; 0x600
    54ec:	06010000 	streq	r0, [r1], -r0
    54f0:	0000e701 	andeq	lr, r0, r1, lsl #14
    54f4:	00500100 	subseq	r0, r0, r0, lsl #2
    54f8:	0000f315 	andeq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    54fc:	011f0100 	tsteq	pc, r0, lsl #2
    5500:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
    5504:	00000014 	andeq	r0, r0, r4, lsl r0
    5508:	02d89c01 	sbcseq	r9, r8, #256	; 0x100
    550c:	dc170000 	ldcle	0, cr0, [r7], {-0}
    5510:	01000021 	tsteq	r0, r1, lsr #32
    5514:	003a011f 	eorseq	r0, sl, pc, lsl r1
    5518:	208f0000 	addcs	r0, pc, r0
    551c:	c1170000 	tstgt	r7, r0
    5520:	01000020 	tsteq	r0, r0, lsr #32
    5524:	003a011f 	eorseq	r0, sl, pc, lsl r1
    5528:	20b00000 	adcscs	r0, r0, r0
    552c:	aa180000 	bge	605534 <__Stack_Size+0x605134>
    5530:	0100001a 	tsteq	r0, sl, lsl r0
    5534:	003a0121 	eorseq	r0, sl, r1, lsr #2
    5538:	20d10000 	sbcscs	r0, r1, r0
    553c:	15000000 	strne	r0, [r0, #-0]
    5540:	00000af4 	strdeq	r0, [r0], -r4
    5544:	ec013c01 	stc	12, cr3, [r1], {1}
    5548:	0c080014 	stceq	0, cr0, [r8], {20}
    554c:	01000000 	mrseq	r0, (UNDEF: 0)
    5550:	0002fd9c 	muleq	r2, ip, sp
    5554:	15e91600 	strbne	r1, [r9, #1536]!	; 0x600
    5558:	3c010000 	stccc	0, cr0, [r1], {-0}
    555c:	0000e701 	andeq	lr, r0, r1, lsl #14
    5560:	00500100 	subseq	r0, r0, r0, lsl #2
    5564:	00001815 	andeq	r1, r0, r5, lsl r8
    5568:	014f0100 	mrseq	r0, (UNDEF: 95)
    556c:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
    5570:	00000014 	andeq	r0, r0, r4, lsl r0
    5574:	03349c01 	teqeq	r4, #256	; 0x100
    5578:	68170000 	ldmdavs	r7, {}	; <UNPREDICTABLE>
    557c:	01000022 	tsteq	r0, r2, lsr #32
    5580:	003a014f 	eorseq	r0, sl, pc, asr #2
    5584:	210e0000 	mrscs	r0, (UNDEF: 14)
    5588:	aa180000 	bge	605590 <__Stack_Size+0x605190>
    558c:	0100001a 	tsteq	r0, sl, lsl r0
    5590:	003a0151 	eorseq	r0, sl, r1, asr r1
    5594:	212f0000 			; <UNDEFINED> instruction: 0x212f0000
    5598:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    559c:	0000088c 	andeq	r0, r0, ip, lsl #17
    55a0:	5e016d01 	cdppl	13, 0, cr6, cr1, cr1, {0}
    55a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    55a8:	10080015 	andne	r0, r8, r5, lsl r0
    55ac:	01000000 	mrseq	r0, (UNDEF: 0)
    55b0:	0628159c 			; <UNDEFINED> instruction: 0x0628159c
    55b4:	84010000 	strhi	r0, [r1], #-0
    55b8:	00151c01 	andseq	r1, r5, r1, lsl #24
    55bc:	00001408 	andeq	r1, r0, r8, lsl #8
    55c0:	819c0100 	orrshi	r0, ip, r0, lsl #2
    55c4:	17000003 	strne	r0, [r0, -r3]
    55c8:	0000220c 	andeq	r2, r0, ip, lsl #4
    55cc:	3a018401 	bcc	665d8 <__Stack_Size+0x661d8>
    55d0:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    55d4:	18000021 	stmdane	r0, {r0, r5}
    55d8:	00001aaa 	andeq	r1, r0, sl, lsr #21
    55dc:	3a018601 	bcc	66de8 <__Stack_Size+0x669e8>
    55e0:	7a000000 	bvc	55e8 <__Stack_Size+0x51e8>
    55e4:	00000021 	andeq	r0, r0, r1, lsr #32
    55e8:	00064d15 	andeq	r4, r6, r5, lsl sp
    55ec:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    55f0:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
    55f4:	00000014 	andeq	r0, r0, r4, lsl r0
    55f8:	03b89c01 			; <UNDEFINED> instruction: 0x03b89c01
    55fc:	31170000 	tstcc	r7, r0
    5600:	01000020 	tsteq	r0, r0, lsr #32
    5604:	003a01a5 	eorseq	r0, sl, r5, lsr #3
    5608:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    560c:	aa180000 	bge	605614 <__Stack_Size+0x605214>
    5610:	0100001a 	tsteq	r0, sl, lsl r0
    5614:	003a01a7 	eorseq	r0, sl, r7, lsr #3
    5618:	21c50000 	biccs	r0, r5, r0
    561c:	15000000 	strne	r0, [r0, #-0]
    5620:	00000184 	andeq	r0, r0, r4, lsl #3
    5624:	4401c601 	strmi	ip, [r1], #-1537	; 0xfffff9ff
    5628:	14080015 	strne	r0, [r8], #-21	; 0xffffffeb
    562c:	01000000 	mrseq	r0, (UNDEF: 0)
    5630:	0003ef9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    5634:	20311700 	eorscs	r1, r1, r0, lsl #14
    5638:	c6010000 	strgt	r0, [r1], -r0
    563c:	00003a01 	andeq	r3, r0, r1, lsl #20
    5640:	0021ef00 	eoreq	lr, r1, r0, lsl #30
    5644:	1aaa1800 	bne	fea8b64c <SCS_BASE+0x1ea7d64c>
    5648:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    564c:	00003a01 	andeq	r3, r0, r1, lsl #20
    5650:	00221000 	eoreq	r1, r2, r0
    5654:	4d150000 	ldcmi	0, cr0, [r5, #-0]
    5658:	01000022 	tsteq	r0, r2, lsr #32
    565c:	000001e9 	andeq	r0, r0, r9, ror #3
    5660:	00180000 	andseq	r0, r8, r0
    5664:	9c010000 	stcls	0, cr0, [r1], {-0}
    5668:	00000424 	andeq	r0, r0, r4, lsr #8
    566c:	0022f617 	eoreq	pc, r2, r7, lsl r6	; <UNPREDICTABLE>
    5670:	01e90100 	mvneq	r0, r0, lsl #2
    5674:	0000005e 	andeq	r0, r0, lr, asr r0
    5678:	0000223a 	andeq	r2, r0, sl, lsr r2
    567c:	0015e916 	andseq	lr, r5, r6, lsl r9
    5680:	01e90100 	mvneq	r0, r0, lsl #2
    5684:	000000e7 	andeq	r0, r0, r7, ror #1
    5688:	15005101 	strne	r5, [r0, #-257]	; 0xfffffeff
    568c:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5690:	58020801 	stmdapl	r2, {r0, fp}
    5694:	0c080015 	stceq	0, cr0, [r8], {21}
    5698:	01000000 	mrseq	r0, (UNDEF: 0)
    569c:	0004499c 	muleq	r4, ip, r9
    56a0:	21fb1600 	mvnscs	r1, r0, lsl #12
    56a4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    56a8:	00003a02 	andeq	r3, r0, r2, lsl #20
    56ac:	00500100 	subseq	r0, r0, r0, lsl #2
    56b0:	00203a15 	eoreq	r3, r0, r5, lsl sl
    56b4:	021d0100 	andseq	r0, sp, #0, 2
    56b8:	00000000 	andeq	r0, r0, r0
    56bc:	00000014 	andeq	r0, r0, r4, lsl r0
    56c0:	04809c01 	streq	r9, [r0], #3073	; 0xc01
    56c4:	a5170000 	ldrge	r0, [r7, #-0]
    56c8:	01000020 	tsteq	r0, r0, lsr #32
    56cc:	003a021d 	eorseq	r0, sl, sp, lsl r2
    56d0:	22740000 	rsbscs	r0, r4, #0
    56d4:	aa180000 	bge	6056dc <__Stack_Size+0x6052dc>
    56d8:	0100001a 	tsteq	r0, sl, lsl r0
    56dc:	003a021f 	eorseq	r0, sl, pc, lsl r2
    56e0:	22950000 	addscs	r0, r5, #0
    56e4:	15000000 	strne	r0, [r0, #-0]
    56e8:	00002289 	andeq	r2, r0, r9, lsl #5
    56ec:	00023c01 	andeq	r3, r2, r1, lsl #24
    56f0:	20000000 	andcs	r0, r0, r0
    56f4:	01000000 	mrseq	r0, (UNDEF: 0)
    56f8:	0004a59c 	muleq	r4, ip, r5
    56fc:	20791600 	rsbscs	r1, r9, r0, lsl #12
    5700:	3c010000 	stccc	0, cr0, [r1], {-0}
    5704:	00005e02 	andeq	r5, r0, r2, lsl #28
    5708:	00500100 	subseq	r0, r0, r0, lsl #2
    570c:	00213c15 	eoreq	r3, r1, r5, lsl ip
    5710:	02630100 	rsbeq	r0, r3, #0, 2
    5714:	00000000 	andeq	r0, r0, r0
    5718:	0000000c 	andeq	r0, r0, ip
    571c:	04ca9c01 	strbeq	r9, [sl], #3073	; 0xc01
    5720:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    5724:	01000015 	tsteq	r0, r5, lsl r0
    5728:	00e70263 	rsceq	r0, r7, r3, ror #4
    572c:	50010000 	andpl	r0, r1, r0
    5730:	21ea1500 	mvncs	r1, r0, lsl #10
    5734:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    5738:	00000002 	andeq	r0, r0, r2
    573c:	00001000 	andeq	r1, r0, r0
    5740:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    5744:	17000004 	strne	r0, [r0, -r4]
    5748:	0000210c 	andeq	r2, r0, ip, lsl #2
    574c:	3a027901 	bcc	a3b58 <__Stack_Size+0xa3758>
    5750:	bf000000 	svclt	0x00000000
    5754:	00000022 	andeq	r0, r0, r2, lsr #32
    5758:	0022ba15 	eoreq	fp, r2, r5, lsl sl
    575c:	028c0100 	addeq	r0, ip, #0, 2
    5760:	00000000 	andeq	r0, r0, r0
    5764:	0000000c 	andeq	r0, r0, ip
    5768:	05169c01 	ldreq	r9, [r6, #-3073]	; 0xfffff3ff
    576c:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    5770:	01000015 	tsteq	r0, r5, lsl r0
    5774:	00e7028c 	rsceq	r0, r7, ip, lsl #5
    5778:	50010000 	andpl	r0, r1, r0
    577c:	22a81500 	adccs	r1, r8, #0, 10
    5780:	9c010000 	stcls	0, cr0, [r1], {-0}
    5784:	00156402 	andseq	r6, r5, r2, lsl #8
    5788:	00008408 	andeq	r8, r0, r8, lsl #8
    578c:	7b9c0100 	blvc	fe705b94 <SCS_BASE+0x1e6f7b94>
    5790:	16000005 	strne	r0, [r0], -r5
    5794:	00002232 	andeq	r2, r0, r2, lsr r2
    5798:	7b029c01 	blvc	ac7a4 <__Stack_Size+0xac3a4>
    579c:	01000005 	tsteq	r0, r5
    57a0:	6d741a50 	vldmdbvs	r4!, {s3-s82}
    57a4:	9e010070 	mcrls	0, 0, r0, cr1, cr0, {3}
    57a8:	00003a02 	andeq	r3, r0, r2, lsl #20
    57ac:	0022e000 	eoreq	lr, r2, r0
    57b0:	21341800 	teqcs	r4, r0, lsl #16
    57b4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    57b8:	00003a02 	andeq	r3, r0, r2, lsl #20
    57bc:	00235d00 	eoreq	r5, r3, r0, lsl #26
    57c0:	215f1800 	cmpcs	pc, r0, lsl #16
    57c4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    57c8:	00003a02 	andeq	r3, r0, r2, lsl #20
    57cc:	00238d00 	eoreq	r8, r3, r0, lsl #26
    57d0:	225a1800 	subscs	r1, sl, #0, 16
    57d4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    57d8:	00003a02 	andeq	r3, r0, r2, lsl #20
    57dc:	0023b200 	eoreq	fp, r3, r0, lsl #4
    57e0:	041b0000 	ldreq	r0, [fp], #-0
    57e4:	000001f9 	strdeq	r0, [r0], -r9
    57e8:	0020cc15 	eoreq	ip, r0, r5, lsl ip
    57ec:	03000100 	movweq	r0, #256	; 0x100
    57f0:	00000000 	andeq	r0, r0, r0
    57f4:	00000018 	andeq	r0, r0, r8, lsl r0
    57f8:	05b69c01 	ldreq	r9, [r6, #3073]!	; 0xc01
    57fc:	fd170000 	ldc2	0, cr0, [r7, #-0]
    5800:	01000022 	tsteq	r0, r2, lsr #32
    5804:	003a0300 	eorseq	r0, sl, r0, lsl #6
    5808:	24360000 	ldrtcs	r0, [r6], #-0
    580c:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    5810:	01000015 	tsteq	r0, r5, lsl r0
    5814:	00e70300 	rsceq	r0, r7, r0, lsl #6
    5818:	51010000 	mrspl	r0, (UNDEF: 1)
    581c:	0ab81500 	beq	fee0ac24 <SCS_BASE+0x1edfcc24>
    5820:	21010000 	mrscs	r0, (UNDEF: 1)
    5824:	0015e803 	andseq	lr, r5, r3, lsl #16
    5828:	00001808 	andeq	r1, r0, r8, lsl #16
    582c:	eb9c0100 	bl	fe705c34 <SCS_BASE+0x1e6f7c34>
    5830:	17000005 	strne	r0, [r0, -r5]
    5834:	00002096 	muleq	r0, r6, r0
    5838:	3a032101 	bcc	cdc44 <__Stack_Size+0xcd844>
    583c:	70000000 	andvc	r0, r0, r0
    5840:	16000024 	strne	r0, [r0], -r4, lsr #32
    5844:	000015e9 	andeq	r1, r0, r9, ror #11
    5848:	e7032101 	str	r2, [r3, -r1, lsl #2]
    584c:	01000000 	mrseq	r0, (UNDEF: 0)
    5850:	b4150051 	ldrlt	r0, [r5], #-81	; 0xffffffaf
    5854:	01000004 	tsteq	r0, r4
    5858:	16000343 	strne	r0, [r0], -r3, asr #6
    585c:	00180800 	andseq	r0, r8, r0, lsl #16
    5860:	9c010000 	stcls	0, cr0, [r1], {-0}
    5864:	00000620 	andeq	r0, r0, r0, lsr #12
    5868:	00215017 	eoreq	r5, r1, r7, lsl r0
    586c:	03430100 	movteq	r0, #12544	; 0x3100
    5870:	0000003a 	andeq	r0, r0, sl, lsr r0
    5874:	000024aa 	andeq	r2, r0, sl, lsr #9
    5878:	0015e916 	andseq	lr, r5, r6, lsl r9
    587c:	03430100 	movteq	r0, #12544	; 0x3100
    5880:	000000e7 	andeq	r0, r0, r7, ror #1
    5884:	15005101 	strne	r5, [r0, #-257]	; 0xfffffeff
    5888:	00001ad4 	ldrdeq	r1, [r0], -r4
    588c:	18036301 	stmdane	r3, {r0, r8, r9, sp, lr}
    5890:	18080016 	stmdane	r8, {r1, r2, r4}
    5894:	01000000 	mrseq	r0, (UNDEF: 0)
    5898:	0006559c 	muleq	r6, ip, r5
    589c:	20961700 	addscs	r1, r6, r0, lsl #14
    58a0:	63010000 	movwvs	r0, #4096	; 0x1000
    58a4:	00003a03 	andeq	r3, r0, r3, lsl #20
    58a8:	0024e400 	eoreq	lr, r4, r0, lsl #8
    58ac:	15e91600 	strbne	r1, [r9, #1536]!	; 0x600
    58b0:	63010000 	movwvs	r0, #4096	; 0x1000
    58b4:	0000e703 	andeq	lr, r0, r3, lsl #14
    58b8:	00510100 	subseq	r0, r1, r0, lsl #2
    58bc:	00211d15 	eoreq	r1, r1, r5, lsl sp
    58c0:	03840100 	orreq	r0, r4, #0, 2
    58c4:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
    58c8:	00000018 	andeq	r0, r0, r8, lsl r0
    58cc:	068a9c01 	streq	r9, [sl], r1, lsl #24
    58d0:	50170000 	andspl	r0, r7, r0
    58d4:	01000021 	tsteq	r0, r1, lsr #32
    58d8:	003a0384 	eorseq	r0, sl, r4, lsl #7
    58dc:	251e0000 	ldrcs	r0, [lr, #-0]
    58e0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    58e4:	01000015 	tsteq	r0, r5, lsl r0
    58e8:	00e70384 	rsceq	r0, r7, r4, lsl #7
    58ec:	51010000 	mrspl	r0, (UNDEF: 1)
    58f0:	21911500 	orrscs	r1, r1, r0, lsl #10
    58f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    58f8:	00000003 	andeq	r0, r0, r3
    58fc:	00000c00 	andeq	r0, r0, r0, lsl #24
    5900:	af9c0100 	svcge	0x009c0100
    5904:	16000006 	strne	r0, [r0], -r6
    5908:	000015e9 	andeq	r1, r0, r9, ror #11
    590c:	e7039c01 	str	r9, [r3, -r1, lsl #24]
    5910:	01000000 	mrseq	r0, (UNDEF: 0)
    5914:	c8150050 	ldmdagt	r5, {r4, r6}
    5918:	01000022 	tsteq	r0, r2, lsr #32
    591c:	000003ac 	andeq	r0, r0, ip, lsr #7
    5920:	000c0000 	andeq	r0, ip, r0
    5924:	9c010000 	stcls	0, cr0, [r1], {-0}
    5928:	000006d4 	ldrdeq	r0, [r0], -r4
    592c:	0015e916 	andseq	lr, r5, r6, lsl r9
    5930:	03ac0100 			; <UNDEFINED> instruction: 0x03ac0100
    5934:	000000e7 	andeq	r0, r0, r7, ror #1
    5938:	15005001 	strne	r5, [r0, #-1]
    593c:	000020fe 	strdeq	r2, [r0], -lr
    5940:	0003c101 	andeq	ip, r3, r1, lsl #2
    5944:	0c000000 	stceq	0, cr0, [r0], {-0}
    5948:	01000000 	mrseq	r0, (UNDEF: 0)
    594c:	0006f99c 	muleq	r6, ip, r9
    5950:	22ee1600 	rsccs	r1, lr, #0, 12
    5954:	c1010000 	mrsgt	r0, (UNDEF: 1)
    5958:	00005e03 	andeq	r5, r0, r3, lsl #28
    595c:	00500100 	subseq	r0, r0, r0, lsl #2
    5960:	0007101c 	andeq	r1, r7, ip, lsl r0
    5964:	03dd0100 	bicseq	r0, sp, #0, 2
    5968:	000000b8 	strheq	r0, [r0], -r8
    596c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
    5970:	00000028 	andeq	r0, r0, r8, lsr #32
    5974:	07549c01 	ldrbeq	r9, [r4, -r1, lsl #24]
    5978:	d3170000 	tstle	r7, #0
    597c:	01000021 	tsteq	r0, r1, lsr #32
    5980:	005e03dd 	ldrsbeq	r0, [lr], #-61	; 0xffffffc3
    5984:	25580000 	ldrbcs	r0, [r8, #-0]
    5988:	741a0000 	ldrvc	r0, [sl], #-0
    598c:	0100706d 	tsteq	r0, sp, rrx
    5990:	003a03df 	ldrsbteq	r0, [sl], -pc
    5994:	25790000 	ldrbcs	r0, [r9, #-0]!
    5998:	70180000 	andsvc	r0, r8, r0
    599c:	01000021 	tsteq	r0, r1, lsr #32
    59a0:	003a03e0 	eorseq	r0, sl, r0, ror #7
    59a4:	25c20000 	strbcs	r0, [r2]
    59a8:	b9180000 	ldmdblt	r8, {}	; <UNPREDICTABLE>
    59ac:	01000017 	tsteq	r0, r7, lsl r0
    59b0:	00b803e1 	adcseq	r0, r8, r1, ror #7
    59b4:	25f80000 	ldrbcs	r0, [r8, #0]!
    59b8:	1d000000 	stcne	0, cr0, [r0, #-0]
    59bc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    59c0:	010bc601 	tsteq	fp, r1, lsl #12
    59c4:	16700000 	ldrbtne	r0, [r0], -r0
    59c8:	002e0800 	eoreq	r0, lr, r0, lsl #16
    59cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    59d0:	000007be 			; <UNDEFINED> instruction: 0x000007be
    59d4:	0021821e 	eoreq	r8, r1, lr, lsl r2
    59d8:	7fc80100 	svcvc	0x00c80100
    59dc:	02000000 	andeq	r0, r0, #0
    59e0:	b2147491 	andslt	r7, r4, #-1862270976	; 0x91000000
    59e4:	01000017 	tsteq	r0, r7, lsl r0
    59e8:	00010bc9 	andeq	r0, r1, r9, asr #23
    59ec:	00263700 	eoreq	r3, r6, r0, lsl #14
    59f0:	22171400 	andscs	r1, r7, #0, 8
    59f4:	ca010000 	bgt	459fc <__Stack_Size+0x455fc>
    59f8:	000000b8 	strheq	r0, [r0], -r8
    59fc:	0000265c 	andeq	r2, r0, ip, asr r6
    5a00:	00167c1f 	andseq	r7, r6, pc, lsl ip
    5a04:	0006f908 	andeq	pc, r6, r8, lsl #18
    5a08:	0007ad00 	andeq	sl, r7, r0, lsl #26
    5a0c:	50012000 	andpl	r2, r1, r0
    5a10:	00310802 	eorseq	r0, r1, r2, lsl #16
    5a14:	00169221 	andseq	r9, r6, r1, lsr #4
    5a18:	0006f908 	andeq	pc, r6, r8, lsl #18
    5a1c:	50012000 	andpl	r2, r1, r0
    5a20:	00310802 	eorseq	r0, r1, r2, lsl #16
    5a24:	08e62200 	stmiaeq	r6!, {r9, sp}^
    5a28:	10010000 	andne	r0, r1, r0
    5a2c:	0016a004 	andseq	sl, r6, r4
    5a30:	00001008 	andeq	r1, r0, r8
    5a34:	1c9c0100 	ldfnes	f0, [ip], {0}
    5a38:	00002081 	andeq	r2, r0, r1, lsl #1
    5a3c:	c3042401 	movwgt	r2, #17409	; 0x4401
    5a40:	00000000 	andeq	r0, r0, r0
    5a44:	14000000 	strne	r0, [r0], #-0
    5a48:	01000000 	mrseq	r0, (UNDEF: 0)
    5a4c:	00080b9c 	muleq	r8, ip, fp
    5a50:	22f61700 	rscscs	r1, r6, #0, 14
    5a54:	24010000 	strcs	r0, [r1], #-0
    5a58:	00005e04 	andeq	r5, r0, r4, lsl #28
    5a5c:	00266f00 	eoreq	r6, r6, r0, lsl #30
    5a60:	17b91800 	ldrne	r1, [r9, r0, lsl #16]!
    5a64:	26010000 	strcs	r0, [r1], -r0
    5a68:	0000c304 	andeq	ip, r0, r4, lsl #6
    5a6c:	00269000 	eoreq	r9, r6, r0
    5a70:	4b150000 	blmi	545a78 <__Stack_Size+0x545678>
    5a74:	01000020 	tsteq	r0, r0, lsr #32
    5a78:	00000447 	andeq	r0, r0, r7, asr #8
    5a7c:	000c0000 	andeq	r0, ip, r0
    5a80:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a84:	00000830 	andeq	r0, r0, r0, lsr r8
    5a88:	0022f616 	eoreq	pc, r2, r6, lsl r6	; <UNPREDICTABLE>
    5a8c:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    5a90:	0000005e 	andeq	r0, r0, lr, asr r0
    5a94:	23005001 	movwcs	r5, #1
    5a98:	0000006f 	andeq	r0, r0, pc, rrx
    5a9c:	00000840 	andeq	r0, r0, r0, asr #16
    5aa0:	00011624 	andeq	r1, r1, r4, lsr #12
    5aa4:	1e000f00 	cdpne	15, 0, cr0, cr0, cr0, {0}
    5aa8:	00002297 	muleq	r0, r7, r2
    5aac:	08516f01 	ldmdaeq	r1, {r0, r8, r9, sl, fp, sp, lr}^
    5ab0:	03050000 	movweq	r0, #20480	; 0x5000
    5ab4:	08002759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, sp}
    5ab8:	00083004 	andeq	r3, r8, r4
    5abc:	006f2300 	rsbeq	r2, pc, r0, lsl #6
    5ac0:	08660000 	stmdaeq	r6!, {}^	; <UNPREDICTABLE>
    5ac4:	16240000 	strtne	r0, [r4], -r0
    5ac8:	03000001 	movweq	r0, #1
    5acc:	230b1e00 	movwcs	r1, #48640	; 0xbe00
    5ad0:	70010000 	andvc	r0, r1, r0
    5ad4:	00000877 	andeq	r0, r0, r7, ror r8
    5ad8:	27690305 	strbcs	r0, [r9, -r5, lsl #6]!
    5adc:	56040800 	strpl	r0, [r4], -r0, lsl #16
    5ae0:	00000008 	andeq	r0, r0, r8
    5ae4:	00001e7d 	andeq	r1, r0, sp, ror lr
    5ae8:	16b80004 	ldrtne	r0, [r8], r4
    5aec:	01040000 	mrseq	r0, (UNDEF: 4)
    5af0:	00000bf1 	strdeq	r0, [r0], -r1
    5af4:	0028df0c 	eoreq	sp, r8, ip, lsl #30
    5af8:	00051f00 	andeq	r1, r5, r0, lsl #30
    5afc:	00064000 	andeq	r4, r6, r0
    5b00:	00000000 	andeq	r0, r0, r0
    5b04:	0018d000 	andseq	sp, r8, r0
    5b08:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5b0c:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    5b10:	88050202 	stmdahi	r5, {r1, r9}
    5b14:	02000007 	andeq	r0, r0, #7
    5b18:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    5b1c:	75030000 	strvc	r0, [r3, #-0]
    5b20:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    5b24:	00004527 	andeq	r4, r0, r7, lsr #10
    5b28:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5b2c:	000008c3 	andeq	r0, r0, r3, asr #17
    5b30:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    5b34:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    5b38:	02000000 	andeq	r0, r0, #0
    5b3c:	0b600702 	bleq	180774c <__Stack_Size+0x180734c>
    5b40:	75030000 	strvc	r0, [r3, #-0]
    5b44:	29020038 	stmdbcs	r2, {r3, r4, r5}
    5b48:	00000068 	andeq	r0, r0, r8, rrx
    5b4c:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    5b50:	04000009 	streq	r0, [r0], #-9
    5b54:	000003c6 	andeq	r0, r0, r6, asr #7
    5b58:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    5b5c:	45050000 	strmi	r0, [r5, #-0]
    5b60:	04000000 	streq	r0, [r0], #-0
    5b64:	00000242 	andeq	r0, r0, r2, asr #4
    5b68:	008a3002 	addeq	r3, sl, r2
    5b6c:	57050000 	strpl	r0, [r5, -r0]
    5b70:	06000000 	streq	r0, [r0], -r0
    5b74:	00006801 	andeq	r6, r0, r1, lsl #16
    5b78:	a83c0200 	ldmdage	ip!, {r9}
    5b7c:	07000000 	streq	r0, [r0, -r0]
    5b80:	00001a30 	andeq	r1, r0, r0, lsr sl
    5b84:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    5b88:	00010054 	andeq	r0, r1, r4, asr r0
    5b8c:	00071704 	andeq	r1, r7, r4, lsl #14
    5b90:	8f3c0200 	svchi	0x003c0200
    5b94:	04000000 	streq	r0, [r0], #-0
    5b98:	00002088 	andeq	r2, r0, r8, lsl #1
    5b9c:	008f3c02 	addeq	r3, pc, r2, lsl #24
    5ba0:	01060000 	mrseq	r0, (UNDEF: 6)
    5ba4:	00000068 	andeq	r0, r0, r8, rrx
    5ba8:	00d73e02 	sbcseq	r3, r7, r2, lsl #28
    5bac:	ac070000 	stcge	0, cr0, [r7], {-0}
    5bb0:	00000004 	andeq	r0, r0, r4
    5bb4:	0008a007 	andeq	sl, r8, r7
    5bb8:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    5bbc:	000000a6 	andeq	r0, r0, r6, lsr #1
    5bc0:	00be3e02 	adcseq	r3, lr, r2, lsl #28
    5bc4:	04020000 	streq	r0, [r2], #-0
    5bc8:	0008ba07 	andeq	fp, r8, r7, lsl #20
    5bcc:	03500900 	cmpeq	r0, #0, 18
    5bd0:	02fa020b 	rscseq	r0, sl, #-1342177280	; 0xb0000000
    5bd4:	430a0000 	movwmi	r0, #40960	; 0xa000
    5bd8:	03003152 	movweq	r3, #338	; 0x152
    5bdc:	007f020d 	rsbseq	r0, pc, sp, lsl #4
    5be0:	0b000000 	bleq	5be8 <__Stack_Size+0x57e8>
    5be4:	00000742 	andeq	r0, r0, r2, asr #14
    5be8:	4c020e03 	stcmi	14, cr0, [r2], {3}
    5bec:	02000000 	andeq	r0, r0, #0
    5bf0:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
    5bf4:	020f0300 	andeq	r0, pc, #0, 6
    5bf8:	0000007f 	andeq	r0, r0, pc, ror r0
    5bfc:	074c0b04 	strbeq	r0, [ip, -r4, lsl #22]
    5c00:	10030000 	andne	r0, r3, r0
    5c04:	00004c02 	andeq	r4, r0, r2, lsl #24
    5c08:	1a0b0600 	bne	2c7410 <__Stack_Size+0x2c7010>
    5c0c:	03000005 	movweq	r0, #5
    5c10:	007f0211 	rsbseq	r0, pc, r1, lsl r2	; <UNPREDICTABLE>
    5c14:	0b080000 	bleq	205c1c <__Stack_Size+0x20581c>
    5c18:	00000756 	andeq	r0, r0, r6, asr r7
    5c1c:	4c021203 	sfmmi	f1, 4, [r2], {3}
    5c20:	0a000000 	beq	5c28 <__Stack_Size+0x5828>
    5c24:	0003e40b 	andeq	lr, r3, fp, lsl #8
    5c28:	02130300 	andseq	r0, r3, #0, 6
    5c2c:	0000007f 	andeq	r0, r0, pc, ror r0
    5c30:	07600b0c 	strbeq	r0, [r0, -ip, lsl #22]!
    5c34:	14030000 	strne	r0, [r3], #-0
    5c38:	00004c02 	andeq	r4, r0, r2, lsl #24
    5c3c:	530a0e00 	movwpl	r0, #44544	; 0xae00
    5c40:	15030052 	strne	r0, [r3, #-82]	; 0xffffffae
    5c44:	00007f02 	andeq	r7, r0, r2, lsl #30
    5c48:	6a0b1000 	bvs	2c9c50 <__Stack_Size+0x2c9850>
    5c4c:	03000007 	movweq	r0, #7
    5c50:	004c0216 	subeq	r0, ip, r6, lsl r2
    5c54:	0a120000 	beq	485c5c <__Stack_Size+0x48585c>
    5c58:	00524745 	subseq	r4, r2, r5, asr #14
    5c5c:	7f021703 	svcvc	0x00021703
    5c60:	14000000 	strne	r0, [r0], #-0
    5c64:	0007740b 	andeq	r7, r7, fp, lsl #8
    5c68:	02180300 	andseq	r0, r8, #0, 6
    5c6c:	0000004c 	andeq	r0, r0, ip, asr #32
    5c70:	02760b16 	rsbseq	r0, r6, #22528	; 0x5800
    5c74:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    5c78:	00007f02 	andeq	r7, r0, r2, lsl #30
    5c7c:	7e0b1800 	cdpvc	8, 0, cr1, cr11, cr0, {0}
    5c80:	03000007 	movweq	r0, #7
    5c84:	004c021a 	subeq	r0, ip, sl, lsl r2
    5c88:	0b1a0000 	bleq	685c90 <__Stack_Size+0x685890>
    5c8c:	0000027c 	andeq	r0, r0, ip, ror r2
    5c90:	7f021b03 	svcvc	0x00021b03
    5c94:	1c000000 	stcne	0, cr0, [r0], {-0}
    5c98:	000bd30b 	andeq	sp, fp, fp, lsl #6
    5c9c:	021c0300 	andseq	r0, ip, #0, 6
    5ca0:	0000004c 	andeq	r0, r0, ip, asr #32
    5ca4:	04940b1e 	ldreq	r0, [r4], #2846	; 0xb1e
    5ca8:	1d030000 	stcne	0, cr0, [r3, #-0]
    5cac:	00007f02 	andeq	r7, r0, r2, lsl #30
    5cb0:	920b2000 	andls	r2, fp, #0
    5cb4:	03000007 	movweq	r0, #7
    5cb8:	004c021e 	subeq	r0, ip, lr, lsl r2
    5cbc:	0a220000 	beq	885cc4 <__Stack_Size+0x8858c4>
    5cc0:	00544e43 	subseq	r4, r4, r3, asr #28
    5cc4:	7f021f03 	svcvc	0x00021f03
    5cc8:	24000000 	strcs	r0, [r0], #-0
    5ccc:	00079c0b 	andeq	r9, r7, fp, lsl #24
    5cd0:	02200300 	eoreq	r0, r0, #0, 6
    5cd4:	0000004c 	andeq	r0, r0, ip, asr #32
    5cd8:	53500a26 	cmppl	r0, #155648	; 0x26000
    5cdc:	21030043 	tstcs	r3, r3, asr #32
    5ce0:	00007f02 	andeq	r7, r0, r2, lsl #30
    5ce4:	fd0b2800 	stc2	8, cr2, [fp, #-0]
    5ce8:	03000009 	movweq	r0, #9
    5cec:	004c0222 	subeq	r0, ip, r2, lsr #4
    5cf0:	0a2a0000 	beq	a85cf8 <__Stack_Size+0xa858f8>
    5cf4:	00525241 	subseq	r5, r2, r1, asr #4
    5cf8:	7f022303 	svcvc	0x00022303
    5cfc:	2c000000 	stccs	0, cr0, [r0], {-0}
    5d00:	000a080b 	andeq	r0, sl, fp, lsl #16
    5d04:	02240300 	eoreq	r0, r4, #0, 6
    5d08:	0000004c 	andeq	r0, r0, ip, asr #32
    5d0c:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
    5d10:	25030052 	strcs	r0, [r3, #-82]	; 0xffffffae
    5d14:	00007f02 	andeq	r7, r0, r2, lsl #30
    5d18:	130b3000 	movwne	r3, #45056	; 0xb000
    5d1c:	0300000a 	movweq	r0, #10
    5d20:	004c0226 	subeq	r0, ip, r6, lsr #4
    5d24:	0b320000 	bleq	c85d2c <__Stack_Size+0xc8592c>
    5d28:	00000262 	andeq	r0, r0, r2, ror #4
    5d2c:	7f022703 	svcvc	0x00022703
    5d30:	34000000 	strcc	r0, [r0], #-0
    5d34:	000a1e0b 	andeq	r1, sl, fp, lsl #28
    5d38:	02280300 	eoreq	r0, r8, #0, 6
    5d3c:	0000004c 	andeq	r0, r0, ip, asr #32
    5d40:	02670b36 	rsbeq	r0, r7, #55296	; 0xd800
    5d44:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    5d48:	00007f02 	andeq	r7, r0, r2, lsl #30
    5d4c:	290b3800 	stmdbcs	fp, {fp, ip, sp}
    5d50:	0300000a 	movweq	r0, #10
    5d54:	004c022a 	subeq	r0, ip, sl, lsr #4
    5d58:	0b3a0000 	bleq	e85d60 <__Stack_Size+0xe85960>
    5d5c:	0000026c 	andeq	r0, r0, ip, ror #4
    5d60:	7f022b03 	svcvc	0x00022b03
    5d64:	3c000000 	stccc	0, cr0, [r0], {-0}
    5d68:	000a340b 	andeq	r3, sl, fp, lsl #8
    5d6c:	022c0300 	eoreq	r0, ip, #0, 6
    5d70:	0000004c 	andeq	r0, r0, ip, asr #32
    5d74:	02710b3e 	rsbseq	r0, r1, #63488	; 0xf800
    5d78:	2d030000 	stccs	0, cr0, [r3, #-0]
    5d7c:	00007f02 	andeq	r7, r0, r2, lsl #30
    5d80:	3f0b4000 	svccc	0x000b4000
    5d84:	0300000a 	movweq	r0, #10
    5d88:	004c022e 	subeq	r0, ip, lr, lsr #4
    5d8c:	0b420000 	bleq	1085d94 <__Stack_Size+0x1085994>
    5d90:	0000023d 	andeq	r0, r0, sp, lsr r2
    5d94:	7f022f03 	svcvc	0x00022f03
    5d98:	44000000 	strmi	r0, [r0], #-0
    5d9c:	000a4a0b 	andeq	r4, sl, fp, lsl #20
    5da0:	02300300 	eorseq	r0, r0, #0, 6
    5da4:	0000004c 	andeq	r0, r0, ip, asr #32
    5da8:	43440a46 	movtmi	r0, #19014	; 0x4a46
    5dac:	31030052 	qaddcc	r0, r2, r3
    5db0:	00007f02 	andeq	r7, r0, r2, lsl #30
    5db4:	550b4800 	strpl	r4, [fp, #-2048]	; 0xfffff800
    5db8:	0300000a 	movweq	r0, #10
    5dbc:	004c0232 	subeq	r0, ip, r2, lsr r2
    5dc0:	0b4a0000 	bleq	1285dc8 <__Stack_Size+0x12859c8>
    5dc4:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    5dc8:	7f023303 	svcvc	0x00023303
    5dcc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5dd0:	000a600b 	andeq	r6, sl, fp
    5dd4:	02340300 	eorseq	r0, r4, #0, 6
    5dd8:	0000004c 	andeq	r0, r0, ip, asr #32
    5ddc:	e60c004e 	str	r0, [ip], -lr, asr #32
    5de0:	03000001 	movweq	r0, #1
    5de4:	00e90235 	rsceq	r0, r9, r5, lsr r2
    5de8:	0a0d0000 	beq	345df0 <__Stack_Size+0x3459f0>
    5dec:	034b1b04 	movteq	r1, #47876	; 0xbb04
    5df0:	cb0e0000 	blgt	385df8 <__Stack_Size+0x3859f8>
    5df4:	04000003 	streq	r0, [r0], #-3
    5df8:	00004c1d 	andeq	r4, r0, sp, lsl ip
    5dfc:	f00e0000 			; <UNDEFINED> instruction: 0xf00e0000
    5e00:	04000004 	streq	r0, [r0], #-4
    5e04:	00004c1e 	andeq	r4, r0, lr, lsl ip
    5e08:	3a0e0200 	bcc	386610 <__Stack_Size+0x386210>
    5e0c:	04000001 	streq	r0, [r0], #-1
    5e10:	00004c1f 	andeq	r4, r0, pc, lsl ip
    5e14:	1d0e0400 	cfstrsne	mvf0, [lr, #-0]
    5e18:	04000002 	streq	r0, [r0], #-2
    5e1c:	00004c20 	andeq	r4, r0, r0, lsr #24
    5e20:	300e0600 	andcc	r0, lr, r0, lsl #12
    5e24:	04000004 	streq	r0, [r0], #-4
    5e28:	00005e21 	andeq	r5, r0, r1, lsr #28
    5e2c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    5e30:	00000b09 	andeq	r0, r0, r9, lsl #22
    5e34:	03062204 	movweq	r2, #25092	; 0x6204
    5e38:	100d0000 	andne	r0, sp, r0
    5e3c:	03bf2504 			; <UNDEFINED> instruction: 0x03bf2504
    5e40:	7f0e0000 	svcvc	0x000e0000
    5e44:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5e48:	00004c27 	andeq	r4, r0, r7, lsr #24
    5e4c:	150e0000 	strne	r0, [lr, #-0]
    5e50:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    5e54:	00004c28 	andeq	r4, r0, r8, lsr #24
    5e58:	500e0200 	andpl	r0, lr, r0, lsl #4
    5e5c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    5e60:	00004c29 	andeq	r4, r0, r9, lsr #24
    5e64:	f80e0400 			; <UNDEFINED> instruction: 0xf80e0400
    5e68:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    5e6c:	00004c2a 	andeq	r4, r0, sl, lsr #24
    5e70:	ce0e0600 	cfmadd32gt	mvax0, mvfx0, mvfx14, mvfx0
    5e74:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    5e78:	00004c2b 	andeq	r4, r0, fp, lsr #24
    5e7c:	1b0e0800 	blne	387e84 <__Stack_Size+0x387a84>
    5e80:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    5e84:	00004c2c 	andeq	r4, r0, ip, lsr #24
    5e88:	220e0a00 	andcs	r0, lr, #0, 20
    5e8c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    5e90:	00004c2d 	andeq	r4, r0, sp, lsr #24
    5e94:	4a0e0c00 	bmi	388e9c <__Stack_Size+0x388a9c>
    5e98:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    5e9c:	00004c2e 	andeq	r4, r0, lr, lsr #24
    5ea0:	04000e00 	streq	r0, [r0], #-3584	; 0xfffff200
    5ea4:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
    5ea8:	03562f04 	cmpeq	r6, #4, 30
    5eac:	0a0d0000 	beq	345eb4 <__Stack_Size+0x345ab4>
    5eb0:	040f3204 	streq	r3, [pc], #-516	; 5eb8 <__Stack_Size+0x5ab8>
    5eb4:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    5eb8:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    5ebc:	00004c34 	andeq	r4, r0, r4, lsr ip
    5ec0:	a70e0000 	strge	r0, [lr, -r0]
    5ec4:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5ec8:	00004c35 	andeq	r4, r0, r5, lsr ip
    5ecc:	370e0200 	strcc	r0, [lr, -r0, lsl #4]
    5ed0:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5ed4:	00004c36 	andeq	r4, r0, r6, lsr ip
    5ed8:	480e0400 	stmdami	lr, {sl}
    5edc:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    5ee0:	00004c37 	andeq	r4, r0, r7, lsr ip
    5ee4:	8f0e0600 	svchi	0x000e0600
    5ee8:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    5eec:	00004c38 	andeq	r4, r0, r8, lsr ip
    5ef0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    5ef4:	00002422 	andeq	r2, r0, r2, lsr #8
    5ef8:	03ca3904 	biceq	r3, sl, #4, 18	; 0x10000
    5efc:	0e0d0000 	cdpeq	0, 0, cr0, cr13, cr0, {0}
    5f00:	04773c04 	ldrbteq	r3, [r7], #-3076	; 0xfffff3fc
    5f04:	990e0000 	stmdbls	lr, {}	; <UNPREDICTABLE>
    5f08:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5f0c:	00004c3e 	andeq	r4, r0, lr, lsr ip
    5f10:	840e0000 	strhi	r0, [lr], #-0
    5f14:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    5f18:	00004c3f 	andeq	r4, r0, pc, lsr ip
    5f1c:	1b0e0200 	blne	386724 <__Stack_Size+0x386324>
    5f20:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    5f24:	00004c40 	andeq	r4, r0, r0, asr #24
    5f28:	b20e0400 	andlt	r0, lr, #0, 8
    5f2c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    5f30:	00004c41 	andeq	r4, r0, r1, asr #24
    5f34:	110e0600 	tstne	lr, r0, lsl #12
    5f38:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    5f3c:	00004c42 	andeq	r4, r0, r2, asr #24
    5f40:	c20e0800 	andgt	r0, lr, #0, 16
    5f44:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    5f48:	00004c43 	andeq	r4, r0, r3, asr #24
    5f4c:	2a0e0a00 	bcs	388754 <__Stack_Size+0x388354>
    5f50:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    5f54:	00004c44 	andeq	r4, r0, r4, asr #24
    5f58:	04000c00 	streq	r0, [r0], #-3072	; 0xfffff400
    5f5c:	0000279e 	muleq	r0, lr, r7
    5f60:	041a4504 	ldreq	r4, [sl], #-1284	; 0xfffffafc
    5f64:	c40f0000 	strgt	r0, [pc], #-0	; 5f6c <__Stack_Size+0x5b6c>
    5f68:	0100002c 	tsteq	r0, ip, lsr #32
    5f6c:	b4010518 	strlt	r0, [r1], #-1304	; 0xfffffae8
    5f70:	10000004 	andne	r0, r0, r4
    5f74:	0000254c 	andeq	r2, r0, ip, asr #10
    5f78:	b4051801 	strlt	r1, [r5], #-2049	; 0xfffff7ff
    5f7c:	10000004 	andne	r0, r0, r4
    5f80:	00002434 	andeq	r2, r0, r4, lsr r4
    5f84:	4c051801 	stcmi	8, cr1, [r5], {1}
    5f88:	11000000 	mrsne	r0, (UNDEF: 0)
    5f8c:	00002532 	andeq	r2, r0, r2, lsr r5
    5f90:	4c051a01 	stcmi	10, cr1, [r5], {1}
    5f94:	00000000 	andeq	r0, r0, r0
    5f98:	02fa0412 	rscseq	r0, sl, #301989888	; 0x12000000
    5f9c:	bd130000 	ldclt	0, cr0, [r3, #-0]
    5fa0:	01000025 	tsteq	r0, r5, lsr #32
    5fa4:	00000bed 	andeq	r0, r0, sp, ror #23
    5fa8:	00320000 	eorseq	r0, r2, r0
    5fac:	9c010000 	stcls	0, cr0, [r1], {-0}
    5fb0:	0000052f 	andeq	r0, r0, pc, lsr #10
    5fb4:	00254c14 	eoreq	r4, r5, r4, lsl ip
    5fb8:	0bed0100 	bleq	ffb463c0 <SCS_BASE+0x1fb383c0>
    5fbc:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    5fc0:	a7155001 	ldrge	r5, [r5, -r1]
    5fc4:	0100002a 	tsteq	r0, sl, lsr #32
    5fc8:	004c0bed 	subeq	r0, ip, sp, ror #23
    5fcc:	26cf0000 	strbcs	r0, [pc], r0
    5fd0:	37150000 	ldrcc	r0, [r5, -r0]
    5fd4:	0100002a 	tsteq	r0, sl, lsr #32
    5fd8:	004c0bed 	subeq	r0, ip, sp, ror #23
    5fdc:	26f00000 	ldrbtcs	r0, [r0], r0
    5fe0:	8f150000 	svchi	0x00150000
    5fe4:	0100002c 	tsteq	r0, ip, lsr #32
    5fe8:	004c0bee 	subeq	r0, ip, lr, ror #23
    5fec:	27110000 	ldrcs	r0, [r1, -r0]
    5ff0:	9a160000 	bls	585ff8 <__Stack_Size+0x585bf8>
    5ff4:	01000029 	tsteq	r0, r9, lsr #32
    5ff8:	004c0bf0 	strdeq	r0, [ip], #-176	; 0xffffff50
    5ffc:	27320000 	ldrcs	r0, [r2, -r0]!
    6000:	93160000 	tstls	r6, #0
    6004:	01000026 	tsteq	r0, r6, lsr #32
    6008:	004c0bf0 	strdeq	r0, [ip], #-176	; 0xffffff50
    600c:	276d0000 	strbcs	r0, [sp, -r0]!
    6010:	13000000 	movwne	r0, #0
    6014:	00002404 	andeq	r2, r0, r4, lsl #8
    6018:	000c1b01 	andeq	r1, ip, r1, lsl #22
    601c:	3a000000 	bcc	6024 <__Stack_Size+0x5c24>
    6020:	01000000 	mrseq	r0, (UNDEF: 0)
    6024:	0005b49c 	muleq	r5, ip, r4
    6028:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    602c:	1b010000 	blne	46034 <__Stack_Size+0x45c34>
    6030:	0004b40c 	andeq	fp, r4, ip, lsl #8
    6034:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6038:	00002aa7 	andeq	r2, r0, r7, lsr #21
    603c:	4c0c1b01 	stcmi	11, cr1, [ip], {1}
    6040:	97000000 	strls	r0, [r0, -r0]
    6044:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    6048:	00002a37 	andeq	r2, r0, r7, lsr sl
    604c:	4c0c1b01 	stcmi	11, cr1, [ip], {1}
    6050:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    6054:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    6058:	00002c8f 	andeq	r2, r0, pc, lsl #25
    605c:	4c0c1c01 	stcmi	12, cr1, [ip], {1}
    6060:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    6064:	16000027 	strne	r0, [r0], -r7, lsr #32
    6068:	0000299a 	muleq	r0, sl, r9
    606c:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6070:	fa000000 	blx	6078 <__Stack_Size+0x5c78>
    6074:	16000027 	strne	r0, [r0], -r7, lsr #32
    6078:	00002693 	muleq	r0, r3, r6
    607c:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6080:	24000000 	strcs	r0, [r0], #-0
    6084:	17000028 	strne	r0, [r0, -r8, lsr #32]
    6088:	00706d74 	rsbseq	r6, r0, r4, ror sp
    608c:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6090:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    6094:	00000028 	andeq	r0, r0, r8, lsr #32
    6098:	002bbf18 	eoreq	fp, fp, r8, lsl pc
    609c:	00860100 	addeq	r0, r6, r0, lsl #2
    60a0:	d4000000 	strle	r0, [r0], #-0
    60a4:	01000000 	mrseq	r0, (UNDEF: 0)
    60a8:	0006b09c 	muleq	r6, ip, r0
    60ac:	254c1900 	strbcs	r1, [ip, #-2304]	; 0xfffff700
    60b0:	86010000 	strhi	r0, [r1], -r0
    60b4:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    60b8:	00002881 	andeq	r2, r0, r1, lsl #17
    60bc:	0000001a 	andeq	r0, r0, sl, lsl r0
    60c0:	001e6800 	andseq	r6, lr, r0, lsl #16
    60c4:	0005f000 	andeq	pc, r5, r0
    60c8:	50011b00 	andpl	r1, r1, r0, lsl #22
    60cc:	011b3101 	tsteq	fp, r1, lsl #2
    60d0:	00310151 	eorseq	r0, r1, r1, asr r1
    60d4:	0000001a 	andeq	r0, r0, sl, lsl r0
    60d8:	001e7400 	andseq	r7, lr, r0, lsl #8
    60dc:	00060a00 	andeq	r0, r6, r0, lsl #20
    60e0:	50011b00 	andpl	r1, r1, r0, lsl #22
    60e4:	08000a03 	stmdaeq	r0, {r0, r1, r9, fp}
    60e8:	0151011b 	cmpeq	r1, fp, lsl r1
    60ec:	001a0031 	andseq	r0, sl, r1, lsr r0
    60f0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    60f4:	2200001e 	andcs	r0, r0, #30
    60f8:	1b000006 	blne	6118 <__Stack_Size+0x5d18>
    60fc:	32015001 	andcc	r5, r1, #1
    6100:	0151011b 	cmpeq	r1, fp, lsl r1
    6104:	001c0031 	andseq	r0, ip, r1, lsr r0
    6108:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    610c:	1a00001e 	bne	618c <__Stack_Size+0x5d8c>
    6110:	00000000 	andeq	r0, r0, r0
    6114:	00001e68 	andeq	r1, r0, r8, ror #28
    6118:	00000643 	andeq	r0, r0, r3, asr #12
    611c:	0150011b 	cmpeq	r0, fp, lsl r1
    6120:	51011b34 	tstpl	r1, r4, lsr fp
    6124:	1a003101 	bne	12530 <__Stack_Size+0x12130>
    6128:	00000000 	andeq	r0, r0, r0
    612c:	00001e68 	andeq	r1, r0, r8, ror #28
    6130:	0000065b 	andeq	r0, r0, fp, asr r6
    6134:	0150011b 	cmpeq	r0, fp, lsl r1
    6138:	51011b38 	tstpl	r1, r8, lsr fp
    613c:	1a003101 	bne	12548 <__Stack_Size+0x12148>
    6140:	00000000 	andeq	r0, r0, r0
    6144:	00001e68 	andeq	r1, r0, r8, ror #28
    6148:	00000673 	andeq	r0, r0, r3, ror r6
    614c:	0150011b 	cmpeq	r0, fp, lsl r1
    6150:	51011b40 	tstpl	r1, r0, asr #22
    6154:	1a003101 	bne	12560 <__Stack_Size+0x12160>
    6158:	00000000 	andeq	r0, r0, r0
    615c:	00001e68 	andeq	r1, r0, r8, ror #28
    6160:	0000068c 	andeq	r0, r0, ip, lsl #13
    6164:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    6168:	011b2008 	tsteq	fp, r8
    616c:	00310151 	eorseq	r0, r1, r1, asr r1
    6170:	0000001a 	andeq	r0, r0, sl, lsl r0
    6174:	001e7400 	andseq	r7, lr, r0, lsl #8
    6178:	0006a600 	andeq	sl, r6, r0, lsl #12
    617c:	50011b00 	andpl	r1, r1, r0, lsl #22
    6180:	20000a03 	andcs	r0, r0, r3, lsl #20
    6184:	0151011b 	cmpeq	r1, fp, lsl r1
    6188:	001c0031 	andseq	r0, ip, r1, lsr r0
    618c:	74000000 	strvc	r0, [r0], #-0
    6190:	0000001e 	andeq	r0, r0, lr, lsl r0
    6194:	000c8418 	andeq	r8, ip, r8, lsl r4
    6198:	b0c60100 	sbclt	r0, r6, r0, lsl #2
    619c:	3c080016 	stccc	0, cr0, [r8], {22}
    61a0:	01000000 	mrseq	r0, (UNDEF: 0)
    61a4:	0006e09c 	muleq	r6, ip, r0
    61a8:	254c1d00 	strbcs	r1, [ip, #-3328]	; 0xfffff300
    61ac:	c6010000 	strgt	r0, [r1], -r0
    61b0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    61b4:	ec1d5001 	ldc	0, cr5, [sp], {1}
    61b8:	01000026 	tsteq	r0, r6, lsr #32
    61bc:	0006e0c6 	andeq	lr, r6, r6, asr #1
    61c0:	00510100 	subseq	r0, r1, r0, lsl #2
    61c4:	034b0412 	movteq	r0, #46098	; 0xb412
    61c8:	e1180000 	tst	r8, r0
    61cc:	01000024 	tsteq	r0, r4, lsr #32
    61d0:	000000ed 	andeq	r0, r0, sp, ror #1
    61d4:	00007400 	andeq	r7, r0, r0, lsl #8
    61d8:	439c0100 	orrsmi	r0, ip, #0, 2
    61dc:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    61e0:	0000254c 	andeq	r2, r0, ip, asr #10
    61e4:	04b4ed01 	ldrteq	lr, [r4], #3329	; 0xd01
    61e8:	50010000 	andpl	r0, r1, r0
    61ec:	0029061d 	eoreq	r0, r9, sp, lsl r6
    61f0:	43ed0100 	mvnmi	r0, #0, 2
    61f4:	01000007 	tsteq	r0, r7
    61f8:	2a5f1e51 	bcs	17cdb44 <__Stack_Size+0x17cd744>
    61fc:	ef010000 	svc	0x00010000
    6200:	0000004c 	andeq	r0, r0, ip, asr #32
    6204:	0000295c 	andeq	r2, r0, ip, asr r9
    6208:	0026931e 	eoreq	r9, r6, lr, lsl r3
    620c:	4cef0100 	stfmie	f0, [pc]	; 6214 <__Stack_Size+0x5e14>
    6210:	7b000000 	blvc	6218 <__Stack_Size+0x5e18>
    6214:	1e000029 	cdpne	0, 0, cr0, cr0, cr9, {1}
    6218:	00002c62 	andeq	r2, r0, r2, ror #24
    621c:	004cef01 	subeq	lr, ip, r1, lsl #30
    6220:	29a50000 	stmibcs	r5!, {}	; <UNPREDICTABLE>
    6224:	12000000 	andne	r0, r0, #0
    6228:	0003bf04 	andeq	fp, r3, r4, lsl #30
    622c:	25991f00 	ldrcs	r1, [r9, #3840]	; 0xf00
    6230:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6234:	00000001 	andeq	r0, r0, r1
    6238:	00008800 	andeq	r8, r0, r0, lsl #16
    623c:	ac9c0100 	ldfges	f0, [ip], {0}
    6240:	14000007 	strne	r0, [r0], #-7
    6244:	0000254c 	andeq	r2, r0, ip, asr #10
    6248:	b4014801 	strlt	r4, [r1], #-2049	; 0xfffff7ff
    624c:	01000004 	tsteq	r0, r4
    6250:	29061450 	stmdbcs	r6, {r4, r6, sl, ip}
    6254:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6258:	00074301 	andeq	r4, r7, r1, lsl #6
    625c:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    6260:	00002a5f 	andeq	r2, r0, pc, asr sl
    6264:	4c014a01 	stcmi	10, cr4, [r1], {1}
    6268:	e1000000 	mrs	r0, (UNDEF: 0)
    626c:	16000029 	strne	r0, [r0], -r9, lsr #32
    6270:	00002693 	muleq	r0, r3, r6
    6274:	4c014a01 	stcmi	10, cr4, [r1], {1}
    6278:	00000000 	andeq	r0, r0, r0
    627c:	1600002a 	strne	r0, [r0], -sl, lsr #32
    6280:	00002c62 	andeq	r2, r0, r2, ror #24
    6284:	4c014a01 	stcmi	10, cr4, [r1], {1}
    6288:	61000000 	mrsvs	r0, (UNDEF: 0)
    628c:	0000002a 	andeq	r0, r0, sl, lsr #32
    6290:	0026251f 	eoreq	r2, r6, pc, lsl r5
    6294:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    6298:	00000000 	andeq	r0, r0, r0
    629c:	00000084 	andeq	r0, r0, r4, lsl #1
    62a0:	080f9c01 	stmdaeq	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    62a4:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    62a8:	01000025 	tsteq	r0, r5, lsr #32
    62ac:	04b401a4 	ldrteq	r0, [r4], #420	; 0x1a4
    62b0:	50010000 	andpl	r0, r1, r0
    62b4:	00290614 	eoreq	r0, r9, r4, lsl r6
    62b8:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    62bc:	00000743 	andeq	r0, r0, r3, asr #14
    62c0:	5f165101 	svcpl	0x00165101
    62c4:	0100002a 	tsteq	r0, sl, lsr #32
    62c8:	004c01a6 	subeq	r0, ip, r6, lsr #3
    62cc:	2a960000 	bcs	fe5862d4 <SCS_BASE+0x1e5782d4>
    62d0:	93160000 	tstls	r6, #0
    62d4:	01000026 	tsteq	r0, r6, lsr #32
    62d8:	004c01a6 	subeq	r0, ip, r6, lsr #3
    62dc:	2ab50000 	bcs	fed462e4 <SCS_BASE+0x1ed382e4>
    62e0:	62160000 	andsvs	r0, r6, #0
    62e4:	0100002c 	tsteq	r0, ip, lsr #32
    62e8:	004c01a6 	subeq	r0, ip, r6, lsr #3
    62ec:	2b160000 	blcs	5862f4 <__Stack_Size+0x585ef4>
    62f0:	1f000000 	svcne	0x00000000
    62f4:	000028bf 			; <UNDEFINED> instruction: 0x000028bf
    62f8:	00020001 	andeq	r0, r2, r1
    62fc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6300:	01000000 	mrseq	r0, (UNDEF: 0)
    6304:	0008749c 	muleq	r8, ip, r4
    6308:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    630c:	00010000 	andeq	r0, r1, r0
    6310:	0004b402 	andeq	fp, r4, r2, lsl #8
    6314:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6318:	00002906 	andeq	r2, r0, r6, lsl #18
    631c:	43020001 	movwmi	r0, #8193	; 0x2001
    6320:	4b000007 	blmi	6344 <__Stack_Size+0x5f44>
    6324:	1600002b 	strne	r0, [r0], -fp, lsr #32
    6328:	00002a5f 	andeq	r2, r0, pc, asr sl
    632c:	4c020201 	sfmmi	f0, 4, [r2], {1}
    6330:	6c000000 	stcvs	0, cr0, [r0], {-0}
    6334:	1600002b 	strne	r0, [r0], -fp, lsr #32
    6338:	00002693 	muleq	r0, r3, r6
    633c:	4c020201 	sfmmi	f0, 4, [r2], {1}
    6340:	8b000000 	blhi	6348 <__Stack_Size+0x5f48>
    6344:	1600002b 	strne	r0, [r0], -fp, lsr #32
    6348:	00002c62 	andeq	r2, r0, r2, ror #24
    634c:	4c020201 	sfmmi	f0, 4, [r2], {1}
    6350:	b5000000 	strlt	r0, [r0, #-0]
    6354:	0000002b 	andeq	r0, r0, fp, lsr #32
    6358:	002adc1f 	eoreq	sp, sl, pc, lsl ip
    635c:	02d10100 	sbcseq	r0, r1, #0, 2
    6360:	00000000 	andeq	r0, r0, r0
    6364:	00000022 	andeq	r0, r0, r2, lsr #32
    6368:	08a79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}
    636c:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6370:	01000025 	tsteq	r0, r5, lsr #32
    6374:	04b402d1 	ldrteq	r0, [r4], #721	; 0x2d1
    6378:	50010000 	andpl	r0, r1, r0
    637c:	00268014 	eoreq	r8, r6, r4, lsl r0
    6380:	02d10100 	sbcseq	r0, r1, #0, 2
    6384:	000008a7 	andeq	r0, r0, r7, lsr #17
    6388:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    638c:	00047704 	andeq	r7, r4, r4, lsl #14
    6390:	2b6c1f00 	blcs	1b0df98 <__Stack_Size+0x1b0db98>
    6394:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    6398:	00000002 	andeq	r0, r0, r2
    639c:	00001200 	andeq	r1, r0, r0, lsl #4
    63a0:	d29c0100 	addsle	r0, ip, #0, 2
    63a4:	14000008 	strne	r0, [r0], #-8
    63a8:	000026ec 	andeq	r2, r0, ip, ror #13
    63ac:	e002ee01 	and	lr, r2, r1, lsl #28
    63b0:	01000006 	tsteq	r0, r6
    63b4:	9d1f0050 	ldcls	0, cr0, [pc, #-320]	; 627c <__Stack_Size+0x5e7c>
    63b8:	01000024 	tsteq	r0, r4, lsr #32
    63bc:	00000300 	andeq	r0, r0, r0, lsl #6
    63c0:	00140000 	andseq	r0, r4, r0
    63c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    63c8:	000008f7 	strdeq	r0, [r0], -r7
    63cc:	00290614 	eoreq	r0, r9, r4, lsl r6
    63d0:	03000100 	movweq	r0, #256	; 0x100
    63d4:	00000743 	andeq	r0, r0, r3, asr #14
    63d8:	1f005001 	svcne	0x00005001
    63dc:	00002341 	andeq	r2, r0, r1, asr #6
    63e0:	00031501 	andeq	r1, r3, r1, lsl #10
    63e4:	10000000 	andne	r0, r0, r0
    63e8:	01000000 	mrseq	r0, (UNDEF: 0)
    63ec:	00091c9c 	muleq	r9, ip, ip
    63f0:	286d1400 	stmdacs	sp!, {sl, ip}^
    63f4:	15010000 	strne	r0, [r1, #-0]
    63f8:	00091c03 	andeq	r1, r9, r3, lsl #24
    63fc:	00500100 	subseq	r0, r0, r0, lsl #2
    6400:	040f0412 	streq	r0, [pc], #-1042	; 6408 <__Stack_Size+0x6008>
    6404:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    6408:	0100002b 	tsteq	r0, fp, lsr #32
    640c:	00000327 	andeq	r0, r0, r7, lsr #6
    6410:	00120000 	andseq	r0, r2, r0
    6414:	9c010000 	stcls	0, cr0, [r1], {-0}
    6418:	00000947 	andeq	r0, r0, r7, asr #18
    641c:	00268014 	eoreq	r8, r6, r4, lsl r0
    6420:	03270100 			; <UNDEFINED> instruction: 0x03270100
    6424:	000008a7 	andeq	r0, r0, r7, lsr #17
    6428:	1f005001 	svcne	0x00005001
    642c:	0000045b 	andeq	r0, r0, fp, asr r4
    6430:	ec033c01 	stc	12, cr3, [r3], {1}
    6434:	18080016 	stmdane	r8, {r1, r2, r4}
    6438:	01000000 	mrseq	r0, (UNDEF: 0)
    643c:	00097a9c 	muleq	r9, ip, sl
    6440:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6444:	3c010000 	stccc	0, cr0, [r1], {-0}
    6448:	0004b403 	andeq	fp, r4, r3, lsl #8
    644c:	14500100 	ldrbne	r0, [r0], #-256	; 0xffffff00
    6450:	000015e9 	andeq	r1, r0, r9, ror #11
    6454:	d7033c01 	strle	r3, [r3, -r1, lsl #24]
    6458:	01000000 	mrseq	r0, (UNDEF: 0)
    645c:	b61f0051 			; <UNDEFINED> instruction: 0xb61f0051
    6460:	0100002a 	tsteq	r0, sl, lsr #32
    6464:	00000357 	andeq	r0, r0, r7, asr r3
    6468:	001c0000 	andseq	r0, ip, r0
    646c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6470:	000009ad 	andeq	r0, r0, sp, lsr #19
    6474:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6478:	03570100 	cmpeq	r7, #0, 2
    647c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6480:	e9145001 	ldmdb	r4, {r0, ip, lr}
    6484:	01000015 	tsteq	r0, r5, lsl r0
    6488:	00d70357 	sbcseq	r0, r7, r7, asr r3
    648c:	51010000 	mrspl	r0, (UNDEF: 1)
    6490:	27c71f00 	strbcs	r1, [r7, r0, lsl #30]
    6494:	a0010000 	andge	r0, r1, r0
    6498:	00000003 	andeq	r0, r0, r3
    649c:	00000400 	andeq	r0, r0, r0, lsl #8
    64a0:	e09c0100 	adds	r0, ip, r0, lsl #2
    64a4:	14000009 	strne	r0, [r0], #-9
    64a8:	0000254c 	andeq	r2, r0, ip, asr #10
    64ac:	b403a001 	strlt	sl, [r3], #-1
    64b0:	01000004 	tsteq	r0, r4
    64b4:	298a1450 	stmibcs	sl, {r4, r6, sl, ip}
    64b8:	a0010000 	andge	r0, r1, r0
    64bc:	00004c03 	andeq	r4, r0, r3, lsl #24
    64c0:	00510100 	subseq	r0, r1, r0, lsl #2
    64c4:	00265d1f 	eoreq	r5, r6, pc, lsl sp
    64c8:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    64cc:	00000000 	andeq	r0, r0, r0
    64d0:	00000008 	andeq	r0, r0, r8
    64d4:	0a239c01 	beq	8ed4e0 <__Stack_Size+0x8ed0e0>
    64d8:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    64dc:	01000025 	tsteq	r0, r5, lsr #32
    64e0:	04b403bf 	ldrteq	r0, [r4], #959	; 0x3bf
    64e4:	50010000 	andpl	r0, r1, r0
    64e8:	00279214 	eoreq	r9, r7, r4, lsl r2
    64ec:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    64f0:	0000004c 	andeq	r0, r0, ip, asr #32
    64f4:	02155101 	andseq	r5, r5, #1073741824	; 0x40000000
    64f8:	01000026 	tsteq	r0, r6, lsr #32
    64fc:	004c03bf 	strheq	r0, [ip], #-63	; 0xffffffc1
    6500:	2bdf0000 	blcs	ff7c6508 <SCS_BASE+0x1f7b8508>
    6504:	1f000000 	svcne	0x00000000
    6508:	00002b61 	andeq	r2, r0, r1, ror #22
    650c:	0403dc01 	streq	sp, [r3], #-3073	; 0xfffff3ff
    6510:	12080017 	andne	r0, r8, #23
    6514:	01000000 	mrseq	r0, (UNDEF: 0)
    6518:	000a669c 	muleq	sl, ip, r6
    651c:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6520:	dc010000 	stcle	0, cr0, [r1], {-0}
    6524:	0004b403 	andeq	fp, r4, r3, lsl #8
    6528:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    652c:	00002c9c 	muleq	r0, ip, ip
    6530:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    6534:	00000000 	andeq	r0, r0, r0
    6538:	1400002c 	strne	r0, [r0], #-44	; 0xffffffd4
    653c:	000015e9 	andeq	r1, r0, r9, ror #11
    6540:	d703dc01 	strle	sp, [r3, -r1, lsl #24]
    6544:	01000000 	mrseq	r0, (UNDEF: 0)
    6548:	ef1f0052 	svc	0x001f0052
    654c:	01000029 	tsteq	r0, r9, lsr #32
    6550:	000003f8 	strdeq	r0, [r0], -r8
    6554:	000e0000 	andeq	r0, lr, r0
    6558:	9c010000 	stcls	0, cr0, [r1], {-0}
    655c:	00000a8b 	andeq	r0, r0, fp, lsl #21
    6560:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6564:	03f80100 	mvnseq	r0, #0, 2
    6568:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    656c:	1f005001 	svcne	0x00005001
    6570:	00002641 	andeq	r2, r0, r1, asr #12
    6574:	00040e01 	andeq	r0, r4, r1, lsl #28
    6578:	1a000000 	bne	6580 <__Stack_Size+0x6180>
    657c:	01000000 	mrseq	r0, (UNDEF: 0)
    6580:	000af69c 	muleq	sl, ip, r6
    6584:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6588:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    658c:	0004b404 	andeq	fp, r4, r4, lsl #8
    6590:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6594:	00002434 	andeq	r2, r0, r4, lsr r4
    6598:	4c040e01 	stcmi	14, cr0, [r4], {1}
    659c:	3a000000 	bcc	65a4 <__Stack_Size+0x61a4>
    65a0:	2000002c 	andcs	r0, r0, ip, lsr #32
    65a4:	00000482 	andeq	r0, r0, r2, lsl #9
    65a8:	00000000 	andeq	r0, r0, r0
    65ac:	0000000e 	andeq	r0, r0, lr
    65b0:	21041501 	tstcs	r4, r1, lsl #10
    65b4:	0000049b 	muleq	r0, fp, r4
    65b8:	00002c5b 	andeq	r2, r0, fp, asr ip
    65bc:	00048f21 	andeq	r8, r4, r1, lsr #30
    65c0:	002c7c00 	eoreq	r7, ip, r0, lsl #24
    65c4:	00002200 	andeq	r2, r0, r0, lsl #4
    65c8:	000e0000 	andeq	r0, lr, r0
    65cc:	a7230000 	strge	r0, [r3, -r0]!
    65d0:	8f000004 	svchi	0x00000004
    65d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    65d8:	fb1f0000 	blx	7c65e2 <__Stack_Size+0x7c61e2>
    65dc:	0100002a 	tsteq	r0, sl, lsr #32
    65e0:	0000042d 	andeq	r0, r0, sp, lsr #8
    65e4:	00340000 	eorseq	r0, r4, r0
    65e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    65ec:	00000ba9 	andeq	r0, r0, r9, lsr #23
    65f0:	00254c15 	eoreq	r4, r5, r5, lsl ip
    65f4:	042d0100 	strteq	r0, [sp], #-256	; 0xffffff00
    65f8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    65fc:	00002cc4 	andeq	r2, r0, r4, asr #25
    6600:	00282b15 	eoreq	r2, r8, r5, lsl fp
    6604:	042d0100 	strteq	r0, [sp], #-256	; 0xffffff00
    6608:	0000004c 	andeq	r0, r0, ip, asr #32
    660c:	00002cf8 	strdeq	r2, [r0], -r8
    6610:	002aa715 	eoreq	sl, sl, r5, lsl r7
    6614:	042e0100 	strteq	r0, [lr], #-256	; 0xffffff00
    6618:	0000004c 	andeq	r0, r0, ip, asr #32
    661c:	00002d19 	andeq	r2, r0, r9, lsl sp
    6620:	002c9315 	eoreq	r9, ip, r5, lsl r3
    6624:	042e0100 	strteq	r0, [lr], #-256	; 0xffffff00
    6628:	0000004c 	andeq	r0, r0, ip, asr #32
    662c:	00002d3a 	andeq	r2, r0, sl, lsr sp
    6630:	00048224 	andeq	r8, r4, r4, lsr #4
    6634:	00000000 	andeq	r0, r0, r0
    6638:	00000e00 	andeq	r0, r0, r0, lsl #28
    663c:	04410100 	strbeq	r0, [r1], #-256	; 0xffffff00
    6640:	00000b86 	andeq	r0, r0, r6, lsl #23
    6644:	00049b21 	andeq	r9, r4, r1, lsr #22
    6648:	002d7400 	eoreq	r7, sp, r0, lsl #8
    664c:	048f2100 	streq	r2, [pc], #256	; 6654 <__Stack_Size+0x6254>
    6650:	2d870000 	stccs	0, cr0, [r7]
    6654:	00220000 	eoreq	r0, r2, r0
    6658:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    665c:	23000000 	movwcs	r0, #0
    6660:	000004a7 	andeq	r0, r0, r7, lsr #9
    6664:	00002d9a 	muleq	r0, sl, sp
    6668:	001a0000 	andseq	r0, sl, r0
    666c:	2f000000 	svccs	0x00000000
    6670:	9f000005 	svcls	0x00000005
    6674:	1b00000b 	blne	66a8 <__Stack_Size+0x62a8>
    6678:	74025001 	strvc	r5, [r2], #-1
    667c:	52011b00 	andpl	r1, r1, #0, 22
    6680:	25003101 	strcs	r3, [r0, #-257]	; 0xfffffeff
    6684:	00000000 	andeq	r0, r0, r0
    6688:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    668c:	295b1f00 	ldmdbcs	fp, {r8, r9, sl, fp, ip}^
    6690:	b1010000 	mrslt	r0, (UNDEF: 1)
    6694:	00000004 	andeq	r0, r0, r4
    6698:	00001400 	andeq	r1, r0, r0, lsl #8
    669c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    66a0:	1400000c 	strne	r0, [r0], #-12
    66a4:	0000254c 	andeq	r2, r0, ip, asr #10
    66a8:	b404b101 	strlt	fp, [r4], #-257	; 0xfffffeff
    66ac:	01000004 	tsteq	r0, r4
    66b0:	244b1550 	strbcs	r1, [fp], #-1360	; 0xfffffab0
    66b4:	b1010000 	mrslt	r0, (UNDEF: 1)
    66b8:	00004c04 	andeq	r4, r0, r4, lsl #24
    66bc:	002dc400 	eoreq	ip, sp, r0, lsl #8
    66c0:	2c301400 	cfldrscs	mvf1, [r0], #-0
    66c4:	b1010000 	mrslt	r0, (UNDEF: 1)
    66c8:	00004c04 	andeq	r4, r0, r4, lsl #24
    66cc:	15520100 	ldrbne	r0, [r2, #-256]	; 0xffffff00
    66d0:	00002917 	andeq	r2, r0, r7, lsl r9
    66d4:	4c04b201 	sfmmi	f3, 1, [r4], {1}
    66d8:	e5000000 	str	r0, [r0, #-0]
    66dc:	1600002d 	strne	r0, [r0], -sp, lsr #32
    66e0:	00002532 	andeq	r2, r0, r2, lsr r5
    66e4:	4c04b401 	cfstrsmi	mvf11, [r4], {1}
    66e8:	06000000 	streq	r0, [r0], -r0
    66ec:	0000002e 	andeq	r0, r0, lr, lsr #32
    66f0:	002a471f 	eoreq	r4, sl, pc, lsl r7
    66f4:	045b0100 	ldrbeq	r0, [fp], #-256	; 0xffffff00
    66f8:	00000000 	andeq	r0, r0, r0
    66fc:	00000018 	andeq	r0, r0, r8, lsl r0
    6700:	0c849c01 	stceq	12, cr9, [r4], {1}
    6704:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    6708:	01000025 	tsteq	r0, r5, lsr #32
    670c:	04b4045b 	ldrteq	r0, [r4], #1115	; 0x45b
    6710:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
    6714:	4b150000 	blmi	54671c <__Stack_Size+0x54631c>
    6718:	01000024 	tsteq	r0, r4, lsr #32
    671c:	004c045b 	subeq	r0, ip, fp, asr r4
    6720:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
    6724:	30150000 	andscc	r0, r5, r0
    6728:	0100002c 	tsteq	r0, ip, lsr #32
    672c:	004c045b 	subeq	r0, ip, fp, asr r4
    6730:	2e770000 	cdpcs	0, 7, cr0, cr7, cr0, {0}
    6734:	17150000 	ldrne	r0, [r5, -r0]
    6738:	01000029 	tsteq	r0, r9, lsr #32
    673c:	004c045c 	subeq	r0, ip, ip, asr r4
    6740:	2e980000 	cdpcs	0, 9, cr0, cr8, cr0, {0}
    6744:	32160000 	andscc	r0, r6, #0
    6748:	01000025 	tsteq	r0, r5, lsr #32
    674c:	004c045e 	subeq	r0, ip, lr, asr r4
    6750:	2eb90000 	cdpcs	0, 11, cr0, cr9, cr0, {0}
    6754:	00260000 	eoreq	r0, r6, r0
    6758:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    675c:	1b00000b 	blne	6790 <__Stack_Size+0x6390>
    6760:	f3035001 	vhadd.u8	d5, d3, d1
    6764:	00005001 	andeq	r5, r0, r1
    6768:	0025a51f 	eoreq	sl, r5, pc, lsl r5
    676c:	048d0100 	streq	r0, [sp], #256	; 0x100
    6770:	00000000 	andeq	r0, r0, r0
    6774:	00000012 	andeq	r0, r0, r2, lsl r0
    6778:	0cec9c01 	stcleq	12, cr9, [ip], #4
    677c:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    6780:	01000025 	tsteq	r0, r5, lsr #32
    6784:	04b4048d 	ldrteq	r0, [r4], #1165	; 0x48d
    6788:	2ef60000 	cdpcs	0, 15, cr0, cr6, cr0, {0}
    678c:	4b150000 	blmi	546794 <__Stack_Size+0x546394>
    6790:	01000024 	tsteq	r0, r4, lsr #32
    6794:	004c048d 	subeq	r0, ip, sp, lsl #9
    6798:	2f170000 	svccs	0x00170000
    679c:	30150000 	andscc	r0, r5, r0
    67a0:	0100002c 	tsteq	r0, ip, lsr #32
    67a4:	004c048e 	subeq	r0, ip, lr, lsl #9
    67a8:	2f380000 	svccs	0x00380000
    67ac:	17150000 	ldrne	r0, [r5, -r0]
    67b0:	01000029 	tsteq	r0, r9, lsr #32
    67b4:	004c048e 	subeq	r0, ip, lr, lsl #9
    67b8:	2f590000 	svccs	0x00590000
    67bc:	00260000 	eoreq	r0, r6, r0
    67c0:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    67c4:	1b00000b 	blne	67f8 <__Stack_Size+0x63f8>
    67c8:	f3035001 	vhadd.u8	d5, d3, d1
    67cc:	00005001 	andeq	r5, r0, r1
    67d0:	000bdd1f 	andeq	sp, fp, pc, lsl sp
    67d4:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    67d8:	0800171a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip}
    67dc:	00000006 	andeq	r0, r0, r6
    67e0:	0d2d9c01 	stceq	12, cr9, [sp, #-4]!
    67e4:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    67e8:	01000025 	tsteq	r0, r5, lsr #32
    67ec:	04b404d6 	ldrteq	r0, [r4], #1238	; 0x4d6
    67f0:	50010000 	andpl	r0, r1, r0
    67f4:	002a1114 	eoreq	r1, sl, r4, lsl r1
    67f8:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    67fc:	0000004c 	andeq	r0, r0, ip, asr #32
    6800:	64145101 	ldrvs	r5, [r4], #-257	; 0xfffffeff
    6804:	01000027 	tsteq	r0, r7, lsr #32
    6808:	004c04d6 	ldrdeq	r0, [ip], #-70	; 0xffffffba
    680c:	52010000 	andpl	r0, r1, #0
    6810:	28891f00 	stmcs	r9, {r8, r9, sl, fp, ip}
    6814:	f2010000 	vhadd.s8	d0, d1, d0
    6818:	00000004 	andeq	r0, r0, r4
    681c:	00001000 	andeq	r1, r0, r0
    6820:	729c0100 	addsvc	r0, ip, #0, 2
    6824:	1400000d 	strne	r0, [r0], #-13
    6828:	0000254c 	andeq	r2, r0, ip, asr #10
    682c:	b404f201 	strlt	pc, [r4], #-513	; 0xfffffdff
    6830:	01000004 	tsteq	r0, r4
    6834:	04f01550 	ldrbteq	r1, [r0], #1360	; 0x550
    6838:	f2010000 	vhadd.s8	d0, d1, d0
    683c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6840:	002f7a00 	eoreq	r7, pc, r0, lsl #20
    6844:	25921600 	ldrcs	r1, [r2, #1536]	; 0x600
    6848:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    684c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6850:	002f9b00 	eoreq	r9, pc, r0, lsl #22
    6854:	82270000 	eorhi	r0, r7, #0
    6858:	00000004 	andeq	r0, r0, r4
    685c:	10000000 	andne	r0, r0, r0
    6860:	01000000 	mrseq	r0, (UNDEF: 0)
    6864:	000d9f9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    6868:	048f2800 	streq	r2, [pc], #2048	; 6870 <__Stack_Size+0x6470>
    686c:	50010000 	andpl	r0, r1, r0
    6870:	00049b21 	andeq	r9, r4, r1, lsr #22
    6874:	002fd000 	eoreq	sp, pc, r0
    6878:	04a72300 	strteq	r2, [r7], #768	; 0x300
    687c:	2ff10000 	svccs	0x00f10000
    6880:	1f000000 	svcne	0x00000000
    6884:	000027ed 	andeq	r2, r0, sp, ror #15
    6888:	00054501 	andeq	r4, r5, r1, lsl #10
    688c:	3c000000 	stccc	0, cr0, [r0], {-0}
    6890:	01000000 	mrseq	r0, (UNDEF: 0)
    6894:	000e249c 	muleq	lr, ip, r4
    6898:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    689c:	45010000 	strmi	r0, [r1, #-0]
    68a0:	0004b405 	andeq	fp, r4, r5, lsl #8
    68a4:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    68a8:	00002738 	andeq	r2, r0, r8, lsr r7
    68ac:	4c054501 	cfstr32mi	mvfx4, [r5], {1}
    68b0:	26000000 	strcs	r0, [r0], -r0
    68b4:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    68b8:	00002502 	andeq	r2, r0, r2, lsl #10
    68bc:	4c054601 	stcmi	6, cr4, [r5], {1}
    68c0:	47000000 	strmi	r0, [r0, -r0]
    68c4:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    68c8:	00002b83 	andeq	r2, r0, r3, lsl #23
    68cc:	4c054601 	stcmi	6, cr4, [r5], {1}
    68d0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    68d4:	16000030 			; <UNDEFINED> instruction: 0x16000030
    68d8:	00002532 	andeq	r2, r0, r2, lsr r5
    68dc:	4c054801 	stcmi	8, cr4, [r5], {1}
    68e0:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    68e4:	16000030 			; <UNDEFINED> instruction: 0x16000030
    68e8:	0000299a 	muleq	r0, sl, r9
    68ec:	4c054901 	stcmi	9, cr4, [r5], {1}
    68f0:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    68f4:	16000030 			; <UNDEFINED> instruction: 0x16000030
    68f8:	00002693 	muleq	r0, r3, r6
    68fc:	4c054a01 	stcmi	10, cr4, [r5], {1}
    6900:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    6904:	00000030 	andeq	r0, r0, r0, lsr r0
    6908:	002b931f 	eoreq	r9, fp, pc, lsl r3
    690c:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 6814 <__Stack_Size+0x6414>
    6910:	00000000 	andeq	r0, r0, r0
    6914:	00000010 	andeq	r0, r0, r0, lsl r0
    6918:	0e699c01 	cdpeq	12, 6, cr9, cr9, cr1, {0}
    691c:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6920:	01000025 	tsteq	r0, r5, lsr #32
    6924:	04b4057f 	ldrteq	r0, [r4], #1407	; 0x57f
    6928:	50010000 	andpl	r0, r1, r0
    692c:	00255115 	eoreq	r5, r5, r5, lsl r1
    6930:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 6838 <__Stack_Size+0x6438>
    6934:	0000004c 	andeq	r0, r0, ip, asr #32
    6938:	00003112 	andeq	r3, r0, r2, lsl r1
    693c:	00299a16 	eoreq	r9, r9, r6, lsl sl
    6940:	05810100 	streq	r0, [r1, #256]	; 0x100
    6944:	0000004c 	andeq	r0, r0, ip, asr #32
    6948:	00003133 	andeq	r3, r0, r3, lsr r1
    694c:	24891f00 	strcs	r1, [r9], #3840	; 0xf00
    6950:	a1010000 	mrsge	r0, (UNDEF: 1)
    6954:	00000005 	andeq	r0, r0, r5
    6958:	00001400 	andeq	r1, r0, r0, lsl #8
    695c:	ae9c0100 	fmlgee	f0, f4, f0
    6960:	1400000e 	strne	r0, [r0], #-14
    6964:	0000254c 	andeq	r2, r0, ip, asr #10
    6968:	b405a101 	strlt	sl, [r5], #-257	; 0xfffffeff
    696c:	01000004 	tsteq	r0, r4
    6970:	25511550 	ldrbcs	r1, [r1, #-1360]	; 0xfffffab0
    6974:	a1010000 	mrsge	r0, (UNDEF: 1)
    6978:	00004c05 	andeq	r4, r0, r5, lsl #24
    697c:	00316800 	eorseq	r6, r1, r0, lsl #16
    6980:	299a1600 	ldmibcs	sl, {r9, sl, ip}
    6984:	a3010000 	movwge	r0, #4096	; 0x1000
    6988:	00004c05 	andeq	r4, r0, r5, lsl #24
    698c:	00318900 	eorseq	r8, r1, r0, lsl #18
    6990:	701f0000 	andsvc	r0, pc, r0
    6994:	0100002c 	tsteq	r0, ip, lsr #32
    6998:	000005c3 	andeq	r0, r0, r3, asr #11
    699c:	00100000 	andseq	r0, r0, r0
    69a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    69a4:	00000ef3 	strdeq	r0, [r0], -r3
    69a8:	00254c14 	eoreq	r4, r5, r4, lsl ip
    69ac:	05c30100 	strbeq	r0, [r3, #256]	; 0x100
    69b0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    69b4:	51155001 	tstpl	r5, r1
    69b8:	01000025 	tsteq	r0, r5, lsr #32
    69bc:	004c05c3 	subeq	r0, ip, r3, asr #11
    69c0:	31be0000 			; <UNDEFINED> instruction: 0x31be0000
    69c4:	a3160000 	tstge	r6, #0
    69c8:	01000029 	tsteq	r0, r9, lsr #32
    69cc:	004c05c5 	subeq	r0, ip, r5, asr #11
    69d0:	31df0000 	bicscc	r0, pc, r0
    69d4:	1f000000 	svcne	0x00000000
    69d8:	000028cb 	andeq	r2, r0, fp, asr #17
    69dc:	0005e501 	andeq	lr, r5, r1, lsl #10
    69e0:	14000000 	strne	r0, [r0], #-0
    69e4:	01000000 	mrseq	r0, (UNDEF: 0)
    69e8:	000f389c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    69ec:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    69f0:	e5010000 	str	r0, [r1, #-0]
    69f4:	0004b405 	andeq	fp, r4, r5, lsl #8
    69f8:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    69fc:	00002551 	andeq	r2, r0, r1, asr r5
    6a00:	4c05e501 	cfstr32mi	mvfx14, [r5], {1}
    6a04:	14000000 	strne	r0, [r0], #-0
    6a08:	16000032 			; <UNDEFINED> instruction: 0x16000032
    6a0c:	000029a3 	andeq	r2, r0, r3, lsr #19
    6a10:	4c05e701 	stcmi	7, cr14, [r5], {1}
    6a14:	35000000 	strcc	r0, [r0, #-0]
    6a18:	00000032 	andeq	r0, r0, r2, lsr r0
    6a1c:	00266b1f 	eoreq	r6, r6, pc, lsl fp
    6a20:	06020100 	streq	r0, [r2], -r0, lsl #2
    6a24:	00000000 	andeq	r0, r0, r0
    6a28:	00000018 	andeq	r0, r0, r8, lsl r0
    6a2c:	0f6b9c01 	svceq	0x006b9c01
    6a30:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6a34:	01000025 	tsteq	r0, r5, lsr #32
    6a38:	04b40602 	ldrteq	r0, [r4], #1538	; 0x602
    6a3c:	50010000 	andpl	r0, r1, r0
    6a40:	0015e914 	andseq	lr, r5, r4, lsl r9
    6a44:	06020100 	streq	r0, [r2], -r0, lsl #2
    6a48:	000000d7 	ldrdeq	r0, [r0], -r7
    6a4c:	1f005101 	svcne	0x00005101
    6a50:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    6a54:	00061d01 	andeq	r1, r6, r1, lsl #26
    6a58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    6a60:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    6a64:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6a68:	1d010000 	stcne	0, cr0, [r1, #-0]
    6a6c:	0004b406 	andeq	fp, r4, r6, lsl #8
    6a70:	14500100 	ldrbne	r0, [r0], #-256	; 0xffffff00
    6a74:	000015e9 	andeq	r1, r0, r9, ror #11
    6a78:	d7061d01 	strle	r1, [r6, -r1, lsl #26]
    6a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    6a80:	c61f0051 			; <UNDEFINED> instruction: 0xc61f0051
    6a84:	01000024 	tsteq	r0, r4, lsr #32
    6a88:	00000639 	andeq	r0, r0, r9, lsr r6
    6a8c:	00180000 	andseq	r0, r8, r0
    6a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    6a94:	00000fd1 	ldrdeq	r0, [r0], -r1
    6a98:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6a9c:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    6aa0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6aa4:	e9145001 	ldmdb	r4, {r0, ip, lr}
    6aa8:	01000015 	tsteq	r0, r5, lsl r0
    6aac:	00d70639 	sbcseq	r0, r7, r9, lsr r6
    6ab0:	51010000 	mrspl	r0, (UNDEF: 1)
    6ab4:	29c61f00 	stmibcs	r6, {r8, r9, sl, fp, ip}^
    6ab8:	55010000 	strpl	r0, [r1, #-0]
    6abc:	00000006 	andeq	r0, r0, r6
    6ac0:	00001800 	andeq	r1, r0, r0, lsl #16
    6ac4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    6ac8:	14000010 	strne	r0, [r0], #-16
    6acc:	0000254c 	andeq	r2, r0, ip, asr #10
    6ad0:	b4065501 	strlt	r5, [r6], #-1281	; 0xfffffaff
    6ad4:	01000004 	tsteq	r0, r4
    6ad8:	15e91450 	strbne	r1, [r9, #1104]!	; 0x450
    6adc:	55010000 	strpl	r0, [r1, #-0]
    6ae0:	0000d706 	andeq	sp, r0, r6, lsl #14
    6ae4:	00510100 	subseq	r0, r1, r0, lsl #2
    6ae8:	0024ed1f 	eoreq	lr, r4, pc, lsl sp
    6aec:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    6af0:	00000000 	andeq	r0, r0, r0
    6af4:	00000010 	andeq	r0, r0, r0, lsl r0
    6af8:	10499c01 	subne	r9, r9, r1, lsl #24
    6afc:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6b00:	01000025 	tsteq	r0, r5, lsr #32
    6b04:	04b40674 	ldrteq	r0, [r4], #1652	; 0x674
    6b08:	50010000 	andpl	r0, r1, r0
    6b0c:	0023ae15 	eoreq	sl, r3, r5, lsl lr
    6b10:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    6b14:	0000004c 	andeq	r0, r0, ip, asr #32
    6b18:	0000326a 	andeq	r3, r0, sl, ror #4
    6b1c:	00299a16 	eoreq	r9, r9, r6, lsl sl
    6b20:	06760100 	ldrbteq	r0, [r6], -r0, lsl #2
    6b24:	0000004c 	andeq	r0, r0, ip, asr #32
    6b28:	0000328b 	andeq	r3, r0, fp, lsl #5
    6b2c:	24741f00 	ldrbtcs	r1, [r4], #-3840	; 0xfffff100
    6b30:	95010000 	strls	r0, [r1, #-0]
    6b34:	00000006 	andeq	r0, r0, r6
    6b38:	00001400 	andeq	r1, r0, r0, lsl #8
    6b3c:	8e9c0100 	fmlhie	f0, f4, f0
    6b40:	14000010 	strne	r0, [r0], #-16
    6b44:	0000254c 	andeq	r2, r0, ip, asr #10
    6b48:	b4069501 	strlt	r9, [r6], #-1281	; 0xfffffaff
    6b4c:	01000004 	tsteq	r0, r4
    6b50:	23ae1550 			; <UNDEFINED> instruction: 0x23ae1550
    6b54:	95010000 	strls	r0, [r1, #-0]
    6b58:	00004c06 	andeq	r4, r0, r6, lsl #24
    6b5c:	0032c000 	eorseq	ip, r2, r0
    6b60:	299a1600 	ldmibcs	sl, {r9, sl, ip}
    6b64:	97010000 	strls	r0, [r1, -r0]
    6b68:	00004c06 	andeq	r4, r0, r6, lsl #24
    6b6c:	0032e100 	eorseq	lr, r2, r0, lsl #2
    6b70:	dd1f0000 	ldcle	0, cr0, [pc, #-0]	; 6b78 <__Stack_Size+0x6778>
    6b74:	01000023 	tsteq	r0, r3, lsr #32
    6b78:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    6b7c:	00100000 	andseq	r0, r0, r0
    6b80:	9c010000 	stcls	0, cr0, [r1], {-0}
    6b84:	000010d3 	ldrdeq	r1, [r0], -r3
    6b88:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6b8c:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    6b90:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6b94:	ae155001 	cdpge	0, 1, cr5, cr5, cr1, {0}
    6b98:	01000023 	tsteq	r0, r3, lsr #32
    6b9c:	004c06b6 	strheq	r0, [ip], #-102	; 0xffffff9a
    6ba0:	33160000 	tstcc	r6, #0
    6ba4:	a3160000 	tstge	r6, #0
    6ba8:	01000029 	tsteq	r0, r9, lsr #32
    6bac:	004c06b8 	strheq	r0, [ip], #-104	; 0xffffff98
    6bb0:	33370000 	teqcc	r7, #0
    6bb4:	1f000000 	svcne	0x00000000
    6bb8:	00002352 	andeq	r2, r0, r2, asr r3
    6bbc:	0006d701 	andeq	sp, r6, r1, lsl #14
    6bc0:	14000000 	strne	r0, [r0], #-0
    6bc4:	01000000 	mrseq	r0, (UNDEF: 0)
    6bc8:	0011189c 	mulseq	r1, ip, r8
    6bcc:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6bd0:	d7010000 	strle	r0, [r1, -r0]
    6bd4:	0004b406 	andeq	fp, r4, r6, lsl #8
    6bd8:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6bdc:	000023ae 	andeq	r2, r0, lr, lsr #7
    6be0:	4c06d701 	stcmi	7, cr13, [r6], {1}
    6be4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    6be8:	16000033 			; <UNDEFINED> instruction: 0x16000033
    6bec:	000029a3 	andeq	r2, r0, r3, lsr #19
    6bf0:	4c06d901 	stcmi	9, cr13, [r6], {1}
    6bf4:	8d000000 	stchi	0, cr0, [r0, #-0]
    6bf8:	00000033 	andeq	r0, r0, r3, lsr r0
    6bfc:	0029381f 	eoreq	r3, r9, pc, lsl r8
    6c00:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    6c04:	00000000 	andeq	r0, r0, r0
    6c08:	00000010 	andeq	r0, r0, r0, lsl r0
    6c0c:	115d9c01 	cmpne	sp, r1, lsl #24
    6c10:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6c14:	01000025 	tsteq	r0, r5, lsr #32
    6c18:	04b406f7 	ldrteq	r0, [r4], #1783	; 0x6f7
    6c1c:	50010000 	andpl	r0, r1, r0
    6c20:	00240f15 	eoreq	r0, r4, r5, lsl pc
    6c24:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    6c28:	0000004c 	andeq	r0, r0, ip, asr #32
    6c2c:	000033c2 	andeq	r3, r0, r2, asr #7
    6c30:	00299a16 	eoreq	r9, r9, r6, lsl sl
    6c34:	06f90100 	ldrbteq	r0, [r9], r0, lsl #2
    6c38:	0000004c 	andeq	r0, r0, ip, asr #32
    6c3c:	000033e3 	andeq	r3, r0, r3, ror #7
    6c40:	26b01f00 	ldrtcs	r1, [r0], r0, lsl #30
    6c44:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6c48:	00000007 	andeq	r0, r0, r7
    6c4c:	00001400 	andeq	r1, r0, r0, lsl #8
    6c50:	a29c0100 	addsge	r0, ip, #0, 2
    6c54:	14000011 	strne	r0, [r0], #-17	; 0xffffffef
    6c58:	0000254c 	andeq	r2, r0, ip, asr #10
    6c5c:	b4071801 	strlt	r1, [r7], #-2049	; 0xfffff7ff
    6c60:	01000004 	tsteq	r0, r4
    6c64:	240f1550 	strcs	r1, [pc], #-1360	; 6c6c <__Stack_Size+0x686c>
    6c68:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6c6c:	00004c07 	andeq	r4, r0, r7, lsl #24
    6c70:	00341800 	eorseq	r1, r4, r0, lsl #16
    6c74:	299a1600 	ldmibcs	sl, {r9, sl, ip}
    6c78:	1a010000 	bne	46c80 <__Stack_Size+0x46880>
    6c7c:	00004c07 	andeq	r4, r0, r7, lsl #24
    6c80:	00343900 	eorseq	r3, r4, r0, lsl #18
    6c84:	3a1f0000 	bcc	7c6c8c <__Stack_Size+0x7c688c>
    6c88:	01000025 	tsteq	r0, r5, lsr #32
    6c8c:	00000739 	andeq	r0, r0, r9, lsr r7
    6c90:	00100000 	andseq	r0, r0, r0
    6c94:	9c010000 	stcls	0, cr0, [r1], {-0}
    6c98:	000011e7 	andeq	r1, r0, r7, ror #3
    6c9c:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6ca0:	07390100 	ldreq	r0, [r9, -r0, lsl #2]!
    6ca4:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6ca8:	0f155001 	svceq	0x00155001
    6cac:	01000024 	tsteq	r0, r4, lsr #32
    6cb0:	004c0739 	subeq	r0, ip, r9, lsr r7
    6cb4:	346e0000 	strbtcc	r0, [lr], #-0
    6cb8:	a3160000 	tstge	r6, #0
    6cbc:	01000029 	tsteq	r0, r9, lsr #32
    6cc0:	004c073b 	subeq	r0, ip, fp, lsr r7
    6cc4:	348f0000 	strcc	r0, [pc], #0	; 6ccc <__Stack_Size+0x68cc>
    6cc8:	1f000000 	svcne	0x00000000
    6ccc:	00002319 	andeq	r2, r0, r9, lsl r3
    6cd0:	00075a01 	andeq	r5, r7, r1, lsl #20
    6cd4:	14000000 	strne	r0, [r0], #-0
    6cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    6cdc:	00122c9c 	mulseq	r2, ip, ip
    6ce0:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6ce4:	5a010000 	bpl	46cec <__Stack_Size+0x468ec>
    6ce8:	0004b407 	andeq	fp, r4, r7, lsl #8
    6cec:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6cf0:	0000240f 	andeq	r2, r0, pc, lsl #8
    6cf4:	4c075a01 	stcmi	10, cr5, [r7], {1}
    6cf8:	c4000000 	strgt	r0, [r0], #-0
    6cfc:	16000034 			; <UNDEFINED> instruction: 0x16000034
    6d00:	000029a3 	andeq	r2, r0, r3, lsr #19
    6d04:	4c075c01 	stcmi	12, cr5, [r7], {1}
    6d08:	e5000000 	str	r0, [r0, #-0]
    6d0c:	00000034 	andeq	r0, r0, r4, lsr r0
    6d10:	002c0a1f 	eoreq	r0, ip, pc, lsl sl
    6d14:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    6d18:	00000000 	andeq	r0, r0, r0
    6d1c:	00000010 	andeq	r0, r0, r0, lsl r0
    6d20:	12719c01 	rsbsne	r9, r1, #256	; 0x100
    6d24:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6d28:	01000025 	tsteq	r0, r5, lsr #32
    6d2c:	04b4077b 	ldrteq	r0, [r4], #1915	; 0x77b
    6d30:	50010000 	andpl	r0, r1, r0
    6d34:	00275815 	eoreq	r5, r7, r5, lsl r8
    6d38:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    6d3c:	0000004c 	andeq	r0, r0, ip, asr #32
    6d40:	0000351a 	andeq	r3, r0, sl, lsl r5
    6d44:	00299a16 	eoreq	r9, r9, r6, lsl sl
    6d48:	077d0100 	ldrbeq	r0, [sp, -r0, lsl #2]!
    6d4c:	0000004c 	andeq	r0, r0, ip, asr #32
    6d50:	0000353b 	andeq	r3, r0, fp, lsr r5
    6d54:	2aeb1f00 	bcs	fface95c <SCS_BASE+0x1fac095c>
    6d58:	9b010000 	blls	46d60 <__Stack_Size+0x46960>
    6d5c:	00000007 	andeq	r0, r0, r7
    6d60:	00001000 	andeq	r1, r0, r0
    6d64:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    6d68:	14000012 	strne	r0, [r0], #-18	; 0xffffffee
    6d6c:	0000254c 	andeq	r2, r0, ip, asr #10
    6d70:	b4079b01 	strlt	r9, [r7], #-2817	; 0xfffff4ff
    6d74:	01000004 	tsteq	r0, r4
    6d78:	27581550 			; <UNDEFINED> instruction: 0x27581550
    6d7c:	9b010000 	blls	46d84 <__Stack_Size+0x46984>
    6d80:	00004c07 	andeq	r4, r0, r7, lsl #24
    6d84:	00357000 	eorseq	r7, r5, r0
    6d88:	299a1600 	ldmibcs	sl, {r9, sl, ip}
    6d8c:	9d010000 	stcls	0, cr0, [r1, #-0]
    6d90:	00004c07 	andeq	r4, r0, r7, lsl #24
    6d94:	00359100 	eorseq	r9, r5, r0, lsl #2
    6d98:	af1f0000 	svcge	0x001f0000
    6d9c:	01000028 	tsteq	r0, r8, lsr #32
    6da0:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    6da4:	00100000 	andseq	r0, r0, r0
    6da8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6dac:	000012fb 	strdeq	r1, [r0], -fp
    6db0:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6db4:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    6db8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6dbc:	58155001 	ldmdapl	r5, {r0, ip, lr}
    6dc0:	01000027 	tsteq	r0, r7, lsr #32
    6dc4:	004c07bb 	strheq	r0, [ip], #-123	; 0xffffff85
    6dc8:	35bb0000 	ldrcc	r0, [fp, #0]!
    6dcc:	a3160000 	tstge	r6, #0
    6dd0:	01000029 	tsteq	r0, r9, lsr #32
    6dd4:	004c07bd 	strheq	r0, [ip], #-125	; 0xffffff83
    6dd8:	35dc0000 	ldrbcc	r0, [ip]
    6ddc:	1f000000 	svcne	0x00000000
    6de0:	00002631 	andeq	r2, r0, r1, lsr r6
    6de4:	0007db01 	andeq	sp, r7, r1, lsl #22
    6de8:	10000000 	andne	r0, r0, r0
    6dec:	01000000 	mrseq	r0, (UNDEF: 0)
    6df0:	0013409c 	mulseq	r3, ip, r0
    6df4:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6df8:	db010000 	blle	46e00 <__Stack_Size+0x46a00>
    6dfc:	0004b407 	andeq	fp, r4, r7, lsl #8
    6e00:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6e04:	00002758 	andeq	r2, r0, r8, asr r7
    6e08:	4c07db01 	stcmi	11, cr13, [r7], {1}
    6e0c:	11000000 	mrsne	r0, (UNDEF: 0)
    6e10:	16000036 			; <UNDEFINED> instruction: 0x16000036
    6e14:	000029a3 	andeq	r2, r0, r3, lsr #19
    6e18:	4c07dd01 	stcmi	13, cr13, [r7], {1}
    6e1c:	32000000 	andcc	r0, r0, #0
    6e20:	00000036 	andeq	r0, r0, r6, lsr r0
    6e24:	00232b1f 	eoreq	r2, r3, pc, lsl fp
    6e28:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    6e2c:	00000000 	andeq	r0, r0, r0
    6e30:	00000010 	andeq	r0, r0, r0, lsl r0
    6e34:	13859c01 	orrne	r9, r5, #256	; 0x100
    6e38:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6e3c:	01000025 	tsteq	r0, r5, lsr #32
    6e40:	04b407fb 	ldrteq	r0, [r4], #2043	; 0x7fb
    6e44:	50010000 	andpl	r0, r1, r0
    6e48:	0023ce15 	eoreq	ip, r3, r5, lsl lr
    6e4c:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    6e50:	0000004c 	andeq	r0, r0, ip, asr #32
    6e54:	0000365c 	andeq	r3, r0, ip, asr r6
    6e58:	00269316 	eoreq	r9, r6, r6, lsl r3
    6e5c:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    6e60:	0000004c 	andeq	r0, r0, ip, asr #32
    6e64:	0000367d 	andeq	r3, r0, sp, ror r6
    6e68:	29691f00 	stmdbcs	r9!, {r8, r9, sl, fp, ip}^
    6e6c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6e70:	00000008 	andeq	r0, r0, r8
    6e74:	00001000 	andeq	r1, r0, r0
    6e78:	ca9c0100 	bgt	fe707280 <SCS_BASE+0x1e6f9280>
    6e7c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    6e80:	0000254c 	andeq	r2, r0, ip, asr #10
    6e84:	b4081801 	strlt	r1, [r8], #-2049	; 0xfffff7ff
    6e88:	01000004 	tsteq	r0, r4
    6e8c:	281b1550 	ldmdacs	fp, {r4, r6, r8, sl, ip}
    6e90:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6e94:	00004c08 	andeq	r4, r0, r8, lsl #24
    6e98:	0036b200 	eorseq	fp, r6, r0, lsl #4
    6e9c:	26931600 	ldrcs	r1, [r3], r0, lsl #12
    6ea0:	1a010000 	bne	46ea8 <__Stack_Size+0x46aa8>
    6ea4:	00004c08 	andeq	r4, r0, r8, lsl #24
    6ea8:	0036d300 	eorseq	sp, r6, r0, lsl #6
    6eac:	db1f0000 	blle	7c6eb4 <__Stack_Size+0x7c6ab4>
    6eb0:	0100002c 	tsteq	r0, ip, lsr #32
    6eb4:	00000836 	andeq	r0, r0, r6, lsr r8
    6eb8:	00140000 	andseq	r0, r4, r0
    6ebc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6ec0:	0000140f 	andeq	r1, r0, pc, lsl #8
    6ec4:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6ec8:	08360100 	ldmdaeq	r6!, {r8}
    6ecc:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6ed0:	ce155001 	cdpgt	0, 1, cr5, cr5, cr1, {0}
    6ed4:	01000023 	tsteq	r0, r3, lsr #32
    6ed8:	004c0836 	subeq	r0, ip, r6, lsr r8
    6edc:	37080000 	strcc	r0, [r8, -r0]
    6ee0:	93160000 	tstls	r6, #0
    6ee4:	01000026 	tsteq	r0, r6, lsr #32
    6ee8:	004c0838 	subeq	r0, ip, r8, lsr r8
    6eec:	37290000 	strcc	r0, [r9, -r0]!
    6ef0:	1f000000 	svcne	0x00000000
    6ef4:	00002bca 	andeq	r2, r0, sl, asr #23
    6ef8:	00085301 	andeq	r5, r8, r1, lsl #6
    6efc:	14000000 	strne	r0, [r0], #-0
    6f00:	01000000 	mrseq	r0, (UNDEF: 0)
    6f04:	0014549c 	mulseq	r4, ip, r4
    6f08:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    6f0c:	53010000 	movwpl	r0, #4096	; 0x1000
    6f10:	0004b408 	andeq	fp, r4, r8, lsl #8
    6f14:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    6f18:	0000281b 	andeq	r2, r0, fp, lsl r8
    6f1c:	4c085301 	stcmi	3, cr5, [r8], {1}
    6f20:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    6f24:	16000037 			; <UNDEFINED> instruction: 0x16000037
    6f28:	00002693 	muleq	r0, r3, r6
    6f2c:	4c085501 	cfstr32mi	mvfx5, [r8], {1}
    6f30:	7f000000 	svcvc	0x00000000
    6f34:	00000037 	andeq	r0, r0, r7, lsr r0
    6f38:	002c1a1f 	eoreq	r1, ip, pc, lsl sl
    6f3c:	08710100 	ldmdaeq	r1!, {r8}^
    6f40:	00000000 	andeq	r0, r0, r0
    6f44:	00000014 	andeq	r0, r0, r4, lsl r0
    6f48:	14999c01 	ldrne	r9, [r9], #3073	; 0xc01
    6f4c:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    6f50:	01000025 	tsteq	r0, r5, lsr #32
    6f54:	04b40871 	ldrteq	r0, [r4], #2161	; 0x871
    6f58:	50010000 	andpl	r0, r1, r0
    6f5c:	0023ce15 	eoreq	ip, r3, r5, lsl lr
    6f60:	08710100 	ldmdaeq	r1!, {r8}^
    6f64:	0000004c 	andeq	r0, r0, ip, asr #32
    6f68:	000037b4 			; <UNDEFINED> instruction: 0x000037b4
    6f6c:	00269316 	eoreq	r9, r6, r6, lsl r3
    6f70:	08730100 	ldmdaeq	r3!, {r8}^
    6f74:	0000004c 	andeq	r0, r0, ip, asr #32
    6f78:	000037d5 	ldrdeq	r3, [r0], -r5
    6f7c:	23971f00 	orrscs	r1, r7, #0, 30
    6f80:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6f84:	00000008 	andeq	r0, r0, r8
    6f88:	00001400 	andeq	r1, r0, r0, lsl #8
    6f8c:	de9c0100 	fmllee	f0, f4, f0
    6f90:	14000014 	strne	r0, [r0], #-20	; 0xffffffec
    6f94:	0000254c 	andeq	r2, r0, ip, asr #10
    6f98:	b4088e01 	strlt	r8, [r8], #-3585	; 0xfffff1ff
    6f9c:	01000004 	tsteq	r0, r4
    6fa0:	281b1550 	ldmdacs	fp, {r4, r6, r8, sl, ip}
    6fa4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6fa8:	00004c08 	andeq	r4, r0, r8, lsl #24
    6fac:	00380a00 	eorseq	r0, r8, r0, lsl #20
    6fb0:	26931600 	ldrcs	r1, [r3], r0, lsl #12
    6fb4:	90010000 	andls	r0, r1, r0
    6fb8:	00004c08 	andeq	r4, r0, r8, lsl #24
    6fbc:	00382b00 	eorseq	r2, r8, r0, lsl #22
    6fc0:	e11f0000 	tst	pc, r0
    6fc4:	0100002b 	tsteq	r0, fp, lsr #32
    6fc8:	000008ac 	andeq	r0, r0, ip, lsr #17
    6fcc:	00140000 	andseq	r0, r4, r0
    6fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    6fd4:	00001523 	andeq	r1, r0, r3, lsr #10
    6fd8:	00254c14 	eoreq	r4, r5, r4, lsl ip
    6fdc:	08ac0100 	stmiaeq	ip!, {r8}
    6fe0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    6fe4:	ce155001 	cdpgt	0, 1, cr5, cr5, cr1, {0}
    6fe8:	01000023 	tsteq	r0, r3, lsr #32
    6fec:	004c08ac 	subeq	r0, ip, ip, lsr #17
    6ff0:	38600000 	stmdacc	r0!, {}^	; <UNPREDICTABLE>
    6ff4:	93160000 	tstls	r6, #0
    6ff8:	01000026 	tsteq	r0, r6, lsr #32
    6ffc:	004c08ae 	subeq	r0, ip, lr, lsr #17
    7000:	38810000 	stmcc	r1, {}	; <UNPREDICTABLE>
    7004:	1f000000 	svcne	0x00000000
    7008:	00002776 	andeq	r2, r0, r6, ror r7
    700c:	0008ce01 	andeq	ip, r8, r1, lsl #28
    7010:	1c000000 	stcne	0, cr0, [r0], {-0}
    7014:	01000000 	mrseq	r0, (UNDEF: 0)
    7018:	0015669c 	mulseq	r5, ip, r6
    701c:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    7020:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7024:	0004b408 	andeq	fp, r4, r8, lsl #8
    7028:	14500100 	ldrbne	r0, [r0], #-256	; 0xffffff00
    702c:	000029ac 	andeq	r2, r0, ip, lsr #19
    7030:	4c08ce01 	stcmi	14, cr12, [r8], {1}
    7034:	01000000 	mrseq	r0, (UNDEF: 0)
    7038:	2a1b1551 	bcs	6cc584 <__Stack_Size+0x6cc184>
    703c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7040:	00004c08 	andeq	r4, r0, r8, lsl #24
    7044:	0038b600 	eorseq	fp, r8, r0, lsl #12
    7048:	5f1f0000 	svcpl	0x001f0000
    704c:	01000024 	tsteq	r0, r4, lsr #32
    7050:	000008ea 	andeq	r0, r0, sl, ror #17
    7054:	001c0000 	andseq	r0, ip, r0
    7058:	9c010000 	stcls	0, cr0, [r1], {-0}
    705c:	000015a9 	andeq	r1, r0, r9, lsr #11
    7060:	00254c14 	eoreq	r4, r5, r4, lsl ip
    7064:	08ea0100 	stmiaeq	sl!, {r8}^
    7068:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    706c:	ac145001 	ldcge	0, cr5, [r4], {1}
    7070:	01000029 	tsteq	r0, r9, lsr #32
    7074:	004c08ea 	subeq	r0, ip, sl, ror #17
    7078:	51010000 	mrspl	r0, (UNDEF: 1)
    707c:	00280815 	eoreq	r0, r8, r5, lsl r8
    7080:	08ea0100 	stmiaeq	sl!, {r8}^
    7084:	0000004c 	andeq	r0, r0, ip, asr #32
    7088:	000038d7 	ldrdeq	r3, [r0], -r7
    708c:	27031f00 	strcs	r1, [r3, -r0, lsl #30]
    7090:	12010000 	andne	r0, r1, #0
    7094:	00000009 	andeq	r0, r0, r9
    7098:	00004400 	andeq	r4, r0, r0, lsl #8
    709c:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    70a0:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    70a4:	0000254c 	andeq	r2, r0, ip, asr #10
    70a8:	b4091201 	strlt	r1, [r9], #-513	; 0xfffffdff
    70ac:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    70b0:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    70b4:	000029ac 	andeq	r2, r0, ip, lsr #19
    70b8:	4c091201 	sfmmi	f1, 4, [r9], {1}
    70bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    70c0:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    70c4:	00002a7f 	andeq	r2, r0, pc, ror sl
    70c8:	4c091201 	sfmmi	f1, 4, [r9], {1}
    70cc:	52000000 	andpl	r0, r0, #0
    70d0:	00000039 	andeq	r0, r0, r9, lsr r0
    70d4:	0028441f 	eoreq	r4, r8, pc, lsl r4
    70d8:	09380100 	ldmdbeq	r8!, {r8}
    70dc:	00000000 	andeq	r0, r0, r0
    70e0:	00000018 	andeq	r0, r0, r8, lsl r0
    70e4:	16239c01 	strtne	r9, [r3], -r1, lsl #24
    70e8:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    70ec:	01000025 	tsteq	r0, r5, lsr #32
    70f0:	04b40938 	ldrteq	r0, [r4], #2360	; 0x938
    70f4:	50010000 	andpl	r0, r1, r0
    70f8:	0015e914 	andseq	lr, r5, r4, lsl r9
    70fc:	09380100 	ldmdbeq	r8!, {r8}
    7100:	000000d7 	ldrdeq	r0, [r0], -r7
    7104:	1f005101 	svcne	0x00005101
    7108:	000024ae 	andeq	r2, r0, lr, lsr #9
    710c:	00095501 	andeq	r5, r9, r1, lsl #10
    7110:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7114:	01000000 	mrseq	r0, (UNDEF: 0)
    7118:	0016569c 	mulseq	r6, ip, r6
    711c:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    7120:	55010000 	strpl	r0, [r1, #-0]
    7124:	0004b409 	andeq	fp, r4, r9, lsl #8
    7128:	14500100 	ldrbne	r0, [r0], #-256	; 0xffffff00
    712c:	0000285c 	andeq	r2, r0, ip, asr r8
    7130:	4c095501 	cfstr32mi	mvfx5, [r9], {1}
    7134:	01000000 	mrseq	r0, (UNDEF: 0)
    7138:	b21f0051 	andslt	r0, pc, #81	; 0x51
    713c:	01000027 	tsteq	r0, r7, lsr #32
    7140:	00000970 	andeq	r0, r0, r0, ror r9
    7144:	00180000 	andseq	r0, r8, r0
    7148:	9c010000 	stcls	0, cr0, [r1], {-0}
    714c:	00001689 	andeq	r1, r0, r9, lsl #13
    7150:	00254c14 	eoreq	r4, r5, r4, lsl ip
    7154:	09700100 	ldmdbeq	r0!, {r8}^
    7158:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    715c:	e9145001 	ldmdb	r4, {r0, ip, lr}
    7160:	01000015 	tsteq	r0, r5, lsl r0
    7164:	00d70970 	sbcseq	r0, r7, r0, ror r9
    7168:	51010000 	mrspl	r0, (UNDEF: 1)
    716c:	2a681f00 	bcs	1a0ed74 <__Stack_Size+0x1a0e974>
    7170:	8d010000 	stchi	0, cr0, [r1, #-0]
    7174:	00000009 	andeq	r0, r0, r9
    7178:	00001600 	andeq	r1, r0, r0, lsl #12
    717c:	be9c0100 	fmllte	f0, f4, f0
    7180:	14000016 	strne	r0, [r0], #-22	; 0xffffffea
    7184:	0000254c 	andeq	r2, r0, ip, asr #10
    7188:	b4098d01 	strlt	r8, [r9], #-3329	; 0xfffff2ff
    718c:	01000004 	tsteq	r0, r4
    7190:	24d61550 	ldrbcs	r1, [r6], #1360	; 0x550
    7194:	8d010000 	stchi	0, cr0, [r1, #-0]
    7198:	00004c09 	andeq	r4, r0, r9, lsl #24
    719c:	00397300 	eorseq	r7, r9, r0, lsl #6
    71a0:	d41f0000 	ldrle	r0, [pc], #-0	; 71a8 <__Stack_Size+0x6da8>
    71a4:	01000026 	tsteq	r0, r6, lsr #32
    71a8:	000009ae 	andeq	r0, r0, lr, lsr #19
    71ac:	00160000 	andseq	r0, r6, r0
    71b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    71b4:	000016f3 	strdeq	r1, [r0], -r3
    71b8:	00254c14 	eoreq	r4, r5, r4, lsl ip
    71bc:	09ae0100 	stmibeq	lr!, {r8}
    71c0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    71c4:	8a155001 	bhi	55b1d0 <__Stack_Size+0x55add0>
    71c8:	0100002a 	tsteq	r0, sl, lsr #32
    71cc:	004c09ae 	subeq	r0, ip, lr, lsr #19
    71d0:	39940000 	ldmibcc	r4, {}	; <UNPREDICTABLE>
    71d4:	1f000000 	svcne	0x00000000
    71d8:	00002924 	andeq	r2, r0, r4, lsr #18
    71dc:	0009ca01 	andeq	ip, r9, r1, lsl #20
    71e0:	16000000 	strne	r0, [r0], -r0
    71e4:	01000000 	mrseq	r0, (UNDEF: 0)
    71e8:	0017289c 	mulseq	r7, ip, r8
    71ec:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    71f0:	ca010000 	bgt	471f8 <__Stack_Size+0x46df8>
    71f4:	0004b409 	andeq	fp, r4, r9, lsl #8
    71f8:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    71fc:	00002576 	andeq	r2, r0, r6, ror r5
    7200:	4c09ca01 	stcmi	10, cr12, [r9], {1}
    7204:	b5000000 	strlt	r0, [r0, #-0]
    7208:	00000039 	andeq	r0, r0, r9, lsr r0
    720c:	002caa1f 	eoreq	sl, ip, pc, lsl sl
    7210:	09e40100 	stmibeq	r4!, {r8}^
    7214:	00000000 	andeq	r0, r0, r0
    7218:	00000016 	andeq	r0, r0, r6, lsl r0
    721c:	175d9c01 	ldrbne	r9, [sp, -r1, lsl #24]
    7220:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    7224:	01000025 	tsteq	r0, r5, lsr #32
    7228:	04b409e4 	ldrteq	r0, [r4], #2532	; 0x9e4
    722c:	50010000 	andpl	r0, r1, r0
    7230:	002b1615 	eoreq	r1, fp, r5, lsl r6
    7234:	09e40100 	stmibeq	r4!, {r8}^
    7238:	0000004c 	andeq	r0, r0, ip, asr #32
    723c:	000039d6 	ldrdeq	r3, [r0], -r6
    7240:	27291f00 	strcs	r1, [r9, -r0, lsl #30]!
    7244:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    7248:	00000009 	andeq	r0, r0, r9
    724c:	00000400 	andeq	r0, r0, r0, lsl #8
    7250:	909c0100 	addsls	r0, ip, r0, lsl #2
    7254:	14000017 	strne	r0, [r0], #-23	; 0xffffffe9
    7258:	0000254c 	andeq	r2, r0, ip, asr #10
    725c:	b409f901 	strlt	pc, [r9], #-2305	; 0xfffff6ff
    7260:	01000004 	tsteq	r0, r4
    7264:	2d661450 	cfstrdcs	mvd1, [r6, #-320]!	; 0xfffffec0
    7268:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    726c:	00004c09 	andeq	r4, r0, r9, lsl #24
    7270:	00510100 	subseq	r0, r1, r0, lsl #2
    7274:	002b3e1f 	eoreq	r3, fp, pc, lsl lr
    7278:	0a0a0100 	beq	287680 <__Stack_Size+0x287280>
    727c:	00000000 	andeq	r0, r0, r0
    7280:	00000004 	andeq	r0, r0, r4
    7284:	17c39c01 	strbne	r9, [r3, r1, lsl #24]
    7288:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    728c:	01000025 	tsteq	r0, r5, lsr #32
    7290:	04b40a0a 	ldrteq	r0, [r4], #2570	; 0xa0a
    7294:	50010000 	andpl	r0, r1, r0
    7298:	002b4514 	eoreq	r4, fp, r4, lsl r5
    729c:	0a0a0100 	beq	2876a4 <__Stack_Size+0x2872a4>
    72a0:	0000004c 	andeq	r0, r0, ip, asr #32
    72a4:	1f005101 	svcne	0x00005101
    72a8:	00002367 	andeq	r2, r0, r7, ror #6
    72ac:	000a1c01 	andeq	r1, sl, r1, lsl #24
    72b0:	04000000 	streq	r0, [r0], #-0
    72b4:	01000000 	mrseq	r0, (UNDEF: 0)
    72b8:	0017f69c 	mulseq	r7, ip, r6
    72bc:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    72c0:	1c010000 	stcne	0, cr0, [r1], {-0}
    72c4:	0004b40a 	andeq	fp, r4, sl, lsl #8
    72c8:	14500100 	ldrbne	r0, [r0], #-256	; 0xffffff00
    72cc:	0000236e 	andeq	r2, r0, lr, ror #6
    72d0:	4c0a1c01 	stcmi	12, cr1, [sl], {1}
    72d4:	01000000 	mrseq	r0, (UNDEF: 0)
    72d8:	771f0051 			; <UNDEFINED> instruction: 0x771f0051
    72dc:	01000023 	tsteq	r0, r3, lsr #32
    72e0:	00000a2e 	andeq	r0, r0, lr, lsr #20
    72e4:	00040000 	andeq	r0, r4, r0
    72e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    72ec:	00001829 	andeq	r1, r0, r9, lsr #16
    72f0:	00254c14 	eoreq	r4, r5, r4, lsl ip
    72f4:	0a2e0100 	beq	b876fc <__Stack_Size+0xb872fc>
    72f8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    72fc:	7e145001 	cdpvc	0, 1, cr5, cr4, cr1, {0}
    7300:	01000023 	tsteq	r0, r3, lsr #32
    7304:	004c0a2e 	subeq	r0, ip, lr, lsr #20
    7308:	51010000 	mrspl	r0, (UNDEF: 1)
    730c:	289f1f00 	ldmcs	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    7310:	40010000 	andmi	r0, r1, r0
    7314:	0000000a 	andeq	r0, r0, sl
    7318:	00000400 	andeq	r0, r0, r0, lsl #8
    731c:	5c9c0100 	ldfpls	f0, [ip], {0}
    7320:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    7324:	0000254c 	andeq	r2, r0, ip, asr #10
    7328:	b40a4001 	strlt	r4, [sl], #-1
    732c:	01000004 	tsteq	r0, r4
    7330:	28a61450 	stmiacs	r6!, {r4, r6, sl, ip}
    7334:	40010000 	andmi	r0, r1, r0
    7338:	00004c0a 	andeq	r4, r0, sl, lsl #24
    733c:	00510100 	subseq	r0, r1, r0, lsl #2
    7340:	0023871f 	eoreq	r8, r3, pc, lsl r7
    7344:	0a520100 	beq	148774c <__Stack_Size+0x148734c>
    7348:	00000000 	andeq	r0, r0, r0
    734c:	00000006 	andeq	r0, r0, r6
    7350:	188f9c01 	stmne	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    7354:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    7358:	01000025 	tsteq	r0, r5, lsr #32
    735c:	04b40a52 	ldrteq	r0, [r4], #2642	; 0xa52
    7360:	50010000 	andpl	r0, r1, r0
    7364:	00238e14 	eoreq	r8, r3, r4, lsl lr
    7368:	0a520100 	beq	1487770 <__Stack_Size+0x1487370>
    736c:	0000004c 	andeq	r0, r0, ip, asr #32
    7370:	1f005101 	svcne	0x00005101
    7374:	00002a07 	andeq	r2, r0, r7, lsl #20
    7378:	000a6a01 	andeq	r6, sl, r1, lsl #20
    737c:	16000000 	strne	r0, [r0], -r0
    7380:	01000000 	mrseq	r0, (UNDEF: 0)
    7384:	0018c49c 	mulseq	r8, ip, r4
    7388:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    738c:	6a010000 	bvs	47394 <__Stack_Size+0x46f94>
    7390:	0004b40a 	andeq	fp, r4, sl, lsl #8
    7394:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    7398:	00002980 	andeq	r2, r0, r0, lsl #19
    739c:	4c0a6a01 	stcmi	10, cr6, [sl], {1}
    73a0:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    73a4:	00000039 	andeq	r0, r0, r9, lsr r0
    73a8:	0027d91f 	eoreq	sp, r7, pc, lsl r9
    73ac:	0a860100 	beq	fe1877b4 <SCS_BASE+0x1e1797b4>
    73b0:	00000000 	andeq	r0, r0, r0
    73b4:	0000001a 	andeq	r0, r0, sl, lsl r0
    73b8:	18f99c01 	ldmne	r9!, {r0, sl, fp, ip, pc}^
    73bc:	4c140000 	ldcmi	0, cr0, [r4], {-0}
    73c0:	01000025 	tsteq	r0, r5, lsr #32
    73c4:	04b40a86 	ldrteq	r0, [r4], #2694	; 0xa86
    73c8:	50010000 	andpl	r0, r1, r0
    73cc:	00298015 	eoreq	r8, r9, r5, lsl r0
    73d0:	0a860100 	beq	fe1877d8 <SCS_BASE+0x1e1797d8>
    73d4:	0000004c 	andeq	r0, r0, ip, asr #32
    73d8:	00003a18 	andeq	r3, r0, r8, lsl sl
    73dc:	2c431f00 	mcrrcs	15, 0, r1, r3, cr0
    73e0:	8a010000 	bhi	473e8 <__Stack_Size+0x46fe8>
    73e4:	00000002 	andeq	r0, r0, r2
    73e8:	00006000 	andeq	r6, r0, r0
    73ec:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    73f0:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    73f4:	0000254c 	andeq	r2, r0, ip, asr #10
    73f8:	b4028a01 	strlt	r8, [r2], #-2561	; 0xfffff5ff
    73fc:	39000004 	stmdbcc	r0, {r2}
    7400:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    7404:	0000286d 	andeq	r2, r0, sp, ror #16
    7408:	1c028a01 	stcne	10, cr8, [r2], {1}
    740c:	73000009 	movwvc	r0, #9
    7410:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    7414:	00002ac9 	andeq	r2, r0, r9, asr #21
    7418:	4c028c01 	stcmi	12, cr8, [r2], {1}
    741c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    7420:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    7424:	000029db 	ldrdeq	r2, [r0], -fp
    7428:	4c028d01 	stcmi	13, cr8, [r2], {1}
    742c:	e2000000 	and	r0, r0, #0
    7430:	1a00003a 	bne	7520 <__Stack_Size+0x7120>
    7434:	00000000 	andeq	r0, r0, r0
    7438:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    743c:	00001964 	andeq	r1, r0, r4, ror #18
    7440:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7444:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7448:	00000025 	andeq	r0, r0, r5, lsr #32
    744c:	00188f00 	andseq	r8, r8, r0, lsl #30
    7450:	00001a00 	andeq	r1, r0, r0, lsl #20
    7454:	052f0000 	streq	r0, [pc, #-0]!	; 745c <__Stack_Size+0x705c>
    7458:	19870000 	stmibne	r7, {}	; <UNPREDICTABLE>
    745c:	011b0000 	tsteq	fp, r0
    7460:	00760251 	rsbseq	r0, r6, r1, asr r2
    7464:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    7468:	1c000077 	stcne	0, cr0, [r0], {119}	; 0x77
    746c:	00000000 	andeq	r0, r0, r0
    7470:	000018c4 	andeq	r1, r0, r4, asr #17
    7474:	00000025 	andeq	r0, r0, r5, lsr #32
    7478:	00052f00 	andeq	r2, r5, r0, lsl #30
    747c:	00002500 	andeq	r2, r0, r0, lsl #10
    7480:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    7484:	001a0000 	andseq	r0, sl, r0
    7488:	ba000000 	blt	7490 <__Stack_Size+0x7090>
    748c:	bc000004 	stclt	0, cr0, [r0], {4}
    7490:	1b000019 	blne	74fc <__Stack_Size+0x70fc>
    7494:	76025101 	strvc	r5, [r2], -r1, lsl #2
    7498:	52011b00 	andpl	r1, r1, #0, 22
    749c:	00007702 	andeq	r7, r0, r2, lsl #14
    74a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    74a4:	00188f00 	andseq	r8, r8, r0, lsl #30
    74a8:	231f0000 	tstcs	pc, #0
    74ac:	0100002a 	tsteq	r0, sl, lsr #32
    74b0:	00000aa2 	andeq	r0, r0, r2, lsr #21
    74b4:	00160000 	andseq	r0, r6, r0
    74b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    74bc:	000019fb 	strdeq	r1, [r0], -fp
    74c0:	00254c14 	eoreq	r4, r5, r4, lsl ip
    74c4:	0aa20100 	beq	fe8878cc <SCS_BASE+0x1e8798cc>
    74c8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    74cc:	80155001 	andshi	r5, r5, r1
    74d0:	01000029 	tsteq	r0, r9, lsr #32
    74d4:	004c0aa2 	subeq	r0, ip, r2, lsr #21
    74d8:	3b0c0000 	blcc	3074e0 <__Stack_Size+0x3070e0>
    74dc:	1f000000 	svcne	0x00000000
    74e0:	00002562 	andeq	r2, r0, r2, ror #10
    74e4:	000abe01 	andeq	fp, sl, r1, lsl #28
    74e8:	1a000000 	bne	74f0 <__Stack_Size+0x70f0>
    74ec:	01000000 	mrseq	r0, (UNDEF: 0)
    74f0:	001a309c 	mulseq	sl, ip, r0
    74f4:	254c1400 	strbcs	r1, [ip, #-1024]	; 0xfffffc00
    74f8:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    74fc:	0004b40a 	andeq	fp, r4, sl, lsl #8
    7500:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    7504:	00002980 	andeq	r2, r0, r0, lsl #19
    7508:	4c0abe01 	stcmi	14, cr11, [sl], {1}
    750c:	2d000000 	stccs	0, cr0, [r0, #-0]
    7510:	0000003b 	andeq	r0, r0, fp, lsr r0
    7514:	00287e29 	eoreq	r7, r8, r9, lsr #28
    7518:	0c4b0100 	stfeqe	f0, [fp], {-0}
    751c:	001a9201 	andseq	r9, sl, r1, lsl #4
    7520:	254c1000 	strbcs	r1, [ip, #-0]
    7524:	4b010000 	blmi	4752c <__Stack_Size+0x4712c>
    7528:	0004b40c 	andeq	fp, r4, ip, lsl #8
    752c:	2aa71000 	bcs	fe9cb534 <SCS_BASE+0x1e9bd534>
    7530:	4b010000 	blmi	47538 <__Stack_Size+0x47138>
    7534:	00004c0c 	andeq	r4, r0, ip, lsl #24
    7538:	2a371000 	bcs	dcb540 <__Stack_Size+0xdcb140>
    753c:	4b010000 	blmi	47544 <__Stack_Size+0x47144>
    7540:	00004c0c 	andeq	r4, r0, ip, lsl #24
    7544:	2c8f1000 	stccs	0, cr1, [pc], {0}
    7548:	4c010000 	stcmi	0, cr0, [r1], {-0}
    754c:	00004c0c 	andeq	r4, r0, ip, lsl #24
    7550:	29a31100 	stmibcs	r3!, {r8, ip}
    7554:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    7558:	00004c0c 	andeq	r4, r0, ip, lsl #24
    755c:	26931100 	ldrcs	r1, [r3], r0, lsl #2
    7560:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    7564:	00004c0c 	andeq	r4, r0, ip, lsl #24
    7568:	6d742a00 	vldmdbvs	r4!, {s5-s4}
    756c:	4e010070 	mcrmi	0, 0, r0, cr1, cr0, {3}
    7570:	00004c0c 	andeq	r4, r0, ip, lsl #24
    7574:	a7290000 	strge	r0, [r9, -r0]!
    7578:	0100002b 	tsteq	r0, fp, lsr #32
    757c:	f4010c7a 			; <UNDEFINED> instruction: 0xf4010c7a
    7580:	1000001a 	andne	r0, r0, sl, lsl r0
    7584:	0000254c 	andeq	r2, r0, ip, asr #10
    7588:	b40c7a01 	strlt	r7, [ip], #-2561	; 0xfffff5ff
    758c:	10000004 	andne	r0, r0, r4
    7590:	00002aa7 	andeq	r2, r0, r7, lsr #21
    7594:	4c0c7a01 	stcmi	10, cr7, [ip], {1}
    7598:	10000000 	andne	r0, r0, r0
    759c:	00002a37 	andeq	r2, r0, r7, lsr sl
    75a0:	4c0c7a01 	stcmi	10, cr7, [ip], {1}
    75a4:	10000000 	andne	r0, r0, r0
    75a8:	00002c8f 	andeq	r2, r0, pc, lsl #25
    75ac:	4c0c7b01 	stcmi	11, cr7, [ip], {1}
    75b0:	11000000 	mrsne	r0, (UNDEF: 0)
    75b4:	000029a3 	andeq	r2, r0, r3, lsr #19
    75b8:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    75bc:	11000000 	mrsne	r0, (UNDEF: 0)
    75c0:	00002693 	muleq	r0, r3, r6
    75c4:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    75c8:	2a000000 	bcs	75d0 <__Stack_Size+0x71d0>
    75cc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    75d0:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    75d4:	00000000 	andeq	r0, r0, r0
    75d8:	002c841f 	eoreq	r8, ip, pc, lsl r4
    75dc:	02490100 	subeq	r0, r9, #0, 2
    75e0:	00000000 	andeq	r0, r0, r0
    75e4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    75e8:	1c359c01 	ldcne	12, cr9, [r5], #-4
    75ec:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    75f0:	01000025 	tsteq	r0, r5, lsr #32
    75f4:	04b40249 	ldrteq	r0, [r4], #585	; 0x249
    75f8:	3b4e0000 	blcc	1387600 <__Stack_Size+0x1387200>
    75fc:	6d150000 	ldcvs	0, cr0, [r5, #-0]
    7600:	01000028 	tsteq	r0, r8, lsr #32
    7604:	091c0249 	ldmdbeq	ip, {r0, r3, r6, r9}
    7608:	3bba0000 	blcc	fee87610 <SCS_BASE+0x1ee79610>
    760c:	302b0000 	eorcc	r0, fp, r0
    7610:	0000001a 	andeq	r0, r0, sl, lsl r0
    7614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7618:	01000006 	tsteq	r0, r6
    761c:	1b84026a 	blne	fe107fcc <SCS_BASE+0x1e0f9fcc>
    7620:	61210000 			; <UNDEFINED> instruction: 0x61210000
    7624:	1800001a 	stmdane	r0, {r1, r3, r4}
    7628:	2100003c 	tstcs	r0, ip, lsr r0
    762c:	00001a55 	andeq	r1, r0, r5, asr sl
    7630:	00003c2b 	andeq	r3, r0, fp, lsr #24
    7634:	001a4921 	andseq	r4, sl, r1, lsr #18
    7638:	003c3e00 	eorseq	r3, ip, r0, lsl #28
    763c:	1a3d2100 	bne	f4fa44 <__Stack_Size+0xf4f644>
    7640:	3c510000 	mracc	r0, r1, acc0
    7644:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    7648:	23000006 	movwcs	r0, #6
    764c:	00001a6d 	andeq	r1, r0, sp, ror #20
    7650:	00003c64 	andeq	r3, r0, r4, ror #24
    7654:	001a7923 	andseq	r7, sl, r3, lsr #18
    7658:	003c8e00 	eorseq	r8, ip, r0, lsl #28
    765c:	1a852300 	bne	fe150264 <SCS_BASE+0x1e142264>
    7660:	3cc90000 	stclcc	0, cr0, [r9], {0}
    7664:	00000000 	andeq	r0, r0, r0
    7668:	001a922b 	andseq	r9, sl, fp, lsr #4
    766c:	00000000 	andeq	r0, r0, r0
    7670:	00062800 	andeq	r2, r6, r0, lsl #16
    7674:	02740100 	rsbseq	r0, r4, #0, 2
    7678:	00001bde 	ldrdeq	r1, [r0], -lr
    767c:	001ac321 	andseq	ip, sl, r1, lsr #6
    7680:	003cec00 	eorseq	lr, ip, r0, lsl #24
    7684:	1ab72100 	bne	fedcfa8c <SCS_BASE+0x1edc1a8c>
    7688:	3cff0000 	ldclcc	0, cr0, [pc]	; 7690 <__Stack_Size+0x7290>
    768c:	ab210000 	blge	847694 <__Stack_Size+0x847294>
    7690:	1200001a 	andne	r0, r0, #26
    7694:	2100003d 	tstcs	r0, sp, lsr r0
    7698:	00001a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    769c:	00003d25 	andeq	r3, r0, r5, lsr #26
    76a0:	0006282c 	andeq	r2, r6, ip, lsr #16
    76a4:	1acf2300 	bne	ff3d02ac <SCS_BASE+0x1f3c22ac>
    76a8:	3d380000 	ldccc	0, cr0, [r8, #-0]
    76ac:	db230000 	blle	8c76b4 <__Stack_Size+0x8c72b4>
    76b0:	7f00001a 	svcvc	0x0000001a
    76b4:	2300003d 	movwcs	r0, #61	; 0x3d
    76b8:	00001ae7 	andeq	r1, r0, r7, ror #21
    76bc:	00003dba 			; <UNDEFINED> instruction: 0x00003dba
    76c0:	001a0000 	andseq	r0, sl, r0
    76c4:	ba000000 	blt	76cc <__Stack_Size+0x72cc>
    76c8:	f3000004 	vhadd.u8	d0, d0, d4
    76cc:	1b00001b 	blne	7740 <__Stack_Size+0x7340>
    76d0:	f3035001 	vhadd.u8	d5, d3, d1
    76d4:	1c005001 	stcne	0, cr5, [r0], {1}
    76d8:	00000000 	andeq	r0, r0, r0
    76dc:	0000188f 	andeq	r1, r0, pc, lsl #17
    76e0:	00000025 	andeq	r0, r0, r5, lsr #32
    76e4:	00052f00 	andeq	r2, r5, r0, lsl #30
    76e8:	00001c00 	andeq	r1, r0, r0, lsl #24
    76ec:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    76f0:	002d0000 	eoreq	r0, sp, r0
    76f4:	c6000000 	strgt	r0, [r0], -r0
    76f8:	23000019 	movwcs	r0, #25
    76fc:	1b00001c 	blne	7774 <__Stack_Size+0x7374>
    7700:	f3035001 	vhadd.u8	d5, d3, d1
    7704:	2e005001 	cdpcs	0, 0, cr5, cr0, cr1, {0}
    7708:	00000000 	andeq	r0, r0, r0
    770c:	000019fb 	strdeq	r1, [r0], -fp
    7710:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7714:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7718:	269b1f00 	ldrcs	r1, [fp], r0, lsl #30
    771c:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    7720:	0000000a 	andeq	r0, r0, sl
    7724:	00001000 	andeq	r1, r0, r0
    7728:	6a9c0100 	bvs	fe707b30 <SCS_BASE+0x1e6f9b30>
    772c:	1400001c 	strne	r0, [r0], #-28	; 0xffffffe4
    7730:	0000254c 	andeq	r2, r0, ip, asr #10
    7734:	b40ad801 	strlt	sp, [sl], #-2049	; 0xfffff7ff
    7738:	01000004 	tsteq	r0, r4
    773c:	241a1550 	ldrcs	r1, [sl], #-1360	; 0xfffffab0
    7740:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    7744:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7748:	003ddd00 	eorseq	sp, sp, r0, lsl #26
    774c:	122f0000 	eorne	r0, pc, #0
    7750:	01000025 	tsteq	r0, r5, lsr #32
    7754:	004c0aec 	subeq	r0, ip, ip, ror #21
    7758:	00000000 	andeq	r0, r0, r0
    775c:	00060000 	andeq	r0, r6, r0
    7760:	9c010000 	stcls	0, cr0, [r1], {-0}
    7764:	00001c95 	muleq	r0, r5, ip
    7768:	00254c15 	eoreq	r4, r5, r5, lsl ip
    776c:	0aec0100 	beq	ffb07b74 <SCS_BASE+0x1faf9b74>
    7770:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    7774:	00003dfe 	strdeq	r3, [r0], -lr
    7778:	25c82f00 	strbcs	r2, [r8, #3840]	; 0xf00
    777c:	fd010000 	stc2	0, cr0, [r1, #-0]
    7780:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7784:	00000000 	andeq	r0, r0, r0
    7788:	00000600 	andeq	r0, r0, r0, lsl #12
    778c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    7790:	1500001c 	strne	r0, [r0, #-28]	; 0xffffffe4
    7794:	0000254c 	andeq	r2, r0, ip, asr #10
    7798:	b40afd01 	strlt	pc, [sl], #-3329	; 0xfffff2ff
    779c:	1f000004 	svcne	0x00000004
    77a0:	0000003e 	andeq	r0, r0, lr, lsr r0
    77a4:	0025d82f 	eoreq	sp, r5, pc, lsr #16
    77a8:	0b0e0100 	bleq	387bb0 <__Stack_Size+0x3877b0>
    77ac:	0000004c 	andeq	r0, r0, ip, asr #32
    77b0:	00000000 	andeq	r0, r0, r0
    77b4:	00000006 	andeq	r0, r0, r6
    77b8:	1ceb9c01 	stclne	12, cr9, [fp], #4
    77bc:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    77c0:	01000025 	tsteq	r0, r5, lsr #32
    77c4:	04b40b0e 	ldrteq	r0, [r4], #2830	; 0xb0e
    77c8:	3e400000 	cdpcc	0, 4, cr0, cr0, cr0, {0}
    77cc:	2f000000 	svccs	0x00000000
    77d0:	000025e8 	andeq	r2, r0, r8, ror #11
    77d4:	4c0b1f01 	stcmi	15, cr1, [fp], {1}
    77d8:	00000000 	andeq	r0, r0, r0
    77dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    77e0:	01000000 	mrseq	r0, (UNDEF: 0)
    77e4:	001d169c 	mulseq	sp, ip, r6
    77e8:	254c1500 	strbcs	r1, [ip, #-1280]	; 0xfffffb00
    77ec:	1f010000 	svcne	0x00010000
    77f0:	0004b40b 	andeq	fp, r4, fp, lsl #8
    77f4:	003e6100 	eorseq	r6, lr, r0, lsl #2
    77f8:	f72f0000 			; <UNDEFINED> instruction: 0xf72f0000
    77fc:	01000028 	tsteq	r0, r8, lsr #32
    7800:	004c0b2f 	subeq	r0, ip, pc, lsr #22
    7804:	00000000 	andeq	r0, r0, r0
    7808:	00060000 	andeq	r0, r6, r0
    780c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7810:	00001d41 	andeq	r1, r0, r1, asr #26
    7814:	00254c15 	eoreq	r4, r5, r5, lsl ip
    7818:	0b2f0100 	bleq	bc7c20 <__Stack_Size+0xbc7820>
    781c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    7820:	00003e82 	andeq	r3, r0, r2, lsl #29
    7824:	27812f00 	strcs	r2, [r1, r0, lsl #30]
    7828:	3f010000 	svccc	0x00010000
    782c:	00004c0b 	andeq	r4, r0, fp, lsl #24
    7830:	00000000 	andeq	r0, r0, r0
    7834:	00000600 	andeq	r0, r0, r0, lsl #12
    7838:	6c9c0100 	ldfvss	f0, [ip], {0}
    783c:	1500001d 	strne	r0, [r0, #-29]	; 0xffffffe3
    7840:	0000254c 	andeq	r2, r0, ip, asr #10
    7844:	b40b3f01 	strlt	r3, [fp], #-3841	; 0xfffff0ff
    7848:	a3000004 	movwge	r0, #4
    784c:	0000003e 	andeq	r0, r0, lr, lsr r0
    7850:	0023f22f 	eoreq	pc, r3, pc, lsr #4
    7854:	0b5d0100 	bleq	1747c5c <__Stack_Size+0x174785c>
    7858:	000000a8 	andeq	r0, r0, r8, lsr #1
    785c:	00000000 	andeq	r0, r0, r0
    7860:	0000000c 	andeq	r0, r0, ip
    7864:	1db59c01 	ldcne	12, cr9, [r5, #4]!
    7868:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    786c:	01000025 	tsteq	r0, r5, lsr #32
    7870:	04b40b5d 	ldrteq	r0, [r4], #2909	; 0xb5d
    7874:	3ec40000 	cdpcc	0, 12, cr0, cr4, cr0, {0}
    7878:	12140000 	andsne	r0, r4, #0
    787c:	01000027 	tsteq	r0, r7, lsr #32
    7880:	004c0b5d 	subeq	r0, ip, sp, asr fp
    7884:	51010000 	mrspl	r0, (UNDEF: 1)
    7888:	0017b916 	andseq	fp, r7, r6, lsl r9
    788c:	0b5f0100 	bleq	17c7c94 <__Stack_Size+0x17c7894>
    7890:	000000b3 	strheq	r0, [r0], -r3
    7894:	00003ee5 	andeq	r3, r0, r5, ror #29
    7898:	2c522f00 	mrrccs	15, 0, r2, r2, cr0	; <UNPREDICTABLE>
    789c:	a2010000 	andge	r0, r1, #0
    78a0:	0000b30b 	andeq	fp, r0, fp, lsl #6
    78a4:	00000000 	andeq	r0, r0, r0
    78a8:	00001600 	andeq	r1, r0, r0, lsl #12
    78ac:	1e9c0100 	fmlnee	f0, f4, f0
    78b0:	1500001e 	strne	r0, [r0, #-30]	; 0xffffffe2
    78b4:	0000254c 	andeq	r2, r0, ip, asr #10
    78b8:	b40ba201 	strlt	sl, [fp], #-513	; 0xfffffdff
    78bc:	0d000004 	stceq	0, cr0, [r0, #-16]
    78c0:	1400003f 	strne	r0, [r0], #-63	; 0xffffffc1
    78c4:	00002c69 	andeq	r2, r0, r9, ror #24
    78c8:	4c0ba201 	sfmmi	f2, 1, [fp], {1}
    78cc:	01000000 	mrseq	r0, (UNDEF: 0)
    78d0:	17b91651 	sbfxne	r1, r1, #12, #26
    78d4:	a4010000 	strge	r0, [r1], #-0
    78d8:	0000b30b 	andeq	fp, r0, fp, lsl #6
    78dc:	003f2e00 	eorseq	r2, pc, r0, lsl #28
    78e0:	17ba1600 	ldrne	r1, [sl, r0, lsl #12]!
    78e4:	a5010000 	strge	r0, [r1, #-0]
    78e8:	00004c0b 	andeq	r4, r0, fp, lsl #24
    78ec:	003f4d00 	eorseq	r4, pc, r0, lsl #26
    78f0:	246b1600 	strbtcs	r1, [fp], #-1536	; 0xfffffa00
    78f4:	a5010000 	strge	r0, [r1, #-0]
    78f8:	00004c0b 	andeq	r4, r0, fp, lsl #24
    78fc:	003f7100 	eorseq	r7, pc, r0, lsl #2
    7900:	e30f0000 	movw	r0, #61440	; 0xf000
    7904:	0100000c 	tsteq	r0, ip
    7908:	44010bcd 	strmi	r0, [r1], #-3021	; 0xfffff433
    790c:	1000001e 	andne	r0, r0, lr, lsl r0
    7910:	0000254c 	andeq	r2, r0, ip, asr #10
    7914:	b40bcd01 	strlt	ip, [fp], #-3329	; 0xfffff2ff
    7918:	10000004 	andne	r0, r0, r4
    791c:	00002c69 	andeq	r2, r0, r9, ror #24
    7920:	4c0bcd01 	stcmi	13, cr12, [fp], {1}
    7924:	00000000 	andeq	r0, r0, r0
    7928:	001e1e27 	andseq	r1, lr, r7, lsr #28
    792c:	00172800 	andseq	r2, r7, r0, lsl #16
    7930:	00000808 	andeq	r0, r0, r8, lsl #16
    7934:	689c0100 	ldmvs	ip, {r8}
    7938:	2800001e 	stmdacs	r0, {r1, r2, r3, r4}
    793c:	00001e2b 	andeq	r1, r0, fp, lsr #28
    7940:	37215001 	strcc	r5, [r1, -r1]!
    7944:	9500001e 	strls	r0, [r0, #-30]	; 0xffffffe2
    7948:	0000003f 	andeq	r0, r0, pc, lsr r0
    794c:	00211d30 	eoreq	r1, r1, r0, lsr sp
    7950:	00211d00 	eoreq	r1, r1, r0, lsl #26
    7954:	01150500 	tsteq	r5, r0, lsl #10
    7958:	001ad430 	andseq	sp, sl, r0, lsr r4
    795c:	001ad400 	andseq	sp, sl, r0, lsl #8
    7960:	01140500 	tsteq	r4, r0, lsl #10
    7964:	00020f00 	andeq	r0, r2, r0, lsl #30
    7968:	6c000400 	cfstrsvs	mvf0, [r0], {-0}
    796c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    7970:	000bf101 	andeq	pc, fp, r1, lsl #2
    7974:	2d040c00 	stccs	12, cr0, [r4, #-0]
    7978:	051f0000 	ldreq	r0, [pc, #-0]	; 7980 <__Stack_Size+0x7580>
    797c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7980:	00000000 	andeq	r0, r0, r0
    7984:	21c20000 	biccs	r0, r2, r0
    7988:	04020000 	streq	r0, [r2], #-0
    798c:	0007b605 	andeq	fp, r7, r5, lsl #12
    7990:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7994:	00000788 	andeq	r0, r0, r8, lsl #15
    7998:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    799c:	03000009 	movweq	r0, #9
    79a0:	00323375 	eorseq	r3, r2, r5, ror r3
    79a4:	00452702 	subeq	r2, r5, r2, lsl #14
    79a8:	04020000 	streq	r0, [r2], #-0
    79ac:	0008c307 	andeq	ip, r8, r7, lsl #6
    79b0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    79b4:	00000b60 	andeq	r0, r0, r0, ror #22
    79b8:	00387503 	eorseq	r7, r8, r3, lsl #10
    79bc:	005d2902 	subseq	r2, sp, r2, lsl #18
    79c0:	01020000 	mrseq	r0, (UNDEF: 2)
    79c4:	00096508 	andeq	r6, r9, r8, lsl #10
    79c8:	03c60400 	biceq	r0, r6, #0, 8
    79cc:	2f020000 	svccs	0x00020000
    79d0:	0000006f 	andeq	r0, r0, pc, rrx
    79d4:	00004505 	andeq	r4, r0, r5, lsl #10
    79d8:	1f150400 	svcne	0x00150400
    79dc:	33020000 	movwcc	r0, #8192	; 0x2000
    79e0:	0000007f 	andeq	r0, r0, pc, ror r0
    79e4:	00006f06 	andeq	r6, r0, r6, lsl #30
    79e8:	5d010700 	stcpl	7, cr0, [r1, #-0]
    79ec:	02000000 	andeq	r0, r0, #0
    79f0:	00009d3c 	andeq	r9, r0, ip, lsr sp
    79f4:	1a300800 	bne	c099fc <__Stack_Size+0xc095fc>
    79f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    79fc:	00544553 	subseq	r4, r4, r3, asr r5
    7a00:	17040001 	strne	r0, [r4, -r1]
    7a04:	02000007 	andeq	r0, r0, #7
    7a08:	0000843c 	andeq	r8, r0, ip, lsr r4
    7a0c:	5d010700 	stcpl	7, cr0, [r1, #-0]
    7a10:	02000000 	andeq	r0, r0, #0
    7a14:	0000c13e 	andeq	ip, r0, lr, lsr r1
    7a18:	04ac0800 	strteq	r0, [ip], #2048	; 0x800
    7a1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7a20:	000008a0 	andeq	r0, r0, r0, lsr #17
    7a24:	a6040001 	strge	r0, [r4], -r1
    7a28:	02000000 	andeq	r0, r0, #0
    7a2c:	0000a83e 	andeq	sl, r0, lr, lsr r8
    7a30:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7a34:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    7a38:	0203100a 	andeq	r1, r3, #10
    7a3c:	00011102 	andeq	r1, r1, r2, lsl #2
    7a40:	2d590b00 	vldrcs	d16, [r9, #-0]
    7a44:	04030000 	streq	r0, [r3], #-0
    7a48:	00006402 	andeq	r6, r0, r2, lsl #8
    7a4c:	860b0000 	strhi	r0, [fp], -r0
    7a50:	0300002d 	movweq	r0, #45	; 0x2d
    7a54:	00640205 	rsbeq	r0, r4, r5, lsl #4
    7a58:	0c040000 	stceq	0, cr0, [r4], {-0}
    7a5c:	004c4156 	subeq	r4, ip, r6, asr r1
    7a60:	64020603 	strvs	r0, [r2], #-1539	; 0xfffff9fd
    7a64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7a68:	002d430b 	eoreq	r4, sp, fp, lsl #6
    7a6c:	02070300 	andeq	r0, r7, #0, 6
    7a70:	00000074 	andeq	r0, r0, r4, ror r0
    7a74:	490d000c 	stmdbmi	sp, {r2, r3}
    7a78:	0300002d 	movweq	r0, #45	; 0x2d
    7a7c:	00d30208 	sbcseq	r0, r3, r8, lsl #4
    7a80:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    7a84:	0100002d 	tsteq	r0, sp, lsr #32
    7a88:	0000002b 	andeq	r0, r0, fp, lsr #32
    7a8c:	00001800 	andeq	r1, r0, r0, lsl #16
    7a90:	409c0100 	addsmi	r0, ip, r0, lsl #2
    7a94:	0f000001 	svceq	0x00000001
    7a98:	00002d8b 	andeq	r2, r0, fp, lsl #27
    7a9c:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    7aa0:	50010000 	andpl	r0, r1, r0
    7aa4:	099d0e00 	ldmibeq	sp, {r9, sl, fp}
    7aa8:	42010000 	andmi	r0, r1, #0
    7aac:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
    7ab0:	0000000c 	andeq	r0, r0, ip
    7ab4:	01639c01 	cmneq	r3, r1, lsl #24
    7ab8:	cf0f0000 	svcgt	0x000f0000
    7abc:	01000005 	tsteq	r0, r5
    7ac0:	00003a42 	andeq	r3, r0, r2, asr #20
    7ac4:	00500100 	subseq	r0, r0, r0, lsl #2
    7ac8:	0008250e 	andeq	r2, r8, lr, lsl #10
    7acc:	3c550100 	ldfcce	f0, [r5], {-0}
    7ad0:	28080017 	stmdacs	r8, {r0, r1, r2, r4}
    7ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ad8:	0001889c 	muleq	r1, ip, r8
    7adc:	2d5e1000 	ldclcs	0, cr1, [lr, #-0]
    7ae0:	55010000 	strpl	r0, [r1, #-0]
    7ae4:	0000003a 	andeq	r0, r0, sl, lsr r0
    7ae8:	00003fb6 			; <UNDEFINED> instruction: 0x00003fb6
    7aec:	06ee0e00 	strbteq	r0, [lr], r0, lsl #28
    7af0:	70010000 	andvc	r0, r1, r0
    7af4:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    7af8:	00000018 	andeq	r0, r0, r8, lsl r0
    7afc:	01ab9c01 			; <UNDEFINED> instruction: 0x01ab9c01
    7b00:	e90f0000 	stmdb	pc, {}	; <UNPREDICTABLE>
    7b04:	01000015 	tsteq	r0, r5, lsl r0
    7b08:	0000c170 	andeq	ip, r0, r0, ror r1
    7b0c:	00500100 	subseq	r0, r0, r0, lsl #2
    7b10:	002cf111 	eoreq	pc, ip, r1, lsl r1	; <UNPREDICTABLE>
    7b14:	3a860100 	bcc	fe187f1c <SCS_BASE+0x1e179f1c>
    7b18:	00000000 	andeq	r0, r0, r0
    7b1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7b20:	01000000 	mrseq	r0, (UNDEF: 0)
    7b24:	2d20129c 	sfmcs	f1, 4, [r0, #-624]!	; 0xfffffd90
    7b28:	96010000 	strls	r0, [r1], -r0
    7b2c:	0000009d 	muleq	r0, sp, r0
    7b30:	00000000 	andeq	r0, r0, r0
    7b34:	0000001c 	andeq	r0, r0, ip, lsl r0
    7b38:	36109c01 	ldrcc	r9, [r0], -r1, lsl #24
    7b3c:	0100002d 	tsteq	r0, sp, lsr #32
    7b40:	00005396 	muleq	r0, r6, r3
    7b44:	003ff100 	eorseq	pc, pc, r0, lsl #2
    7b48:	21701300 	cmncs	r0, r0, lsl #6
    7b4c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    7b50:	0000003a 	andeq	r0, r0, sl, lsr r0
    7b54:	00004012 	andeq	r4, r0, r2, lsl r0
    7b58:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    7b5c:	3a980100 	bcc	fe607f64 <SCS_BASE+0x1e5f9f64>
    7b60:	31000000 	mrscc	r0, (UNDEF: 0)
    7b64:	13000040 	movwne	r0, #64	; 0x40
    7b68:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    7b6c:	009d9901 	addseq	r9, sp, r1, lsl #18
    7b70:	405e0000 	subsmi	r0, lr, r0
    7b74:	00000000 	andeq	r0, r0, r0
    7b78:	00000a0a 	andeq	r0, r0, sl, lsl #20
    7b7c:	1a960004 	bne	fe587b94 <SCS_BASE+0x1e579b94>
    7b80:	01040000 	mrseq	r0, (UNDEF: 4)
    7b84:	00000bf1 	strdeq	r0, [r0], -r1
    7b88:	002f2f0c 	eoreq	r2, pc, ip, lsl #30
    7b8c:	00051f00 	andeq	r1, r5, r0, lsl #30
    7b90:	00093800 	andeq	r3, r9, r0, lsl #16
    7b94:	00000000 	andeq	r0, r0, r0
    7b98:	0022a400 	eoreq	sl, r2, r0, lsl #8
    7b9c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7ba0:	000008c8 	andeq	r0, r0, r8, asr #17
    7ba4:	b6050402 	strlt	r0, [r5], -r2, lsl #8
    7ba8:	02000007 	andeq	r0, r0, #7
    7bac:	07880502 	streq	r0, [r8, r2, lsl #10]
    7bb0:	01020000 	mrseq	r0, (UNDEF: 2)
    7bb4:	00096706 	andeq	r6, r9, r6, lsl #14
    7bb8:	33750300 	cmncc	r5, #0, 6
    7bbc:	27020032 	smladxcs	r2, r2, r0, r0
    7bc0:	0000004c 	andeq	r0, r0, ip, asr #32
    7bc4:	c3070402 	movwgt	r0, #29698	; 0x7402
    7bc8:	03000008 	movweq	r0, #8
    7bcc:	00363175 	eorseq	r3, r6, r5, ror r1
    7bd0:	005e2802 	subseq	r2, lr, r2, lsl #16
    7bd4:	02020000 	andeq	r0, r2, #0
    7bd8:	000b6007 	andeq	r6, fp, r7
    7bdc:	38750300 	ldmdacc	r5!, {r8, r9}^
    7be0:	6f290200 	svcvs	0x00290200
    7be4:	02000000 	andeq	r0, r0, #0
    7be8:	09650801 	stmdbeq	r5!, {r0, fp}^
    7bec:	c6040000 	strgt	r0, [r4], -r0
    7bf0:	02000003 	andeq	r0, r0, #3
    7bf4:	0000812f 	andeq	r8, r0, pc, lsr #2
    7bf8:	004c0500 	subeq	r0, ip, r0, lsl #10
    7bfc:	42040000 	andmi	r0, r4, #0
    7c00:	02000002 	andeq	r0, r0, #2
    7c04:	00009130 	andeq	r9, r0, r0, lsr r1
    7c08:	005e0500 	subseq	r0, lr, r0, lsl #10
    7c0c:	01060000 	mrseq	r0, (UNDEF: 6)
    7c10:	0000006f 	andeq	r0, r0, pc, rrx
    7c14:	00af3c02 	adceq	r3, pc, r2, lsl #24
    7c18:	30070000 	andcc	r0, r7, r0
    7c1c:	0000001a 	andeq	r0, r0, sl, lsl r0
    7c20:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    7c24:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
    7c28:	00000717 	andeq	r0, r0, r7, lsl r7
    7c2c:	00963c02 	addseq	r3, r6, r2, lsl #24
    7c30:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    7c34:	02000020 	andeq	r0, r0, #32
    7c38:	0000963c 	andeq	r9, r0, ip, lsr r6
    7c3c:	6f010600 	svcvs	0x00010600
    7c40:	02000000 	andeq	r0, r0, #0
    7c44:	0000de3e 	andeq	sp, r0, lr, lsr lr
    7c48:	04ac0700 	strteq	r0, [ip], #1792	; 0x700
    7c4c:	07000000 	streq	r0, [r0, -r0]
    7c50:	000008a0 	andeq	r0, r0, r0, lsr #17
    7c54:	a6040001 	strge	r0, [r4], -r1
    7c58:	02000000 	andeq	r0, r0, #0
    7c5c:	0000c53e 	andeq	ip, r0, lr, lsr r5
    7c60:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7c64:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    7c68:	38031c09 	stmdacc	r3, {r0, r3, sl, fp, ip}
    7c6c:	0001ae02 	andeq	sl, r1, r2, lsl #28
    7c70:	52530a00 	subspl	r0, r3, #0, 20
    7c74:	023a0300 	eorseq	r0, sl, #0, 6
    7c78:	00000086 	andeq	r0, r0, r6, lsl #1
    7c7c:	07420b00 	strbeq	r0, [r2, -r0, lsl #22]
    7c80:	3b030000 	blcc	c7c88 <__Stack_Size+0xc7888>
    7c84:	00005302 	andeq	r5, r0, r2, lsl #6
    7c88:	440a0200 	strmi	r0, [sl], #-512	; 0xfffffe00
    7c8c:	3c030052 	stccc	0, cr0, [r3], {82}	; 0x52
    7c90:	00008602 	andeq	r8, r0, r2, lsl #12
    7c94:	4c0b0400 	cfstrsmi	mvf0, [fp], {-0}
    7c98:	03000007 	movweq	r0, #7
    7c9c:	0053023d 	subseq	r0, r3, sp, lsr r2
    7ca0:	0a060000 	beq	187ca8 <__Stack_Size+0x1878a8>
    7ca4:	00525242 	subseq	r5, r2, r2, asr #4
    7ca8:	86023e03 	strhi	r3, [r2], -r3, lsl #28
    7cac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7cb0:	0007560b 	andeq	r5, r7, fp, lsl #12
    7cb4:	023f0300 	eorseq	r0, pc, #0, 6
    7cb8:	00000053 	andeq	r0, r0, r3, asr r0
    7cbc:	52430a0a 	subpl	r0, r3, #40960	; 0xa000
    7cc0:	40030031 	andmi	r0, r3, r1, lsr r0
    7cc4:	00008602 	andeq	r8, r0, r2, lsl #12
    7cc8:	600b0c00 	andvs	r0, fp, r0, lsl #24
    7ccc:	03000007 	movweq	r0, #7
    7cd0:	00530241 	subseq	r0, r3, r1, asr #4
    7cd4:	0a0e0000 	beq	387cdc <__Stack_Size+0x3878dc>
    7cd8:	00325243 	eorseq	r5, r2, r3, asr #4
    7cdc:	86024203 	strhi	r4, [r2], -r3, lsl #4
    7ce0:	10000000 	andne	r0, r0, r0
    7ce4:	00076a0b 	andeq	r6, r7, fp, lsl #20
    7ce8:	02430300 	subeq	r0, r3, #0, 6
    7cec:	00000053 	andeq	r0, r0, r3, asr r0
    7cf0:	52430a12 	subpl	r0, r3, #73728	; 0x12000
    7cf4:	44030033 	strmi	r0, [r3], #-51	; 0xffffffcd
    7cf8:	00008602 	andeq	r8, r0, r2, lsl #12
    7cfc:	740b1400 	strvc	r1, [fp], #-1024	; 0xfffffc00
    7d00:	03000007 	movweq	r0, #7
    7d04:	00530245 	subseq	r0, r3, r5, asr #4
    7d08:	0b160000 	bleq	587d10 <__Stack_Size+0x587910>
    7d0c:	000001cb 	andeq	r0, r0, fp, asr #3
    7d10:	86024603 	strhi	r4, [r2], -r3, lsl #12
    7d14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7d18:	00077e0b 	andeq	r7, r7, fp, lsl #28
    7d1c:	02470300 	subeq	r0, r7, #0, 6
    7d20:	00000053 	andeq	r0, r0, r3, asr r0
    7d24:	180c001a 	stmdane	ip, {r1, r3, r4}
    7d28:	03000004 	movweq	r0, #4
    7d2c:	00f00248 	rscseq	r0, r0, r8, asr #4
    7d30:	100d0000 	andne	r0, sp, r0
    7d34:	020b1a04 	andeq	r1, fp, #4, 20	; 0x4000
    7d38:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    7d3c:	04000002 	streq	r0, [r0], #-2
    7d40:	0000411c 	andeq	r4, r0, ip, lsl r1
    7d44:	010e0000 	mrseq	r0, (UNDEF: 14)
    7d48:	04000001 	streq	r0, [r0], #-1
    7d4c:	0000531d 	andeq	r5, r0, sp, lsl r3
    7d50:	4b0e0400 	blmi	388d58 <__Stack_Size+0x388958>
    7d54:	04000001 	streq	r0, [r0], #-1
    7d58:	0000531e 	andeq	r5, r0, lr, lsl r3
    7d5c:	ab0e0600 	blge	389564 <__Stack_Size+0x389164>
    7d60:	0400000a 	streq	r0, [r0], #-10
    7d64:	0000531f 	andeq	r5, r0, pc, lsl r3
    7d68:	0f0e0800 	svceq	0x000e0800
    7d6c:	04000005 	streq	r0, [r0], #-5
    7d70:	00005320 	andeq	r5, r0, r0, lsr #6
    7d74:	540e0a00 	strpl	r0, [lr], #-2560	; 0xfffff600
    7d78:	04000005 	streq	r0, [r0], #-5
    7d7c:	00005321 	andeq	r5, r0, r1, lsr #6
    7d80:	04000c00 	streq	r0, [r0], #-3072	; 0xfffff400
    7d84:	00000a7e 	andeq	r0, r0, lr, ror sl
    7d88:	01ba2204 			; <UNDEFINED> instruction: 0x01ba2204
    7d8c:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    7d90:	024f2504 	subeq	r2, pc, #4, 10	; 0x1000000
    7d94:	800e0000 	andhi	r0, lr, r0
    7d98:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    7d9c:	00005327 	andeq	r5, r0, r7, lsr #6
    7da0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    7da4:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    7da8:	00005328 	andeq	r5, r0, r8, lsr #6
    7dac:	ac0e0200 	sfmge	f0, 4, [lr], {-0}
    7db0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    7db4:	00005329 	andeq	r5, r0, r9, lsr #6
    7db8:	400e0400 	andmi	r0, lr, r0, lsl #8
    7dbc:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    7dc0:	0000532a 	andeq	r5, r0, sl, lsr #6
    7dc4:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
    7dc8:	00002de5 	andeq	r2, r0, r5, ror #27
    7dcc:	02162b04 	andseq	r2, r6, #4, 22	; 0x1000
    7dd0:	140d0000 	strne	r0, [sp], #-0
    7dd4:	029f1905 	addseq	r1, pc, #81920	; 0x14000
    7dd8:	210e0000 	mrscs	r0, (UNDEF: 14)
    7ddc:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    7de0:	0000411b 	andeq	r4, r0, fp, lsl r1
    7de4:	e70e0000 	str	r0, [lr, -r0]
    7de8:	05000020 	streq	r0, [r0, #-32]	; 0xffffffe0
    7dec:	0000411c 	andeq	r4, r0, ip, lsl r1
    7df0:	790e0400 	stmdbvc	lr, {sl}
    7df4:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    7df8:	0000411d 	andeq	r4, r0, sp, lsl r1
    7dfc:	3d0e0800 	stccc	8, cr0, [lr, #-0]
    7e00:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    7e04:	0000411e 	andeq	r4, r0, lr, lsl r1
    7e08:	c20e0c00 	andgt	r0, lr, #0, 24
    7e0c:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    7e10:	0000411f 	andeq	r4, r0, pc, lsl r1
    7e14:	04001000 	streq	r1, [r0], #-0
    7e18:	000020af 	andeq	r2, r0, pc, lsr #1
    7e1c:	025a2005 	subseq	r2, sl, #5
    7e20:	bd0f0000 	stclt	0, cr0, [pc, #-0]	; 7e28 <__Stack_Size+0x7a28>
    7e24:	01000009 	tsteq	r0, r9
    7e28:	00177c5a 	andseq	r7, r7, sl, asr ip
    7e2c:	00009c08 	andeq	r9, r0, r8, lsl #24
    7e30:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    7e34:	10000003 	andne	r0, r0, r3
    7e38:	00002f28 	andeq	r2, r0, r8, lsr #30
    7e3c:	03745a01 	cmneq	r4, #4096	; 0x1000
    7e40:	40990000 	addsmi	r0, r9, r0
    7e44:	b0110000 	andslt	r0, r1, r0
    7e48:	e9080017 	stmdb	r8, {r0, r1, r2, r4}
    7e4c:	e8000009 	stmda	r0, {r0, r3}
    7e50:	12000002 	andne	r0, r0, #2
    7e54:	0a035001 	beq	dbe60 <__Stack_Size+0xdba60>
    7e58:	01124000 	tsteq	r2, r0
    7e5c:	00310151 	eorseq	r0, r1, r1, asr r1
    7e60:	0017be13 	andseq	fp, r7, r3, lsl lr
    7e64:	0009e908 	andeq	lr, r9, r8, lsl #18
    7e68:	00030200 	andeq	r0, r3, r0, lsl #4
    7e6c:	50011200 	andpl	r1, r1, r0, lsl #4
    7e70:	40000a03 	andmi	r0, r0, r3, lsl #20
    7e74:	01510112 	cmpeq	r1, r2, lsl r1
    7e78:	c8110030 	ldmdagt	r1, {r4, r5}
    7e7c:	f5080017 			; <UNDEFINED> instruction: 0xf5080017
    7e80:	1c000009 	stcne	0, cr0, [r0], {9}
    7e84:	12000003 	andne	r0, r0, #3
    7e88:	40035001 	andmi	r5, r3, r1
    7e8c:	0112243d 	tsteq	r2, sp, lsr r4
    7e90:	00310151 	eorseq	r0, r1, r1, asr r1
    7e94:	0017da11 	andseq	sp, r7, r1, lsl sl
    7e98:	0009f508 	andeq	pc, r9, r8, lsl #10
    7e9c:	00033600 	andeq	r3, r3, r0, lsl #12
    7ea0:	50011200 	andpl	r1, r1, r0, lsl #4
    7ea4:	243e4003 	ldrtcs	r4, [lr], #-3
    7ea8:	01510112 	cmpeq	r1, r2, lsl r1
    7eac:	ec110031 	ldc	0, cr0, [r1], {49}	; 0x31
    7eb0:	f5080017 			; <UNDEFINED> instruction: 0xf5080017
    7eb4:	50000009 	andpl	r0, r0, r9
    7eb8:	12000003 	andne	r0, r0, #3
    7ebc:	40035001 	andmi	r5, r3, r1
    7ec0:	0112243f 	tsteq	r2, pc, lsr r4
    7ec4:	00310151 	eorseq	r0, r1, r1, asr r1
    7ec8:	0017fe11 	andseq	pc, r7, r1, lsl lr	; <UNPREDICTABLE>
    7ecc:	0009f508 	andeq	pc, r9, r8, lsl #10
    7ed0:	00036a00 	andeq	r6, r3, r0, lsl #20
    7ed4:	50011200 	andpl	r1, r1, r0, lsl #4
    7ed8:	24404003 	strbcs	r4, [r0], #-3
    7edc:	01510112 	cmpeq	r1, r2, lsl r1
    7ee0:	0c140031 	ldceq	0, cr0, [r4], {49}	; 0x31
    7ee4:	f5080018 			; <UNDEFINED> instruction: 0xf5080018
    7ee8:	00000009 	andeq	r0, r0, r9
    7eec:	01ae0415 			; <UNDEFINED> instruction: 0x01ae0415
    7ef0:	d00f0000 	andle	r0, pc, r0
    7ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ef8:	0018188c 	andseq	r1, r8, ip, lsl #17
    7efc:	00008808 	andeq	r8, r0, r8, lsl #16
    7f00:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    7f04:	10000004 	andne	r0, r0, r4
    7f08:	00002f28 	andeq	r2, r0, r8, lsr #30
    7f0c:	03748c01 	cmneq	r4, #256	; 0x100
    7f10:	41290000 			; <UNDEFINED> instruction: 0x41290000
    7f14:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
    7f18:	0100002f 	tsteq	r0, pc, lsr #32
    7f1c:	0004178c 	andeq	r1, r4, ip, lsl #15
    7f20:	00415500 	subeq	r5, r1, r0, lsl #10
    7f24:	1aaa1600 	bne	fea8d72c <SCS_BASE+0x1ea7f72c>
    7f28:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    7f2c:	00000041 	andeq	r0, r0, r1, asr #32
    7f30:	00004181 	andeq	r4, r0, r1, lsl #3
    7f34:	002e4216 	eoreq	r4, lr, r6, lsl r2
    7f38:	418e0100 	orrmi	r0, lr, r0, lsl #2
    7f3c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    7f40:	16000042 	strne	r0, [r0], -r2, asr #32
    7f44:	00002d9d 	muleq	r0, sp, sp
    7f48:	00418f01 	subeq	r8, r1, r1, lsl #30
    7f4c:	42e50000 	rscmi	r0, r5, #0
    7f50:	bf160000 	svclt	0x00160000
    7f54:	0100002f 	tsteq	r0, pc, lsr #32
    7f58:	00004190 	muleq	r0, r0, r1
    7f5c:	00435e00 	subeq	r5, r3, r0, lsl #28
    7f60:	2ed81600 	cdpcs	6, 13, cr1, cr8, cr0, {0}
    7f64:	91010000 	mrsls	r0, (UNDEF: 1)
    7f68:	00000041 	andeq	r0, r0, r1, asr #32
    7f6c:	000043fc 	strdeq	r4, [r0], -ip
    7f70:	002ee317 	eoreq	lr, lr, r7, lsl r3
    7f74:	9f920100 	svcls	0x00920100
    7f78:	02000002 	andeq	r0, r0, #2
    7f7c:	5e185c91 	mrcpl	12, 0, r5, cr8, cr1, {4}
    7f80:	01080018 	tsteq	r8, r8, lsl r0
    7f84:	1200000a 	andne	r0, r0, #10
    7f88:	91025001 	tstls	r2, r1
    7f8c:	1500005c 	strne	r0, [r0, #-92]	; 0xffffffa4
    7f90:	00020b04 	andeq	r0, r2, r4, lsl #22
    7f94:	0cb10f00 	ldceq	15, cr0, [r1]
    7f98:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    7f9c:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    7fa0:	00000016 	andeq	r0, r0, r6, lsl r0
    7fa4:	04409c01 	strbeq	r9, [r0], #-3073	; 0xfffff3ff
    7fa8:	49190000 	ldmdbmi	r9, {}	; <UNPREDICTABLE>
    7fac:	0100002f 	tsteq	r0, pc, lsr #32
    7fb0:	000417e8 	andeq	r1, r4, r8, ror #15
    7fb4:	00500100 	subseq	r0, r0, r0, lsl #2
    7fb8:	002ffb0f 	eoreq	pc, pc, pc, lsl #22
    7fbc:	00ff0100 	rscseq	r0, pc, r0, lsl #2
    7fc0:	20000000 	andcs	r0, r0, r0
    7fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fc8:	0004829c 	muleq	r4, ip, r2
    7fcc:	2f281900 	svccs	0x00281900
    7fd0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    7fd4:	00000374 	andeq	r0, r0, r4, ror r3
    7fd8:	9f105001 	svcls	0x00105001
    7fdc:	0100002e 	tsteq	r0, lr, lsr #32
    7fe0:	000482ff 	strdeq	r8, [r4], -pc	; <UNPREDICTABLE>
    7fe4:	00442800 	subeq	r2, r4, r0, lsl #16
    7fe8:	1aaa1a00 	bne	fea8e7f0 <SCS_BASE+0x1ea807f0>
    7fec:	01010000 	mrseq	r0, (UNDEF: 1)
    7ff0:	00004101 	andeq	r4, r0, r1, lsl #2
    7ff4:	00444900 	subeq	r4, r4, r0, lsl #18
    7ff8:	04150000 	ldreq	r0, [r5], #-0
    7ffc:	0000024f 	andeq	r0, r0, pc, asr #4
    8000:	002ec21b 	eoreq	ip, lr, fp, lsl r2
    8004:	01230100 			; <UNDEFINED> instruction: 0x01230100
    8008:	00000000 	andeq	r0, r0, r0
    800c:	0000000c 	andeq	r0, r0, ip
    8010:	04ad9c01 	strteq	r9, [sp], #3073	; 0xc01
    8014:	9f1c0000 	svcls	0x001c0000
    8018:	0100002e 	tsteq	r0, lr, lsr #32
    801c:	04820123 	streq	r0, [r2], #291	; 0x123
    8020:	50010000 	andpl	r0, r1, r0
    8024:	01f21b00 	mvnseq	r1, r0, lsl #22
    8028:	37010000 	strcc	r0, [r1, -r0]
    802c:	0018b601 	andseq	fp, r8, r1, lsl #12
    8030:	00001808 	andeq	r1, r0, r8, lsl #16
    8034:	e09c0100 	adds	r0, ip, r0, lsl #2
    8038:	1c000004 	stcne	0, cr0, [r0], {4}
    803c:	00002f28 	andeq	r2, r0, r8, lsr #30
    8040:	74013701 	strvc	r3, [r1], #-1793	; 0xfffff8ff
    8044:	01000003 	tsteq	r0, r3
    8048:	15e91c50 	strbne	r1, [r9, #3152]!	; 0xc50
    804c:	37010000 	strcc	r0, [r1, -r0]
    8050:	0000de01 	andeq	sp, r0, r1, lsl #28
    8054:	00510100 	subseq	r0, r1, r0, lsl #2
    8058:	0007ef1b 	andeq	lr, r7, fp, lsl pc
    805c:	01620100 	cmneq	r2, r0, lsl #2
    8060:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    8064:	00000030 	andeq	r0, r0, r0, lsr r0
    8068:	05639c01 	strbeq	r9, [r3, #-3073]!	; 0xfffff3ff
    806c:	281d0000 	ldmdacs	sp, {}	; <UNPREDICTABLE>
    8070:	0100002f 	tsteq	r0, pc, lsr #32
    8074:	03740162 	cmneq	r4, #-2147483624	; 0x80000018
    8078:	44830000 	strmi	r0, [r3], #0
    807c:	2a1d0000 	bcs	748084 <__Stack_Size+0x747c84>
    8080:	0100002e 	tsteq	r0, lr, lsr #32
    8084:	00530162 	subseq	r0, r3, r2, ror #2
    8088:	44bc0000 	ldrtmi	r0, [ip], #0
    808c:	e91c0000 	ldmdb	ip, {}	; <UNPREDICTABLE>
    8090:	01000015 	tsteq	r0, r5, lsl r0
    8094:	00de0162 	sbcseq	r0, lr, r2, ror #2
    8098:	52010000 	andpl	r0, r1, #0
    809c:	00304e1a 	eorseq	r4, r0, sl, lsl lr
    80a0:	01640100 	cmneq	r4, r0, lsl #2
    80a4:	00000041 	andeq	r0, r0, r1, asr #32
    80a8:	000044dd 	ldrdeq	r4, [r0], -sp
    80ac:	002f691a 	eoreq	r6, pc, sl, lsl r9	; <UNPREDICTABLE>
    80b0:	01640100 	cmneq	r4, r0, lsl #2
    80b4:	00000041 	andeq	r0, r0, r1, asr #32
    80b8:	00004501 	andeq	r4, r0, r1, lsl #10
    80bc:	0030391a 	eorseq	r3, r0, sl, lsl r9
    80c0:	01640100 	cmneq	r4, r0, lsl #2
    80c4:	00000041 	andeq	r0, r0, r1, asr #32
    80c8:	0000453c 	andeq	r4, r0, ip, lsr r5
    80cc:	002ed81e 	eoreq	sp, lr, lr, lsl r8
    80d0:	01650100 	cmneq	r5, r0, lsl #2
    80d4:	00000041 	andeq	r0, r0, r1, asr #32
    80d8:	1b005001 	blne	1c0e4 <__Stack_Size+0x1bce4>
    80dc:	00002e1d 	andeq	r2, r0, sp, lsl lr
    80e0:	00019d01 	andeq	r9, r1, r1, lsl #26
    80e4:	12000000 	andne	r0, r0, #0
    80e8:	01000000 	mrseq	r0, (UNDEF: 0)
    80ec:	0005a69c 	muleq	r5, ip, r6
    80f0:	2f281c00 	svccs	0x00281c00
    80f4:	9d010000 	stcls	0, cr0, [r1, #-0]
    80f8:	00037401 	andeq	r7, r3, r1, lsl #8
    80fc:	1d500100 	ldfnee	f0, [r0, #-0]
    8100:	00002eb5 			; <UNDEFINED> instruction: 0x00002eb5
    8104:	53019d01 	movwpl	r9, #7425	; 0x1d01
    8108:	66000000 	strvs	r0, [r0], -r0
    810c:	1c000045 	stcne	0, cr0, [r0], {69}	; 0x45
    8110:	000015e9 	andeq	r1, r0, r9, ror #11
    8114:	de019d01 	cdple	13, 0, cr9, cr1, cr1, {0}
    8118:	01000000 	mrseq	r0, (UNDEF: 0)
    811c:	f41b0052 			; <UNDEFINED> instruction: 0xf41b0052
    8120:	0100002e 	tsteq	r0, lr, lsr #32
    8124:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    8128:	00160000 	andseq	r0, r6, r0
    812c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8130:	000005db 	ldrdeq	r0, [r0], -fp
    8134:	002f281c 	eoreq	r2, pc, ip, lsl r8	; <UNPREDICTABLE>
    8138:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    813c:	00000374 	andeq	r0, r0, r4, ror r3
    8140:	5a1d5001 	bpl	75c14c <__Stack_Size+0x75bd4c>
    8144:	0100002f 	tsteq	r0, pc, lsr #32
    8148:	006501bc 	strhteq	r0, [r5], #-28	; 0xffffffe4
    814c:	45a00000 	strmi	r0, [r0, #0]!
    8150:	1b000000 	blne	8158 <__Stack_Size+0x7d58>
    8154:	0000300b 	andeq	r3, r0, fp
    8158:	0001d501 	andeq	sp, r1, r1, lsl #10
    815c:	16000000 	strne	r0, [r0], -r0
    8160:	01000000 	mrseq	r0, (UNDEF: 0)
    8164:	0006109c 	muleq	r6, ip, r0
    8168:	2f281c00 	svccs	0x00281c00
    816c:	d5010000 	strle	r0, [r1, #-0]
    8170:	00037401 	andeq	r7, r3, r1, lsl #8
    8174:	1d500100 	ldfnee	f0, [r0, #-0]
    8178:	00002e10 	andeq	r2, r0, r0, lsl lr
    817c:	5301d501 	movwpl	sp, #5377	; 0x1501
    8180:	c1000000 	mrsgt	r0, (UNDEF: 0)
    8184:	00000045 	andeq	r0, r0, r5, asr #32
    8188:	002f8c1b 	eoreq	r8, pc, fp, lsl ip	; <UNPREDICTABLE>
    818c:	01ea0100 	mvneq	r0, r0, lsl #2
    8190:	00000000 	andeq	r0, r0, r0
    8194:	00000018 	andeq	r0, r0, r8, lsl r0
    8198:	06439c01 	strbeq	r9, [r3], -r1, lsl #24
    819c:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    81a0:	0100002f 	tsteq	r0, pc, lsr #32
    81a4:	037401ea 	cmneq	r4, #-2147483590	; 0x8000003a
    81a8:	50010000 	andpl	r0, r1, r0
    81ac:	0015e91c 	andseq	lr, r5, ip, lsl r9
    81b0:	01ea0100 	mvneq	r0, r0, lsl #2
    81b4:	000000de 	ldrdeq	r0, [r0], -lr
    81b8:	1b005101 	blne	1c5c4 <__Stack_Size+0x1c1c4>
    81bc:	00002e73 	andeq	r2, r0, r3, ror lr
    81c0:	00020a01 	andeq	r0, r2, r1, lsl #20
    81c4:	16000000 	strne	r0, [r0], -r0
    81c8:	01000000 	mrseq	r0, (UNDEF: 0)
    81cc:	0006789c 	muleq	r6, ip, r8
    81d0:	2f281c00 	svccs	0x00281c00
    81d4:	0a010000 	beq	481dc <__Stack_Size+0x47ddc>
    81d8:	00037402 	andeq	r7, r3, r2, lsl #8
    81dc:	1d500100 	ldfnee	f0, [r0, #-0]
    81e0:	00002dca 	andeq	r2, r0, sl, asr #27
    81e4:	53020a01 	movwpl	r0, #10753	; 0x2a01
    81e8:	e2000000 	and	r0, r0, #0
    81ec:	00000045 	andeq	r0, r0, r5, asr #32
    81f0:	002fb21b 	eoreq	fp, pc, fp, lsl r2	; <UNPREDICTABLE>
    81f4:	021f0100 	andseq	r0, pc, #0, 2
    81f8:	00000000 	andeq	r0, r0, r0
    81fc:	00000018 	andeq	r0, r0, r8, lsl r0
    8200:	06ab9c01 	strteq	r9, [fp], r1, lsl #24
    8204:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    8208:	0100002f 	tsteq	r0, pc, lsr #32
    820c:	0374021f 	cmneq	r4, #-268435455	; 0xf0000001
    8210:	50010000 	andpl	r0, r1, r0
    8214:	0015e91c 	andseq	lr, r5, ip, lsl r9
    8218:	021f0100 	andseq	r0, pc, #0, 2
    821c:	000000de 	ldrdeq	r0, [r0], -lr
    8220:	1b005101 	blne	1c62c <__Stack_Size+0x1c22c>
    8224:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    8228:	fe023b01 	vseleq.f64	d3, d2, d1
    822c:	08080018 	stmdaeq	r8, {r3, r4}
    8230:	01000000 	mrseq	r0, (UNDEF: 0)
    8234:	0006e09c 	muleq	r6, ip, r0
    8238:	2f281c00 	svccs	0x00281c00
    823c:	3b010000 	blcc	48244 <__Stack_Size+0x47e44>
    8240:	00037402 	andeq	r7, r3, r2, lsl #8
    8244:	1d500100 	ldfnee	f0, [r0, #-0]
    8248:	0000182f 	andeq	r1, r0, pc, lsr #16
    824c:	53023b01 	movwpl	r3, #11009	; 0x2b01
    8250:	03000000 	movweq	r0, #0
    8254:	00000046 	andeq	r0, r0, r6, asr #32
    8258:	000d801f 	andeq	r8, sp, pc, lsl r0
    825c:	024e0100 	subeq	r0, lr, #0, 2
    8260:	00000053 	andeq	r0, r0, r3, asr r0
    8264:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
    8268:	00000008 	andeq	r0, r0, r8
    826c:	070b9c01 	streq	r9, [fp, -r1, lsl #24]
    8270:	281d0000 	ldmdacs	sp, {}	; <UNPREDICTABLE>
    8274:	0100002f 	tsteq	r0, pc, lsr #32
    8278:	0374024e 	cmneq	r4, #-536870908	; 0xe0000004
    827c:	46240000 	strtmi	r0, [r4], -r0
    8280:	1b000000 	blne	8288 <__Stack_Size+0x7e88>
    8284:	00002f18 	andeq	r2, r0, r8, lsl pc
    8288:	00026001 	andeq	r6, r2, r1
    828c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8290:	01000000 	mrseq	r0, (UNDEF: 0)
    8294:	0007309c 	muleq	r7, ip, r0
    8298:	2f281c00 	svccs	0x00281c00
    829c:	60010000 	andvs	r0, r1, r0
    82a0:	00037402 	andeq	r7, r3, r2, lsl #8
    82a4:	00500100 	subseq	r0, r0, r0, lsl #2
    82a8:	002f051b 	eoreq	r0, pc, fp, lsl r5	; <UNPREDICTABLE>
    82ac:	02730100 	rsbseq	r0, r3, #0, 2
    82b0:	00000000 	andeq	r0, r0, r0
    82b4:	00000012 	andeq	r0, r0, r2, lsl r0
    82b8:	07659c01 	strbeq	r9, [r5, -r1, lsl #24]!
    82bc:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    82c0:	0100002f 	tsteq	r0, pc, lsr #32
    82c4:	03740273 	cmneq	r4, #805306375	; 0x30000007
    82c8:	50010000 	andpl	r0, r1, r0
    82cc:	002e631d 	eoreq	r6, lr, sp, lsl r3
    82d0:	02730100 	rsbseq	r0, r3, #0, 2
    82d4:	00000065 	andeq	r0, r0, r5, rrx
    82d8:	00004645 	andeq	r4, r0, r5, asr #12
    82dc:	2db71b00 	ldccs	11, cr1, [r7]
    82e0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    82e4:	00000002 	andeq	r0, r0, r2
    82e8:	00001200 	andeq	r1, r0, r0, lsl #4
    82ec:	9a9c0100 	bls	fe7086f4 <SCS_BASE+0x1e6fa6f4>
    82f0:	1c000007 	stcne	0, cr0, [r0], {7}
    82f4:	00002f28 	andeq	r2, r0, r8, lsr #30
    82f8:	74028901 	strvc	r8, [r2], #-2305	; 0xfffff6ff
    82fc:	01000003 	tsteq	r0, r3
    8300:	301e1d50 	andscc	r1, lr, r0, asr sp
    8304:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    8308:	00006502 	andeq	r6, r0, r2, lsl #10
    830c:	00466600 	subeq	r6, r6, r0, lsl #12
    8310:	e81b0000 	ldmda	fp, {}	; <UNPREDICTABLE>
    8314:	0100002f 	tsteq	r0, pc, lsr #32
    8318:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    831c:	00180000 	andseq	r0, r8, r0
    8320:	9c010000 	stcls	0, cr0, [r1], {-0}
    8324:	000007cd 	andeq	r0, r0, sp, asr #15
    8328:	002f281c 	eoreq	r2, pc, ip, lsl r8	; <UNPREDICTABLE>
    832c:	029f0100 	addseq	r0, pc, #0, 2
    8330:	00000374 	andeq	r0, r0, r4, ror r3
    8334:	e91c5001 	ldmdb	ip, {r0, ip, lr}
    8338:	01000015 	tsteq	r0, r5, lsl r0
    833c:	00de029f 	smullseq	r0, lr, pc, r2	; <UNPREDICTABLE>
    8340:	51010000 	mrspl	r0, (UNDEF: 1)
    8344:	2fd11b00 	svccs	0x00d11b00
    8348:	bc010000 	stclt	0, cr0, [r1], {-0}
    834c:	00000002 	andeq	r0, r0, r2
    8350:	00001800 	andeq	r1, r0, r0, lsl #16
    8354:	009c0100 	addseq	r0, ip, r0, lsl #2
    8358:	1c000008 	stcne	0, cr0, [r0], {8}
    835c:	00002f28 	andeq	r2, r0, r8, lsr #30
    8360:	7402bc01 	strvc	fp, [r2], #-3073	; 0xfffff3ff
    8364:	01000003 	tsteq	r0, r3
    8368:	15e91c50 	strbne	r1, [r9, #3152]!	; 0xc50
    836c:	bc010000 	stclt	0, cr0, [r1], {-0}
    8370:	0000de02 	andeq	sp, r0, r2, lsl #28
    8374:	00510100 	subseq	r0, r1, r0, lsl #2
    8378:	002dfc1b 	eoreq	pc, sp, fp, lsl ip	; <UNPREDICTABLE>
    837c:	02d90100 	sbcseq	r0, r9, #0, 2
    8380:	00000000 	andeq	r0, r0, r0
    8384:	00000018 	andeq	r0, r0, r8, lsl r0
    8388:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
    838c:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    8390:	0100002f 	tsteq	r0, pc, lsr #32
    8394:	037402d9 	cmneq	r4, #-1879048179	; 0x9000000d
    8398:	50010000 	andpl	r0, r1, r0
    839c:	0015e91c 	andseq	lr, r5, ip, lsl r9
    83a0:	02d90100 	sbcseq	r0, r9, #0, 2
    83a4:	000000de 	ldrdeq	r0, [r0], -lr
    83a8:	1b005101 	blne	1c7b4 <__Stack_Size+0x1c3b4>
    83ac:	00002f6f 	andeq	r2, r0, pc, ror #30
    83b0:	0002f801 	andeq	pc, r2, r1, lsl #16
    83b4:	16000000 	strne	r0, [r0], -r0
    83b8:	01000000 	mrseq	r0, (UNDEF: 0)
    83bc:	0008689c 	muleq	r8, ip, r8
    83c0:	2f281c00 	svccs	0x00281c00
    83c4:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    83c8:	00037402 	andeq	r7, r3, r2, lsl #8
    83cc:	1d500100 	ldfnee	f0, [r0, #-0]
    83d0:	00002e33 	andeq	r2, r0, r3, lsr lr
    83d4:	5302f801 	movwpl	pc, #10241	; 0x2801	; <UNPREDICTABLE>
    83d8:	87000000 	strhi	r0, [r0, -r0]
    83dc:	00000046 	andeq	r0, r0, r6, asr #32
    83e0:	002fa41b 	eoreq	sl, pc, fp, lsl r4	; <UNPREDICTABLE>
    83e4:	030d0100 	movweq	r0, #53504	; 0xd100
    83e8:	00000000 	andeq	r0, r0, r0
    83ec:	00000018 	andeq	r0, r0, r8, lsl r0
    83f0:	089b9c01 	ldmeq	fp, {r0, sl, fp, ip, pc}
    83f4:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    83f8:	0100002f 	tsteq	r0, pc, lsr #32
    83fc:	0374030d 	cmneq	r4, #872415232	; 0x34000000
    8400:	50010000 	andpl	r0, r1, r0
    8404:	0015e91c 	andseq	lr, r5, ip, lsl r9
    8408:	030d0100 	movweq	r0, #53504	; 0xd100
    840c:	000000de 	ldrdeq	r0, [r0], -lr
    8410:	1f005101 	svcne	0x00005101
    8414:	0000031a 	andeq	r0, r0, sl, lsl r3
    8418:	af033501 	svcge	0x00033501
    841c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8420:	0c080019 	stceq	0, cr0, [r8], {25}
    8424:	01000000 	mrseq	r0, (UNDEF: 0)
    8428:	0008e49c 	muleq	r8, ip, r4
    842c:	2f281d00 	svccs	0x00281d00
    8430:	35010000 	strcc	r0, [r1, #-0]
    8434:	00037403 	andeq	r7, r3, r3, lsl #8
    8438:	0046a800 	subeq	sl, r6, r0, lsl #16
    843c:	2e941c00 	cdpcs	12, 9, cr1, cr4, cr0, {0}
    8440:	35010000 	strcc	r0, [r1, #-0]
    8444:	00005303 	andeq	r5, r0, r3, lsl #6
    8448:	1a510100 	bne	1448850 <__Stack_Size+0x1448450>
    844c:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    8450:	af033701 	svcge	0x00033701
    8454:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    8458:	00000046 	andeq	r0, r0, r6, asr #32
    845c:	0008531b 	andeq	r5, r8, fp, lsl r3
    8460:	03690100 	cmneq	r9, #0, 2
    8464:	0800191a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip}
    8468:	00000008 	andeq	r0, r0, r8
    846c:	09199c01 	ldmdbeq	r9, {r0, sl, fp, ip, pc}
    8470:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    8474:	0100002f 	tsteq	r0, pc, lsr #32
    8478:	03740369 	cmneq	r4, #-1543503871	; 0xa4000001
    847c:	50010000 	andpl	r0, r1, r0
    8480:	002e941d 	eoreq	r9, lr, sp, lsl r4
    8484:	03690100 	cmneq	r9, #0, 2
    8488:	00000053 	andeq	r0, r0, r3, asr r0
    848c:	000046f1 	strdeq	r4, [r0], -r1
    8490:	0d221f00 	stceq	15, cr1, [r2, #-0]
    8494:	8a010000 	bhi	4849c <__Stack_Size+0x4809c>
    8498:	0000ba03 	andeq	fp, r0, r3, lsl #20
    849c:	00192200 	andseq	r2, r9, r0, lsl #4
    84a0:	00004008 	andeq	r4, r0, r8
    84a4:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    84a8:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    84ac:	00002f28 	andeq	r2, r0, r8, lsr #30
    84b0:	74038a01 	strvc	r8, [r3], #-2561	; 0xfffff5ff
    84b4:	12000003 	andne	r0, r0, #3
    84b8:	1d000047 	stcne	0, cr0, [r0, #-284]	; 0xfffffee4
    84bc:	00002e2a 	andeq	r2, r0, sl, lsr #28
    84c0:	53038a01 	movwpl	r8, #14849	; 0x3a01
    84c4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    84c8:	1a000047 	bne	85ec <__Stack_Size+0x81ec>
    84cc:	00002f68 	andeq	r2, r0, r8, ror #30
    84d0:	41038c01 	tstmi	r3, r1, lsl #24
    84d4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    84d8:	1a000047 	bne	85fc <__Stack_Size+0x81fc>
    84dc:	00003039 	andeq	r3, r0, r9, lsr r0
    84e0:	41038c01 	tstmi	r3, r1, lsl #24
    84e4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    84e8:	1a000047 	bne	860c <__Stack_Size+0x820c>
    84ec:	0000304e 	andeq	r3, r0, lr, asr #32
    84f0:	41038c01 	tstmi	r3, r1, lsl #24
    84f4:	2b000000 	blcs	84fc <__Stack_Size+0x80fc>
    84f8:	1a000048 	bne	8620 <__Stack_Size+0x8220>
    84fc:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    8500:	ba038d01 	blt	eb90c <__Stack_Size+0xeb50c>
    8504:	4f000000 	svcmi	0x00000000
    8508:	00000048 	andeq	r0, r0, r8, asr #32
    850c:	002e4b1b 	eoreq	r4, lr, fp, lsl fp
    8510:	03da0100 	bicseq	r0, sl, #0, 2
    8514:	00000000 	andeq	r0, r0, r0
    8518:	00000010 	andeq	r0, r0, r0, lsl r0
    851c:	09e99c01 	stmibeq	r9!, {r0, sl, fp, ip, pc}^
    8520:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    8524:	0100002f 	tsteq	r0, pc, lsr #32
    8528:	037403da 	cmneq	r4, #1744830467	; 0x68000003
    852c:	50010000 	andpl	r0, r1, r0
    8530:	002e2a1d 	eoreq	r2, lr, sp, lsl sl
    8534:	03da0100 	bicseq	r0, sl, #0, 2
    8538:	00000053 	andeq	r0, r0, r3, asr r0
    853c:	0000486e 	andeq	r4, r0, lr, ror #16
    8540:	002f681a 	eoreq	r6, pc, sl, lsl r8	; <UNPREDICTABLE>
    8544:	03dc0100 	bicseq	r0, ip, #0, 2
    8548:	00000053 	andeq	r0, r0, r3, asr r0
    854c:	0000488f 	andeq	r4, r0, pc, lsl #17
    8550:	0030391a 	eorseq	r3, r0, sl, lsl r9
    8554:	03dc0100 	bicseq	r0, ip, #0, 2
    8558:	00000053 	andeq	r0, r0, r3, asr r0
    855c:	000048b6 			; <UNDEFINED> instruction: 0x000048b6
    8560:	1ad42000 	bne	ff510568 <SCS_BASE+0x1f502568>
    8564:	1ad40000 	bne	ff50856c <SCS_BASE+0x1f4fa56c>
    8568:	14050000 	strne	r0, [r5], #-0
    856c:	211d2001 	tstcs	sp, r1
    8570:	211d0000 	tstcs	sp, r0
    8574:	15050000 	strne	r0, [r5, #-0]
    8578:	22a82001 	adccs	r2, r8, #1
    857c:	22a80000 	adccs	r0, r8, #0
    8580:	10050000 	andne	r0, r5, r0
    8584:	00640001 	rsbeq	r0, r4, r1
    8588:	00020000 	andeq	r0, r2, r0
    858c:	00001c6f 	andeq	r1, r0, pc, ror #24
    8590:	259b0104 	ldrcs	r0, [fp, #260]	; 0x104
    8594:	01340000 	teqeq	r4, r0
    8598:	01a20800 			; <UNDEFINED> instruction: 0x01a20800
    859c:	696c0800 	stmdbvs	ip!, {fp}^
    85a0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    85a4:	6f632f63 	svcvs	0x00632f63
    85a8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    85ac:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; 8400 <__Stack_Size+0x8000>
    85b0:	6f726361 	svcvs	0x00726361
    85b4:	4300732e 	movwmi	r7, #814	; 0x32e
    85b8:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
    85bc:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
    85c0:	61726142 	cmnvs	r2, r2, asr #2
    85c4:	69675c6d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
    85c8:	704f5c74 	subvc	r5, pc, r4, ror ip	; <UNPREDICTABLE>
    85cc:	4d436e65 	stclmi	14, cr6, [r3, #-404]	; 0xfffffe6c
    85d0:	34302e39 	ldrtcc	r2, [r0], #-3641	; 0xfffff1c7
    85d4:	6472415f 	ldrbtvs	r4, [r2], #-351	; 0xfffffea1
    85d8:	6f6f4275 	svcvs	0x006f4275
    85dc:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
    85e0:	53412055 	movtpl	r2, #4181	; 0x1055
    85e4:	322e3220 	eorcc	r3, lr, #32, 4
    85e8:	00302e36 	eorseq	r2, r0, r6, lsr lr
    85ec:	00ea8001 	rsceq	r8, sl, r1
    85f0:	00040000 	andeq	r0, r4, r0
    85f4:	00001c83 	andeq	r1, r0, r3, lsl #25
    85f8:	0bf10104 	bleq	ffc48a10 <SCS_BASE+0x1fc3aa10>
    85fc:	730c0000 	movwvc	r0, #49152	; 0xc000
    8600:	1f000030 	svcne	0x00000030
    8604:	18000005 	stmdane	r0, {r0, r2}
    8608:	0000000a 	andeq	r0, r0, sl
    860c:	35000000 	strcc	r0, [r0, #-0]
    8610:	02000026 	andeq	r0, r0, #38	; 0x26
    8614:	00003057 	andeq	r3, r0, r7, asr r0
    8618:	1964d701 	stmdbne	r4!, {r0, r8, r9, sl, ip, lr, pc}^
    861c:	00500800 	subseq	r0, r0, r0, lsl #16
    8620:	9c010000 	stcls	0, cr0, [r1], {-0}
    8624:	0000005e 	andeq	r0, r0, lr, asr r0
    8628:	00309e03 	eorseq	r9, r0, r3, lsl #28
    862c:	5ed90100 	cdppl	1, 13, cr0, cr9, cr0, {0}
    8630:	04000000 	streq	r0, [r0], #-0
    8634:	0000308e 	andeq	r3, r0, lr, lsl #1
    8638:	005ed901 	subseq	sp, lr, r1, lsl #18
    863c:	48e10000 	stmiami	r1!, {}^	; <UNPREDICTABLE>
    8640:	96050000 	strls	r0, [r5], -r0
    8644:	e2080019 	and	r0, r8, #25
    8648:	00000000 	andeq	r0, r0, r0
    864c:	00640406 	rsbeq	r0, r4, r6, lsl #8
    8650:	04070000 	streq	r0, [r7], #-0
    8654:	0008c307 	andeq	ip, r8, r7, lsl #6
    8658:	30960800 	addscc	r0, r6, r0, lsl #16
    865c:	5f010000 	svcpl	0x00010000
    8660:	00000064 	andeq	r0, r0, r4, rrx
    8664:	0030b808 	eorseq	fp, r0, r8, lsl #16
    8668:	64610100 	strbtvs	r0, [r1], #-256	; 0xffffff00
    866c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8670:	000030bf 	strheq	r3, [r0], -pc	; <UNPREDICTABLE>
    8674:	00646301 	rsbeq	r6, r4, r1, lsl #6
    8678:	b2080000 	andlt	r0, r8, #0
    867c:	01000030 	tsteq	r0, r0, lsr r0
    8680:	00006466 	andeq	r6, r0, r6, ror #8
    8684:	30650800 	rsbcc	r0, r5, r0, lsl #16
    8688:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    868c:	00000064 	andeq	r0, r0, r4, rrx
    8690:	00306b09 	eorseq	r6, r0, r9, lsl #22
    8694:	0a6b0100 	beq	1ac8a9c <__Stack_Size+0x1ac869c>
    8698:	000000c7 	andeq	r0, r0, r7, asr #1
    869c:	000000b9 	strheq	r0, [r0], -r9
    86a0:	0000b90b 	andeq	fp, r0, fp, lsl #18
    86a4:	07004c00 	streq	r4, [r0, -r0, lsl #24]
    86a8:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
    86ac:	04060000 	streq	r0, [r6], #-0
    86b0:	000000c6 	andeq	r0, r0, r6, asr #1
    86b4:	00c00d0c 	sbceq	r0, r0, ip, lsl #26
    86b8:	a50e0000 	strge	r0, [lr, #-0]
    86bc:	01000030 	tsteq	r0, r0, lsr r0
    86c0:	0000dd7f 	andeq	sp, r0, pc, ror sp
    86c4:	00030500 	andeq	r0, r3, r0, lsl #10
    86c8:	0d080000 	stceq	0, cr0, [r8, #-0]
    86cc:	000000a9 	andeq	r0, r0, r9, lsr #1
    86d0:	000b7c0f 	andeq	r7, fp, pc, lsl #24
    86d4:	000b7c00 	andeq	r7, fp, r0, lsl #24
    86d8:	00720100 	rsbseq	r0, r2, r0, lsl #2
    86dc:	000003fa 	strdeq	r0, [r0], -sl
    86e0:	1d4e0004 	stclne	0, cr0, [lr, #-16]
    86e4:	01040000 	mrseq	r0, (UNDEF: 4)
    86e8:	00000bf1 	strdeq	r0, [r0], -r1
    86ec:	0030e80c 	eorseq	lr, r0, ip, lsl #16
    86f0:	00051f00 	andeq	r1, r5, r0, lsl #30
    86f4:	000a2800 	andeq	r2, sl, r0, lsl #16
    86f8:	00000000 	andeq	r0, r0, r0
    86fc:	00269b00 	eoreq	r9, r6, r0, lsl #22
    8700:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8704:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    8708:	88050202 	stmdahi	r5, {r1, r9}
    870c:	02000007 	andeq	r0, r0, #7
    8710:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    8714:	04020000 	streq	r0, [r2], #-0
    8718:	0008c307 	andeq	ip, r8, r7, lsl #6
    871c:	31750300 	cmncc	r5, r0, lsl #6
    8720:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    8724:	0000004c 	andeq	r0, r0, ip, asr #32
    8728:	60070202 	andvs	r0, r7, r2, lsl #4
    872c:	0300000b 	movweq	r0, #11
    8730:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    8734:	00005d29 	andeq	r5, r0, r9, lsr #26
    8738:	08010200 	stmdaeq	r1, {r9}
    873c:	00000965 	andeq	r0, r0, r5, ror #18
    8740:	ba070402 	blt	1c9750 <__Stack_Size+0x1c9350>
    8744:	04000008 	streq	r0, [r0], #-8
    8748:	00005304 	andeq	r5, r0, r4, lsl #6
    874c:	0f5a0500 	svceq	0x005a0500
    8750:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8754:	03000000 	movweq	r0, #0
    8758:	00009a30 	andeq	r9, r0, r0, lsr sl
    875c:	0f6e0600 	svceq	0x006e0600
    8760:	06000000 	streq	r0, [r0], -r0
    8764:	00001004 	andeq	r1, r0, r4
    8768:	0f970601 	svceq	0x00970601
    876c:	06020000 	streq	r0, [r2], -r0
    8770:	00000ff6 	strdeq	r0, [r0], -r6
    8774:	5b070003 	blpl	1c8788 <__Stack_Size+0x1c8388>
    8778:	0300000f 	movweq	r0, #15
    877c:	00007137 	andeq	r7, r0, r7, lsr r1
    8780:	139c0800 	orrsne	r0, ip, #0, 16
    8784:	030c0000 	movweq	r0, #49152	; 0xc000
    8788:	0000e23b 	andeq	lr, r0, fp, lsr r2
    878c:	11220900 			; <UNDEFINED> instruction: 0x11220900
    8790:	53030000 	movwpl	r0, #12288	; 0x3000
    8794:	00000041 	andeq	r0, r0, r1, asr #32
    8798:	14f70900 	ldrbtne	r0, [r7], #2304	; 0x900
    879c:	54030000 	strpl	r0, [r3], #-0
    87a0:	00000041 	andeq	r0, r0, r1, asr #32
    87a4:	32b30902 	adcscc	r0, r3, #32768	; 0x8000
    87a8:	55030000 	strpl	r0, [r3, #-0]
    87ac:	00000041 	andeq	r0, r0, r1, asr #32
    87b0:	141a0904 	ldrne	r0, [sl], #-2308	; 0xfffff6fc
    87b4:	56030000 	strpl	r0, [r3], -r0
    87b8:	000000f1 	strdeq	r0, [r0], -r1
    87bc:	6b0a0008 	blvs	2887e4 <__Stack_Size+0x2883e4>
    87c0:	f1000000 	cps	#0
    87c4:	0b000000 	bleq	87cc <__Stack_Size+0x83cc>
    87c8:	00000041 	andeq	r0, r0, r1, asr #32
    87cc:	e2040400 	and	r0, r4, #0, 8
    87d0:	07000000 	streq	r0, [r0, -r0]
    87d4:	0000139d 	muleq	r0, sp, r3
    87d8:	00a55703 	adceq	r5, r5, r3, lsl #14
    87dc:	420c0000 	andmi	r0, ip, #0
    87e0:	03020057 	movweq	r0, #8279	; 0x2057
    87e4:	00012665 	andeq	r2, r1, r5, ror #12
    87e8:	62620d00 	rsbvs	r0, r2, #0, 26
    87ec:	67030031 	smladxvs	r3, r1, r0, r0
    87f0:	00000053 	andeq	r0, r0, r3, asr r0
    87f4:	62620d00 	rsbvs	r0, r2, #0, 26
    87f8:	68030030 	stmdavs	r3, {r4, r5}
    87fc:	00000053 	andeq	r0, r0, r3, asr r0
    8800:	020e0001 	andeq	r0, lr, #1
    8804:	01426203 	cmpeq	r2, r3, lsl #4
    8808:	770f0000 	strvc	r0, [pc, -r0]
    880c:	41640300 	cmnmi	r4, r0, lsl #6
    8810:	0f000000 	svceq	0x00000000
    8814:	03007762 	movweq	r7, #1890	; 0x762
    8818:	0001026a 	andeq	r0, r1, sl, ror #4
    881c:	6c070000 	stcvs	0, cr0, [r7], {-0}
    8820:	03000015 	movweq	r0, #21
    8824:	0001266b 	andeq	r2, r1, fp, ror #12
    8828:	109f0800 	addsne	r0, pc, r0, lsl #16
    882c:	031c0000 	tsteq	ip, #0
    8830:	0001de6d 	andeq	sp, r1, sp, ror #28
    8834:	145a0900 	ldrbne	r0, [sl], #-2304	; 0xfffff700
    8838:	6f030000 	svcvs	0x00030000
    883c:	00000053 	andeq	r0, r0, r3, asr r0
    8840:	100e0900 	andne	r0, lr, r0, lsl #18
    8844:	70030000 	andvc	r0, r3, r0
    8848:	00000053 	andeq	r0, r0, r3, asr r0
    884c:	11ea0901 	mvnne	r0, r1, lsl #18
    8850:	71030000 	mrsvc	r0, (UNDEF: 3)
    8854:	00000142 	andeq	r0, r0, r2, asr #2
    8858:	10c50902 	sbcne	r0, r5, r2, lsl #18
    885c:	72030000 	andvc	r0, r3, #0
    8860:	00000142 	andeq	r0, r0, r2, asr #2
    8864:	12ca0904 	sbcne	r0, sl, #4, 18	; 0x10000
    8868:	73030000 	movwvc	r0, #12288	; 0x3000
    886c:	00000142 	andeq	r0, r0, r2, asr #2
    8870:	13f90906 	mvnsne	r0, #98304	; 0x18000
    8874:	75030000 	strvc	r0, [r3, #-0]
    8878:	00000053 	andeq	r0, r0, r3, asr r0
    887c:	14e70908 	strbtne	r0, [r7], #2312	; 0x908
    8880:	76030000 	strvc	r0, [r3], -r0
    8884:	00000053 	andeq	r0, r0, r3, asr r0
    8888:	12d60909 	sbcsne	r0, r6, #147456	; 0x24000
    888c:	77030000 	strvc	r0, [r3, -r0]
    8890:	00000053 	andeq	r0, r0, r3, asr r0
    8894:	1324090a 			; <UNDEFINED> instruction: 0x1324090a
    8898:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    889c:	00000053 	andeq	r0, r0, r3, asr r0
    88a0:	1383090b 	orrne	r0, r3, #180224	; 0x2c000
    88a4:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    88a8:	00000053 	andeq	r0, r0, r3, asr r0
    88ac:	14cb090c 	strbne	r0, [fp], #2316	; 0x90c
    88b0:	7c030000 	stcvc	0, cr0, [r3], {-0}
    88b4:	000000f7 	strdeq	r0, [r0], -r7
    88b8:	a0070010 	andge	r0, r7, r0, lsl r0
    88bc:	03000010 	movweq	r0, #16
    88c0:	00014d7d 	andeq	r4, r1, sp, ror sp
    88c4:	0f0d0800 	svceq	0x000d0800
    88c8:	03300000 	teqeq	r0, #0
    88cc:	0002867f 	andeq	r8, r2, pc, ror r6
    88d0:	24e80900 	strbtcs	r0, [r8], #2304	; 0x900
    88d4:	81030000 	mrshi	r0, (UNDEF: 3)
    88d8:	00000287 	andeq	r0, r0, r7, lsl #5
    88dc:	123a0900 	eorsne	r0, sl, #0, 18
    88e0:	82030000 	andhi	r0, r3, #0
    88e4:	00000287 	andeq	r0, r0, r7, lsl #5
    88e8:	0fdd0904 	svceq	0x00dd0904
    88ec:	85030000 	strhi	r0, [r3, #-0]
    88f0:	00000287 	andeq	r0, r0, r7, lsl #5
    88f4:	0f7a0908 	svceq	0x007a0908
    88f8:	86030000 	strhi	r0, [r3], -r0
    88fc:	00000287 	andeq	r0, r0, r7, lsl #5
    8900:	0fb0090c 	svceq	0x00b0090c
    8904:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    8908:	0000029c 	muleq	r0, ip, r2
    890c:	0f310910 	svceq	0x00310910
    8910:	a3030000 	movwge	r0, #12288	; 0x3000
    8914:	0000029c 	muleq	r0, ip, r2
    8918:	0fc10914 	svceq	0x00c10914
    891c:	ad030000 	stcge	0, cr0, [r3, #-0]
    8920:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    8924:	12060918 	andne	r0, r6, #24, 18	; 0x60000
    8928:	af030000 	svcge	0x00030000
    892c:	000000f1 	strdeq	r0, [r0], -r1
    8930:	1548091c 	strbne	r0, [r8, #-2332]	; 0xfffff6e4
    8934:	b0030000 	andlt	r0, r3, r0
    8938:	000000f1 	strdeq	r0, [r0], -r1
    893c:	14460920 	strbne	r0, [r6], #-2336	; 0xfffff6e0
    8940:	b1030000 	mrslt	r0, (UNDEF: 3)
    8944:	000000f1 	strdeq	r0, [r0], -r1
    8948:	0f1a0924 	svceq	0x001a0924
    894c:	b5030000 	strlt	r0, [r3, #-0]
    8950:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    8954:	32b00928 	adcscc	r0, r0, #40, 18	; 0xa0000
    8958:	b7030000 	strlt	r0, [r3, -r0]
    895c:	00000053 	andeq	r0, r0, r3, asr r0
    8960:	0410002c 	ldreq	r0, [r0], #-44	; 0xffffffd4
    8964:	00028604 	andeq	r8, r2, r4, lsl #12
    8968:	009a0a00 	addseq	r0, sl, r0, lsl #20
    896c:	029c0000 	addseq	r0, ip, #0
    8970:	530b0000 	movwpl	r0, #45056	; 0xb000
    8974:	00000000 	andeq	r0, r0, r0
    8978:	028d0404 	addeq	r0, sp, #4, 8	; 0x4000000
    897c:	9a0a0000 	bls	288984 <__Stack_Size+0x288584>
    8980:	b6000000 	strlt	r0, [r0], -r0
    8984:	0b000002 	bleq	8994 <__Stack_Size+0x8594>
    8988:	00000053 	andeq	r0, r0, r3, asr r0
    898c:	0000530b 	andeq	r5, r0, fp, lsl #6
    8990:	04040000 	streq	r0, [r4], #-0
    8994:	000002a2 	andeq	r0, r0, r2, lsr #5
    8998:	0e070411 	cfmvdlreq	mvd7, r0
    899c:	0300000f 	movweq	r0, #15
    89a0:	0001e9b9 			; <UNDEFINED> instruction: 0x0001e9b9
    89a4:	10600800 	rsbne	r0, r0, r0, lsl #16
    89a8:	03240000 			; <UNDEFINED> instruction: 0x03240000
    89ac:	000342bb 			; <UNDEFINED> instruction: 0x000342bb
    89b0:	13520900 	cmpne	r2, #0, 18
    89b4:	bd030000 	stclt	0, cr0, [r3, #-0]
    89b8:	00000287 	andeq	r0, r0, r7, lsl #5
    89bc:	125e0900 	subsne	r0, lr, #0, 18
    89c0:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    89c4:	00000287 	andeq	r0, r0, r7, lsl #5
    89c8:	11c20904 	bicne	r0, r2, r4, lsl #18
    89cc:	bf030000 	svclt	0x00030000
    89d0:	00000287 	andeq	r0, r0, r7, lsl #5
    89d4:	12740908 	rsbsne	r0, r4, #8, 18	; 0x20000
    89d8:	c0030000 	andgt	r0, r3, r0
    89dc:	00000287 	andeq	r0, r0, r7, lsl #5
    89e0:	1078090c 	rsbsne	r0, r8, ip, lsl #18
    89e4:	c1030000 	mrsgt	r0, (UNDEF: 3)
    89e8:	00000287 	andeq	r0, r0, r7, lsl #5
    89ec:	14230910 	strtne	r0, [r3], #-2320	; 0xfffff6f0
    89f0:	c2030000 	andgt	r0, r3, #0
    89f4:	00000287 	andeq	r0, r0, r7, lsl #5
    89f8:	15030914 	strne	r0, [r3, #-2324]	; 0xfffff6ec
    89fc:	c3030000 	movwgt	r0, #12288	; 0x3000
    8a00:	00000287 	andeq	r0, r0, r7, lsl #5
    8a04:	110c0918 	tstne	ip, r8, lsl r9
    8a08:	c4030000 	strgt	r0, [r3], #-0
    8a0c:	00000287 	andeq	r0, r0, r7, lsl #5
    8a10:	11d4091c 	bicsne	r0, r4, ip, lsl r9
    8a14:	c5030000 	strgt	r0, [r3, #-0]
    8a18:	00000287 	andeq	r0, r0, r7, lsl #5
    8a1c:	61070020 	tstvs	r7, r0, lsr #32
    8a20:	03000010 	movweq	r0, #16
    8a24:	0002c9c7 	andeq	ip, r2, r7, asr #19
    8a28:	02f11200 	rscseq	r1, r1, #0, 4
    8a2c:	35010000 	strcc	r0, [r1, #-0]
    8a30:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
    8a34:	00000034 	andeq	r0, r0, r4, lsr r0
    8a38:	44139c01 	ldrmi	r9, [r3], #-3073	; 0xfffff3ff
    8a3c:	0300000f 	movweq	r0, #15
    8a40:	0002beee 	andeq	fp, r2, lr, ror #29
    8a44:	30d11300 	sbcscc	r1, r1, r0, lsl #6
    8a48:	ef030000 	svc	0x00030000
    8a4c:	00000342 	andeq	r0, r0, r2, asr #6
    8a50:	0014bf14 	andseq	fp, r4, r4, lsl pc
    8a54:	de270100 	sufles	f0, f7, f0
    8a58:	05000001 	streq	r0, [r0, #-1]
    8a5c:	0006f003 	andeq	pc, r6, r3
    8a60:	31031420 	tstcc	r3, r0, lsr #8
    8a64:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    8a68:	00000053 	andeq	r0, r0, r3, asr r0
    8a6c:	06ec0305 	strbteq	r0, [ip], r5, lsl #6
    8a70:	2e142000 	cdpcs	0, 1, cr2, cr4, cr0, {0}
    8a74:	01000011 	tsteq	r0, r1, lsl r0
    8a78:	0003a71d 	andeq	sl, r3, sp, lsl r7
    8a7c:	10030500 	andne	r0, r3, r0, lsl #10
    8a80:	04200007 	strteq	r0, [r0], #-7
    8a84:	0001de04 	andeq	sp, r1, r4, lsl #28
    8a88:	310b1400 	tstcc	fp, r0, lsl #8
    8a8c:	20010000 	andcs	r0, r1, r0
    8a90:	000003be 			; <UNDEFINED> instruction: 0x000003be
    8a94:	06e80305 	strbteq	r0, [r8], r5, lsl #6
    8a98:	04042000 	streq	r2, [r4], #-0
    8a9c:	000002be 			; <UNDEFINED> instruction: 0x000002be
    8aa0:	0030d014 	eorseq	sp, r0, r4, lsl r0
    8aa4:	d5280100 	strle	r0, [r8, #-256]!	; 0xffffff00
    8aa8:	05000003 	streq	r0, [r0, #-3]
    8aac:	00070c03 	andeq	r0, r7, r3, lsl #24
    8ab0:	42040420 	andmi	r0, r4, #32, 8	; 0x20000000
    8ab4:	14000003 	strne	r0, [r0], #-3
    8ab8:	000030c6 	andeq	r3, r0, r6, asr #1
    8abc:	00412501 	subeq	r2, r1, r1, lsl #10
    8ac0:	03050000 	movweq	r0, #20480	; 0x5000
    8ac4:	200006e4 	andcs	r0, r0, r4, ror #13
    8ac8:	0015f214 	andseq	pc, r5, r4, lsl r2	; <UNPREDICTABLE>
    8acc:	41260100 			; <UNDEFINED> instruction: 0x41260100
    8ad0:	05000000 	streq	r0, [r0, #-0]
    8ad4:	00071403 	andeq	r1, r7, r3, lsl #8
    8ad8:	0dd60020 	ldcleq	0, cr0, [r6, #128]	; 0x80
    8adc:	00040000 	andeq	r0, r4, r0
    8ae0:	00001e57 	andeq	r1, r0, r7, asr lr
    8ae4:	0bf10104 	bleq	ffc48efc <SCS_BASE+0x1fc3aefc>
    8ae8:	350c0000 	strcc	r0, [ip, #-0]
    8aec:	1f000031 	svcne	0x00000031
    8af0:	c0000005 	andgt	r0, r0, r5
    8af4:	0000000a 	andeq	r0, r0, sl
    8af8:	2a000000 	bcs	8b00 <__Stack_Size+0x8700>
    8afc:	02000027 	andeq	r0, r0, #39	; 0x27
    8b00:	07b60504 	ldreq	r0, [r6, r4, lsl #10]!
    8b04:	02020000 	andeq	r0, r2, #0
    8b08:	00078805 	andeq	r8, r7, r5, lsl #16
    8b0c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8b10:	00000967 	andeq	r0, r0, r7, ror #18
    8b14:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    8b18:	45270200 	strmi	r0, [r7, #-512]!	; 0xfffffe00
    8b1c:	02000000 	andeq	r0, r0, #0
    8b20:	08c30704 	stmiaeq	r3, {r2, r8, r9, sl}^
    8b24:	75030000 	strvc	r0, [r3, #-0]
    8b28:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    8b2c:	00005728 	andeq	r5, r0, r8, lsr #14
    8b30:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8b34:	00000b60 	andeq	r0, r0, r0, ror #22
    8b38:	00387503 	eorseq	r7, r8, r3, lsl #10
    8b3c:	00682902 	rsbeq	r2, r8, r2, lsl #18
    8b40:	01020000 	mrseq	r0, (UNDEF: 2)
    8b44:	00096508 	andeq	r6, r9, r8, lsl #10
    8b48:	68010400 	stmdavs	r1, {sl}
    8b4c:	02000000 	andeq	r0, r0, #0
    8b50:	0000883a 	andeq	r8, r0, sl, lsr r8
    8b54:	07fe0500 	ldrbeq	r0, [lr, r0, lsl #10]!
    8b58:	05000000 	streq	r0, [r0, #-0]
    8b5c:	00000218 	andeq	r0, r0, r8, lsl r2
    8b60:	97060001 	strls	r0, [r6, -r1]
    8b64:	02000005 	andeq	r0, r0, #5
    8b68:	00006f3a 	andeq	r6, r0, sl, lsr pc
    8b6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8b70:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    8b74:	00116e07 	andseq	r6, r1, r7, lsl #28
    8b78:	00680100 	rsbeq	r0, r8, r0, lsl #2
    8b7c:	16030000 	strne	r0, [r3], -r0
    8b80:	000000c3 	andeq	r0, r0, r3, asr #1
    8b84:	0012ec05 	andseq	lr, r2, r5, lsl #24
    8b88:	06050000 	streq	r0, [r5], -r0
    8b8c:	01000014 	tsteq	r0, r4, lsl r0
    8b90:	0010f905 	andseq	pc, r0, r5, lsl #18
    8b94:	5c050200 	sfmpl	f0, 4, [r5], {-0}
    8b98:	03000015 	movweq	r0, #21
    8b9c:	10650700 	rsbne	r0, r5, r0, lsl #14
    8ba0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    8ba4:	03000000 	movweq	r0, #0
    8ba8:	0001281f 	andeq	r2, r1, pc, lsl r8
    8bac:	34810500 	strcc	r0, [r1], #1280	; 0x500
    8bb0:	05000000 	streq	r0, [r0, #-0]
    8bb4:	00003343 	andeq	r3, r0, r3, asr #6
    8bb8:	074c0501 	strbeq	r0, [ip, -r1, lsl #10]
    8bbc:	05020000 	streq	r0, [r2, #-0]
    8bc0:	000031dc 	ldrdeq	r3, [r0], -ip
    8bc4:	07560503 	ldrbeq	r0, [r6, -r3, lsl #10]
    8bc8:	05040000 	streq	r0, [r4, #-0]
    8bcc:	0000323e 	andeq	r3, r0, lr, lsr r2
    8bd0:	339b0505 	orrscc	r0, fp, #20971520	; 0x1400000
    8bd4:	05060000 	streq	r0, [r6, #-0]
    8bd8:	00003298 	muleq	r0, r8, r2
    8bdc:	34cc0507 	strbcc	r0, [ip], #1287	; 0x507
    8be0:	05080000 	streq	r0, [r8, #-0]
    8be4:	00003528 	andeq	r3, r0, r8, lsr #10
    8be8:	330a0509 	movwcc	r0, #42249	; 0xa509
    8bec:	050a0000 	streq	r0, [sl, #-0]
    8bf0:	00003366 	andeq	r3, r0, r6, ror #6
    8bf4:	3261050b 	rsbcc	r0, r1, #46137344	; 0x2c00000
    8bf8:	050c0000 	streq	r0, [ip, #-0]
    8bfc:	0000345b 	andeq	r3, r0, fp, asr r4
    8c00:	2407000c 	strcs	r0, [r7], #-12
    8c04:	01000031 	tsteq	r0, r1, lsr r0
    8c08:	00000068 	andeq	r0, r0, r8, rrx
    8c0c:	01573203 	cmpeq	r7, r3, lsl #4
    8c10:	de050000 	cdple	0, 0, cr0, cr5, cr0, {0}
    8c14:	01000034 	tsteq	r0, r4, lsr r0
    8c18:	0031b505 	eorseq	fp, r1, r5, lsl #10
    8c1c:	aa050200 	bge	149424 <__Stack_Size+0x149024>
    8c20:	03000033 	movweq	r0, #51	; 0x33
    8c24:	0034b205 	eorseq	fp, r4, r5, lsl #4
    8c28:	8c050400 	cfstrshi	mvf0, [r5], {-0}
    8c2c:	05000034 	streq	r0, [r0, #-52]	; 0xffffffcc
    8c30:	31e80700 	mvncc	r0, r0, lsl #14
    8c34:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    8c38:	03000000 	movweq	r0, #0
    8c3c:	0001743c 	andeq	r7, r1, ip, lsr r4
    8c40:	32fb0500 	rscscc	r0, fp, #0, 10
    8c44:	05000000 	streq	r0, [r0, #-0]
    8c48:	000031fa 	strdeq	r3, [r0], -sl
    8c4c:	15070001 	strne	r0, [r7, #-1]
    8c50:	01000031 	tsteq	r0, r1, lsr r0
    8c54:	00000068 	andeq	r0, r0, r8, rrx
    8c58:	01c11904 	biceq	r1, r1, r4, lsl #18
    8c5c:	1f050000 	svcne	0x00050000
    8c60:	00000032 	andeq	r0, r0, r2, lsr r0
    8c64:	0032c605 	eorseq	ip, r2, r5, lsl #12
    8c68:	36050100 	strcc	r0, [r5], -r0, lsl #2
    8c6c:	02000032 	andeq	r0, r0, #50	; 0x32
    8c70:	00316b05 	eorseq	r6, r1, r5, lsl #22
    8c74:	31050300 	mrscc	r0, SP_abt
    8c78:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    8c7c:	00316605 	eorseq	r6, r1, r5, lsl #12
    8c80:	ff050500 			; <UNDEFINED> instruction: 0xff050500
    8c84:	06000033 			; <UNDEFINED> instruction: 0x06000033
    8c88:	00320f05 	eorseq	r0, r2, r5, lsl #30
    8c8c:	51050700 	tstpl	r5, r0, lsl #14
    8c90:	08000033 	stmdaeq	r0, {r0, r1, r4, r5}
    8c94:	00340e05 	eorseq	r0, r4, r5, lsl #28
    8c98:	08000900 	stmdaeq	r0, {r8, fp}
    8c9c:	00001046 	andeq	r1, r0, r6, asr #32
    8ca0:	e6270408 	strt	r0, [r7], -r8, lsl #8
    8ca4:	09000001 	stmdbeq	r0, {r0}
    8ca8:	000012b5 			; <UNDEFINED> instruction: 0x000012b5
    8cac:	01e62904 	mvneq	r2, r4, lsl #18
    8cb0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8cb4:	00001240 	andeq	r1, r0, r0, asr #4
    8cb8:	004c2a04 	subeq	r2, ip, r4, lsl #20
    8cbc:	00040000 	andeq	r0, r4, r0
    8cc0:	005e040a 	subseq	r0, lr, sl, lsl #8
    8cc4:	ea060000 	b	188ccc <__Stack_Size+0x1888cc>
    8cc8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    8ccc:	0001c12c 	andeq	ip, r1, ip, lsr #2
    8cd0:	0f5a0700 	svceq	0x005a0700
    8cd4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    8cd8:	04000000 	streq	r0, [r0], #-0
    8cdc:	00022030 	andeq	r2, r2, r0, lsr r0
    8ce0:	0f6e0500 	svceq	0x006e0500
    8ce4:	05000000 	streq	r0, [r0, #-0]
    8ce8:	00001004 	andeq	r1, r0, r4
    8cec:	0f970501 	svceq	0x00970501
    8cf0:	05020000 	streq	r0, [r2, #-0]
    8cf4:	00000ff6 	strdeq	r0, [r0], -r6
    8cf8:	5b060003 	blpl	188d0c <__Stack_Size+0x18890c>
    8cfc:	0400000f 	streq	r0, [r0], #-15
    8d00:	0001f737 	andeq	pc, r1, r7, lsr r7	; <UNPREDICTABLE>
    8d04:	139c0800 	orrsne	r0, ip, #0, 16
    8d08:	040c0000 	streq	r0, [ip], #-0
    8d0c:	0002683b 	andeq	r6, r2, fp, lsr r8
    8d10:	11220900 			; <UNDEFINED> instruction: 0x11220900
    8d14:	53040000 	movwpl	r0, #16384	; 0x4000
    8d18:	0000004c 	andeq	r0, r0, ip, asr #32
    8d1c:	14f70900 	ldrbtne	r0, [r7], #2304	; 0x900
    8d20:	54040000 	strpl	r0, [r4], #-0
    8d24:	0000004c 	andeq	r0, r0, ip, asr #32
    8d28:	32b30902 	adcscc	r0, r3, #32768	; 0x8000
    8d2c:	55040000 	strpl	r0, [r4, #-0]
    8d30:	0000004c 	andeq	r0, r0, ip, asr #32
    8d34:	141a0904 	ldrne	r0, [sl], #-2308	; 0xfffff6fc
    8d38:	56040000 	strpl	r0, [r4], -r0
    8d3c:	00000277 	andeq	r0, r0, r7, ror r2
    8d40:	e60b0008 	str	r0, [fp], -r8
    8d44:	77000001 	strvc	r0, [r0, -r1]
    8d48:	0c000002 	stceq	0, cr0, [r0], {2}
    8d4c:	0000004c 	andeq	r0, r0, ip, asr #32
    8d50:	68040a00 	stmdavs	r4, {r9, fp}
    8d54:	06000002 	streq	r0, [r0], -r2
    8d58:	0000139d 	muleq	r0, sp, r3
    8d5c:	022b5704 	eoreq	r5, fp, #4, 14	; 0x100000
    8d60:	e2080000 	and	r0, r8, #0
    8d64:	02000013 	andeq	r0, r0, #19
    8d68:	02ad5b04 	adceq	r5, sp, #4, 22	; 0x1000
    8d6c:	1a090000 	bne	248d74 <__Stack_Size+0x248974>
    8d70:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    8d74:	00005e5d 	andeq	r5, r0, sp, asr lr
    8d78:	36090000 	strcc	r0, [r9], -r0
    8d7c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    8d80:	00005e5e 	andeq	r5, r0, lr, asr lr
    8d84:	06000100 	streq	r0, [r0], -r0, lsl #2
    8d88:	000013e3 	andeq	r1, r0, r3, ror #7
    8d8c:	02886004 	addeq	r6, r8, #4
    8d90:	420d0000 	andmi	r0, sp, #0
    8d94:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
    8d98:	0002dc65 	andeq	sp, r2, r5, ror #24
    8d9c:	62620e00 	rsbvs	r0, r2, #0, 28
    8da0:	67040031 	smladxvs	r4, r1, r0, r0
    8da4:	0000005e 	andeq	r0, r0, lr, asr r0
    8da8:	62620e00 	rsbvs	r0, r2, #0, 28
    8dac:	68040030 	stmdavs	r4, {r4, r5}
    8db0:	0000005e 	andeq	r0, r0, lr, asr r0
    8db4:	020f0001 	andeq	r0, pc, #1
    8db8:	02f86204 	rscseq	r6, r8, #4, 4	; 0x40000000
    8dbc:	77100000 	ldrvc	r0, [r0, -r0]
    8dc0:	4c640400 	cfstrdmi	mvd0, [r4], #-0
    8dc4:	10000000 	andne	r0, r0, r0
    8dc8:	04007762 	streq	r7, [r0], #-1890	; 0xfffff89e
    8dcc:	0002b86a 	andeq	fp, r2, sl, ror #16
    8dd0:	6c060000 	stcvs	0, cr0, [r6], {-0}
    8dd4:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    8dd8:	0002dc6b 	andeq	sp, r2, fp, ror #24
    8ddc:	109f0800 	addsne	r0, pc, r0, lsl #16
    8de0:	041c0000 	ldreq	r0, [ip], #-0
    8de4:	0003946d 	andeq	r9, r3, sp, ror #8
    8de8:	145a0900 	ldrbne	r0, [sl], #-2304	; 0xfffff700
    8dec:	6f040000 	svcvs	0x00040000
    8df0:	0000005e 	andeq	r0, r0, lr, asr r0
    8df4:	100e0900 	andne	r0, lr, r0, lsl #18
    8df8:	70040000 	andvc	r0, r4, r0
    8dfc:	0000005e 	andeq	r0, r0, lr, asr r0
    8e00:	11ea0901 	mvnne	r0, r1, lsl #18
    8e04:	71040000 	mrsvc	r0, (UNDEF: 4)
    8e08:	000002f8 	strdeq	r0, [r0], -r8
    8e0c:	10c50902 	sbcne	r0, r5, r2, lsl #18
    8e10:	72040000 	andvc	r0, r4, #0
    8e14:	000002f8 	strdeq	r0, [r0], -r8
    8e18:	12ca0904 	sbcne	r0, sl, #4, 18	; 0x10000
    8e1c:	73040000 	movwvc	r0, #16384	; 0x4000
    8e20:	000002f8 	strdeq	r0, [r0], -r8
    8e24:	13f90906 	mvnsne	r0, #98304	; 0x18000
    8e28:	75040000 	strvc	r0, [r4, #-0]
    8e2c:	0000005e 	andeq	r0, r0, lr, asr r0
    8e30:	14e70908 	strbtne	r0, [r7], #2312	; 0x908
    8e34:	76040000 	strvc	r0, [r4], -r0
    8e38:	0000005e 	andeq	r0, r0, lr, asr r0
    8e3c:	12d60909 	sbcsne	r0, r6, #147456	; 0x24000
    8e40:	77040000 	strvc	r0, [r4, -r0]
    8e44:	0000005e 	andeq	r0, r0, lr, asr r0
    8e48:	1324090a 			; <UNDEFINED> instruction: 0x1324090a
    8e4c:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    8e50:	0000005e 	andeq	r0, r0, lr, asr r0
    8e54:	1383090b 	orrne	r0, r3, #180224	; 0x2c000
    8e58:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    8e5c:	0000005e 	andeq	r0, r0, lr, asr r0
    8e60:	14cb090c 	strbne	r0, [fp], #2316	; 0x90c
    8e64:	7c040000 	stcvc	0, cr0, [r4], {-0}
    8e68:	0000027d 	andeq	r0, r0, sp, ror r2
    8e6c:	a0060010 	andge	r0, r6, r0, lsl r0
    8e70:	04000010 	streq	r0, [r0], #-16
    8e74:	0003037d 	andeq	r0, r3, sp, ror r3
    8e78:	0f0d0800 	svceq	0x000d0800
    8e7c:	04300000 	ldrteq	r0, [r0], #-0
    8e80:	00043c7f 	andeq	r3, r4, pc, ror ip
    8e84:	24e80900 	strbtcs	r0, [r8], #2304	; 0x900
    8e88:	81040000 	mrshi	r0, (UNDEF: 4)
    8e8c:	0000043d 	andeq	r0, r0, sp, lsr r4
    8e90:	123a0900 	eorsne	r0, sl, #0, 18
    8e94:	82040000 	andhi	r0, r4, #0
    8e98:	0000043d 	andeq	r0, r0, sp, lsr r4
    8e9c:	0fdd0904 	svceq	0x00dd0904
    8ea0:	85040000 	strhi	r0, [r4, #-0]
    8ea4:	0000043d 	andeq	r0, r0, sp, lsr r4
    8ea8:	0f7a0908 	svceq	0x007a0908
    8eac:	86040000 	strhi	r0, [r4], -r0
    8eb0:	0000043d 	andeq	r0, r0, sp, lsr r4
    8eb4:	0fb0090c 	svceq	0x00b0090c
    8eb8:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    8ebc:	00000452 	andeq	r0, r0, r2, asr r4
    8ec0:	0f310910 	svceq	0x00310910
    8ec4:	a3040000 	movwge	r0, #16384	; 0x4000
    8ec8:	00000452 	andeq	r0, r0, r2, asr r4
    8ecc:	0fc10914 	svceq	0x00c10914
    8ed0:	ad040000 	stcge	0, cr0, [r4, #-0]
    8ed4:	0000046c 	andeq	r0, r0, ip, ror #8
    8ed8:	12060918 	andne	r0, r6, #24, 18	; 0x60000
    8edc:	af040000 	svcge	0x00040000
    8ee0:	00000277 	andeq	r0, r0, r7, ror r2
    8ee4:	1548091c 	strbne	r0, [r8, #-2332]	; 0xfffff6e4
    8ee8:	b0040000 	andlt	r0, r4, r0
    8eec:	00000277 	andeq	r0, r0, r7, ror r2
    8ef0:	14460920 	strbne	r0, [r6], #-2336	; 0xfffff6e0
    8ef4:	b1040000 	mrslt	r0, (UNDEF: 4)
    8ef8:	00000277 	andeq	r0, r0, r7, ror r2
    8efc:	0f1a0924 	svceq	0x001a0924
    8f00:	b5040000 	strlt	r0, [r4, #-0]
    8f04:	00000472 	andeq	r0, r0, r2, ror r4
    8f08:	32b00928 	adcscc	r0, r0, #40, 18	; 0xa0000
    8f0c:	b7040000 	strlt	r0, [r4, -r0]
    8f10:	0000005e 	andeq	r0, r0, lr, asr r0
    8f14:	0a11002c 	beq	448fcc <__Stack_Size+0x448bcc>
    8f18:	00043c04 	andeq	r3, r4, r4, lsl #24
    8f1c:	02200b00 	eoreq	r0, r0, #0, 22
    8f20:	04520000 	ldrbeq	r0, [r2], #-0
    8f24:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
    8f28:	00000000 	andeq	r0, r0, r0
    8f2c:	0443040a 	strbeq	r0, [r3], #-1034	; 0xfffffbf6
    8f30:	200b0000 	andcs	r0, fp, r0
    8f34:	6c000002 	stcvs	0, cr0, [r0], {2}
    8f38:	0c000004 	stceq	0, cr0, [r0], {4}
    8f3c:	0000005e 	andeq	r0, r0, lr, asr r0
    8f40:	00005e0c 	andeq	r5, r0, ip, lsl #28
    8f44:	040a0000 	streq	r0, [sl], #-0
    8f48:	00000458 	andeq	r0, r0, r8, asr r4
    8f4c:	0e060412 	cfmvdlreq	mvd6, r0
    8f50:	0400000f 	streq	r0, [r0], #-15
    8f54:	00039fb9 			; <UNDEFINED> instruction: 0x00039fb9
    8f58:	10600800 	rsbne	r0, r0, r0, lsl #16
    8f5c:	04240000 	strteq	r0, [r4], #-0
    8f60:	0004f8bb 			; <UNDEFINED> instruction: 0x0004f8bb
    8f64:	13520900 	cmpne	r2, #0, 18
    8f68:	bd040000 	stclt	0, cr0, [r4, #-0]
    8f6c:	0000043d 	andeq	r0, r0, sp, lsr r4
    8f70:	125e0900 	subsne	r0, lr, #0, 18
    8f74:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    8f78:	0000043d 	andeq	r0, r0, sp, lsr r4
    8f7c:	11c20904 	bicne	r0, r2, r4, lsl #18
    8f80:	bf040000 	svclt	0x00040000
    8f84:	0000043d 	andeq	r0, r0, sp, lsr r4
    8f88:	12740908 	rsbsne	r0, r4, #8, 18	; 0x20000
    8f8c:	c0040000 	andgt	r0, r4, r0
    8f90:	0000043d 	andeq	r0, r0, sp, lsr r4
    8f94:	1078090c 	rsbsne	r0, r8, ip, lsl #18
    8f98:	c1040000 	mrsgt	r0, (UNDEF: 4)
    8f9c:	0000043d 	andeq	r0, r0, sp, lsr r4
    8fa0:	14230910 	strtne	r0, [r3], #-2320	; 0xfffff6f0
    8fa4:	c2040000 	andgt	r0, r4, #0
    8fa8:	0000043d 	andeq	r0, r0, sp, lsr r4
    8fac:	15030914 	strne	r0, [r3, #-2324]	; 0xfffff6ec
    8fb0:	c3040000 	movwgt	r0, #16384	; 0x4000
    8fb4:	0000043d 	andeq	r0, r0, sp, lsr r4
    8fb8:	110c0918 	tstne	ip, r8, lsl r9
    8fbc:	c4040000 	strgt	r0, [r4], #-0
    8fc0:	0000043d 	andeq	r0, r0, sp, lsr r4
    8fc4:	11d4091c 	bicsne	r0, r4, ip, lsl r9
    8fc8:	c5040000 	strgt	r0, [r4, #-0]
    8fcc:	0000043d 	andeq	r0, r0, sp, lsr r4
    8fd0:	61060020 	tstvs	r6, r0, lsr #32
    8fd4:	04000010 	streq	r0, [r0], #-16
    8fd8:	00047fc7 	andeq	r7, r4, r7, asr #31
    8fdc:	34141300 	ldrcc	r1, [r4], #-768	; 0xfffffd00
    8fe0:	80010000 	andhi	r0, r1, r0
    8fe4:	00000220 	andeq	r0, r0, r0, lsr #4
    8fe8:	00051e01 	andeq	r1, r5, r1, lsl #28
    8fec:	65521400 	ldrbvs	r1, [r2, #-1024]	; 0xfffffc00
    8ff0:	20820100 	addcs	r0, r2, r0, lsl #2
    8ff4:	00000002 	andeq	r0, r0, r2
    8ff8:	00319b15 	eorseq	r9, r1, r5, lsl fp
    8ffc:	e63d0100 	ldrt	r0, [sp], -r0, lsl #2
    9000:	e8000001 	stmda	r0, {r0}
    9004:	24080019 	strcs	r0, [r8], #-25	; 0xffffffe7
    9008:	01000000 	mrseq	r0, (UNDEF: 0)
    900c:	0005479c 	muleq	r5, ip, r7
    9010:	38581600 	ldmdacc	r8, {r9, sl, ip}^
    9014:	3d010000 	stccc	0, cr0, [r1, #-0]
    9018:	0000004c 	andeq	r0, r0, ip, asr #32
    901c:	0000492f 	andeq	r4, r0, pc, lsr #18
    9020:	33741500 	cmncc	r4, #0, 10
    9024:	6b010000 	blvs	4902c <__Stack_Size+0x48c2c>
    9028:	000001e6 	andeq	r0, r0, r6, ror #3
    902c:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
    9030:	00000024 	andeq	r0, r0, r4, lsr #32
    9034:	05709c01 	ldrbeq	r9, [r0, #-3073]!	; 0xfffff3ff
    9038:	58160000 	ldmdapl	r6, {}	; <UNPREDICTABLE>
    903c:	01000038 	tsteq	r0, r8, lsr r0
    9040:	00004c6b 	andeq	r4, r0, fp, ror #24
    9044:	00495000 	subeq	r5, r9, r0
    9048:	f0150000 			; <UNDEFINED> instruction: 0xf0150000
    904c:	01000034 	tsteq	r0, r4, lsr r0
    9050:	0001e6a3 	andeq	lr, r1, r3, lsr #13
    9054:	001a3000 	andseq	r3, sl, r0
    9058:	00009008 	andeq	r9, r0, r8
    905c:	de9c0100 	fmllee	f0, f4, f0
    9060:	16000005 	strne	r0, [r0], -r5
    9064:	00003858 	andeq	r3, r0, r8, asr r8
    9068:	004ca301 	subeq	sl, ip, r1, lsl #6
    906c:	49710000 	ldmdbmi	r1!, {}^	; <UNPREDICTABLE>
    9070:	50170000 	andspl	r0, r7, r0
    9074:	1c08001a 	stcne	0, cr0, [r8], {26}
    9078:	b5000000 	strlt	r0, [r0, #-0]
    907c:	18000005 	stmdane	r0, {r0, r2}
    9080:	000014ef 	andeq	r1, r0, pc, ror #9
    9084:	005eb101 	subseq	fp, lr, r1, lsl #2
    9088:	49920000 	ldmibmi	r2, {}	; <UNPREDICTABLE>
    908c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9090:	08001a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip}
    9094:	00000030 	andeq	r0, r0, r0, lsr r0
    9098:	00338a18 	eorseq	r8, r3, r8, lsl sl
    909c:	5ecf0100 	polple	f0, f7, f0
    90a0:	b1000000 	mrslt	r0, (UNDEF: 0)
    90a4:	18000049 	stmdane	r0, {r0, r3, r6}
    90a8:	00003270 	andeq	r3, r0, r0, ror r2
    90ac:	005ed001 	subseq	sp, lr, r1
    90b0:	49e20000 	stmibmi	r2!, {}^	; <UNPREDICTABLE>
    90b4:	00000000 	andeq	r0, r0, r0
    90b8:	0033bc1a 	eorseq	fp, r3, sl, lsl ip
    90bc:	01f40100 	mvnseq	r0, r0, lsl #2
    90c0:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
    90c4:	000000ac 	andeq	r0, r0, ip, lsr #1
    90c8:	06a39c01 	strteq	r9, [r3], r1, lsl #24
    90cc:	be1b0000 	cdplt	0, 1, cr0, cr11, cr0, {0}
    90d0:	01000032 	tsteq	r0, r2, lsr r0
    90d4:	06a301f6 			; <UNDEFINED> instruction: 0x06a301f6
    90d8:	4a000000 	bmi	90e0 <__Stack_Size+0x8ce0>
    90dc:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
    90e0:	01000032 	tsteq	r0, r2, lsr r0
    90e4:	003a01f7 	ldrshteq	r0, [sl], -r7
    90e8:	4a150000 	bmi	5490f0 <__Stack_Size+0x548cf0>
    90ec:	f91b0000 			; <UNDEFINED> instruction: 0xf91b0000
    90f0:	01000013 	tsteq	r0, r3, lsl r0
    90f4:	003a01f8 	ldrshteq	r0, [sl], -r8
    90f8:	4a590000 	bmi	1649100 <__Stack_Size+0x1648d00>
    90fc:	741b0000 	ldrvc	r0, [fp], #-0
    9100:	01000006 	tsteq	r0, r6
    9104:	01e601fa 	strdeq	r0, [r6, #26]!
    9108:	4ab80000 	bmi	fee09110 <SCS_BASE+0x1edfb110>
    910c:	581b0000 	ldmdapl	fp, {}	; <UNPREDICTABLE>
    9110:	01000038 	tsteq	r0, r8, lsr r0
    9114:	003a01fb 	ldrshteq	r0, [sl], -fp
    9118:	4ad60000 	bmi	ff589120 <SCS_BASE+0x1f57b120>
    911c:	ed1c0000 	ldc	0, cr0, [ip, #-0]
    9120:	01000033 	tsteq	r0, r3, lsr r0
    9124:	1b4a022f 	blne	12899e8 <__Stack_Size+0x12895e8>
    9128:	161d0800 	ldrne	r0, [sp], -r0, lsl #16
    912c:	6008001b 	andvs	r0, r8, fp, lsl r0
    9130:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    9134:	75025001 	strvc	r5, [r2, #-1]
    9138:	1e1f0000 	cdpne	0, 1, cr0, cr15, cr0, {0}
    913c:	6308001b 	movwvs	r0, #32795	; 0x801b
    9140:	7300000d 	movwvc	r0, #13
    9144:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    9148:	30015001 	andcc	r5, r1, r1
    914c:	1b281f00 	blne	a10d54 <__Stack_Size+0xa10954>
    9150:	0d6f0800 	stcleq	8, cr0, [pc, #-0]	; 9158 <__Stack_Size+0x8d58>
    9154:	068d0000 	streq	r0, [sp], r0
    9158:	011e0000 	tsteq	lr, r0
    915c:	00790250 	rsbseq	r0, r9, r0, asr r2
    9160:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    9164:	20000075 	andcs	r0, r0, r5, ror r0
    9168:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
    916c:	00000d7a 	andeq	r0, r0, sl, ror sp
    9170:	0150011e 	cmpeq	r0, lr, lsl r1
    9174:	51011e30 	tstpl	r1, r0, lsr lr
    9178:	00007502 	andeq	r7, r0, r2, lsl #10
    917c:	7d040a00 	vstrvc	s0, [r4, #-0]
    9180:	21000002 	tstcs	r0, r2
    9184:	0000350e 	andeq	r3, r0, lr, lsl #10
    9188:	02205201 	eoreq	r5, r0, #268435456	; 0x10000000
    918c:	1b6c0000 	blne	1b09194 <__Stack_Size+0x1b08d94>
    9190:	00380800 	eorseq	r0, r8, r0, lsl #16
    9194:	9c010000 	stcls	0, cr0, [r1], {-0}
    9198:	00050322 	andeq	r0, r5, r2, lsr #6
    919c:	001ba400 	andseq	sl, fp, r0, lsl #8
    91a0:	00004808 	andeq	r4, r0, r8, lsl #16
    91a4:	ea9c0100 	b	fe7095ac <SCS_BASE+0x1e6fb5ac>
    91a8:	23000006 	movwcs	r0, #6
    91ac:	00000513 	andeq	r0, r0, r3, lsl r5
    91b0:	00004b5b 	andeq	r4, r0, fp, asr fp
    91b4:	001bc619 	andseq	ip, fp, r9, lsl r6
    91b8:	00001608 	andeq	r1, r0, r8, lsl #12
    91bc:	05132400 	ldreq	r2, [r3, #-1024]	; 0xfffffc00
    91c0:	00000000 	andeq	r0, r0, r0
    91c4:	00315015 	eorseq	r5, r1, r5, lsl r0
    91c8:	20f50100 	rscscs	r0, r5, r0, lsl #2
    91cc:	ec000002 	stc	0, cr0, [r0], {2}
    91d0:	d808001b 	stmdale	r8, {r0, r1, r3, r4}
    91d4:	01000000 	mrseq	r0, (UNDEF: 0)
    91d8:	0007c69c 	muleq	r7, ip, r6
    91dc:	31811800 	orrcc	r1, r1, r0, lsl #16
    91e0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    91e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    91e8:	00004b79 	andeq	r4, r0, r9, ror fp
    91ec:	00221a18 	eoreq	r1, r2, r8, lsl sl
    91f0:	3af80100 	bcc	ffe095f8 <SCS_BASE+0x1fdfb5f8>
    91f4:	b1000000 	mrslt	r0, (UNDEF: 0)
    91f8:	1900004b 	stmdbne	r0, {r0, r1, r3, r6}
    91fc:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
    9200:	000000a8 	andeq	r0, r0, r8, lsr #1
    9204:	0034c725 	eorseq	ip, r4, r5, lsr #14
    9208:	01020100 	mrseq	r0, (UNDEF: 18)
    920c:	000007c6 	andeq	r0, r0, r6, asr #15
    9210:	00338a1b 	eorseq	r8, r3, fp, lsl sl
    9214:	01030100 	mrseq	r0, (UNDEF: 19)
    9218:	0000003a 	andeq	r0, r0, sl, lsr r0
    921c:	00004bc4 	andeq	r4, r0, r4, asr #23
    9220:	0032701b 	eorseq	r7, r2, fp, lsl r0
    9224:	01040100 	mrseq	r0, (UNDEF: 20)
    9228:	0000003a 	andeq	r0, r0, sl, lsr r0
    922c:	00004bfe 	strdeq	r4, [r0], -lr
    9230:	50457226 	subpl	r7, r5, r6, lsr #4
    9234:	01050100 	mrseq	r0, (UNDEF: 21)
    9238:	0000003a 	andeq	r0, r0, sl, lsr r0
    923c:	00004bc4 	andeq	r4, r0, r4, asr #23
    9240:	001c8a17 	andseq	r8, ip, r7, lsl sl
    9244:	00001a08 	andeq	r1, r0, r8, lsl #20
    9248:	00078400 	andeq	r8, r7, r0, lsl #8
    924c:	33d51b00 	bicscc	r1, r5, #0, 22
    9250:	3f010000 	svccc	0x00010000
    9254:	00004c01 	andeq	r4, r0, r1, lsl #24
    9258:	004c3600 	subeq	r3, ip, r0, lsl #12
    925c:	641f0000 	ldrvs	r0, [pc], #-0	; 9264 <__Stack_Size+0x8e64>
    9260:	8608001c 			; <UNDEFINED> instruction: 0x8608001c
    9264:	9800000d 	stmdals	r0, {r0, r2, r3}
    9268:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    926c:	74025001 	strvc	r5, [r2], #-1
    9270:	6c1f0000 	ldcvs	0, cr0, [pc], {-0}
    9274:	9208001c 	andls	r0, r8, #28
    9278:	b200000d 	andlt	r0, r0, #13
    927c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    9280:	74025001 	strvc	r5, [r2], #-1
    9284:	51011e00 	tstpl	r1, r0, lsl #28
    9288:	00300802 	eorseq	r0, r0, r2, lsl #16
    928c:	001c8427 	andseq	r8, ip, r7, lsr #8
    9290:	000d9e08 	andeq	r9, sp, r8, lsl #28
    9294:	1c8a2700 	stcne	7, cr2, [sl], {0}
    9298:	0daa0800 	stceq	8, cr0, [sl]
    929c:	00000000 	andeq	r0, r0, r0
    92a0:	02ad040a 	adceq	r0, sp, #167772160	; 0xa000000
    92a4:	d1280000 			; <UNDEFINED> instruction: 0xd1280000
    92a8:	01000032 	tsteq	r0, r2, lsr r0
    92ac:	02200152 	eoreq	r0, r0, #-2147483628	; 0x80000014
    92b0:	1cc40000 	stclne	0, cr0, [r4], {0}
    92b4:	008c0800 	addeq	r0, ip, r0, lsl #16
    92b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    92bc:	00000853 	andeq	r0, r0, r3, asr r8
    92c0:	0032701b 	eorseq	r7, r2, fp, lsl r0
    92c4:	01540100 	cmpeq	r4, r0, lsl #2
    92c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    92cc:	00004c64 	andeq	r4, r0, r4, ror #24
    92d0:	00338a1b 	eorseq	r8, r3, fp, lsl sl
    92d4:	01550100 	cmpeq	r5, r0, lsl #2
    92d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    92dc:	00004c9e 	muleq	r0, lr, ip
    92e0:	50457226 	subpl	r7, r5, r6, lsr #4
    92e4:	01560100 	cmpeq	r6, r0, lsl #2
    92e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    92ec:	00004c9e 	muleq	r0, lr, ip
    92f0:	00221a1b 	eoreq	r1, r2, fp, lsl sl
    92f4:	01570100 	cmpeq	r7, r0, lsl #2
    92f8:	0000003a 	andeq	r0, r0, sl, lsr r0
    92fc:	00004ce9 	andeq	r4, r0, r9, ror #25
    9300:	000a3829 	andeq	r3, sl, r9, lsr #16
    9304:	00083c00 	andeq	r3, r8, r0, lsl #24
    9308:	33d52500 	bicscc	r2, r5, #0, 10
    930c:	73010000 	movwvc	r0, #4096	; 0x1000
    9310:	00004c01 	andeq	r4, r0, r1, lsl #24
    9314:	682a0000 	stmdavs	sl!, {}	; <UNPREDICTABLE>
    9318:	1b00000a 	blne	9348 <__Stack_Size+0x8f48>
    931c:	000033d5 	ldrdeq	r3, [r0], -r5
    9320:	4c017901 	stcmi	9, cr7, [r1], {1}
    9324:	fc000000 	stc2	0, cr0, [r0], {-0}
    9328:	0000004c 	andeq	r0, r0, ip, asr #32
    932c:	34412b00 	strbcc	r2, [r1], #-2816	; 0xfffff500
    9330:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    9334:	00022001 	andeq	r2, r2, r1
    9338:	001d5000 	andseq	r5, sp, r0
    933c:	00002408 	andeq	r2, r0, r8, lsl #8
    9340:	2c9c0100 	ldfcss	f0, [ip], {0}
    9344:	0000117e 	andeq	r1, r0, lr, ror r1
    9348:	e601a201 	str	sl, [r1], -r1, lsl #4
    934c:	74000001 	strvc	r0, [r0], #-1
    9350:	1c08001d 	stcne	0, cr0, [r8], {29}
    9354:	01000000 	mrseq	r0, (UNDEF: 0)
    9358:	0008b09c 	muleq	r8, ip, r0
    935c:	38582d00 	ldmdacc	r8, {r8, sl, fp, sp}^
    9360:	a2010000 	andge	r0, r1, #0
    9364:	00004c01 	andeq	r4, r0, r1, lsl #24
    9368:	004d1500 	subeq	r1, sp, r0, lsl #10
    936c:	347b2e00 	ldrbtcc	r2, [fp], #-3584	; 0xfffff200
    9370:	a2010000 	andge	r0, r1, #0
    9374:	0008b001 	andeq	fp, r8, r1
    9378:	2f510100 	svccs	0x00510100
    937c:	000014fb 	strdeq	r1, [r0], -fp
    9380:	3a01a401 	bcc	7238c <__Stack_Size+0x71f8c>
    9384:	01000000 	mrseq	r0, (UNDEF: 0)
    9388:	040a0052 	streq	r0, [sl], #-82	; 0xffffffae
    938c:	000001ec 	andeq	r0, r0, ip, ror #3
    9390:	0032ed2c 	eorseq	lr, r2, ip, lsr #26
    9394:	03f60100 	mvnseq	r0, #0, 2
    9398:	0000005e 	andeq	r0, r0, lr, asr r0
    939c:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
    93a0:	00000040 	andeq	r0, r0, r0, asr #32
    93a4:	08e09c01 	stmiaeq	r0!, {r0, sl, fp, ip, pc}^
    93a8:	9e200000 	cdpls	0, 2, cr0, cr0, cr0, {0}
    93ac:	9e08001d 	mcrls	0, 0, r0, cr8, cr13, {0}
    93b0:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    93b4:	30015001 	andcc	r5, r1, r1
    93b8:	8a300000 	bhi	c093c0 <__Stack_Size+0xc08fc0>
    93bc:	01000032 	tsteq	r0, r2, lsr r0
    93c0:	1a01023a 	bne	49cb0 <__Stack_Size+0x498b0>
    93c4:	25000009 	strcs	r0, [r0, #-9]
    93c8:	000034a0 	andeq	r3, r0, r0, lsr #9
    93cc:	20023c01 	andcs	r3, r2, r1, lsl #24
    93d0:	25000002 	strcs	r0, [r0, #-2]
    93d4:	000012c0 	andeq	r1, r0, r0, asr #5
    93d8:	3a023d01 	bcc	987e4 <__Stack_Size+0x983e4>
    93dc:	25000000 	strcs	r0, [r0, #-0]
    93e0:	000013f9 	strdeq	r1, [r0], -r9
    93e4:	3a023e01 	bcc	98bf0 <__Stack_Size+0x987f0>
    93e8:	31000000 	mrscc	r0, (UNDEF: 0)
    93ec:	00003285 	andeq	r3, r0, r5, lsl #5
    93f0:	0002ae01 	andeq	sl, r2, r1, lsl #28
    93f4:	00328c30 	eorseq	r8, r2, r0, lsr ip
    93f8:	02ba0100 	adcseq	r0, sl, #0, 2
    93fc:	00099c01 	andeq	r9, r9, r1, lsl #24
    9400:	13cd2500 	bicne	r2, sp, #0, 10
    9404:	bc010000 	stclt	0, cr0, [r1], {-0}
    9408:	00027702 	andeq	r7, r2, r2, lsl #14
    940c:	34a02500 	strtcc	r2, [r0], #1280	; 0x500
    9410:	bd010000 	stclt	0, cr0, [r1, #-0]
    9414:	00022002 	andeq	r2, r2, r2
    9418:	342a2500 	strtcc	r2, [sl], #-1280	; 0xfffffb00
    941c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    9420:	00003a02 	andeq	r3, r0, r2, lsl #20
    9424:	338a2500 	orrcc	r2, sl, #0, 10
    9428:	c0010000 	andgt	r0, r1, r0
    942c:	00003a02 	andeq	r3, r0, r2, lsl #20
    9430:	31c72500 	biccc	r2, r7, r0, lsl #10
    9434:	c0010000 	andgt	r0, r1, r0
    9438:	00003a02 	andeq	r3, r0, r2, lsl #20
    943c:	14fb2500 	ldrbtne	r2, [fp], #1280	; 0x500
    9440:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9444:	00003a02 	andeq	r3, r0, r2, lsl #20
    9448:	221a2500 	andscs	r2, sl, #0, 10
    944c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9450:	00003a02 	andeq	r3, r0, r2, lsl #20
    9454:	098d3200 	stmibeq	sp, {r9, ip, sp}
    9458:	18250000 	stmdane	r5!, {}	; <UNPREDICTABLE>
    945c:	01000033 	tsteq	r0, r3, lsr r0
    9460:	005e02cd 	subseq	r0, lr, sp, asr #5
    9464:	33000000 	movwcc	r0, #0
    9468:	00112625 	andseq	r2, r1, r5, lsr #12
    946c:	03460100 	movteq	r0, #24832	; 0x6100
    9470:	0000099c 	muleq	r0, ip, r9
    9474:	3a340000 	bcc	d0947c <__Stack_Size+0xd0907c>
    9478:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    947c:	000033de 	ldrdeq	r3, [r0], -lr
    9480:	5e036d01 	cdppl	13, 0, cr6, cr3, cr1, {0}
    9484:	d0000000 	andle	r0, r0, r0
    9488:	0008001d 	andeq	r0, r8, sp, lsl r0
    948c:	01000003 	tsteq	r0, r3
    9490:	000b2a9c 	muleq	fp, ip, sl
    9494:	01043500 	tsteq	r4, r0, lsl #10
    9498:	09d90370 	ldmibeq	r9, {r4, r5, r6, r8, r9}^
    949c:	62360000 	eorsvs	r0, r6, #0
    94a0:	03720100 	cmneq	r2, #0, 2
    94a4:	000001e6 	andeq	r0, r0, r6, ror #3
    94a8:	01007736 	tsteq	r0, r6, lsr r7
    94ac:	0b2a0373 	bleq	a8a280 <__Stack_Size+0xa89e80>
    94b0:	1b000000 	blne	94b8 <__Stack_Size+0x90b8>
    94b4:	0000318a 	andeq	r3, r0, sl, lsl #3
    94b8:	bb037401 	bllt	e64c4 <__Stack_Size+0xe60c4>
    94bc:	36000009 	strcc	r0, [r0], -r9
    94c0:	3700004d 	strcc	r0, [r0, -sp, asr #32]
    94c4:	0000322a 	andeq	r3, r0, sl, lsr #4
    94c8:	4c037d01 	stcmi	13, cr7, [r3], {1}
    94cc:	01000000 	mrseq	r0, (UNDEF: 0)
    94d0:	0008e038 	andeq	lr, r8, r8, lsr r0
    94d4:	001e2400 	andseq	r2, lr, r0, lsl #8
    94d8:	000a9008 	andeq	r9, sl, r8
    94dc:	03920100 	orrseq	r0, r2, #0, 2
    94e0:	00000a72 	andeq	r0, r0, r2, ror sl
    94e4:	000a902a 	andeq	r9, sl, sl, lsr #32
    94e8:	08ed2300 	stmiaeq	sp!, {r8, r9, sp}^
    94ec:	4d660000 	stclmi	0, cr0, [r6, #-0]
    94f0:	f9230000 			; <UNDEFINED> instruction: 0xf9230000
    94f4:	04000008 	streq	r0, [r0], #-8
    94f8:	2300004e 	movwcs	r0, #78	; 0x4e
    94fc:	00000905 	andeq	r0, r0, r5, lsl #18
    9500:	00004e22 	andeq	r4, r0, r2, lsr #28
    9504:	00091139 	andeq	r1, r9, r9, lsr r1
    9508:	001ed000 	andseq	sp, lr, r0
    950c:	1e322708 	cdpne	7, 3, cr2, cr2, cr8, {0}
    9510:	06a90800 	strteq	r0, [r9], r0, lsl #16
    9514:	6e1d0000 	cdpvs	0, 1, cr0, cr13, cr0, {0}
    9518:	4c08001e 	stcmi	0, cr0, [r8], {30}
    951c:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    9520:	74025001 	strvc	r5, [r2], #-1
    9524:	84270000 	strthi	r0, [r7], #-0
    9528:	5308001e 	movwpl	r0, #32798	; 0x801e
    952c:	27000008 	strcs	r0, [r0, -r8]
    9530:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
    9534:	000006ea 	andeq	r0, r0, sl, ror #13
    9538:	001eae27 	andseq	sl, lr, r7, lsr #28
    953c:	00050308 	andeq	r0, r5, r8, lsl #6
    9540:	1ec02700 	cdpne	7, 12, cr2, cr0, cr0, {0}
    9544:	07cc0800 	strbeq	r0, [ip, r0, lsl #16]
    9548:	00000000 	andeq	r0, r0, r0
    954c:	00091a38 	andeq	r1, r9, r8, lsr sl
    9550:	001ed600 	andseq	sp, lr, r0, lsl #12
    9554:	000aa808 	andeq	sl, sl, r8, lsl #16
    9558:	03970100 	orrseq	r0, r7, #0, 2
    955c:	00000b0e 	andeq	r0, r0, lr, lsl #22
    9560:	000aa82a 	andeq	sl, sl, sl, lsr #16
    9564:	09272300 	stmdbeq	r7!, {r8, r9, sp}
    9568:	4e410000 	cdpmi	0, 4, cr0, cr1, cr0, {0}
    956c:	33230000 			; <UNDEFINED> instruction: 0x33230000
    9570:	c1000009 	tstgt	r0, r9
    9574:	2300004e 	movwcs	r0, #78	; 0x4e
    9578:	0000093f 	andeq	r0, r0, pc, lsr r9
    957c:	00004ef6 	strdeq	r4, [r0], -r6
    9580:	00094b23 	andeq	r4, r9, r3, lsr #22
    9584:	004f1400 	subeq	r1, pc, r0, lsl #8
    9588:	09572300 	ldmdbeq	r7, {r8, r9, sp}^
    958c:	4f270000 	svcmi	0x00270000
    9590:	63230000 			; <UNDEFINED> instruction: 0x63230000
    9594:	42000009 	andmi	r0, r0, #9
    9598:	2300004f 	movwcs	r0, #79	; 0x4f
    959c:	0000096f 	andeq	r0, r0, pc, ror #18
    95a0:	00004f62 	andeq	r4, r0, r2, ror #30
    95a4:	001ee217 	andseq	lr, lr, r7, lsl r2
    95a8:	00002408 	andeq	r2, r0, r8, lsl #8
    95ac:	000ae100 	andeq	lr, sl, r0, lsl #2
    95b0:	09802300 	stmibeq	r0, {r8, r9, sp}
    95b4:	4f750000 	svcmi	0x00750000
    95b8:	17000000 	strne	r0, [r0, -r0]
    95bc:	0800200c 	stmdaeq	r0, {r2, r3, sp}
    95c0:	00000064 	andeq	r0, r0, r4, rrx
    95c4:	00000b00 	andeq	r0, r0, r0, lsl #22
    95c8:	00098e3a 	andeq	r8, r9, sl, lsr lr
    95cc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    95d0:	00204c27 	eoreq	r4, r0, r7, lsr #24
    95d4:	0005de08 	andeq	sp, r5, r8, lsl #28
    95d8:	e63b0000 	ldrt	r0, [fp], -r0
    95dc:	1e08001f 	mcrne	0, 0, r0, cr8, cr15, {0}
    95e0:	74025001 	strvc	r5, [r2], #-1
    95e4:	00000000 	andeq	r0, r0, r0
    95e8:	001e0227 	andseq	r0, lr, r7, lsr #4
    95ec:	000db608 	andeq	fp, sp, r8, lsl #12
    95f0:	1e0c2700 	cdpne	7, 0, cr2, cr12, cr0, {0}
    95f4:	0db60800 	ldceq	8, cr0, [r6]
    95f8:	80270000 	eorhi	r0, r7, r0
    95fc:	b6080020 	strlt	r0, [r8], -r0, lsr #32
    9600:	00000008 	andeq	r0, r0, r8
    9604:	004c040a 	subeq	r0, ip, sl, lsl #8
    9608:	59300000 	ldmdbpl	r0!, {}	; <UNPREDICTABLE>
    960c:	01000033 	tsteq	r0, r3, lsr r0
    9610:	700101b7 			; <UNDEFINED> instruction: 0x700101b7
    9614:	2500000b 	strcs	r0, [r0, #-11]
    9618:	000032be 			; <UNDEFINED> instruction: 0x000032be
    961c:	a301b901 	movwge	fp, #6401	; 0x1901
    9620:	25000006 	strcs	r0, [r0, #-6]
    9624:	00003336 	andeq	r3, r0, r6, lsr r3
    9628:	3a01ba01 	bcc	77e34 <__Stack_Size+0x77a34>
    962c:	33000000 	movwcc	r0, #0
    9630:	00003125 	andeq	r3, r0, r5, lsr #2
    9634:	01c00100 	biceq	r0, r0, r0, lsl #2
    9638:	000001e6 	andeq	r0, r0, r6, ror #3
    963c:	00385825 	eorseq	r5, r8, r5, lsr #16
    9640:	01c10100 	biceq	r0, r1, r0, lsl #2
    9644:	0000003a 	andeq	r0, r0, sl, lsr r0
    9648:	74280000 	strtvc	r0, [r8], #-0
    964c:	01000031 	tsteq	r0, r1, lsr r0
    9650:	005e03cb 	subseq	r0, lr, fp, asr #7
    9654:	20d00000 	sbcscs	r0, r0, r0
    9658:	00cc0800 	sbceq	r0, ip, r0, lsl #16
    965c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9660:	00000c42 	andeq	r0, r0, r2, asr #24
    9664:	0013f91b 	andseq	pc, r3, fp, lsl r9	; <UNPREDICTABLE>
    9668:	03cd0100 	biceq	r0, sp, #0, 2
    966c:	0000003a 	andeq	r0, r0, sl, lsr r0
    9670:	00004f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    9674:	000b303c 	andeq	r3, fp, ip, lsr r0
    9678:	0020e800 	eoreq	lr, r0, r0, lsl #16
    967c:	00007a08 	andeq	r7, r0, r8, lsl #20
    9680:	03d60100 	bicseq	r0, r6, #0, 2
    9684:	00000c38 	andeq	r0, r0, r8, lsr ip
    9688:	0020e819 	eoreq	lr, r0, r9, lsl r8
    968c:	00007a08 	andeq	r7, r0, r8, lsl #20
    9690:	0b3d2300 	bleq	f52298 <__Stack_Size+0xf51e98>
    9694:	4fe00000 	svcmi	0x00e00000
    9698:	49230000 	stmdbmi	r3!, {}	; <UNPREDICTABLE>
    969c:	f500000b 			; <UNDEFINED> instruction: 0xf500000b
    96a0:	1700004f 	strne	r0, [r0, -pc, asr #32]
    96a4:	080020f0 	stmdaeq	r0, {r4, r5, r6, r7, sp}
    96a8:	0000002a 	andeq	r0, r0, sl, lsr #32
    96ac:	00000c22 	andeq	r0, r0, r2, lsr #24
    96b0:	000b5623 	andeq	r5, fp, r3, lsr #12
    96b4:	00501b00 	subseq	r1, r0, r0, lsl #22
    96b8:	0b622300 	bleq	18922c0 <__Stack_Size+0x1891ec0>
    96bc:	50390000 	eorspl	r0, r9, r0
    96c0:	fc1d0000 	ldc2	0, cr0, [sp], {-0}
    96c4:	f8080020 			; <UNDEFINED> instruction: 0xf8080020
    96c8:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    96cc:	76025001 	strvc	r5, [r2], -r1
    96d0:	101f0000 	andsne	r0, pc, r0
    96d4:	c2080021 	andgt	r0, r8, #33	; 0x21
    96d8:	0b00000d 	bleq	9714 <__Stack_Size+0x9314>
    96dc:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    96e0:	30015001 	andcc	r5, r1, r1
    96e4:	211a2000 	tstcs	sl, r0
    96e8:	0dce0800 	stcleq	8, cr0, [lr]
    96ec:	011e0000 	tsteq	lr, r0
    96f0:	00770250 	rsbseq	r0, r7, r0, asr r2
    96f4:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    96f8:	00000076 	andeq	r0, r0, r6, ror r0
    96fc:	00212e20 	eoreq	r2, r1, r0, lsr #28
    9700:	000d7a08 	andeq	r7, sp, r8, lsl #20
    9704:	50011e00 	andpl	r1, r1, r0, lsl #28
    9708:	011e3001 	tsteq	lr, r1
    970c:	00300151 	eorseq	r0, r0, r1, asr r1
    9710:	823d0000 	eorshi	r0, sp, #0
    9714:	b6080021 	strlt	r0, [r8], -r1, lsr #32
    9718:	00000008 	andeq	r0, r0, r8
    971c:	0011d93e 	andseq	sp, r1, lr, lsr r9
    9720:	04220100 	strteq	r0, [r2], #-256	; 0xffffff00
    9724:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
    9728:	00000040 	andeq	r0, r0, r0, asr #32
    972c:	0c859c01 	stceq	12, cr9, [r5], {1}
    9730:	563f0000 	ldrtpl	r0, [pc], -r0
    9734:	01006c61 	tsteq	r0, r1, ror #24
    9738:	005e0422 	subseq	r0, lr, r2, lsr #8
    973c:	50870000 	addpl	r0, r7, r0
    9740:	69400000 	stmdbvs	r0, {}^	; <UNPREDICTABLE>
    9744:	04270100 	strteq	r0, [r7], #-256	; 0xffffff00
    9748:	0000003a 	andeq	r0, r0, sl, lsr r0
    974c:	6e265201 	cdpvs	2, 2, cr5, cr6, cr1, {0}
    9750:	01005045 	tsteq	r0, r5, asr #32
    9754:	003a0428 	eorseq	r0, sl, r8, lsr #8
    9758:	50a80000 	adcpl	r0, r8, r0
    975c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9760:	000031d0 	ldrdeq	r3, [r0], -r0
    9764:	5e03a301 	cdppl	3, 0, cr10, cr3, cr1, {0}
    9768:	dc000000 	stcle	0, cr0, [r0], {-0}
    976c:	5c080021 	stcpl	0, cr0, [r8], {33}	; 0x21
    9770:	01000000 	mrseq	r0, (UNDEF: 0)
    9774:	000ccb9c 	muleq	ip, ip, fp
    9778:	13f91b00 	mvnsne	r1, #0, 22
    977c:	a5010000 	strge	r0, [r1, #-0]
    9780:	00003a03 	andeq	r3, r0, r3, lsl #20
    9784:	0050bb00 	subseq	fp, r0, r0, lsl #22
    9788:	21f02700 	mvnscs	r2, r0, lsl #14
    978c:	05de0800 	ldrbeq	r0, [lr, #2048]	; 0x800
    9790:	0c270000 	stceq	0, cr0, [r7], #-0
    9794:	42080022 	andmi	r0, r8, #34	; 0x22
    9798:	3d00000c 	stccc	0, cr0, [r0, #-48]	; 0xffffffd0
    979c:	0800222a 	stmdaeq	r0, {r1, r3, r5, r9, sp}
    97a0:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    97a4:	34354100 	ldrtcc	r4, [r5], #-256	; 0xffffff00
    97a8:	3a010000 	bcc	497b0 <__Stack_Size+0x493b0>
    97ac:	00223804 	eoreq	r3, r2, r4, lsl #16
    97b0:	00000208 	andeq	r0, r0, r8, lsl #4
    97b4:	429c0100 	addsmi	r0, ip, #0, 2
    97b8:	00000f44 	andeq	r0, r0, r4, asr #30
    97bc:	0474ee04 	ldrbteq	lr, [r4], #-3588	; 0xfffff1fc
    97c0:	55420000 	strbpl	r0, [r2, #-0]
    97c4:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    97c8:	0002adf0 	strdeq	sl, [r2], -r0
    97cc:	34a74200 	strtcc	r4, [r7], #512	; 0x200
    97d0:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    97d4:	00000cfe 	strdeq	r0, [r0], -lr
    97d8:	00004c34 	andeq	r4, r0, r4, lsr ip
    97dc:	35034200 	strcc	r4, [r3, #-512]	; 0xfffffe00
    97e0:	f5040000 			; <UNDEFINED> instruction: 0xf5040000
    97e4:	00000cfe 	strdeq	r0, [r0], -lr
    97e8:	00112e42 	andseq	r2, r1, r2, asr #28
    97ec:	19220500 	stmdbne	r2!, {r8, sl}
    97f0:	0a00000d 	beq	982c <__Stack_Size+0x942c>
    97f4:	00039404 	andeq	r9, r3, r4, lsl #8
    97f8:	310b4200 	mrscc	r4, R11_fiq
    97fc:	25050000 	strcs	r0, [r5, #-0]
    9800:	00000d2a 	andeq	r0, r0, sl, lsr #26
    9804:	0474040a 	ldrbteq	r0, [r4], #-1034	; 0xfffffbf6
    9808:	d0420000 	suble	r0, r2, r0
    980c:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    9810:	000d3b2a 	andeq	r3, sp, sl, lsr #22
    9814:	f8040a00 			; <UNDEFINED> instruction: 0xf8040a00
    9818:	43000004 	movwmi	r0, #4
    981c:	00003256 	andeq	r3, r0, r6, asr r2
    9820:	02f82b01 	rscseq	r2, r8, #1024	; 0x400
    9824:	03050000 	movweq	r0, #20480	; 0x5000
    9828:	20000716 	andcs	r0, r0, r6, lsl r7
    982c:	0032a743 	eorseq	sl, r2, r3, asr #14
    9830:	882d0100 	stmdahi	sp!, {r8}
    9834:	05000000 	streq	r0, [r0, #-0]
    9838:	00012c03 	andeq	r2, r1, r3, lsl #24
    983c:	324a4420 	subcc	r4, sl, #32, 8	; 0x20000000
    9840:	324a0000 	subcc	r0, sl, #0
    9844:	85060000 	strhi	r0, [r6, #-0]
    9848:	164c4502 	strbne	r4, [ip], -r2, lsl #10
    984c:	164c0000 	strbne	r0, [ip], -r0
    9850:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    9854:	0015dc44 	andseq	sp, r5, r4, asr #24
    9858:	0015dc00 	andseq	sp, r5, r0, lsl #24
    985c:	02880600 	addeq	r0, r8, #0, 12
    9860:	0033c844 	eorseq	ip, r3, r4, asr #16
    9864:	0033c800 	eorseq	ip, r3, r0, lsl #16
    9868:	02800600 	addeq	r0, r0, #0, 12
    986c:	00102e44 	andseq	r2, r0, r4, asr #28
    9870:	00102e00 	andseq	r2, r0, r0, lsl #28
    9874:	026c0600 	rsbeq	r0, ip, #0, 12
    9878:	00159544 	andseq	r9, r5, r4, asr #10
    987c:	00159500 	andseq	r9, r5, r0, lsl #10
    9880:	02890600 	addeq	r0, r9, #0, 12
    9884:	00332944 	eorseq	r2, r3, r4, asr #18
    9888:	00332900 	eorseq	r2, r3, r0, lsl #18
    988c:	027f0600 	rsbseq	r0, pc, #0, 12
    9890:	00332044 	eorseq	r2, r3, r4, asr #32
    9894:	00332000 	eorseq	r2, r3, r0
    9898:	02990600 	addseq	r0, r9, #0, 12
    989c:	00318f44 	eorseq	r8, r1, r4, asr #30
    98a0:	00318f00 	eorseq	r8, r1, r0, lsl #30
    98a4:	02860600 	addeq	r0, r6, #0, 12
    98a8:	00346745 	eorseq	r6, r4, r5, asr #14
    98ac:	00346700 	eorseq	r6, r4, r0, lsl #14
    98b0:	001a0700 	andseq	r0, sl, r0, lsl #14
    98b4:	00000177 	andeq	r0, r0, r7, ror r1
    98b8:	22340004 	eorscs	r0, r4, #4
    98bc:	01040000 	mrseq	r0, (UNDEF: 4)
    98c0:	00000bf1 	strdeq	r0, [r0], -r1
    98c4:	00356a0c 	eorseq	r6, r5, ip, lsl #20
    98c8:	00051f00 	andeq	r1, r5, r0, lsl #30
    98cc:	000b4800 	andeq	r4, fp, r0, lsl #16
    98d0:	00000000 	andeq	r0, r0, r0
    98d4:	002abb00 	eoreq	fp, sl, r0, lsl #22
    98d8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    98dc:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    98e0:	88050202 	stmdahi	r5, {r1, r9}
    98e4:	02000007 	andeq	r0, r0, #7
    98e8:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    98ec:	75030000 	strvc	r0, [r3, #-0]
    98f0:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    98f4:	00004527 	andeq	r4, r0, r7, lsr #10
    98f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    98fc:	000008c3 	andeq	r0, r0, r3, asr #17
    9900:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    9904:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    9908:	02000000 	andeq	r0, r0, #0
    990c:	0b600702 	bleq	180b51c <__Stack_Size+0x180b11c>
    9910:	75030000 	strvc	r0, [r3, #-0]
    9914:	29020038 	stmdbcs	r2, {r3, r4, r5}
    9918:	00000068 	andeq	r0, r0, r8, rrx
    991c:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    9920:	02000009 	andeq	r0, r0, #9
    9924:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
    9928:	04040000 	streq	r0, [r4], #-0
    992c:	0000005e 	andeq	r0, r0, lr, asr r0
    9930:	00164c05 	andseq	r4, r6, r5, lsl #24
    9934:	3a240100 	bcc	909d3c <__Stack_Size+0x90993c>
    9938:	24080022 	strcs	r0, [r8], #-34	; 0xffffffde
    993c:	01000000 	mrseq	r0, (UNDEF: 0)
    9940:	0001049c 	muleq	r1, ip, r4
    9944:	353a0600 	ldrcc	r0, [sl, #-1536]!	; 0xfffffa00
    9948:	24010000 	strcs	r0, [r1], #-0
    994c:	00000076 	andeq	r0, r0, r6, ror r0
    9950:	00005101 	andeq	r5, r0, r1, lsl #2
    9954:	00355706 	eorseq	r5, r5, r6, lsl #14
    9958:	4c240100 	stfmis	f0, [r4], #-0
    995c:	2c000000 	stccs	0, cr0, [r0], {-0}
    9960:	06000051 			; <UNDEFINED> instruction: 0x06000051
    9964:	00003543 	andeq	r3, r0, r3, asr #10
    9968:	004c2401 	subeq	r2, ip, r1, lsl #8
    996c:	514d0000 	mrspl	r0, (UNDEF: 77)
    9970:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    9974:	3a260100 	bcc	989d7c <__Stack_Size+0x98997c>
    9978:	01000000 	mrseq	r0, (UNDEF: 0)
    997c:	00690852 	rsbeq	r0, r9, r2, asr r8
    9980:	003a2701 	eorseq	r2, sl, r1, lsl #14
    9984:	516e0000 	cmnpl	lr, r0
    9988:	4b090000 	blmi	249990 <__Stack_Size+0x249590>
    998c:	01000035 	tsteq	r0, r5, lsr r0
    9990:	00003a27 	andeq	r3, r0, r7, lsr #20
    9994:	0051cd00 	subseq	ip, r1, r0, lsl #26
    9998:	35510900 	ldrbcc	r0, [r1, #-2304]	; 0xfffff700
    999c:	27010000 	strcs	r0, [r1, -r0]
    99a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    99a4:	000051e7 	andeq	r5, r0, r7, ror #3
    99a8:	00356309 	eorseq	r6, r5, r9, lsl #6
    99ac:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    99b0:	0b000001 	bleq	99bc <__Stack_Size+0x95bc>
    99b4:	00000052 	andeq	r0, r0, r2, asr r0
    99b8:	004c0404 	subeq	r0, ip, r4, lsl #8
    99bc:	67050000 	strvs	r0, [r5, -r0]
    99c0:	01000034 	tsteq	r0, r4, lsr r0
    99c4:	00225e3d 	eoreq	r5, r2, sp, lsr lr
    99c8:	00002408 	andeq	r2, r0, r8, lsl #8
    99cc:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    99d0:	06000001 	streq	r0, [r0], -r1
    99d4:	0000353a 	andeq	r3, r0, sl, lsr r5
    99d8:	00763d01 	rsbseq	r3, r6, r1, lsl #26
    99dc:	52460000 	subpl	r0, r6, #0
    99e0:	57060000 	strpl	r0, [r6, -r0]
    99e4:	01000035 	tsteq	r0, r5, lsr r0
    99e8:	00004c3d 	andeq	r4, r0, sp, lsr ip
    99ec:	00527d00 	subseq	r7, r2, r0, lsl #26
    99f0:	35430600 	strbcc	r0, [r3, #-1536]	; 0xfffffa00
    99f4:	3d010000 	stccc	0, cr0, [r1, #-0]
    99f8:	0000004c 	andeq	r0, r0, ip, asr #32
    99fc:	0000529e 	muleq	r0, lr, r2
    9a00:	01006e07 	tsteq	r0, r7, lsl #28
    9a04:	00003a3f 	andeq	r3, r0, pc, lsr sl
    9a08:	08520100 	ldmdaeq	r2, {r8}^
    9a0c:	40010069 	andmi	r0, r1, r9, rrx
    9a10:	0000003a 	andeq	r0, r0, sl, lsr r0
    9a14:	000052bf 			; <UNDEFINED> instruction: 0x000052bf
    9a18:	00356309 	eorseq	r6, r5, r9, lsl #6
    9a1c:	74410100 	strbvc	r0, [r1], #-256	; 0xffffff00
    9a20:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    9a24:	00000053 	andeq	r0, r0, r3, asr r0
    9a28:	003a0404 	eorseq	r0, sl, r4, lsl #8
    9a2c:	e1000000 	mrs	r0, (UNDEF: 0)
    9a30:	0400000a 	streq	r0, [r0], #-10
    9a34:	0022bf00 	eoreq	fp, r2, r0, lsl #30
    9a38:	f1010400 			; <UNDEFINED> instruction: 0xf1010400
    9a3c:	0c00000b 	stceq	0, cr0, [r0], {11}
    9a40:	000036aa 	andeq	r3, r0, sl, lsr #13
    9a44:	0000051f 	andeq	r0, r0, pc, lsl r5
    9a48:	00000c10 	andeq	r0, r0, r0, lsl ip
    9a4c:	00000000 	andeq	r0, r0, r0
    9a50:	00002b55 	andeq	r2, r0, r5, asr fp
    9a54:	b6050402 	strlt	r0, [r5], -r2, lsl #8
    9a58:	02000007 	andeq	r0, r0, #7
    9a5c:	07880502 	streq	r0, [r8, r2, lsl #10]
    9a60:	01020000 	mrseq	r0, (UNDEF: 2)
    9a64:	00096706 	andeq	r6, r9, r6, lsl #14
    9a68:	33750300 	cmncc	r5, #0, 6
    9a6c:	27020032 	smladxcs	r2, r2, r0, r0
    9a70:	00000045 	andeq	r0, r0, r5, asr #32
    9a74:	c3070402 	movwgt	r0, #29698	; 0x7402
    9a78:	03000008 	movweq	r0, #8
    9a7c:	00363175 	eorseq	r3, r6, r5, ror r1
    9a80:	00572802 	subseq	r2, r7, r2, lsl #16
    9a84:	02020000 	andeq	r0, r2, #0
    9a88:	000b6007 	andeq	r6, fp, r7
    9a8c:	38750300 	ldmdacc	r5!, {r8, r9}^
    9a90:	68290200 	stmdavs	r9!, {r9}
    9a94:	02000000 	andeq	r0, r0, #0
    9a98:	09650801 	stmdbeq	r5!, {r0, fp}^
    9a9c:	04020000 	streq	r0, [r2], #-0
    9aa0:	0008ba07 	andeq	fp, r8, r7, lsl #20
    9aa4:	35ea0400 	strbcc	r0, [sl, #1024]!	; 0x400
    9aa8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    9aac:	03000000 	movweq	r0, #0
    9ab0:	00009918 	andeq	r9, r0, r8, lsl r9
    9ab4:	35840500 	strcc	r0, [r4, #1280]	; 0x500
    9ab8:	05000000 	streq	r0, [r0, #-0]
    9abc:	00003776 	andeq	r3, r0, r6, ror r7
    9ac0:	36260501 	strtcc	r0, [r6], -r1, lsl #10
    9ac4:	00020000 	andeq	r0, r2, r0
    9ac8:	0035eb06 	eorseq	lr, r5, r6, lsl #22
    9acc:	761e0300 	ldrvc	r0, [lr], -r0, lsl #6
    9ad0:	07000000 	streq	r0, [r0, -r0]
    9ad4:	000037f7 	strdeq	r3, [r0], -r7
    9ad8:	004c9c01 	subeq	r9, ip, r1, lsl #24
    9adc:	c0010000 	andgt	r0, r1, r0
    9ae0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9ae4:	000036f2 	strdeq	r3, [r0], -r2
    9ae8:	005e9c01 	subseq	r9, lr, r1, lsl #24
    9aec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9af0:	000035f7 	strdeq	r3, [r0], -r7
    9af4:	00002301 	andeq	r2, r0, r1, lsl #6
    9af8:	000c0000 	andeq	r0, ip, r0
    9afc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9b00:	000000e3 	andeq	r0, r0, r3, ror #1
    9b04:	0037ed0a 	eorseq	lr, r7, sl, lsl #26
    9b08:	4c230100 	stfmis	f0, [r3], #-0
    9b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    9b10:	460b0050 			; <UNDEFINED> instruction: 0x460b0050
    9b14:	01000036 	tsteq	r0, r6, lsr r0
    9b18:	00004c2f 	andeq	r4, r0, pc, lsr #24
    9b1c:	00000000 	andeq	r0, r0, r0
    9b20:	00000c00 	andeq	r0, r0, r0, lsl #24
    9b24:	099c0100 	ldmibeq	ip, {r8}
    9b28:	000035c0 	andeq	r3, r0, r0, asr #11
    9b2c:	00003b01 	andeq	r3, r0, r1, lsl #22
    9b30:	000c0000 	andeq	r0, ip, r0
    9b34:	9c010000 	stcls	0, cr0, [r1], {-0}
    9b38:	0000011b 	andeq	r0, r0, fp, lsl r1
    9b3c:	0037ed0a 	eorseq	lr, r7, sl, lsl #26
    9b40:	4c3b0100 	ldfmis	f0, [fp], #-0
    9b44:	01000000 	mrseq	r0, (UNDEF: 0)
    9b48:	ad0b0050 	stcge	0, cr0, [fp, #-320]	; 0xfffffec0
    9b4c:	01000037 	tsteq	r0, r7, lsr r0
    9b50:	00004c47 	andeq	r4, r0, r7, asr #24
    9b54:	00000000 	andeq	r0, r0, r0
    9b58:	00000c00 	andeq	r0, r0, r0, lsl #24
    9b5c:	0b9c0100 	bleq	fe709f64 <SCS_BASE+0x1e6fbf64>
    9b60:	00003655 	andeq	r3, r0, r5, asr r6
    9b64:	004c5301 	subeq	r5, ip, r1, lsl #6
    9b68:	00000000 	andeq	r0, r0, r0
    9b6c:	000c0000 	andeq	r0, ip, r0
    9b70:	9c010000 	stcls	0, cr0, [r1], {-0}
    9b74:	0036e909 	eorseq	lr, r6, r9, lsl #18
    9b78:	005f0100 	subseq	r0, pc, r0, lsl #2
    9b7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9b80:	01000000 	mrseq	r0, (UNDEF: 0)
    9b84:	0001689c 	muleq	r1, ip, r8
    9b88:	37ed0a00 	strbcc	r0, [sp, r0, lsl #20]!
    9b8c:	5f010000 	svcpl	0x00010000
    9b90:	0000004c 	andeq	r0, r0, ip, asr #32
    9b94:	0b005001 	bleq	1dba0 <__Stack_Size+0x1d7a0>
    9b98:	00003662 	andeq	r3, r0, r2, ror #12
    9b9c:	004c6b01 	subeq	r6, ip, r1, lsl #22
    9ba0:	00000000 	andeq	r0, r0, r0
    9ba4:	000c0000 	andeq	r0, ip, r0
    9ba8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9bac:	0011b809 	andseq	fp, r1, r9, lsl #16
    9bb0:	84770100 	ldrbthi	r0, [r7], #-256	; 0xffffff00
    9bb4:	10080022 	andne	r0, r8, r2, lsr #32
    9bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bbc:	0001a09c 	muleq	r1, ip, r0
    9bc0:	37ed0a00 	strbcc	r0, [sp, r0, lsl #20]!
    9bc4:	77010000 	strvc	r0, [r1, -r0]
    9bc8:	0000004c 	andeq	r0, r0, ip, asr #32
    9bcc:	0b005001 	bleq	1dbd8 <__Stack_Size+0x1d7d8>
    9bd0:	000035b6 			; <UNDEFINED> instruction: 0x000035b6
    9bd4:	004c8301 	subeq	r8, ip, r1, lsl #6
    9bd8:	00000000 	andeq	r0, r0, r0
    9bdc:	000c0000 	andeq	r0, ip, r0
    9be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9be4:	00361a09 	eorseq	r1, r6, r9, lsl #20
    9be8:	00900100 	addseq	r0, r0, r0, lsl #2
    9bec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    9bf4:	0001e79c 	muleq	r1, ip, r7
    9bf8:	36f20c00 	ldrbtcc	r0, [r2], r0, lsl #24
    9bfc:	90010000 	andls	r0, r1, r0
    9c00:	0000005e 	andeq	r0, r0, lr, asr r0
    9c04:	00005359 	andeq	r5, r0, r9, asr r3
    9c08:	0037ed0a 	eorseq	lr, r7, sl, lsl #26
    9c0c:	4c900100 	ldfmis	f0, [r0], {0}
    9c10:	01000000 	mrseq	r0, (UNDEF: 0)
    9c14:	a40d0051 	strge	r0, [sp], #-81	; 0xffffffaf
    9c18:	00000000 	andeq	r0, r0, r0
    9c1c:	10000000 	andne	r0, r0, r0
    9c20:	01000000 	mrseq	r0, (UNDEF: 0)
    9c24:	0002049c 	muleq	r2, ip, r4
    9c28:	00b40e00 	adcseq	r0, r4, r0, lsl #28
    9c2c:	537a0000 	cmnpl	sl, #0
    9c30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9c34:	0000103c 	andeq	r1, r0, ip, lsr r0
    9c38:	2294a901 	addscs	sl, r4, #16384	; 0x4000
    9c3c:	001c0800 	andseq	r0, ip, r0, lsl #16
    9c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c44:	00000238 	andeq	r0, r0, r8, lsr r2
    9c48:	0036f20c 	eorseq	pc, r6, ip, lsl #4
    9c4c:	5ea90100 	fdvple	f0, f1, f0
    9c50:	9b000000 	blls	9c58 <__Stack_Size+0x9858>
    9c54:	0c000053 	stceq	0, cr0, [r0], {83}	; 0x53
    9c58:	0000365c 	andeq	r3, r0, ip, asr r6
    9c5c:	004ca901 	subeq	sl, ip, r1, lsl #18
    9c60:	53bc0000 			; <UNDEFINED> instruction: 0x53bc0000
    9c64:	0f000000 	svceq	0x00000000
    9c68:	00003842 	andeq	r3, r0, r2, asr #16
    9c6c:	004cb501 	subeq	fp, ip, r1, lsl #10
    9c70:	00000000 	andeq	r0, r0, r0
    9c74:	00120000 	andseq	r0, r2, r0
    9c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c7c:	00000261 	andeq	r0, r0, r1, ror #4
    9c80:	0036f20c 	eorseq	pc, r6, ip, lsl #4
    9c84:	5eb50100 	frdpls	f0, f5, f0
    9c88:	dd000000 	stcle	0, cr0, [r0, #-0]
    9c8c:	00000053 	andeq	r0, r0, r3, asr r0
    9c90:	00102e09 	andseq	r2, r0, r9, lsl #28
    9c94:	b0c20100 	sbclt	r0, r2, r0, lsl #2
    9c98:	32080022 	andcc	r0, r8, #34	; 0x22
    9c9c:	01000000 	mrseq	r0, (UNDEF: 0)
    9ca0:	0002ac9c 	muleq	r2, ip, ip
    9ca4:	36f20c00 	ldrbtcc	r0, [r2], r0, lsl #24
    9ca8:	c2010000 	andgt	r0, r1, #0
    9cac:	0000005e 	andeq	r0, r0, lr, asr r0
    9cb0:	000053fe 	strdeq	r5, [r0], -lr
    9cb4:	0015eb0a 	andseq	lr, r5, sl, lsl #22
    9cb8:	4cc20100 	stfmie	f0, [r2], {0}
    9cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    9cc0:	22b01051 	adcscs	r1, r0, #81	; 0x51
    9cc4:	00320800 	eorseq	r0, r2, r0, lsl #16
    9cc8:	d5110000 	ldrle	r0, [r1, #-0]
    9ccc:	01000033 	tsteq	r0, r3, lsr r0
    9cd0:	00004cc4 	andeq	r4, r0, r4, asr #25
    9cd4:	00541f00 	subseq	r1, r4, r0, lsl #30
    9cd8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9cdc:	00001250 	andeq	r1, r0, r0, asr r2
    9ce0:	22e2cf01 	rsccs	ip, r2, #1, 30
    9ce4:	00320800 	eorseq	r0, r2, r0, lsl #16
    9ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9cec:	000002f7 	strdeq	r0, [r0], -r7
    9cf0:	0036f20c 	eorseq	pc, r6, ip, lsl #4
    9cf4:	5ecf0100 	polple	f0, f7, f0
    9cf8:	32000000 	andcc	r0, r0, #0
    9cfc:	0a000054 	beq	9e54 <__Stack_Size+0x9a54>
    9d00:	000015eb 	andeq	r1, r0, fp, ror #11
    9d04:	004ccf01 	subeq	ip, ip, r1, lsl #30
    9d08:	51010000 	mrspl	r0, (UNDEF: 1)
    9d0c:	0022e210 	eoreq	lr, r2, r0, lsl r2
    9d10:	00003208 	andeq	r3, r0, r8, lsl #4
    9d14:	33d51100 	bicscc	r1, r5, #0, 2
    9d18:	d1010000 	mrsle	r0, (UNDEF: 1)
    9d1c:	0000004c 	andeq	r0, r0, ip, asr #32
    9d20:	00005453 	andeq	r5, r0, r3, asr r4
    9d24:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    9d28:	01000037 	tsteq	r0, r7, lsr r0
    9d2c:	000000dc 	ldrdeq	r0, [r0], -ip
    9d30:	00002400 	andeq	r2, r0, r0, lsl #8
    9d34:	4d9c0100 	ldfmis	f0, [ip]
    9d38:	0c000003 	stceq	0, cr0, [r0], {3}
    9d3c:	000036f2 	strdeq	r3, [r0], -r2
    9d40:	005edc01 	subseq	sp, lr, r1, lsl #24
    9d44:	54660000 	strbtpl	r0, [r6], #-0
    9d48:	820a0000 	andhi	r0, sl, #0
    9d4c:	01000037 	tsteq	r0, r7, lsr r0
    9d50:	00005edc 	ldrdeq	r5, [r0], -ip
    9d54:	12510100 	subsne	r0, r1, #0, 2
    9d58:	000035d5 	ldrdeq	r3, [r0], -r5
    9d5c:	004cde01 	subeq	sp, ip, r1, lsl #28
    9d60:	a4130000 	ldrge	r0, [r3], #-0
    9d64:	00000000 	andeq	r0, r0, r0
    9d68:	60000000 	andvs	r0, r0, r0
    9d6c:	0100000b 	tsteq	r0, fp
    9d70:	00b40edf 	ldrsbteq	r0, [r4], pc
    9d74:	54870000 	strpl	r0, [r7], #0
    9d78:	00000000 	andeq	r0, r0, r0
    9d7c:	00367c0f 	eorseq	r7, r6, pc, lsl #24
    9d80:	4cf10100 	ldfmie	f0, [r1]
    9d84:	00000000 	andeq	r0, r0, r0
    9d88:	12000000 	andne	r0, r0, #0
    9d8c:	01000000 	mrseq	r0, (UNDEF: 0)
    9d90:	0003769c 	muleq	r3, ip, r6
    9d94:	36f20c00 	ldrbtcc	r0, [r2], r0, lsl #24
    9d98:	f1010000 	setend	le
    9d9c:	0000005e 	andeq	r0, r0, lr, asr r0
    9da0:	000054a8 	andeq	r5, r0, r8, lsr #9
    9da4:	36ca0f00 	strbcc	r0, [sl], r0, lsl #30
    9da8:	fd010000 	stc2	0, cr0, [r1, #-0]
    9dac:	0000004c 	andeq	r0, r0, ip, asr #32
    9db0:	00000000 	andeq	r0, r0, r0
    9db4:	00000012 	andeq	r0, r0, r2, lsl r0
    9db8:	039f9c01 	orrseq	r9, pc, #256	; 0x100
    9dbc:	f20c0000 	vhadd.s8	d0, d12, d0
    9dc0:	01000036 	tsteq	r0, r6, lsr r0
    9dc4:	00005efd 	strdeq	r5, [r0], -sp
    9dc8:	0054c900 	subseq	ip, r4, r0, lsl #18
    9dcc:	60140000 	andsvs	r0, r4, r0
    9dd0:	01000016 	tsteq	r0, r6, lsl r0
    9dd4:	23140109 	tstcs	r4, #1073741826	; 0x40000002
    9dd8:	00260800 	eoreq	r0, r6, r0, lsl #16
    9ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9de0:	000003e0 	andeq	r0, r0, r0, ror #7
    9de4:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    9de8:	01090100 	mrseq	r0, (UNDEF: 25)
    9dec:	0000005e 	andeq	r0, r0, lr, asr r0
    9df0:	000054ea 	andeq	r5, r0, sl, ror #9
    9df4:	00231410 	eoreq	r1, r3, r0, lsl r4
    9df8:	00002608 	andeq	r2, r0, r8, lsl #12
    9dfc:	33d51600 	bicscc	r1, r5, #0, 12
    9e00:	0b010000 	bleq	49e08 <__Stack_Size+0x49a08>
    9e04:	00004c01 	andeq	r4, r0, r1, lsl #24
    9e08:	00550b00 	subseq	r0, r5, r0, lsl #22
    9e0c:	14000000 	strne	r0, [r0], #-0
    9e10:	00000ef2 	strdeq	r0, [r0], -r2
    9e14:	3a011501 	bcc	4f220 <__Stack_Size+0x4ee20>
    9e18:	26080023 	strcs	r0, [r8], -r3, lsr #32
    9e1c:	01000000 	mrseq	r0, (UNDEF: 0)
    9e20:	0004219c 	muleq	r4, ip, r1
    9e24:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    9e28:	15010000 	strne	r0, [r1, #-0]
    9e2c:	00005e01 	andeq	r5, r0, r1, lsl #28
    9e30:	00553600 	subseq	r3, r5, r0, lsl #12
    9e34:	233a1000 	teqcs	sl, #0
    9e38:	00260800 	eoreq	r0, r6, r0, lsl #16
    9e3c:	d5160000 	ldrle	r0, [r6, #-0]
    9e40:	01000033 	tsteq	r0, r3, lsr r0
    9e44:	004c0117 	subeq	r0, ip, r7, lsl r1
    9e48:	55570000 	ldrbpl	r0, [r7, #-0]
    9e4c:	00000000 	andeq	r0, r0, r0
    9e50:	00381414 	eorseq	r1, r8, r4, lsl r4
    9e54:	014e0100 	mrseq	r0, (UNDEF: 94)
    9e58:	00000000 	andeq	r0, r0, r0
    9e5c:	00000020 	andeq	r0, r0, r0, lsr #32
    9e60:	04489c01 	strbeq	r9, [r8], #-3073	; 0xfffff3ff
    9e64:	f2150000 	vhadd.s16	d0, d5, d0
    9e68:	01000036 	tsteq	r0, r6, lsr r0
    9e6c:	005e014e 	subseq	r0, lr, lr, asr #2
    9e70:	55850000 	strpl	r0, [r5]
    9e74:	14000000 	strne	r0, [r0], #-0
    9e78:	000035a4 	andeq	r3, r0, r4, lsr #11
    9e7c:	60015901 	andvs	r5, r1, r1, lsl #18
    9e80:	20080023 	andcs	r0, r8, r3, lsr #32
    9e84:	01000000 	mrseq	r0, (UNDEF: 0)
    9e88:	00046f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    9e8c:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    9e90:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    9e94:	00005e01 	andeq	r5, r0, r1, lsl #28
    9e98:	0055a600 	subseq	sl, r5, r0, lsl #12
    9e9c:	65170000 	ldrvs	r0, [r7, #-0]
    9ea0:	01000037 	tsteq	r0, r7, lsr r0
    9ea4:	004c0164 	subeq	r0, ip, r4, ror #2
    9ea8:	00000000 	andeq	r0, r0, r0
    9eac:	001a0000 	andseq	r0, sl, r0
    9eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9eb4:	0000049a 	muleq	r0, sl, r4
    9eb8:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    9ebc:	01640100 	cmneq	r4, r0, lsl #2
    9ec0:	0000005e 	andeq	r0, r0, lr, asr r0
    9ec4:	000055c7 	andeq	r5, r0, r7, asr #11
    9ec8:	37301700 	ldrcc	r1, [r0, -r0, lsl #14]!
    9ecc:	6f010000 	svcvs	0x00010000
    9ed0:	00004c01 	andeq	r4, r0, r1, lsl #24
    9ed4:	00000000 	andeq	r0, r0, r0
    9ed8:	00001a00 	andeq	r1, r0, r0, lsl #20
    9edc:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    9ee0:	15000004 	strne	r0, [r0, #-4]
    9ee4:	000036f2 	strdeq	r3, [r0], -r2
    9ee8:	5e016f01 	cdppl	15, 0, cr6, cr1, cr1, {0}
    9eec:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    9ef0:	00000055 	andeq	r0, r0, r5, asr r0
    9ef4:	0036f914 	eorseq	pc, r6, r4, lsl r9	; <UNPREDICTABLE>
    9ef8:	017a0100 	cmneq	sl, r0, lsl #2
    9efc:	00000000 	andeq	r0, r0, r0
    9f00:	00000018 	andeq	r0, r0, r8, lsl r0
    9f04:	04ec9c01 	strbteq	r9, [ip], #3073	; 0xc01
    9f08:	f2150000 	vhadd.s16	d0, d5, d0
    9f0c:	01000036 	tsteq	r0, r6, lsr r0
    9f10:	005e017a 	subseq	r0, lr, sl, ror r1
    9f14:	56090000 	strpl	r0, [r9], -r0
    9f18:	14000000 	strne	r0, [r0], #-0
    9f1c:	00003631 	andeq	r3, r0, r1, lsr r6
    9f20:	00018501 	andeq	r8, r1, r1, lsl #10
    9f24:	1c000000 	stcne	0, cr0, [r0], {-0}
    9f28:	01000000 	mrseq	r0, (UNDEF: 0)
    9f2c:	0005139c 	muleq	r5, ip, r3
    9f30:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    9f34:	85010000 	strhi	r0, [r1, #-0]
    9f38:	00005e01 	andeq	r5, r0, r1, lsl #28
    9f3c:	00562a00 	subseq	r2, r6, r0, lsl #20
    9f40:	96140000 	ldrls	r0, [r4], -r0
    9f44:	01000035 	tsteq	r0, r5, lsr r0
    9f48:	00000190 	muleq	r0, r0, r1
    9f4c:	00200000 	eoreq	r0, r0, r0
    9f50:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f54:	0000053a 	andeq	r0, r0, sl, lsr r5
    9f58:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    9f5c:	01900100 	orrseq	r0, r0, r0, lsl #2
    9f60:	0000005e 	andeq	r0, r0, lr, asr r0
    9f64:	0000564b 	andeq	r5, r0, fp, asr #12
    9f68:	37181400 	ldrcc	r1, [r8, -r0, lsl #8]
    9f6c:	9b010000 	blls	49f74 <__Stack_Size+0x49b74>
    9f70:	00000001 	andeq	r0, r0, r1
    9f74:	00002000 	andeq	r2, r0, r0
    9f78:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    9f7c:	15000005 	strne	r0, [r0, #-5]
    9f80:	000036f2 	strdeq	r3, [r0], -r2
    9f84:	5e019b01 	vmlapl.f64	d9, d1, d1
    9f88:	6c000000 	stcvs	0, cr0, [r0], {-0}
    9f8c:	00000056 	andeq	r0, r0, r6, asr r0
    9f90:	00332914 	eorseq	r2, r3, r4, lsl r9
    9f94:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
    9f98:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
    9f9c:	00000024 	andeq	r0, r0, r4, lsr #32
    9fa0:	05889c01 	streq	r9, [r8, #3073]	; 0xc01
    9fa4:	f2150000 	vhadd.s16	d0, d5, d0
    9fa8:	01000036 	tsteq	r0, r6, lsr r0
    9fac:	005e01a6 	subseq	r0, lr, r6, lsr #3
    9fb0:	568d0000 	strpl	r0, [sp], r0
    9fb4:	14000000 	strne	r0, [r0], #-0
    9fb8:	000033c8 	andeq	r3, r0, r8, asr #7
    9fbc:	a801b101 	stmdage	r1, {r0, r8, ip, sp, pc}
    9fc0:	24080023 	strcs	r0, [r8], #-35	; 0xffffffdd
    9fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    9fc8:	0005af9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    9fcc:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    9fd0:	b1010000 	mrslt	r0, (UNDEF: 1)
    9fd4:	00005e01 	andeq	r5, r0, r1, lsl #28
    9fd8:	0056ae00 	subseq	sl, r6, r0, lsl #28
    9fdc:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    9fe0:	01000035 	tsteq	r0, r5, lsr r0
    9fe4:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    9fe8:	00220000 	eoreq	r0, r2, r0
    9fec:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ff0:	000005e6 	andeq	r0, r0, r6, ror #11
    9ff4:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    9ff8:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    9ffc:	0000005e 	andeq	r0, r0, lr, asr r0
    a000:	000056cf 	andeq	r5, r0, pc, asr #13
    a004:	00364015 	eorseq	r4, r6, r5, lsl r0
    a008:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    a00c:	0000005e 	andeq	r0, r0, lr, asr r0
    a010:	000056f0 	strdeq	r5, [r0], -r0
    a014:	37991700 	ldrcc	r1, [r9, r0, lsl #14]
    a018:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    a01c:	00005e01 	andeq	r5, r0, r1, lsl #28
    a020:	00000000 	andeq	r0, r0, r0
    a024:	00001200 	andeq	r1, r0, r0, lsl #4
    a028:	119c0100 	orrsne	r0, ip, r0, lsl #2
    a02c:	15000006 	strne	r0, [r0, #-6]
    a030:	000036f2 	strdeq	r3, [r0], -r2
    a034:	5e01c801 	cdppl	8, 0, cr12, cr1, cr1, {0}
    a038:	11000000 	mrsne	r0, (UNDEF: 0)
    a03c:	00000057 	andeq	r0, r0, r7, asr r0
    a040:	0015dc14 	andseq	sp, r5, r4, lsl ip
    a044:	02020100 	andeq	r0, r2, #0, 2
    a048:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
    a04c:	0000001c 	andeq	r0, r0, ip, lsl r0
    a050:	06469c01 	strbeq	r9, [r6], -r1, lsl #24
    a054:	f2150000 	vhadd.s16	d0, d5, d0
    a058:	01000036 	tsteq	r0, r6, lsr r0
    a05c:	005e0202 	subseq	r0, lr, r2, lsl #4
    a060:	57320000 	ldrpl	r0, [r2, -r0]!
    a064:	11180000 	tstne	r8, r0
    a068:	01000000 	mrseq	r0, (UNDEF: 0)
    a06c:	004c0202 	subeq	r0, ip, r2, lsl #4
    a070:	51010000 	mrspl	r0, (UNDEF: 1)
    a074:	37081400 	strcc	r1, [r8, -r0, lsl #8]
    a078:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    a07c:	00000002 	andeq	r0, r0, r2
    a080:	00002600 	andeq	r2, r0, r0, lsl #12
    a084:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    a088:	18000006 	stmdane	r0, {r1, r2}
    a08c:	0000364e 	andeq	r3, r0, lr, asr #12
    a090:	95020e01 	strls	r0, [r2, #-3585]	; 0xfffff1ff
    a094:	01000006 	tsteq	r0, r6
    a098:	00111550 	andseq	r1, r1, r0, asr r5
    a09c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    a0a0:	00004c02 	andeq	r4, r0, r2, lsl #24
    a0a4:	00575300 	subseq	r5, r7, r0, lsl #6
    a0a8:	00001000 	andeq	r1, r0, r0
    a0ac:	00260000 	eoreq	r0, r6, r0
    a0b0:	11160000 	tstne	r6, r0
    a0b4:	01000036 	tsteq	r0, r6, lsr r0
    a0b8:	004c0210 	subeq	r0, ip, r0, lsl r2
    a0bc:	578d0000 	strpl	r0, [sp, r0]
    a0c0:	00000000 	andeq	r0, r0, r0
    a0c4:	003a0419 	eorseq	r0, sl, r9, lsl r4
    a0c8:	95140000 	ldrls	r0, [r4, #-0]
    a0cc:	01000015 	tsteq	r0, r5, lsl r0
    a0d0:	23e8021a 	mvncs	r0, #-1610612735	; 0xa0000001
    a0d4:	00400800 	subeq	r0, r0, r0, lsl #16
    a0d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a0dc:	00000700 	andeq	r0, r0, r0, lsl #14
    a0e0:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    a0e4:	021a0100 	andseq	r0, sl, #0, 2
    a0e8:	0000005e 	andeq	r0, r0, lr, asr r0
    a0ec:	000057b6 			; <UNDEFINED> instruction: 0x000057b6
    a0f0:	00001115 	andeq	r1, r0, r5, lsl r1
    a0f4:	021a0100 	andseq	r0, sl, #0, 2
    a0f8:	0000004c 	andeq	r0, r0, ip, asr #32
    a0fc:	000057d7 	ldrdeq	r5, [r0], -r7
    a100:	0023e810 	eoreq	lr, r3, r0, lsl r8
    a104:	00004008 	andeq	r4, r0, r8
    a108:	364e1a00 	strbcc	r1, [lr], -r0, lsl #20
    a10c:	1c010000 	stcne	0, cr0, [r1], {-0}
    a110:	00069502 	andeq	r9, r6, r2, lsl #10
    a114:	1b520100 	blne	148a51c <__Stack_Size+0x148a11c>
    a118:	00000b78 	andeq	r0, r0, r8, ror fp
    a11c:	00361116 	eorseq	r1, r6, r6, lsl r1
    a120:	021c0100 	andseq	r0, ip, #0, 2
    a124:	0000004c 	andeq	r0, r0, ip, asr #32
    a128:	000057f8 	strdeq	r5, [r0], -r8
    a12c:	14000000 	strne	r0, [r0], #-0
    a130:	0000368a 	andeq	r3, r0, sl, lsl #13
    a134:	00023d01 	andeq	r3, r2, r1, lsl #26
    a138:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a13c:	01000000 	mrseq	r0, (UNDEF: 0)
    a140:	0007479c 	muleq	r7, ip, r7
    a144:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    a148:	3d010000 	stccc	0, cr0, [r1, #-0]
    a14c:	00005e02 	andeq	r5, r0, r2, lsl #28
    a150:	00583000 	subseq	r3, r8, r0
    a154:	37261500 	strcc	r1, [r6, -r0, lsl #10]!
    a158:	3d010000 	stccc	0, cr0, [r1, #-0]
    a15c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a160:	00585100 	subseq	r5, r8, r0, lsl #2
    a164:	38291500 	stmdacc	r9!, {r8, sl, ip}
    a168:	3d010000 	stccc	0, cr0, [r1, #-0]
    a16c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a170:	00587200 	subseq	r7, r8, r0, lsl #4
    a174:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
    a178:	01000036 	tsteq	r0, r6, lsr r0
    a17c:	24280249 	strtcs	r0, [r8], #-585	; 0xfffffdb7
    a180:	00200800 	eoreq	r0, r0, r0, lsl #16
    a184:	9c010000 	stcls	0, cr0, [r1], {-0}
    a188:	0000077e 	andeq	r0, r0, lr, ror r7
    a18c:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    a190:	02490100 	subeq	r0, r9, #0, 2
    a194:	0000005e 	andeq	r0, r0, lr, asr r0
    a198:	00005893 	muleq	r0, r3, r8
    a19c:	00372615 	eorseq	r2, r7, r5, lsl r6
    a1a0:	02490100 	subeq	r0, r9, #0, 2
    a1a4:	0000004c 	andeq	r0, r0, ip, asr #32
    a1a8:	000058b4 			; <UNDEFINED> instruction: 0x000058b4
    a1ac:	38031400 	stmdacc	r3, {sl, ip}
    a1b0:	55010000 	strpl	r0, [r1, #-0]
    a1b4:	00244c02 	eoreq	r4, r4, r2, lsl #24
    a1b8:	00002008 	andeq	r2, r0, r8
    a1bc:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    a1c0:	15000007 	strne	r0, [r0, #-7]
    a1c4:	000036f2 	strdeq	r3, [r0], -r2
    a1c8:	5e025501 	cfsh32pl	mvfx5, mvfx2, #1
    a1cc:	d5000000 	strle	r0, [r0, #-0]
    a1d0:	15000058 	strne	r0, [r0, #-88]	; 0xffffffa8
    a1d4:	00003829 	andeq	r3, r0, r9, lsr #16
    a1d8:	4c025501 	cfstr32mi	mvfx5, [r2], {1}
    a1dc:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    a1e0:	00000058 	andeq	r0, r0, r8, asr r0
    a1e4:	00366b17 	eorseq	r6, r6, r7, lsl fp
    a1e8:	02600100 	rsbeq	r0, r0, #0, 2
    a1ec:	0000004c 	andeq	r0, r0, ip, asr #32
    a1f0:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
    a1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    a1f8:	07e09c01 	strbeq	r9, [r0, r1, lsl #24]!
    a1fc:	f2150000 	vhadd.s16	d0, d5, d0
    a200:	01000036 	tsteq	r0, r6, lsr r0
    a204:	005e0260 	subseq	r0, lr, r0, ror #4
    a208:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
    a20c:	17000000 	strne	r0, [r0, -r0]
    a210:	000037b5 			; <UNDEFINED> instruction: 0x000037b5
    a214:	4c026b01 	stcmi	11, cr6, [r2], {1}
    a218:	90000000 	andls	r0, r0, r0
    a21c:	1c080024 	stcne	0, cr0, [r8], {36}	; 0x24
    a220:	01000000 	mrseq	r0, (UNDEF: 0)
    a224:	00080b9c 	muleq	r8, ip, fp
    a228:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    a22c:	6b010000 	blvs	4a234 <__Stack_Size+0x49e34>
    a230:	00005e02 	andeq	r5, r0, r2, lsl #28
    a234:	00593800 	subseq	r3, r9, r0, lsl #16
    a238:	c6140000 	ldrgt	r0, [r4], -r0
    a23c:	01000037 	tsteq	r0, r7, lsr r0
    a240:	00000277 	andeq	r0, r0, r7, ror r2
    a244:	00a80000 	adceq	r0, r8, r0
    a248:	9c010000 	stcls	0, cr0, [r1], {-0}
    a24c:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    a250:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    a254:	02770100 	rsbseq	r0, r7, #0, 2
    a258:	0000005e 	andeq	r0, r0, lr, asr r0
    a25c:	00005959 	andeq	r5, r0, r9, asr r9
    a260:	00378215 	eorseq	r8, r7, r5, lsl r2
    a264:	02770100 	rsbseq	r0, r7, #0, 2
    a268:	0000005e 	andeq	r0, r0, lr, asr r0
    a26c:	0000599e 	muleq	r0, lr, r9
    a270:	00001115 	andeq	r1, r0, r5, lsl r1
    a274:	02770100 	rsbseq	r0, r7, #0, 2
    a278:	0000004c 	andeq	r0, r0, ip, asr #32
    a27c:	000059e3 	andeq	r5, r0, r3, ror #19
    a280:	0000001c 	andeq	r0, r0, ip, lsl r0
    a284:	00003a00 	andeq	r3, r0, r0, lsl #20
    a288:	00088500 	andeq	r8, r8, r0, lsl #10
    a28c:	364e1600 	strbcc	r1, [lr], -r0, lsl #12
    a290:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    a294:	00069502 	andeq	r9, r6, r2, lsl #10
    a298:	005a0f00 	subseq	r0, sl, r0, lsl #30
    a29c:	0b901b00 	bleq	fe410ea4 <SCS_BASE+0x1e402ea4>
    a2a0:	11160000 	tstne	r6, r0
    a2a4:	01000036 	tsteq	r0, r6, lsr r0
    a2a8:	004c0279 	subeq	r0, ip, r9, ror r2
    a2ac:	5a220000 	bpl	88a2b4 <__Stack_Size+0x889eb4>
    a2b0:	00000000 	andeq	r0, r0, r0
    a2b4:	000ba81b 	andeq	sl, fp, fp, lsl r8
    a2b8:	364e1600 	strbcc	r1, [lr], -r0, lsl #12
    a2bc:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    a2c0:	00069502 	andeq	r9, r6, r2, lsl #10
    a2c4:	005a5a00 	subseq	r5, sl, r0, lsl #20
    a2c8:	0bc01b00 	bleq	ff010ed0 <SCS_BASE+0x1f002ed0>
    a2cc:	11160000 	tstne	r6, r0
    a2d0:	01000036 	tsteq	r0, r6, lsr r0
    a2d4:	004c0279 	subeq	r0, ip, r9, ror r2
    a2d8:	5a780000 	bpl	1e0a2e0 <__Stack_Size+0x1e09ee0>
    a2dc:	00000000 	andeq	r0, r0, r0
    a2e0:	37531400 	ldrbcc	r1, [r3, -r0, lsl #8]
    a2e4:	83010000 	movwhi	r0, #4096	; 0x1000
    a2e8:	00000002 	andeq	r0, r0, r2
    a2ec:	00005c00 	andeq	r5, r0, r0, lsl #24
    a2f0:	299c0100 	ldmibcs	ip, {r8}
    a2f4:	15000009 	strne	r0, [r0, #-9]
    a2f8:	000036f2 	strdeq	r3, [r0], -r2
    a2fc:	5e028301 	cdppl	3, 0, cr8, cr2, cr1, {0}
    a300:	b0000000 	andlt	r0, r0, r0
    a304:	1500005a 	strne	r0, [r0, #-90]	; 0xffffffa6
    a308:	00003782 	andeq	r3, r0, r2, lsl #15
    a30c:	5e028301 	cdppl	3, 0, cr8, cr2, cr1, {0}
    a310:	ea000000 	b	a318 <__Stack_Size+0x9f18>
    a314:	1500005a 	strne	r0, [r0, #-90]	; 0xffffffa6
    a318:	00000011 	andeq	r0, r0, r1, lsl r0
    a31c:	4c028301 	stcmi	3, cr8, [r2], {1}
    a320:	16000000 	strne	r0, [r0], -r0
    a324:	1000005b 	andne	r0, r0, fp, asr r0
    a328:	00000000 	andeq	r0, r0, r0
    a32c:	00000038 	andeq	r0, r0, r8, lsr r0
    a330:	00364e16 	eorseq	r4, r6, r6, lsl lr
    a334:	02850100 	addeq	r0, r5, #0, 2
    a338:	00000695 	muleq	r0, r5, r6
    a33c:	00005b42 	andeq	r5, r0, r2, asr #22
    a340:	000be01b 	andeq	lr, fp, fp, lsl r0
    a344:	36111600 	ldrcc	r1, [r1], -r0, lsl #12
    a348:	85010000 	strhi	r0, [r1, #-0]
    a34c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a350:	005b5500 	subseq	r5, fp, r0, lsl #10
    a354:	00000000 	andeq	r0, r0, r0
    a358:	0035ff14 	eorseq	pc, r5, r4, lsl pc	; <UNPREDICTABLE>
    a35c:	028f0100 	addeq	r0, pc, #0, 2
    a360:	00000000 	andeq	r0, r0, r0
    a364:	0000005c 	andeq	r0, r0, ip, asr r0
    a368:	09a09c01 	stmibeq	r0!, {r0, sl, fp, ip, pc}
    a36c:	f2150000 	vhadd.s16	d0, d5, d0
    a370:	01000036 	tsteq	r0, r6, lsr r0
    a374:	005e028f 	subseq	r0, lr, pc, lsl #5
    a378:	5b8d0000 	blpl	fe34a380 <SCS_BASE+0x1e33c380>
    a37c:	82150000 	andshi	r0, r5, #0
    a380:	01000037 	tsteq	r0, r7, lsr r0
    a384:	005e028f 	subseq	r0, lr, pc, lsl #5
    a388:	5bc70000 	blpl	ff1ca390 <SCS_BASE+0x1f1bc390>
    a38c:	11150000 	tstne	r5, r0
    a390:	01000000 	mrseq	r0, (UNDEF: 0)
    a394:	004c028f 	subeq	r0, ip, pc, lsl #5
    a398:	5bf30000 	blpl	ffcca3a0 <SCS_BASE+0x1fcbc3a0>
    a39c:	00100000 	andseq	r0, r0, r0
    a3a0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a3a4:	16000000 	strne	r0, [r0], -r0
    a3a8:	0000364e 	andeq	r3, r0, lr, asr #12
    a3ac:	95029101 	strls	r9, [r2, #-257]	; 0xfffffeff
    a3b0:	1f000006 	svcne	0x00000006
    a3b4:	1b00005c 	blne	a52c <__Stack_Size+0xa12c>
    a3b8:	00000bf8 	strdeq	r0, [r0], -r8
    a3bc:	00361116 	eorseq	r1, r6, r6, lsl r1
    a3c0:	02910100 	addseq	r0, r1, #0, 2
    a3c4:	0000004c 	andeq	r0, r0, ip, asr #32
    a3c8:	00005c32 	andeq	r5, r0, r2, lsr ip
    a3cc:	17000000 	strne	r0, [r0, -r0]
    a3d0:	00003741 	andeq	r3, r0, r1, asr #14
    a3d4:	4c029b01 	stcmi	11, cr9, [r2], {1}
    a3d8:	00000000 	andeq	r0, r0, r0
    a3dc:	20000000 	andcs	r0, r0, r0
    a3e0:	01000000 	mrseq	r0, (UNDEF: 0)
    a3e4:	0009cb9c 	muleq	r9, ip, fp
    a3e8:	36f21500 	ldrbtcc	r1, [r2], r0, lsl #10
    a3ec:	9b010000 	blls	4a3f4 <__Stack_Size+0x49ff4>
    a3f0:	00005e02 	andeq	r5, r0, r2, lsl #28
    a3f4:	005c6a00 	subseq	r6, ip, r0, lsl #20
    a3f8:	87170000 	ldrhi	r0, [r7, -r0]
    a3fc:	01000037 	tsteq	r0, r7, lsr r0
    a400:	004c02a7 	subeq	r0, ip, r7, lsr #5
    a404:	24b00000 	ldrtcs	r0, [r0], #0
    a408:	00200800 	eoreq	r0, r0, r0, lsl #16
    a40c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a410:	000009f6 	strdeq	r0, [r0], -r6
    a414:	0036f215 	eorseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    a418:	02a70100 	adceq	r0, r7, #0, 2
    a41c:	0000005e 	andeq	r0, r0, lr, asr r0
    a420:	00005c8b 	andeq	r5, r0, fp, lsl #25
    a424:	369b1700 	ldrcc	r1, [fp], r0, lsl #14
    a428:	b3010000 	movwlt	r0, #4096	; 0x1000
    a42c:	00009902 	andeq	r9, r0, r2, lsl #18
    a430:	00000000 	andeq	r0, r0, r0
    a434:	00004400 	andeq	r4, r0, r0, lsl #8
    a438:	219c0100 	orrscs	r0, ip, r0, lsl #2
    a43c:	1500000a 	strne	r0, [r0, #-10]
    a440:	000036f2 	strdeq	r3, [r0], -r2
    a444:	5e02b301 	cdppl	3, 0, cr11, cr2, cr1, {0}
    a448:	ac000000 	stcge	0, cr0, [r0], {-0}
    a44c:	0000005c 	andeq	r0, r0, ip, asr r0
    a450:	00383314 	eorseq	r3, r8, r4, lsl r3
    a454:	02c40100 	sbceq	r0, r4, #0, 2
    a458:	00000000 	andeq	r0, r0, r0
    a45c:	00000042 	andeq	r0, r0, r2, asr #32
    a460:	0a569c01 	beq	15b146c <__Stack_Size+0x15b106c>
    a464:	f2150000 	vhadd.s16	d0, d5, d0
    a468:	01000036 	tsteq	r0, r6, lsr r0
    a46c:	005e02c4 	subseq	r0, lr, r4, asr #5
    a470:	5ccd0000 	stclpl	0, cr0, [sp], {0}
    a474:	82180000 	andshi	r0, r8, #0
    a478:	01000037 	tsteq	r0, r7, lsr r0
    a47c:	005e02c4 	subseq	r0, lr, r4, asr #5
    a480:	51010000 	mrspl	r0, (UNDEF: 1)
    a484:	37a61700 	strcc	r1, [r6, r0, lsl #14]!
    a488:	d7010000 	strle	r0, [r1, -r0]
    a48c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a490:	00000000 	andeq	r0, r0, r0
    a494:	00000600 	andeq	r0, r0, r0, lsl #12
    a498:	9d9c0100 	ldflss	f0, [ip]
    a49c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    a4a0:	01006862 	tsteq	r0, r2, ror #16
    a4a4:	005e02d7 	ldrsbeq	r0, [lr], #-39	; 0xffffffd9
    a4a8:	5d070000 	stcpl	0, cr0, [r7, #-0]
    a4ac:	621e0000 	andsvs	r0, lr, #0
    a4b0:	d701006c 	strle	r0, [r1, -ip, rrx]
    a4b4:	00005e02 	andeq	r5, r0, r2, lsl #28
    a4b8:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    a4bc:	00003824 	andeq	r3, r0, r4, lsr #16
    a4c0:	4c02d901 	stcmi	9, cr13, [r2], {1}
    a4c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    a4c8:	0000005d 	andeq	r0, r0, sp, asr r0
    a4cc:	0033201f 	eorseq	r2, r3, pc, lsl r0
    a4d0:	02e40100 	rsceq	r0, r4, #0, 2
    a4d4:	0000004c 	andeq	r0, r0, ip, asr #32
    a4d8:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    a4dc:	0000000a 	andeq	r0, r0, sl
    a4e0:	c5159c01 	ldrgt	r9, [r5, #-3073]	; 0xfffff3ff
    a4e4:	01000036 	tsteq	r0, r6, lsr r0
    a4e8:	004c02e4 	subeq	r0, ip, r4, ror #5
    a4ec:	5d610000 	stclpl	0, cr0, [r1, #-0]
    a4f0:	90160000 	andsls	r0, r6, r0
    a4f4:	01000035 	tsteq	r0, r5, lsr r0
    a4f8:	005e02e6 	subseq	r0, lr, r6, ror #5
    a4fc:	5d820000 	stcpl	0, cr0, [r2]
    a500:	24160000 	ldrcs	r0, [r6], #-0
    a504:	01000038 	tsteq	r0, r8, lsr r0
    a508:	004c02e7 	subeq	r0, ip, r7, ror #5
    a50c:	5da00000 	stcpl	0, cr0, [r0]
    a510:	00000000 	andeq	r0, r0, r0
    a514:	00000141 	andeq	r0, r0, r1, asr #2
    a518:	24b60004 	ldrtcs	r0, [r6], #4
    a51c:	01040000 	mrseq	r0, (UNDEF: 4)
    a520:	00000bf1 	strdeq	r0, [r0], -r1
    a524:	00387b0c 	eorseq	r7, r8, ip, lsl #22
    a528:	00051f00 	andeq	r1, r5, r0, lsl #30
    a52c:	000da000 	andeq	sl, sp, r0
    a530:	00000000 	andeq	r0, r0, r0
    a534:	002fd300 	eoreq	sp, pc, r0, lsl #6
    a538:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a53c:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    a540:	88050202 	stmdahi	r5, {r1, r9}
    a544:	02000007 	andeq	r0, r0, #7
    a548:	09670601 	stmdbeq	r7!, {r0, r9, sl}^
    a54c:	75030000 	strvc	r0, [r3, #-0]
    a550:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    a554:	00004527 	andeq	r4, r0, r7, lsr #10
    a558:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a55c:	000008c3 	andeq	r0, r0, r3, asr #17
    a560:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    a564:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    a568:	02000000 	andeq	r0, r0, #0
    a56c:	0b600702 	bleq	180c17c <__Stack_Size+0x180bd7c>
    a570:	75030000 	strvc	r0, [r3, #-0]
    a574:	29020038 	stmdbcs	r2, {r3, r4, r5}
    a578:	00000068 	andeq	r0, r0, r8, rrx
    a57c:	65080102 	strvs	r0, [r8, #-258]	; 0xfffffefe
    a580:	02000009 	andeq	r0, r0, #9
    a584:	08ba0704 	ldmeq	sl!, {r2, r8, r9, sl}
    a588:	04040000 	streq	r0, [r4], #-0
    a58c:	0000005e 	andeq	r0, r0, lr, asr r0
    a590:	00109205 	andseq	r9, r0, r5, lsl #4
    a594:	3a230100 	bcc	8ca99c <__Stack_Size+0x8ca59c>
    a598:	e0000000 	and	r0, r0, r0
    a59c:	20080024 	andcs	r0, r8, r4, lsr #32
    a5a0:	01000000 	mrseq	r0, (UNDEF: 0)
    a5a4:	0ebd069c 	mrceq	6, 5, r0, cr13, cr12, {4}
    a5a8:	5f010000 	svcpl	0x00010000
    a5ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    a5b0:	08002500 	stmdaeq	r0, {r8, sl, sp}
    a5b4:	00000024 	andeq	r0, r0, r4, lsr #32
    a5b8:	01169c01 	tsteq	r6, r1, lsl #24
    a5bc:	4c070000 	stcmi	0, cr0, [r7], {-0}
    a5c0:	01000038 	tsteq	r0, r8, lsr r0
    a5c4:	00005e5f 	andeq	r5, r0, pc, asr lr
    a5c8:	005dd700 	subseq	sp, sp, r0, lsl #14
    a5cc:	385f0700 	ldmdacc	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
    a5d0:	5f010000 	svcpl	0x00010000
    a5d4:	00000076 	andeq	r0, r0, r6, ror r0
    a5d8:	00005df8 	strdeq	r5, [r0], -r8
    a5dc:	00385408 	eorseq	r5, r8, r8, lsl #8
    a5e0:	3a610100 	bcc	184a9e8 <__Stack_Size+0x184a5e8>
    a5e4:	16000000 	strne	r0, [r0], -r0
    a5e8:	0900005e 	stmdbeq	r0, {r1, r2, r3, r4, r6}
    a5ec:	0800250e 	stmdaeq	r0, {r1, r2, r3, r8, sl, sp}
    a5f0:	00000121 	andeq	r0, r0, r1, lsr #2
    a5f4:	000000eb 	andeq	r0, r0, fp, ror #1
    a5f8:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    a5fc:	09000075 	stmdbeq	r0, {r0, r2, r4, r5, r6}
    a600:	08002516 	stmdaeq	r0, {r1, r2, r4, r8, sl, sp}
    a604:	0000012d 	andeq	r0, r0, sp, lsr #2
    a608:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a60c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    a610:	0b000075 	bleq	a7ec <__Stack_Size+0xa3ec>
    a614:	08002520 	stmdaeq	r0, {r5, r8, sl, sp}
    a618:	00000139 	andeq	r0, r0, r9, lsr r1
    a61c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    a620:	010a0076 	tsteq	sl, r6, ror r0
    a624:	00740252 	rsbseq	r0, r4, r2, asr r2
    a628:	f20c0000 	vhadd.s8	d0, d12, d0
    a62c:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    a630:	00004c2d 	andeq	r4, r0, sp, lsr #24
    a634:	386e0d00 	stmdacc	lr!, {r8, sl, fp}^
    a638:	386e0000 	stmdacc	lr!, {}^	; <UNPREDICTABLE>
    a63c:	8b030000 	blhi	ca644 <__Stack_Size+0xca244>
    a640:	318f0d02 	orrcc	r0, pc, r2, lsl #26
    a644:	318f0000 	orrcc	r0, pc, r0
    a648:	86030000 	strhi	r0, [r3], -r0
    a64c:	34670e02 	strbtcc	r0, [r7], #-3586	; 0xfffff1fe
    a650:	34670000 	strbtcc	r0, [r7], #-0
    a654:	1a040000 	bne	10a65c <__Stack_Size+0x10a25c>
    a658:	00019d00 	andeq	r9, r1, r0, lsl #26
    a65c:	96000400 	strls	r0, [r0], -r0, lsl #8
    a660:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    a664:	000bf101 	andeq	pc, fp, r1, lsl #2
    a668:	38a30c00 	stmiacc	r3!, {sl, fp}
    a66c:	051f0000 	ldreq	r0, [pc, #-0]	; a674 <__Stack_Size+0xa274>
    a670:	0db80000 	ldceq	0, cr0, [r8]
    a674:	00000000 	andeq	r0, r0, r0
    a678:	30940000 	addscc	r0, r4, r0
    a67c:	04020000 	streq	r0, [r2], #-0
    a680:	0007b605 	andeq	fp, r7, r5, lsl #12
    a684:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a688:	00000788 	andeq	r0, r0, r8, lsl #15
    a68c:	67060102 	strvs	r0, [r6, -r2, lsl #2]
    a690:	03000009 	movweq	r0, #9
    a694:	00323375 	eorseq	r3, r2, r5, ror r3
    a698:	00452702 	subeq	r2, r5, r2, lsl #14
    a69c:	04020000 	streq	r0, [r2], #-0
    a6a0:	0008c307 	andeq	ip, r8, r7, lsl #6
    a6a4:	31750300 	cmncc	r5, r0, lsl #6
    a6a8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    a6ac:	00000057 	andeq	r0, r0, r7, asr r0
    a6b0:	60070202 	andvs	r0, r7, r2, lsl #4
    a6b4:	0300000b 	movweq	r0, #11
    a6b8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    a6bc:	00006829 	andeq	r6, r0, r9, lsr #16
    a6c0:	08010200 	stmdaeq	r1, {r9}
    a6c4:	00000965 	andeq	r0, r0, r5, ror #18
    a6c8:	ba070402 	blt	1cb6d8 <__Stack_Size+0x1cb2d8>
    a6cc:	04000008 	streq	r0, [r0], #-8
    a6d0:	00760405 	rsbseq	r0, r6, r5, lsl #8
    a6d4:	ef060000 	svc	0x00060000
    a6d8:	0100000f 	tsteq	r0, pc
    a6dc:	0025242a 	eoreq	r2, r5, sl, lsr #8
    a6e0:	00017408 	andeq	r7, r1, r8, lsl #8
    a6e4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    a6e8:	07000000 	streq	r0, [r0, -r0]
    a6ec:	0000389c 	muleq	r0, ip, r8
    a6f0:	00f62c01 	rscseq	r2, r6, r1, lsl #24
    a6f4:	91020000 	mrsls	r0, (UNDEF: 2)
    a6f8:	256c085e 	strbcs	r0, [ip, #-2142]!	; 0xfffff7a2
    a6fc:	001a0800 	andseq	r0, sl, r0, lsl #16
    a700:	00bd0000 	adcseq	r0, sp, r0
    a704:	d5090000 	strle	r0, [r9, #-0]
    a708:	01000033 	tsteq	r0, r3, lsr r0
    a70c:	00003a40 	andeq	r3, r0, r0, asr #20
    a710:	005e3b00 	subseq	r3, lr, r0, lsl #22
    a714:	d4080000 	strle	r0, [r8], #-0
    a718:	40080025 	andmi	r0, r8, r5, lsr #32
    a71c:	da000000 	ble	a724 <__Stack_Size+0xa324>
    a720:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a724:	000033d5 	ldrdeq	r3, [r0], -r5
    a728:	003a6d01 	eorseq	r6, sl, r1, lsl #26
    a72c:	5eae0000 	cdppl	0, 10, cr0, cr14, cr0, {0}
    a730:	0a000000 	beq	a738 <__Stack_Size+0xa338>
    a734:	0800259c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, sp}
    a738:	0000017f 	andeq	r0, r0, pc, ror r1
    a73c:	0025bc0a 	eoreq	fp, r5, sl, lsl #24
    a740:	00018a08 	andeq	r8, r1, r8, lsl #20
    a744:	25d40a00 	ldrbcs	r0, [r4, #2560]	; 0xa00
    a748:	01950800 	orrseq	r0, r5, r0, lsl #16
    a74c:	0b000000 	bleq	a754 <__Stack_Size+0xa354>
    a750:	0000004c 	andeq	r0, r0, ip, asr #32
    a754:	00389506 	eorseq	r9, r8, r6, lsl #10
    a758:	00980100 	addseq	r0, r8, r0, lsl #2
    a75c:	70000000 	andvc	r0, r0, r0
    a760:	01000000 	mrseq	r0, (UNDEF: 0)
    a764:	0001209c 	muleq	r1, ip, r0
    a768:	389c0900 	ldmcc	ip, {r8, fp}
    a76c:	9a010000 	bls	4a774 <__Stack_Size+0x4a374>
    a770:	0000003a 	andeq	r0, r0, sl, lsr r0
    a774:	00005ec1 	andeq	r5, r0, r1, asr #29
    a778:	0f540c00 	svceq	0x00540c00
    a77c:	5b030000 	blpl	ca784 <__Stack_Size+0xca384>
    a780:	0000f602 	andeq	pc, r0, r2, lsl #12
    a784:	34a70d00 	strtcc	r0, [r7], #3328	; 0xd00
    a788:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    a78c:	000000f6 	strdeq	r0, [r0], -r6
    a790:	07180305 	ldreq	r0, [r8, -r5, lsl #6]
    a794:	030d2000 	movweq	r2, #53248	; 0xd000
    a798:	01000035 	tsteq	r0, r5, lsr r0
    a79c:	0000f619 	andeq	pc, r0, r9, lsl r6	; <UNPREDICTABLE>
    a7a0:	1a030500 	bne	cbba8 <__Stack_Size+0xcb7a8>
    a7a4:	0e200007 	cdpeq	0, 2, cr0, cr0, cr7, {0}
    a7a8:	00003103 	andeq	r3, r0, r3, lsl #2
    a7ac:	005e1d04 	subseq	r1, lr, r4, lsl #26
    a7b0:	770f0000 	strvc	r0, [pc, -r0]
    a7b4:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    a7b8:	10000001 	andne	r0, r0, r1
    a7bc:	0000006f 	andeq	r0, r0, pc, rrx
    a7c0:	8d0e0006 	stchi	0, cr0, [lr, #-24]	; 0xffffffe8
    a7c4:	0100000f 	tsteq	r0, pc
    a7c8:	0001591c 	andeq	r5, r1, ip, lsl r9
    a7cc:	0f260e00 	svceq	0x00260e00
    a7d0:	1d010000 	stcne	0, cr0, [r1, #-0]
    a7d4:	00000159 	andeq	r0, r0, r9, asr r1
    a7d8:	0031d011 	eorseq	sp, r1, r1, lsl r0
    a7dc:	0031d000 	eorseq	sp, r1, r0
    a7e0:	11de0500 	bicsne	r0, lr, r0, lsl #10
    a7e4:	000033de 	ldrdeq	r3, [r0], -lr
    a7e8:	000033de 	ldrdeq	r3, [r0], -lr
    a7ec:	7411db05 	ldrvc	sp, [r1], #-2821	; 0xfffff4fb
    a7f0:	74000031 	strvc	r0, [r0], #-49	; 0xffffffcf
    a7f4:	05000031 	streq	r0, [r0, #-49]	; 0xffffffcf
    a7f8:	Address 0x0000a7f8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__Stack_Size+0x2bfcac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
      20:	3a080300 	bcc	200c28 <__Stack_Size+0x200828>
    bTmp = bByte/10;
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
      2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      30:	0b3b0b3a 	bleq	ec2d20 <__Stack_Size+0xec2920>
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      40:	0b0b0104 	bleq	2c0458 <__Stack_Size+0x2c0058>
}
      44:	0b3a1349 	bleq	e84d70 <__Stack_Size+0xe84970>
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      4c:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      58:	08030028 	stmdaeq	r3, {r3, r5}


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      5c:	00000b1c 	andeq	r0, r0, ip, lsl fp
      60:	0b011309 	bleq	44c8c <__Stack_Size+0x4488c>
      64:	3b0b3a0b 	blcc	2ce898 <__Stack_Size+0x2ce498>
      68:	00130105 	andseq	r0, r3, r5, lsl #2
      6c:	000d0a00 	andeq	r0, sp, r0, lsl #20
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
      70:	0b3a0803 	bleq	e82084 <__Stack_Size+0xe81c84>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	1349053b 	movtne	r0, #38203	; 0x953b
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
      78:	00000b38 	andeq	r0, r0, r8, lsr fp
      7c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    }
          
    if(status != FLASH_BUSY)
      80:	3b0b3a0e 	blcc	2ce8c0 <__Stack_Size+0x2ce4c0>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      84:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      88:	0c00000b 	stceq	0, cr0, [r0], {11}
      8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      94:	00001349 	andeq	r1, r0, r9, asr #6
      98:	0b01130d 	bleq	44cd4 <__Stack_Size+0x448d4>
      9c:	3b0b3a0b 	blcc	2ce8d0 <__Stack_Size+0x2ce4d0>
      a0:	0013010b 	andseq	r0, r3, fp, lsl #2
      a4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      a8:	0b3a0e03 	bleq	e838bc <__Stack_Size+0xe834bc>
      ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	00000b38 	andeq	r0, r0, r8, lsr fp
      b4:	2700150f 	strcs	r1, [r0, -pc, lsl #10]
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	10000019 	andne	r0, r0, r9, lsl r0
      bc:	0b0b000f 	bleq	2c0100 <__Stack_Size+0x2bfd00>
      break; 
      
    default:
      break;
  }
}
      c0:	00001349 	andeq	r1, r0, r9, asr #6
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	03010411 	movweq	r0, #5137	; 0x1411
      c8:	490b0b0e 	stmdbmi	fp, {r1, r2, r3, r8, r9, fp}
      cc:	3b0b3a13 	blcc	2ce920 <__Stack_Size+0x2ce520>
      d0:	0013010b 	andseq	r0, r3, fp, lsl #2
      d4:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
      d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      e0:	13491927 	movtne	r1, #39207	; 0x9927
      e4:	13010b20 	movwne	r0, #6944	; 0x1b20
      e8:	05130000 	ldreq	r0, [r3, #-0]
      ec:	3a0e0300 	bcc	380cf4 <__Stack_Size+0x3808f4>
      f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      f4:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
      f8:	0b0b0024 	bleq	2c0190 <__Stack_Size+0x2bfd90>
      fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     100:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     104:	03193f00 	tsteq	r9, #0, 30
     108:	3b0b3a0e 	blcc	2ce948 <__Stack_Size+0x2ce548>
     10c:	2019270b 	andscs	r2, r9, fp, lsl #14
     110:	1600000b 	strne	r0, [r0], -fp
     114:	1331002e 	teqne	r1, #46	; 0x2e
     118:	06120111 			; <UNDEFINED> instruction: 0x06120111
     11c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     120:	17000019 	smladne	r0, r9, r0, r0
     124:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     128:	0b3a0e03 	bleq	e8393c <__Stack_Size+0xe8353c>
     12c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     130:	01111349 	tsteq	r1, r9, asr #6
     134:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     138:	00194297 	mulseq	r9, r7, r2
     13c:	002e1800 	eoreq	r1, lr, r0, lsl #16
     140:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     148:	01111927 	tsteq	r1, r7, lsr #18
     14c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     150:	00194297 	mulseq	r9, r7, r2
     154:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
     158:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     15c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     160:	01111927 	tsteq	r1, r7, lsr #18
     164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     168:	01194297 			; <UNDEFINED> instruction: 0x01194297
     16c:	1a000013 	bne	1c0 <_Minimum_Stack_Size+0xc0>
     170:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     174:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     17c:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
     180:	11010182 	smlabbne	r1, r2, r1, r0
     184:	01133101 	tsteq	r3, r1, lsl #2
     188:	1c000013 	stcne	0, cr0, [r0], {19}
     18c:	0001828a 	andeq	r8, r1, sl, lsl #5
     190:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     194:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     198:	01018289 	smlabbeq	r1, r9, r2, r8
     19c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1a0:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     1a4:	11133101 	tstne	r3, r1, lsl #2
     1a8:	40061201 	andmi	r1, r6, r1, lsl #4
     1ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1b0:	00001301 	andeq	r1, r0, r1, lsl #6
     1b4:	3100051f 	tstcc	r0, pc, lsl r5
     1b8:	00170213 	andseq	r0, r7, r3, lsl r2
     1bc:	00052000 	andeq	r2, r5, r0
     1c0:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     1c4:	0b210000 	bleq	8401cc <__Stack_Size+0x83fdcc>
     1c8:	00175501 	andseq	r5, r7, r1, lsl #10
     1cc:	00052200 	andeq	r2, r5, r0, lsl #4
     1d0:	0b3a0803 	bleq	e821e4 <__Stack_Size+0xe81de4>
     1d4:	1349053b 	movtne	r0, #38203	; 0x953b
     1d8:	00001702 	andeq	r1, r0, r2, lsl #14
     1dc:	03000523 	movweq	r0, #1315	; 0x523
     1e0:	3b0b3a0e 	blcc	2cea20 <__Stack_Size+0x2ce620>
     1e4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1e8:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
     1ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f4:	17021349 	strne	r1, [r2, -r9, asr #6]
     1f8:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     1fc:	11000182 	smlabbne	r0, r2, r1, r0
     200:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     204:	00001331 	andeq	r1, r0, r1, lsr r3
     208:	03003426 	movweq	r3, #1062	; 0x426
     20c:	3b0b3a08 	blcc	2cea34 <__Stack_Size+0x2ce634>
     210:	02134905 	andseq	r4, r3, #81920	; 0x14000
     214:	27000017 	smladcs	r0, r7, r0, r0
     218:	00018289 	andeq	r8, r1, r9, lsl #5
     21c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     220:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
     224:	11010182 	smlabbne	r1, r2, r1, r0
     228:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     22c:	00001331 	andeq	r1, r0, r1, lsr r3
     230:	3f002e29 	svccc	0x00002e29
     234:	3a0e0319 	bcc	380ea0 <__Stack_Size+0x380aa0>
     238:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     23c:	11134919 	tstne	r3, r9, lsl r9
     240:	40061201 	andmi	r1, r6, r1, lsl #4
     244:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     248:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     24c:	03193f01 	tsteq	r9, #1, 30
     250:	3b0b3a0e 	blcc	2cea90 <__Stack_Size+0x2ce690>
     254:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     258:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     25c:	97184006 	ldrls	r4, [r8, -r6]
     260:	13011942 	movwne	r1, #6466	; 0x1942
     264:	052b0000 	streq	r0, [fp, #-0]!
     268:	3a0e0300 	bcc	380e70 <__Stack_Size+0x380a70>
     26c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     270:	00180213 	andseq	r0, r8, r3, lsl r2
     274:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     278:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     27c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     280:	01871927 	orreq	r1, r7, r7, lsr #18
     284:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     288:	97184006 	ldrls	r4, [r8, -r6]
     28c:	13011942 	movwne	r1, #6466	; 0x1942
     290:	342d0000 	strtcc	r0, [sp], #-0
     294:	3a0e0300 	bcc	380e9c <__Stack_Size+0x380a9c>
     298:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     29c:	000b1c13 	andeq	r1, fp, r3, lsl ip
     2a0:	010b2e00 	tsteq	fp, r0, lsl #28
     2a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2a8:	00001301 	andeq	r1, r0, r1, lsl #6
     2ac:	31001d2f 	tstcc	r0, pc, lsr #26
     2b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     2b8:	30000005 	andcc	r0, r0, r5
     2bc:	00018289 	andeq	r8, r1, r9, lsl #5
     2c0:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
     2c4:	31000018 	tstcc	r0, r8, lsl r0
     2c8:	13490101 	movtne	r0, #37121	; 0x9101
     2cc:	00001301 	andeq	r1, r0, r1, lsl #6
     2d0:	49002132 	stmdbmi	r0, {r1, r4, r5, r8, sp}
     2d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     2d8:	82893300 	addhi	r3, r9, #0, 6
     2dc:	01110101 	tsteq	r1, r1, lsl #2
     2e0:	31194295 			; <UNDEFINED> instruction: 0x31194295
     2e4:	00130113 	andseq	r0, r3, r3, lsl r1
     2e8:	012e3400 			; <UNDEFINED> instruction: 0x012e3400
     2ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2f0:	0b3b0b3a 	bleq	ec2fe0 <__Stack_Size+0xec2be0>
     2f4:	13491927 	movtne	r1, #39207	; 0x9927
     2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     300:	00130119 	andseq	r0, r3, r9, lsl r1
     304:	00343500 	eorseq	r3, r4, r0, lsl #10
     308:	0b3a0e03 	bleq	e83b1c <__Stack_Size+0xe8371c>
     30c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     310:	00001702 	andeq	r1, r0, r2, lsl #14
     314:	03003436 	movweq	r3, #1078	; 0x436
     318:	3b0b3a0e 	blcc	2ceb58 <__Stack_Size+0x2ce758>
     31c:	3f13490b 	svccc	0x0013490b
     320:	00180219 	andseq	r0, r8, r9, lsl r2
     324:	00213700 	eoreq	r3, r1, r0, lsl #14
     328:	052f1349 	streq	r1, [pc, #-841]!	; ffffffe7 <SCS_BASE+0x1fff1fe7>
     32c:	34380000 	ldrtcc	r0, [r8], #-0
     330:	3a0e0300 	bcc	380f38 <__Stack_Size+0x380b38>
     334:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     338:	3c193f13 	ldccc	15, cr3, [r9], {19}
     33c:	39000019 	stmdbcc	r0, {r0, r3, r4}
     340:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     348:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     34c:	00001802 	andeq	r1, r0, r2, lsl #16
     350:	0300343a 	movweq	r3, #1082	; 0x43a
     354:	3b0b3a0e 	blcc	2ceb94 <__Stack_Size+0x2ce794>
     358:	3f134905 	svccc	0x00134905
     35c:	00193c19 	andseq	r3, r9, r9, lsl ip
     360:	002e3b00 	eoreq	r3, lr, r0, lsl #22
     364:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     368:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
     36c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     370:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     374:	3c193f00 	ldccc	15, cr3, [r9], {-0}
     378:	030e6e19 	movweq	r6, #60953	; 0xee19
     37c:	3b0b3a0e 	blcc	2cebbc <__Stack_Size+0x2ce7bc>
     380:	0000000b 	andeq	r0, r0, fp
     384:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     388:	030b130e 	movweq	r1, #45838	; 0xb30e
     38c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     390:	10011117 	andne	r1, r1, r7, lsl r1
     394:	02000017 	andeq	r0, r0, #23
     398:	0b0b0024 	bleq	2c0430 <__Stack_Size+0x2c0030>
     39c:	0e030b3e 	vmoveq.16	d3[0], r0
     3a0:	16030000 	strne	r0, [r3], -r0
     3a4:	3a080300 	bcc	200fac <__Stack_Size+0x200bac>
     3a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3ac:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     3b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     3b4:	0b3b0b3a 	bleq	ec30a4 <__Stack_Size+0xec2ca4>
     3b8:	00001349 	andeq	r1, r0, r9, asr #6
     3bc:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     3c0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     3c4:	0b0b0104 	bleq	2c07dc <__Stack_Size+0x2c03dc>
     3c8:	0b3a1349 	bleq	e850f4 <__Stack_Size+0xe84cf4>
     3cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     3d0:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     3d4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     3d8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     3dc:	08030028 	stmdaeq	r3, {r3, r5}
     3e0:	00000b1c 	andeq	r0, r0, ip, lsl fp
     3e4:	0b011309 	bleq	45010 <__Stack_Size+0x44c10>
     3e8:	3b0b3a0b 	blcc	2cec1c <__Stack_Size+0x2ce81c>
     3ec:	00130105 	andseq	r0, r3, r5, lsl #2
     3f0:	000d0a00 	andeq	r0, sp, r0, lsl #20
     3f4:	0b3a0803 	bleq	e82408 <__Stack_Size+0xe82008>
     3f8:	1349053b 	movtne	r0, #38203	; 0x953b
     3fc:	00000b38 	andeq	r0, r0, r8, lsr fp
     400:	03000d0b 	movweq	r0, #3339	; 0xd0b
     404:	3b0b3a0e 	blcc	2cec44 <__Stack_Size+0x2ce844>
     408:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     40c:	0c00000b 	stceq	0, cr0, [r0], {11}
     410:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     414:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     418:	00001349 	andeq	r1, r0, r9, asr #6
     41c:	3f002e0d 	svccc	0x00002e0d
     420:	3a0e0319 	bcc	38108c <__Stack_Size+0x380c8c>
     424:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     428:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     42c:	97184006 	ldrls	r4, [r8, -r6]
     430:	00001942 	andeq	r1, r0, r2, asr #18
     434:	3f012e0e 	svccc	0x00012e0e
     438:	3a0e0319 	bcc	3810a4 <__Stack_Size+0x380ca4>
     43c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     440:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     444:	97184006 	ldrls	r4, [r8, -r6]
     448:	13011942 	movwne	r1, #6466	; 0x1942
     44c:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     450:	11000182 	smlabbne	r0, r2, r1, r0
     454:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     458:	00001331 	andeq	r1, r0, r1, lsr r3
     45c:	01828910 	orreq	r8, r2, r0, lsl r9
     460:	31011101 	tstcc	r1, r1, lsl #2
     464:	00130113 	andseq	r0, r3, r3, lsl r1
     468:	828a1100 	addhi	r1, sl, #0, 2
     46c:	18020001 	stmdane	r2, {r0}
     470:	00184291 	mulseq	r8, r1, r2
     474:	82891200 	addhi	r1, r9, #0, 4
     478:	01110101 	tsteq	r1, r1, lsl #2
     47c:	00001331 	andeq	r1, r0, r1, lsr r3
     480:	03003413 	movweq	r3, #1043	; 0x413
     484:	3b0b3a08 	blcc	2cecac <__Stack_Size+0x2ce8ac>
     488:	00134905 	andseq	r4, r3, r5, lsl #18
     48c:	002e1400 	eoreq	r1, lr, r0, lsl #8
     490:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     494:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     498:	0b201927 	bleq	80693c <__Stack_Size+0x80653c>
     49c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     4a0:	11133100 	tstne	r3, r0, lsl #2
     4a4:	40061201 	andmi	r1, r6, r1, lsl #4
     4a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4ac:	34160000 	ldrcc	r0, [r6], #-0
     4b0:	3a0e0300 	bcc	3810b8 <__Stack_Size+0x380cb8>
     4b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4b8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     4bc:	17000019 	smladne	r0, r9, r0, r0
     4c0:	13490101 	movtne	r0, #37121	; 0x9101
     4c4:	00001301 	andeq	r1, r0, r1, lsl #6
     4c8:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
     4cc:	00052f13 	andeq	r2, r5, r3, lsl pc
     4d0:	00341900 	eorseq	r1, r4, r0, lsl #18
     4d4:	0b3a0e03 	bleq	e83ce8 <__Stack_Size+0xe838e8>
     4d8:	1349053b 	movtne	r0, #38203	; 0x953b
     4dc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     4e0:	211a0000 	tstcs	sl, r0
     4e4:	2f134900 	svccs	0x00134900
     4e8:	1b00000b 	blne	51c <__Stack_Size+0x11c>
     4ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     4f0:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
     4f4:	0b3a0e03 	bleq	e83d08 <__Stack_Size+0xe83908>
     4f8:	00000b3b 	andeq	r0, r0, fp, lsr fp
     4fc:	3f002e1c 	svccc	0x00002e1c
     500:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
     504:	3a0e030e 	bcc	381144 <__Stack_Size+0x380d44>
     508:	00053b0b 	andeq	r3, r5, fp, lsl #22
     50c:	11010000 	mrsne	r0, (UNDEF: 1)
     510:	130e2501 	movwne	r2, #58625	; 0xe501
     514:	1b0e030b 	blne	381148 <__Stack_Size+0x380d48>
     518:	0017100e 	andseq	r1, r7, lr
     51c:	00240200 	eoreq	r0, r4, r0, lsl #4
     520:	0b3e0b0b 	bleq	f83154 <__Stack_Size+0xf82d54>
     524:	00000e03 	andeq	r0, r0, r3, lsl #28
     528:	03001603 	movweq	r1, #1539	; 0x603
     52c:	3b0b3a08 	blcc	2ced54 <__Stack_Size+0x2ce954>
     530:	0013490b 	andseq	r4, r3, fp, lsl #18
     534:	01010400 	tsteq	r1, r0, lsl #8
     538:	13011349 	movwne	r1, #4937	; 0x1349
     53c:	21050000 	mrscs	r0, (UNDEF: 5)
     540:	2f134900 	svccs	0x00134900
     544:	0600000b 	streq	r0, [r0], -fp
     548:	13490026 	movtne	r0, #36902	; 0x9026
     54c:	34070000 	strcc	r0, [r7], #-0
     550:	3a0e0300 	bcc	381158 <__Stack_Size+0x380d58>
     554:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     558:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     55c:	00000018 	andeq	r0, r0, r8, lsl r0
     560:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     564:	030b130e 	movweq	r1, #45838	; 0xb30e
     568:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     56c:	10011117 	andne	r1, r1, r7, lsl r1
     570:	02000017 	andeq	r0, r0, #23
     574:	0b0b0024 	bleq	2c060c <__Stack_Size+0x2c020c>
     578:	0e030b3e 	vmoveq.16	d3[0], r0
     57c:	16030000 	strne	r0, [r3], -r0
     580:	3a080300 	bcc	201188 <__Stack_Size+0x200d88>
     584:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     588:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     58c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     590:	0b3b0b3a 	bleq	ec3280 <__Stack_Size+0xec2e80>
     594:	00001349 	andeq	r1, r0, r9, asr #6
     598:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     59c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     5a0:	0b0b0104 	bleq	2c09b8 <__Stack_Size+0x2c05b8>
     5a4:	0b3a1349 	bleq	e852d0 <__Stack_Size+0xe84ed0>
     5a8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     5ac:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     5b0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     5b4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     5b8:	0b0b000f 	bleq	2c05fc <__Stack_Size+0x2c01fc>
     5bc:	00001349 	andeq	r1, r0, r9, asr #6
     5c0:	03010409 	movweq	r0, #5129	; 0x1409
     5c4:	490b0b0e 	stmdbmi	fp, {r1, r2, r3, r8, r9, fp}
     5c8:	3b0b3a13 	blcc	2cee1c <__Stack_Size+0x2cea1c>
     5cc:	0013010b 	andseq	r0, r3, fp, lsl #2
     5d0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
     5d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5d8:	0b3b0b3a 	bleq	ec32c8 <__Stack_Size+0xec2ec8>
     5dc:	01111927 	tsteq	r1, r7, lsr #18
     5e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5e4:	00194297 	mulseq	r9, r7, r2
     5e8:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
     5ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5f0:	0b3b0b3a 	bleq	ec32e0 <__Stack_Size+0xec2ee0>
     5f4:	13491927 	movtne	r1, #39207	; 0x9927
     5f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     600:	00130119 	andseq	r0, r3, r9, lsl r1
     604:	00050c00 	andeq	r0, r5, r0, lsl #24
     608:	0b3a0e03 	bleq	e83e1c <__Stack_Size+0xe83a1c>
     60c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     610:	00001702 	andeq	r1, r0, r2, lsl #14
     614:	0300340d 	movweq	r3, #1037	; 0x40d
     618:	3b0b3a0e 	blcc	2cee58 <__Stack_Size+0x2cea58>
     61c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     620:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     624:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     628:	0b3b0b3a 	bleq	ec3318 <__Stack_Size+0xec2f18>
     62c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     630:	0b0f0000 	bleq	3c0638 <__Stack_Size+0x3c0238>
     634:	00175501 	andseq	r5, r7, r1, lsl #10
     638:	82891000 	addhi	r1, r9, #0
     63c:	01110101 	tsteq	r1, r1, lsl #2
     640:	13011331 	movwne	r1, #4913	; 0x1331
     644:	8a110000 	bhi	44064c <__Stack_Size+0x44024c>
     648:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     64c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     650:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     654:	11000182 	smlabbne	r0, r2, r1, r0
     658:	00133101 	andseq	r3, r3, r1, lsl #2
     65c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     660:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     664:	0b3b0b3a 	bleq	ec3354 <__Stack_Size+0xec2f54>
     668:	01111927 	tsteq	r1, r7, lsr #18
     66c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     670:	01194297 			; <UNDEFINED> instruction: 0x01194297
     674:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     678:	0111010b 	tsteq	r1, fp, lsl #2
     67c:	13010612 	movwne	r0, #5650	; 0x1612
     680:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     684:	03193f01 	tsteq	r9, #1, 30
     688:	3b0b3a0e 	blcc	2ceec8 <__Stack_Size+0x2ceac8>
     68c:	3c13490b 	ldccc	9, cr4, [r3], {11}
     690:	00130119 	andseq	r0, r3, r9, lsl r1
     694:	00181600 	andseq	r1, r8, r0, lsl #12
     698:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     69c:	11010182 	smlabbne	r1, r2, r1, r0
     6a0:	00133101 	andseq	r3, r3, r1, lsl #2
     6a4:	82891800 	addhi	r1, r9, #0, 16
     6a8:	01110101 	tsteq	r1, r1, lsl #2
     6ac:	31194295 			; <UNDEFINED> instruction: 0x31194295
     6b0:	19000013 	stmdbne	r0, {r0, r1, r4}
     6b4:	0b0b0024 	bleq	2c074c <__Stack_Size+0x2c034c>
     6b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6bc:	011a0000 	tsteq	sl, r0
     6c0:	01134901 	tsteq	r3, r1, lsl #18
     6c4:	1b000013 	blne	718 <__Stack_Size+0x318>
     6c8:	13490021 	movtne	r0, #36897	; 0x9021
     6cc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     6d0:	0300341c 	movweq	r3, #1052	; 0x41c
     6d4:	3b0b3a0e 	blcc	2cef14 <__Stack_Size+0x2ceb14>
     6d8:	3f13490b 	svccc	0x0013490b
     6dc:	00180219 	andseq	r0, r8, r9, lsl r2
     6e0:	00211d00 	eoreq	r1, r1, r0, lsl #26
     6e4:	341e0000 	ldrcc	r0, [lr], #-0
     6e8:	3a0e0300 	bcc	3812f0 <__Stack_Size+0x380ef0>
     6ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6f4:	1f000019 	svcne	0x00000019
     6f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6fc:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
     700:	0b3a0e03 	bleq	e83f14 <__Stack_Size+0xe83b14>
     704:	00000b3b 	andeq	r0, r0, fp, lsr fp
     708:	3f002e20 	svccc	0x00002e20
     70c:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
     710:	3a0e030e 	bcc	381350 <__Stack_Size+0x380f50>
     714:	00053b0b 	andeq	r3, r5, fp, lsl #22
     718:	11010000 	mrsne	r0, (UNDEF: 1)
     71c:	130e2501 	movwne	r2, #58625	; 0xe501
     720:	1b0e030b 	blne	381354 <__Stack_Size+0x380f54>
     724:	1117550e 	tstne	r7, lr, lsl #10
     728:	00171001 	andseq	r1, r7, r1
     72c:	00240200 	eoreq	r0, r4, r0, lsl #4
     730:	0b3e0b0b 	bleq	f83364 <__Stack_Size+0xf82f64>
     734:	00000e03 	andeq	r0, r0, r3, lsl #28
     738:	03001603 	movweq	r1, #1539	; 0x603
     73c:	3b0b3a08 	blcc	2cef64 <__Stack_Size+0x2ceb64>
     740:	0013490b 	andseq	r4, r3, fp, lsl #18
     744:	000f0400 	andeq	r0, pc, r0, lsl #8
     748:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     74c:	04050000 	streq	r0, [r5], #-0
     750:	0b0e0301 	bleq	38135c <__Stack_Size+0x380f5c>
     754:	3a13490b 	bcc	4d2b88 <__Stack_Size+0x4d2788>
     758:	010b3b0b 	tsteq	fp, fp, lsl #22
     75c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     760:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     764:	00000b1c 	andeq	r0, r0, ip, lsl fp
     768:	03001607 	movweq	r1, #1543	; 0x607
     76c:	3b0b3a0e 	blcc	2cefac <__Stack_Size+0x2cebac>
     770:	0013490b 	andseq	r4, r3, fp, lsl #18
     774:	01150800 	tsteq	r5, r0, lsl #16
     778:	13491927 	movtne	r1, #39207	; 0x9927
     77c:	00001301 	andeq	r1, r0, r1, lsl #6
     780:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
     784:	0a000013 	beq	7d8 <__Stack_Size+0x3d8>
     788:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     78c:	0b3a0b0b 	bleq	e833c0 <__Stack_Size+0xe82fc0>
     790:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     794:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     798:	3a0e0300 	bcc	3813a0 <__Stack_Size+0x380fa0>
     79c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7a0:	000b3813 	andeq	r3, fp, r3, lsl r8
     7a4:	00150c00 	andseq	r0, r5, r0, lsl #24
     7a8:	00001927 	andeq	r1, r0, r7, lsr #18
     7ac:	0b000f0d 	bleq	43e8 <__Stack_Size+0x3fe8>
     7b0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     7b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7b8:	0b3a0e03 	bleq	e83fcc <__Stack_Size+0xe83bcc>
     7bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7c8:	00130119 	andseq	r0, r3, r9, lsl r1
     7cc:	82890f00 	addhi	r0, r9, #0, 30
     7d0:	01110001 	tsteq	r1, r1
     7d4:	00001331 	andeq	r1, r0, r1, lsr r3
     7d8:	03003410 	movweq	r3, #1040	; 0x410
     7dc:	3b0b3a0e 	blcc	2cf01c <__Stack_Size+0x2cec1c>
     7e0:	3f13490b 	svccc	0x0013490b
     7e4:	00180219 	andseq	r0, r8, r9, lsl r2
     7e8:	00351100 	eorseq	r1, r5, r0, lsl #2
     7ec:	00001349 	andeq	r1, r0, r9, asr #6
     7f0:	03003412 	movweq	r3, #1042	; 0x412
     7f4:	3b0b3a0e 	blcc	2cf034 <__Stack_Size+0x2cec34>
     7f8:	3f13490b 	svccc	0x0013490b
     7fc:	00193c19 	andseq	r3, r9, r9, lsl ip
     800:	01011300 	mrseq	r1, SP_irq
     804:	13011349 	movwne	r1, #4937	; 0x1349
     808:	21140000 	tstcs	r4, r0
     80c:	2f134900 	svccs	0x00134900
     810:	1500000b 	strne	r0, [r0, #-11]
     814:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     818:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
     81c:	0b3a0e03 	bleq	e84030 <__Stack_Size+0xe83c30>
     820:	00000b3b 	andeq	r0, r0, fp, lsr fp
     824:	01110100 	tsteq	r1, r0, lsl #2
     828:	0b130e25 	bleq	4c40c4 <__Stack_Size+0x4c3cc4>
     82c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     830:	01111755 	tsteq	r1, r5, asr r7
     834:	00001710 	andeq	r1, r0, r0, lsl r7
     838:	0b002402 	bleq	9848 <__Stack_Size+0x9448>
     83c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     840:	0300000e 	movweq	r0, #14
     844:	08030016 	stmdaeq	r3, {r1, r2, r4}
     848:	0b3b0b3a 	bleq	ec3538 <__Stack_Size+0xec3138>
     84c:	00001349 	andeq	r1, r0, r9, asr #6
     850:	03010404 	movweq	r0, #5124	; 0x1404
     854:	490b0b0e 	stmdbmi	fp, {r1, r2, r3, r8, r9, fp}
     858:	3b0b3a13 	blcc	2cf0ac <__Stack_Size+0x2cecac>
     85c:	0013010b 	andseq	r0, r3, fp, lsl #2
     860:	00280500 	eoreq	r0, r8, r0, lsl #10
     864:	0b1c0e03 	bleq	704078 <__Stack_Size+0x703c78>
     868:	13060000 	movwne	r0, #24576	; 0x6000
     86c:	0b0e0301 	bleq	381478 <__Stack_Size+0x381078>
     870:	3b0b3a0b 	blcc	2cf0a4 <__Stack_Size+0x2ceca4>
     874:	0013010b 	andseq	r0, r3, fp, lsl #2
     878:	000d0700 	andeq	r0, sp, r0, lsl #14
     87c:	0b3a0e03 	bleq	e84090 <__Stack_Size+0xe83c90>
     880:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     884:	00000b38 	andeq	r0, r0, r8, lsr fp
     888:	0b000f08 	bleq	44b0 <__Stack_Size+0x40b0>
     88c:	0013490b 	andseq	r4, r3, fp, lsl #18
     890:	00160900 	andseq	r0, r6, r0, lsl #18
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe83ca8>
     898:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     89c:	150a0000 	strne	r0, [sl, #-0]
     8a0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     8a4:	00130113 	andseq	r0, r3, r3, lsl r1
     8a8:	00050b00 	andeq	r0, r5, r0, lsl #22
     8ac:	00001349 	andeq	r1, r0, r9, asr #6
     8b0:	0301130c 	movweq	r1, #4876	; 0x130c
     8b4:	3a0b0b08 	bcc	2c34dc <__Stack_Size+0x2c30dc>
     8b8:	010b3b0b 	tsteq	fp, fp, lsl #22
     8bc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     8c0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     8c4:	0b3b0b3a 	bleq	ec35b4 <__Stack_Size+0xec31b4>
     8c8:	0b381349 	bleq	e055f4 <__Stack_Size+0xe051f4>
     8cc:	170e0000 	strne	r0, [lr, -r0]
     8d0:	3a0b0b01 	bcc	2c34dc <__Stack_Size+0x2c30dc>
     8d4:	010b3b0b 	tsteq	fp, fp, lsl #22
     8d8:	0f000013 	svceq	0x00000013
     8dc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     8e0:	0b3b0b3a 	bleq	ec35d0 <__Stack_Size+0xec31d0>
     8e4:	00001349 	andeq	r1, r0, r9, asr #6
     8e8:	27001510 	smladcs	r0, r0, r5, r1
     8ec:	11000019 	tstne	r0, r9, lsl r0
     8f0:	0b0b000f 	bleq	2c0934 <__Stack_Size+0x2c0534>
     8f4:	13120000 	tstne	r2, #0
     8f8:	3a0b0b01 	bcc	2c3504 <__Stack_Size+0x2c3104>
     8fc:	010b3b0b 	tsteq	fp, fp, lsl #22
     900:	13000013 	movwne	r0, #19
     904:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     908:	0b3a0e03 	bleq	e8411c <__Stack_Size+0xe83d1c>
     90c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     910:	06120111 			; <UNDEFINED> instruction: 0x06120111
     914:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     918:	00130119 	andseq	r0, r3, r9, lsl r1
     91c:	00341400 	eorseq	r1, r4, r0, lsl #8
     920:	0b3a0e03 	bleq	e84134 <__Stack_Size+0xe83d34>
     924:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     928:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     92c:	03193f00 	tsteq	r9, #0, 30
     930:	3b0b3a0e 	blcc	2cf170 <__Stack_Size+0x2ced70>
     934:	1119270b 	tstne	r9, fp, lsl #14
     938:	40061201 	andmi	r1, r6, r1, lsl #4
     93c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     940:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     944:	03193f01 	tsteq	r9, #1, 30
     948:	3b0b3a0e 	blcc	2cf188 <__Stack_Size+0x2ced88>
     94c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     950:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     954:	97184006 	ldrls	r4, [r8, -r6]
     958:	13011942 	movwne	r1, #6466	; 0x1942
     95c:	05170000 	ldreq	r0, [r7, #-0]
     960:	3a0e0300 	bcc	381568 <__Stack_Size+0x381168>
     964:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	00170213 	andseq	r0, r7, r3, lsl r2
     96c:	00341800 	eorseq	r1, r4, r0, lsl #16
     970:	0b3a0e03 	bleq	e84184 <__Stack_Size+0xe83d84>
     974:	1349053b 	movtne	r0, #38203	; 0x953b
     978:	00001702 	andeq	r1, r0, r2, lsl #14
     97c:	01828919 	orreq	r8, r2, r9, lsl r9
     980:	00011101 	andeq	r1, r1, r1, lsl #2
     984:	828a1a00 	addhi	r1, sl, #0, 20
     988:	18020001 	stmdane	r2, {r0}
     98c:	00184291 	mulseq	r8, r1, r2
     990:	00051b00 	andeq	r1, r5, r0, lsl #22
     994:	0b3a0e03 	bleq	e841a8 <__Stack_Size+0xe83da8>
     998:	1349053b 	movtne	r0, #38203	; 0x953b
     99c:	00001802 	andeq	r1, r0, r2, lsl #16
     9a0:	0182891c 	orreq	r8, r2, ip, lsl r9
     9a4:	31011100 	mrscc	r1, (UNDEF: 17)
     9a8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     9ac:	01018289 	smlabbeq	r1, r9, r2, r8
     9b0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     9b4:	00001301 	andeq	r1, r0, r1, lsl #6
     9b8:	0182891e 	orreq	r8, r2, lr, lsl r9
     9bc:	31011101 	tstcc	r1, r1, lsl #2
     9c0:	1f000013 	svcne	0x00000013
     9c4:	01018289 	smlabbeq	r1, r9, r2, r8
     9c8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     9cc:	00133119 	andseq	r3, r3, r9, lsl r1
     9d0:	82892000 	addhi	r2, r9, #0
     9d4:	01110001 	tsteq	r1, r1
     9d8:	31194295 			; <UNDEFINED> instruction: 0x31194295
     9dc:	21000013 	tstcs	r0, r3, lsl r0
     9e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9e4:	0b3b0b3a 	bleq	ec36d4 <__Stack_Size+0xec32d4>
     9e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     9ec:	00001802 	andeq	r1, r0, r2, lsl #16
     9f0:	03003422 	movweq	r3, #1058	; 0x422
     9f4:	3b0b3a0e 	blcc	2cf234 <__Stack_Size+0x2cee34>
     9f8:	3f13490b 	svccc	0x0013490b
     9fc:	00193c19 	andseq	r3, r9, r9, lsl ip
     a00:	01012300 	mrseq	r2, SP_irq
     a04:	13011349 	movwne	r1, #4937	; 0x1349
     a08:	21240000 			; <UNDEFINED> instruction: 0x21240000
     a0c:	2f134900 	svccs	0x00134900
     a10:	2500000b 	strcs	r0, [r0, #-11]
     a14:	13490026 	movtne	r0, #36902	; 0x9026
     a18:	35260000 	strcc	r0, [r6, #-0]!
     a1c:	00134900 	andseq	r4, r3, r0, lsl #18
     a20:	00342700 	eorseq	r2, r4, r0, lsl #14
     a24:	0b3a0e03 	bleq	e84238 <__Stack_Size+0xe83e38>
     a28:	1349053b 	movtne	r0, #38203	; 0x953b
     a2c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a30:	24280000 	strtcs	r0, [r8], #-0
     a34:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a38:	0008030b 	andeq	r0, r8, fp, lsl #6
     a3c:	002e2900 	eoreq	r2, lr, r0, lsl #18
     a40:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a44:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
     a48:	0b3b0b3a 	bleq	ec3738 <__Stack_Size+0xec3338>
     a4c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     a50:	3c193f00 	ldccc	15, cr3, [r9], {-0}
     a54:	030e6e19 	movweq	r6, #60953	; 0xee19
     a58:	3b0b3a0e 	blcc	2cf298 <__Stack_Size+0x2cee98>
     a5c:	00000005 	andeq	r0, r0, r5
     a60:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     a64:	030b130e 	movweq	r1, #45838	; 0xb30e
     a68:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     a6c:	10011117 	andne	r1, r1, r7, lsl r1
     a70:	02000017 	andeq	r0, r0, #23
     a74:	0b0b0024 	bleq	2c0b0c <__Stack_Size+0x2c070c>
     a78:	0e030b3e 	vmoveq.16	d3[0], r0
     a7c:	16030000 	strne	r0, [r3], -r0
     a80:	3a080300 	bcc	201688 <__Stack_Size+0x201288>
     a84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a88:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     a8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     a90:	0b3b0b3a 	bleq	ec3780 <__Stack_Size+0xec3380>
     a94:	00001349 	andeq	r1, r0, r9, asr #6
     a98:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     a9c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     aa0:	0b0b0104 	bleq	2c0eb8 <__Stack_Size+0x2c0ab8>
     aa4:	0b3a1349 	bleq	e857d0 <__Stack_Size+0xe853d0>
     aa8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     aac:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     ab0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     ab4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     ab8:	0b0b0113 	bleq	2c0f0c <__Stack_Size+0x2c0b0c>
     abc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ac0:	00001301 	andeq	r1, r0, r1, lsl #6
     ac4:	03000d09 	movweq	r0, #3337	; 0xd09
     ac8:	3b0b3a08 	blcc	2cf2f0 <__Stack_Size+0x2ceef0>
     acc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     ad0:	0a00000b 	beq	b04 <__Stack_Size+0x704>
     ad4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ad8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     adc:	0b381349 	bleq	e05808 <__Stack_Size+0xe05408>
     ae0:	160b0000 	strne	r0, [fp], -r0
     ae4:	3a0e0300 	bcc	3816ec <__Stack_Size+0x3812ec>
     ae8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     aec:	0c000013 	stceq	0, cr0, [r0], {19}
     af0:	0b0b000f 	bleq	2c0b34 <__Stack_Size+0x2c0734>
     af4:	00001349 	andeq	r1, r0, r9, asr #6
     af8:	0301040d 	movweq	r0, #5133	; 0x140d
     afc:	490b0b0e 	stmdbmi	fp, {r1, r2, r3, r8, r9, fp}
     b00:	3b0b3a13 	blcc	2cf354 <__Stack_Size+0x2cef54>
     b04:	0013010b 	andseq	r0, r3, fp, lsl #2
     b08:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     b0c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b14:	0b201927 	bleq	806fb8 <__Stack_Size+0x806bb8>
     b18:	00001301 	andeq	r1, r0, r1, lsl #6
     b1c:	0300050f 	movweq	r0, #1295	; 0x50f
     b20:	3b0b3a0e 	blcc	2cf360 <__Stack_Size+0x2cef60>
     b24:	00134905 	andseq	r4, r3, r5, lsl #18
     b28:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
     b2c:	0b3a0e03 	bleq	e84340 <__Stack_Size+0xe83f40>
     b30:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     b34:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b38:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b3c:	00130119 	andseq	r0, r3, r9, lsl r1
     b40:	00051100 	andeq	r1, r5, r0, lsl #2
     b44:	0b3a0e03 	bleq	e84358 <__Stack_Size+0xe83f58>
     b48:	1349053b 	movtne	r0, #38203	; 0x953b
     b4c:	00001702 	andeq	r1, r0, r2, lsl #14
     b50:	03000512 	movweq	r0, #1298	; 0x512
     b54:	3b0b3a0e 	blcc	2cf394 <__Stack_Size+0x2cef94>
     b58:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b5c:	13000018 	movwne	r0, #24
     b60:	08030005 	stmdaeq	r3, {r0, r2}
     b64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b6c:	34140000 	ldrcc	r0, [r4], #-0
     b70:	3a080300 	bcc	201778 <__Stack_Size+0x201378>
     b74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b78:	00170213 	andseq	r0, r7, r3, lsl r2
     b7c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     b80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b84:	0b3b0b3a 	bleq	ec3874 <__Stack_Size+0xec3474>
     b88:	13491927 	movtne	r1, #39207	; 0x9927
     b8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b90:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b94:	00130119 	andseq	r0, r3, r9, lsl r1
     b98:	00341600 	eorseq	r1, r4, r0, lsl #12
     b9c:	0b3a0e03 	bleq	e843b0 <__Stack_Size+0xe83fb0>
     ba0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ba4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     ba8:	31011d17 	tstcc	r1, r7, lsl sp
     bac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     bb0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     bb4:	1800000b 	stmdane	r0, {r0, r1, r3}
     bb8:	13310005 	teqne	r1, #5
     bbc:	00001702 	andeq	r1, r0, r2, lsl #14
     bc0:	11010b19 	tstne	r1, r9, lsl fp
     bc4:	00061201 	andeq	r1, r6, r1, lsl #4
     bc8:	82891a00 	addhi	r1, r9, #0, 20
     bcc:	01110101 	tsteq	r1, r1, lsl #2
     bd0:	00001331 	andeq	r1, r0, r1, lsr r3
     bd4:	01828a1b 	orreq	r8, r2, fp, lsl sl
     bd8:	91180200 	tstls	r8, r0, lsl #4
     bdc:	00001842 	andeq	r1, r0, r2, asr #16
     be0:	3f012e1c 	svccc	0x00012e1c
     be4:	3a0e0319 	bcc	381850 <__Stack_Size+0x381450>
     be8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     bf0:	97184006 	ldrls	r4, [r8, -r6]
     bf4:	13011942 	movwne	r1, #6466	; 0x1942
     bf8:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
     bfc:	11000182 	smlabbne	r0, r2, r1, r0
     c00:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     c04:	00001331 	andeq	r1, r0, r1, lsr r3
     c08:	31012e1e 	tstcc	r1, lr, lsl lr
     c0c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c10:	97184006 	ldrls	r4, [r8, -r6]
     c14:	13011942 	movwne	r1, #6466	; 0x1942
     c18:	0b1f0000 	bleq	7c0c20 <__Stack_Size+0x7c0820>
     c1c:	01175501 	tsteq	r7, r1, lsl #10
     c20:	20000013 	andcs	r0, r0, r3, lsl r0
     c24:	01018289 	smlabbeq	r1, r9, r2, r8
     c28:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     c2c:	00133119 	andseq	r3, r3, r9, lsl r1
     c30:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     c34:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c3c:	01111927 	tsteq	r1, r7, lsr #18
     c40:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c44:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c48:	22000013 	andcs	r0, r0, #19
     c4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c54:	17021349 	strne	r1, [r2, -r9, asr #6]
     c58:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     c5c:	11010182 	smlabbne	r1, r2, r1, r0
     c60:	01133101 	tsteq	r3, r1, lsl #2
     c64:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
     c68:	08030005 	stmdaeq	r3, {r0, r2}
     c6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c70:	17021349 	strne	r1, [r2, -r9, asr #6]
     c74:	34250000 	strtcc	r0, [r5], #-0
     c78:	3a0e0300 	bcc	381880 <__Stack_Size+0x381480>
     c7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c80:	26000013 			; <UNDEFINED> instruction: 0x26000013
     c84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c88:	0b3b0b3a 	bleq	ec3978 <__Stack_Size+0xec3578>
     c8c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     c90:	0000193c 	andeq	r1, r0, ip, lsr r9
     c94:	49010127 	stmdbmi	r1, {r0, r1, r2, r5, r8}
     c98:	00130113 	andseq	r0, r3, r3, lsl r1
     c9c:	00212800 	eoreq	r2, r1, r0, lsl #16
     ca0:	0b2f1349 	bleq	bc59cc <__Stack_Size+0xbc55cc>
     ca4:	34290000 	strtcc	r0, [r9], #-0
     ca8:	3a0e0300 	bcc	3818b0 <__Stack_Size+0x3814b0>
     cac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     cb4:	2a000018 	bcs	d1c <__Stack_Size+0x91c>
     cb8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     cbc:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
     cc0:	0b3a0e03 	bleq	e844d4 <__Stack_Size+0xe840d4>
     cc4:	00000b3b 	andeq	r0, r0, fp, lsr fp
     cc8:	3f002e2b 	svccc	0x00002e2b
     ccc:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
     cd0:	3a0e030e 	bcc	381910 <__Stack_Size+0x381510>
     cd4:	00053b0b 	andeq	r3, r5, fp, lsl #22
     cd8:	11010000 	mrsne	r0, (UNDEF: 1)
     cdc:	130e2501 	movwne	r2, #58625	; 0xe501
     ce0:	1b0e030b 	blne	381914 <__Stack_Size+0x381514>
     ce4:	1117550e 	tstne	r7, lr, lsl #10
     ce8:	00171001 	andseq	r1, r7, r1
     cec:	00240200 	eoreq	r0, r4, r0, lsl #4
     cf0:	0b3e0b0b 	bleq	f83924 <__Stack_Size+0xf83524>
     cf4:	00000e03 	andeq	r0, r0, r3, lsl #28
     cf8:	03001603 	movweq	r1, #1539	; 0x603
     cfc:	3b0b3a08 	blcc	2cf524 <__Stack_Size+0x2cf124>
     d00:	0013490b 	andseq	r4, r3, fp, lsl #18
     d04:	00160400 	andseq	r0, r6, r0, lsl #8
     d08:	0b3a0e03 	bleq	e8451c <__Stack_Size+0xe8411c>
     d0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d10:	35050000 	strcc	r0, [r5, #-0]
     d14:	00134900 	andseq	r4, r3, r0, lsl #18
     d18:	01040600 	tsteq	r4, r0, lsl #12
     d1c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d20:	0b3b0b3a 	bleq	ec3a10 <__Stack_Size+0xec3610>
     d24:	00001301 	andeq	r1, r0, r1, lsl #6
     d28:	03002807 	movweq	r2, #2055	; 0x807
     d2c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     d30:	00280800 	eoreq	r0, r8, r0, lsl #16
     d34:	0b1c0803 	bleq	702d48 <__Stack_Size+0x702948>
     d38:	13090000 	movwne	r0, #36864	; 0x9000
     d3c:	3a0b0b01 	bcc	2c3948 <__Stack_Size+0x2c3548>
     d40:	01053b0b 	tsteq	r5, fp, lsl #22
     d44:	0a000013 	beq	d98 <__Stack_Size+0x998>
     d48:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d50:	0b381349 	bleq	e05a7c <__Stack_Size+0xe0567c>
     d54:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     d58:	3a0e0300 	bcc	381960 <__Stack_Size+0x381560>
     d5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d60:	000b3813 	andeq	r3, fp, r3, lsl r8
     d64:	00160c00 	andseq	r0, r6, r0, lsl #24
     d68:	0b3a0e03 	bleq	e8457c <__Stack_Size+0xe8417c>
     d6c:	1349053b 	movtne	r0, #38203	; 0x953b
     d70:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     d74:	03193f01 	tsteq	r9, #1, 30
     d78:	3b0b3a0e 	blcc	2cf5b8 <__Stack_Size+0x2cf1b8>
     d7c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     d80:	010b2013 	tsteq	fp, r3, lsl r0
     d84:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     d88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d90:	00001349 	andeq	r1, r0, r9, asr #6
     d94:	3f012e0f 	svccc	0x00012e0f
     d98:	3a0e0319 	bcc	381a04 <__Stack_Size+0x381604>
     d9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     da0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     da4:	97184006 	ldrls	r4, [r8, -r6]
     da8:	13011942 	movwne	r1, #6466	; 0x1942
     dac:	05100000 	ldreq	r0, [r0, #-0]
     db0:	3a0e0300 	bcc	3819b8 <__Stack_Size+0x3815b8>
     db4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	00170213 	andseq	r0, r7, r3, lsl r2
     dbc:	002e1100 	eoreq	r1, lr, r0, lsl #2
     dc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__Stack_Size+0xec36b4>
     dc8:	01111927 	tsteq	r1, r7, lsr #18
     dcc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dd0:	00194297 	mulseq	r9, r7, r2
     dd4:	002e1200 	eoreq	r1, lr, r0, lsl #4
     dd8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ddc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     de0:	13491927 	movtne	r1, #39207	; 0x9927
     de4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     de8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     dec:	13000019 	movwne	r0, #25
     df0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     df4:	0b3a0e03 	bleq	e84608 <__Stack_Size+0xe84208>
     df8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     dfc:	01111349 	tsteq	r1, r9, asr #6
     e00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e04:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e08:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     e0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e14:	17021349 	strne	r1, [r2, -r9, asr #6]
     e18:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     e1c:	03193f01 	tsteq	r9, #1, 30
     e20:	3b0b3a0e 	blcc	2cf660 <__Stack_Size+0x2cf260>
     e24:	11192705 	tstne	r9, r5, lsl #14
     e28:	40061201 	andmi	r1, r6, r1, lsl #4
     e2c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e30:	00001301 	andeq	r1, r0, r1, lsl #6
     e34:	03000516 	movweq	r0, #1302	; 0x516
     e38:	3b0b3a0e 	blcc	2cf678 <__Stack_Size+0x2cf278>
     e3c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e40:	17000017 	smladne	r0, r7, r0, r0
     e44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e50:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     e54:	11133101 	tstne	r3, r1, lsl #2
     e58:	40061201 	andmi	r1, r6, r1, lsl #4
     e5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e60:	00001301 	andeq	r1, r0, r1, lsl #6
     e64:	31003419 	tstcc	r0, r9, lsl r4
     e68:	00170213 	andseq	r0, r7, r3, lsl r2
     e6c:	010b1a00 	tsteq	fp, r0, lsl #20
     e70:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e74:	341b0000 	ldrcc	r0, [fp], #-0
     e78:	00133100 	andseq	r3, r3, r0, lsl #2
     e7c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
     e80:	0b3a0e03 	bleq	e84694 <__Stack_Size+0xe84294>
     e84:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e88:	13010b20 	movwne	r0, #6944	; 0x1b20
     e8c:	341d0000 	ldrcc	r0, [sp], #-0
     e90:	3a080300 	bcc	201a98 <__Stack_Size+0x201698>
     e94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e98:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     e9c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     ea0:	17550152 			; <UNDEFINED> instruction: 0x17550152
     ea4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     ea8:	00001301 	andeq	r1, r0, r1, lsl #6
     eac:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
     eb0:	20000017 	andcs	r0, r0, r7, lsl r0
     eb4:	13310034 	teqne	r1, #52	; 0x34
     eb8:	00001802 	andeq	r1, r0, r2, lsl #16
     ebc:	01828921 	orreq	r8, r2, r1, lsr #18
     ec0:	31011100 	mrscc	r1, (UNDEF: 17)
     ec4:	22000013 	andcs	r0, r0, #19
     ec8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ecc:	0b3a0e03 	bleq	e846e0 <__Stack_Size+0xe842e0>
     ed0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ed4:	01111349 	tsteq	r1, r9, asr #6
     ed8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     edc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ee0:	23000013 	movwcs	r0, #19
     ee4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ee8:	0b3b0b3a 	bleq	ec3bd8 <__Stack_Size+0xec37d8>
     eec:	17021349 	strne	r1, [r2, -r9, asr #6]
     ef0:	89240000 	stmdbhi	r4!, {}	; <UNPREDICTABLE>
     ef4:	11010182 	smlabbne	r1, r2, r1, r0
     ef8:	01133101 	tsteq	r3, r1, lsl #2
     efc:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     f00:	0001828a 	andeq	r8, r1, sl, lsl #5
     f04:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     f08:	26000018 			; <UNDEFINED> instruction: 0x26000018
     f0c:	01018289 	smlabbeq	r1, r9, r2, r8
     f10:	13310111 	teqne	r1, #1073741828	; 0x40000004
     f14:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     f18:	03193f01 	tsteq	r9, #1, 30
     f1c:	3b0b3a0e 	blcc	2cf75c <__Stack_Size+0x2cf35c>
     f20:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f24:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f28:	97184006 	ldrls	r4, [r8, -r6]
     f2c:	00001942 	andeq	r1, r0, r2, asr #18
     f30:	01110100 	tsteq	r1, r0, lsl #2
     f34:	0b130e25 	bleq	4c47d0 <__Stack_Size+0x4c43d0>
     f38:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     f3c:	01111755 	tsteq	r1, r5, asr r7
     f40:	00001710 	andeq	r1, r0, r0, lsl r7
     f44:	0b002402 	bleq	9f54 <__Stack_Size+0x9b54>
     f48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f4c:	0300000e 	movweq	r0, #14
     f50:	08030016 	stmdaeq	r3, {r1, r2, r4}
     f54:	0b3b0b3a 	bleq	ec3c44 <__Stack_Size+0xec3844>
     f58:	00001349 	andeq	r1, r0, r9, asr #6
     f5c:	03001604 	movweq	r1, #1540	; 0x604
     f60:	3b0b3a0e 	blcc	2cf7a0 <__Stack_Size+0x2cf3a0>
     f64:	0013490b 	andseq	r4, r3, fp, lsl #18
     f68:	00350500 	eorseq	r0, r5, r0, lsl #10
     f6c:	00001349 	andeq	r1, r0, r9, asr #6
     f70:	0b010406 	bleq	41f90 <__Stack_Size+0x41b90>
     f74:	3a13490b 	bcc	4d33a8 <__Stack_Size+0x4d2fa8>
     f78:	010b3b0b 	tsteq	fp, fp, lsl #22
     f7c:	07000013 	smladeq	r0, r3, r0, r0
     f80:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     f84:	00000b1c 	andeq	r0, r0, ip, lsl fp
     f88:	03002808 	movweq	r2, #2056	; 0x808
     f8c:	000b1c08 	andeq	r1, fp, r8, lsl #24
     f90:	01130900 	tsteq	r3, r0, lsl #18
     f94:	0b3a0b0b 	bleq	e83bc8 <__Stack_Size+0xe837c8>
     f98:	1301053b 	movwne	r0, #5435	; 0x153b
     f9c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     fa0:	3a080300 	bcc	201ba8 <__Stack_Size+0x2017a8>
     fa4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa8:	000b3813 	andeq	r3, fp, r3, lsl r8
     fac:	00160b00 	andseq	r0, r6, r0, lsl #22
     fb0:	0b3a0e03 	bleq	e847c4 <__Stack_Size+0xe843c4>
     fb4:	1349053b 	movtne	r0, #38203	; 0x953b
     fb8:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     fbc:	03193f01 	tsteq	r9, #1, 30
     fc0:	3b0b3a0e 	blcc	2cf800 <__Stack_Size+0x2cf400>
     fc4:	1119270b 	tstne	r9, fp, lsl #14
     fc8:	40061201 	andmi	r1, r6, r1, lsl #4
     fcc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fd0:	00001301 	andeq	r1, r0, r1, lsl #6
     fd4:	0300050d 	movweq	r0, #1293	; 0x50d
     fd8:	3b0b3a0e 	blcc	2cf818 <__Stack_Size+0x2cf418>
     fdc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fe0:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     fe4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     fe8:	0b3a0e03 	bleq	e847fc <__Stack_Size+0xe843fc>
     fec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ff0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ff4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ff8:	0f000019 	svceq	0x00000019
     ffc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1000:	0b3a0e03 	bleq	e84814 <__Stack_Size+0xe84414>
    1004:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1008:	01111349 	tsteq	r1, r9, asr #6
    100c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1010:	00194297 	mulseq	r9, r7, r2
    1014:	00051000 	andeq	r1, r5, r0
    1018:	0b3a0e03 	bleq	e8482c <__Stack_Size+0xe8442c>
    101c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1020:	00001702 	andeq	r1, r0, r2, lsl #14
    1024:	03003411 	movweq	r3, #1041	; 0x411
    1028:	3b0b3a0e 	blcc	2cf868 <__Stack_Size+0x2cf468>
    102c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1030:	00000017 	andeq	r0, r0, r7, lsl r0
    1034:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1038:	030b130e 	movweq	r1, #45838	; 0xb30e
    103c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1040:	10011117 	andne	r1, r1, r7, lsl r1
    1044:	02000017 	andeq	r0, r0, #23
    1048:	0b0b0024 	bleq	2c10e0 <__Stack_Size+0x2c0ce0>
    104c:	0e030b3e 	vmoveq.16	d3[0], r0
    1050:	16030000 	strne	r0, [r3], -r0
    1054:	3a080300 	bcc	201c5c <__Stack_Size+0x20185c>
    1058:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1060:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1064:	0b3b0b3a 	bleq	ec3d54 <__Stack_Size+0xec3954>
    1068:	00001349 	andeq	r1, r0, r9, asr #6
    106c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1070:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1074:	0b0b0104 	bleq	2c148c <__Stack_Size+0x2c108c>
    1078:	0b3a1349 	bleq	e85da4 <__Stack_Size+0xe859a4>
    107c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1080:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    1084:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1088:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    108c:	0b0b0113 	bleq	2c14e0 <__Stack_Size+0x2c10e0>
    1090:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1094:	00001301 	andeq	r1, r0, r1, lsl #6
    1098:	03000d09 	movweq	r0, #3337	; 0xd09
    109c:	3b0b3a08 	blcc	2cf8c4 <__Stack_Size+0x2cf4c4>
    10a0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    10a4:	0a00000b 	beq	10d8 <__Stack_Size+0xcd8>
    10a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10b0:	0b381349 	bleq	e05ddc <__Stack_Size+0xe059dc>
    10b4:	160b0000 	strne	r0, [fp], -r0
    10b8:	3a0e0300 	bcc	381cc0 <__Stack_Size+0x3818c0>
    10bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10c0:	0c000013 	stceq	0, cr0, [r0], {19}
    10c4:	13490101 	movtne	r0, #37121	; 0x9101
    10c8:	00001301 	andeq	r1, r0, r1, lsl #6
    10cc:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
    10d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    10d4:	01130e00 	tsteq	r3, r0, lsl #28
    10d8:	0b3a0b0b 	bleq	e83d0c <__Stack_Size+0xe8390c>
    10dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10e0:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 10e8 <__Stack_Size+0xce8>
    10e4:	3a0e0300 	bcc	381cec <__Stack_Size+0x3818ec>
    10e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10ec:	000b3813 	andeq	r3, fp, r3, lsl r8
    10f0:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
    10f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10f8:	0b3b0b3a 	bleq	ec3de8 <__Stack_Size+0xec39e8>
    10fc:	01111927 	tsteq	r1, r7, lsr #18
    1100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1104:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1108:	11000013 	tstne	r0, r3, lsl r0
    110c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1110:	0b3b0b3a 	bleq	ec3e00 <__Stack_Size+0xec3a00>
    1114:	17021349 	strne	r1, [r2, -r9, asr #6]
    1118:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    111c:	11010182 	smlabbne	r1, r2, r1, r0
    1120:	01133101 	tsteq	r3, r1, lsl #2
    1124:	13000013 	movwne	r0, #19
    1128:	0001828a 	andeq	r8, r1, sl, lsl #5
    112c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1130:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    1134:	00018289 	andeq	r8, r1, r9, lsl #5
    1138:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    113c:	00133119 	andseq	r3, r3, r9, lsl r1
    1140:	000f1500 	andeq	r1, pc, r0, lsl #10
    1144:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1148:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    114c:	11010182 	smlabbne	r1, r2, r1, r0
    1150:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1154:	00001331 	andeq	r1, r0, r1, lsr r3
    1158:	03000517 	movweq	r0, #1303	; 0x517
    115c:	3b0b3a0e 	blcc	2cf99c <__Stack_Size+0x2cf59c>
    1160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1164:	18000018 	stmdane	r0, {r3, r4}
    1168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    116c:	0b3b0b3a 	bleq	ec3e5c <__Stack_Size+0xec3a5c>
    1170:	17021349 	strne	r1, [r2, -r9, asr #6]
    1174:	34190000 	ldrcc	r0, [r9], #-0
    1178:	3a080300 	bcc	201d80 <__Stack_Size+0x201980>
    117c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1180:	00170213 	andseq	r0, r7, r3, lsl r2
    1184:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
    1188:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    118c:	0b3b0b3a 	bleq	ec3e7c <__Stack_Size+0xec3a7c>
    1190:	13491927 	movtne	r1, #39207	; 0x9927
    1194:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1198:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    119c:	00130119 	andseq	r0, r3, r9, lsl r1
    11a0:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    11a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    11a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11ac:	13491927 	movtne	r1, #39207	; 0x9927
    11b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    11b8:	00130119 	andseq	r0, r3, r9, lsl r1
    11bc:	00051c00 	andeq	r1, r5, r0, lsl #24
    11c0:	0b3a0e03 	bleq	e849d4 <__Stack_Size+0xe845d4>
    11c4:	1349053b 	movtne	r0, #38203	; 0x953b
    11c8:	00001702 	andeq	r1, r0, r2, lsl #14
    11cc:	0300051d 	movweq	r0, #1309	; 0x51d
    11d0:	3b0b3a0e 	blcc	2cfa10 <__Stack_Size+0x2cf610>
    11d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11d8:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    11dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11e4:	17021349 	strne	r1, [r2, -r9, asr #6]
    11e8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    11ec:	03193f01 	tsteq	r9, #1, 30
    11f0:	3b0b3a0e 	blcc	2cfa30 <__Stack_Size+0x2cf630>
    11f4:	11192705 	tstne	r9, r5, lsl #14
    11f8:	40061201 	andmi	r1, r6, r1, lsl #4
    11fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1200:	00001301 	andeq	r1, r0, r1, lsl #6
    1204:	03003420 	movweq	r3, #1056	; 0x420
    1208:	3b0b3a08 	blcc	2cfa30 <__Stack_Size+0x2cf630>
    120c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1210:	21000017 	tstcs	r0, r7, lsl r0
    1214:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1218:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
    121c:	0b3a0e03 	bleq	e84a30 <__Stack_Size+0xe84630>
    1220:	0000053b 	andeq	r0, r0, fp, lsr r5
    1224:	01110100 	tsteq	r1, r0, lsl #2
    1228:	0b130e25 	bleq	4c4ac4 <__Stack_Size+0x4c46c4>
    122c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1230:	01111755 	tsteq	r1, r5, asr r7
    1234:	00001710 	andeq	r1, r0, r0, lsl r7
    1238:	0b002402 	bleq	a248 <__Stack_Size+0x9e48>
    123c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1240:	0300000e 	movweq	r0, #14
    1244:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1248:	0b3b0b3a 	bleq	ec3f38 <__Stack_Size+0xec3b38>
    124c:	00001349 	andeq	r1, r0, r9, asr #6
    1250:	03001604 	movweq	r1, #1540	; 0x604
    1254:	3b0b3a0e 	blcc	2cfa94 <__Stack_Size+0x2cf694>
    1258:	0013490b 	andseq	r4, r3, fp, lsl #18
    125c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1260:	00001349 	andeq	r1, r0, r9, asr #6
    1264:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    1268:	07000013 	smladeq	r0, r3, r0, r0
    126c:	0b0b0104 	bleq	2c1684 <__Stack_Size+0x2c1284>
    1270:	0b3a1349 	bleq	e85f9c <__Stack_Size+0xe85b9c>
    1274:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1278:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    127c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1280:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1284:	08030028 	stmdaeq	r3, {r3, r5}
    1288:	00000b1c 	andeq	r0, r0, ip, lsl fp
    128c:	0b01130a 	bleq	45ebc <__Stack_Size+0x45abc>
    1290:	3b0b3a05 	blcc	2cfaac <__Stack_Size+0x2cf6ac>
    1294:	00130105 	andseq	r0, r3, r5, lsl #2
    1298:	000d0b00 	andeq	r0, sp, r0, lsl #22
    129c:	0b3a0e03 	bleq	e84ab0 <__Stack_Size+0xe846b0>
    12a0:	1349053b 	movtne	r0, #38203	; 0x953b
    12a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    12a8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    12ac:	3b0b3a0e 	blcc	2cfaec <__Stack_Size+0x2cf6ec>
    12b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    12b4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    12b8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    12bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12c0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    12c4:	010e0000 	mrseq	r0, (UNDEF: 14)
    12c8:	01134901 	tsteq	r3, r1, lsl #18
    12cc:	0f000013 	svceq	0x00000013
    12d0:	13490021 	movtne	r0, #36897	; 0x9021
    12d4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    12d8:	03001610 	movweq	r1, #1552	; 0x610
    12dc:	3b0b3a0e 	blcc	2cfb1c <__Stack_Size+0x2cf71c>
    12e0:	00134905 	andseq	r4, r3, r5, lsl #18
    12e4:	01131100 	tsteq	r3, r0, lsl #2
    12e8:	0b3a0b0b 	bleq	e83f1c <__Stack_Size+0xe83b1c>
    12ec:	1301053b 	movwne	r0, #5435	; 0x153b
    12f0:	0d120000 	ldceq	0, cr0, [r2, #-0]
    12f4:	3a080300 	bcc	201efc <__Stack_Size+0x201afc>
    12f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12fc:	000b3813 	andeq	r3, fp, r3, lsl r8
    1300:	01131300 	tsteq	r3, r0, lsl #6
    1304:	0b3a0b0b 	bleq	e83f38 <__Stack_Size+0xe83b38>
    1308:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    130c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1310:	3a0e0300 	bcc	381f18 <__Stack_Size+0x381b18>
    1314:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1318:	000b3813 	andeq	r3, fp, r3, lsl r8
    131c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    1320:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1324:	0b3b0b3a 	bleq	ec4014 <__Stack_Size+0xec3c14>
    1328:	01111927 	tsteq	r1, r7, lsr #18
    132c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1330:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1334:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1338:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    133c:	0b3b0b3a 	bleq	ec402c <__Stack_Size+0xec3c2c>
    1340:	17021349 	strne	r1, [r2, -r9, asr #6]
    1344:	05170000 	ldreq	r0, [r7, #-0]
    1348:	3a0e0300 	bcc	381f50 <__Stack_Size+0x381b50>
    134c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1350:	00170213 	andseq	r0, r7, r3, lsl r2
    1354:	00051800 	andeq	r1, r5, r0, lsl #16
    1358:	0b3a0e03 	bleq	e84b6c <__Stack_Size+0xe8476c>
    135c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1360:	00001802 	andeq	r1, r0, r2, lsl #16
    1364:	0b000f19 	bleq	4fd0 <__Stack_Size+0x4bd0>
    1368:	0013490b 	andseq	r4, r3, fp, lsl #18
    136c:	82891a00 	addhi	r1, r9, #0, 20
    1370:	01110001 	tsteq	r1, r1
    1374:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1378:	1b000013 	blne	13cc <__Stack_Size+0xfcc>
    137c:	01018289 	smlabbeq	r1, r9, r2, r8
    1380:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1384:	00133119 	andseq	r3, r3, r9, lsl r1
    1388:	828a1c00 	addhi	r1, sl, #0, 24
    138c:	18020001 	stmdane	r2, {r0}
    1390:	00184291 	mulseq	r8, r1, r2
    1394:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
    1398:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    139c:	0b3b0b3a 	bleq	ec408c <__Stack_Size+0xec3c8c>
    13a0:	13491927 	movtne	r1, #39207	; 0x9927
    13a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    13a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    13ac:	00130119 	andseq	r0, r3, r9, lsl r1
    13b0:	002e1e00 	eoreq	r1, lr, r0, lsl #28
    13b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13bc:	13491927 	movtne	r1, #39207	; 0x9927
    13c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    13c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    13c8:	1f000019 	svcne	0x00000019
    13cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13d0:	0b3a0e03 	bleq	e84be4 <__Stack_Size+0xe847e4>
    13d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    13d8:	01111349 	tsteq	r1, r9, asr #6
    13dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13e0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    13e4:	20000013 	andcs	r0, r0, r3, lsl r0
    13e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13f0:	17021349 	strne	r1, [r2, -r9, asr #6]
    13f4:	34210000 	strtcc	r0, [r1], #-0
    13f8:	3a0e0300 	bcc	382000 <__Stack_Size+0x381c00>
    13fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1400:	00170213 	andseq	r0, r7, r3, lsl r2
    1404:	00342200 	eorseq	r2, r4, r0, lsl #4
    1408:	0b3a0803 	bleq	e8341c <__Stack_Size+0xe8301c>
    140c:	1349053b 	movtne	r0, #38203	; 0x953b
    1410:	00001702 	andeq	r1, r0, r2, lsl #14
    1414:	3f012e23 	svccc	0x00012e23
    1418:	3a0e0319 	bcc	382084 <__Stack_Size+0x381c84>
    141c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1420:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1424:	97184006 	ldrls	r4, [r8, -r6]
    1428:	13011942 	movwne	r1, #6466	; 0x1942
    142c:	05240000 	streq	r0, [r4, #-0]!
    1430:	3a0e0300 	bcc	382038 <__Stack_Size+0x381c38>
    1434:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	00180213 	andseq	r0, r8, r3, lsl r2
    143c:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
    1440:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1444:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1448:	01871927 	orreq	r1, r7, r7, lsr #18
    144c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1450:	97184006 	ldrls	r4, [r8, -r6]
    1454:	13011942 	movwne	r1, #6466	; 0x1942
    1458:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
    145c:	11000182 	smlabbne	r0, r2, r1, r0
    1460:	00133101 	andseq	r3, r3, r1, lsl #2
    1464:	002e2700 	eoreq	r2, lr, r0, lsl #14
    1468:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    146c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1470:	01111927 	tsteq	r1, r7, lsr #18
    1474:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1478:	00194297 	mulseq	r9, r7, r2
    147c:	002e2800 	eoreq	r2, lr, r0, lsl #16
    1480:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1484:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    1488:	0b3b0b3a 	bleq	ec4178 <__Stack_Size+0xec3d78>
    148c:	01000000 	mrseq	r0, (UNDEF: 0)
    1490:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1494:	0e030b13 	vmoveq.32	d3[0], r0
    1498:	17550e1b 	smmlane	r5, fp, lr, r0
    149c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    14a0:	24020000 	strcs	r0, [r2], #-0
    14a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    14a8:	000e030b 	andeq	r0, lr, fp, lsl #6
    14ac:	00160300 	andseq	r0, r6, r0, lsl #6
    14b0:	0b3a0803 	bleq	e834c4 <__Stack_Size+0xe830c4>
    14b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14b8:	26040000 	strcs	r0, [r4], -r0
    14bc:	00134900 	andseq	r4, r3, r0, lsl #18
    14c0:	00160500 	andseq	r0, r6, r0, lsl #10
    14c4:	0b3a0e03 	bleq	e84cd8 <__Stack_Size+0xe848d8>
    14c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14cc:	35060000 	strcc	r0, [r6, #-0]
    14d0:	00134900 	andseq	r4, r3, r0, lsl #18
    14d4:	01040700 	tsteq	r4, r0, lsl #14
    14d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    14dc:	0b3b0b3a 	bleq	ec41cc <__Stack_Size+0xec3dcc>
    14e0:	00001301 	andeq	r1, r0, r1, lsl #6
    14e4:	03002808 	movweq	r2, #2056	; 0x808
    14e8:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    14ec:	00280900 	eoreq	r0, r8, r0, lsl #18
    14f0:	0b1c0803 	bleq	703504 <__Stack_Size+0x703104>
    14f4:	130a0000 	movwne	r0, #40960	; 0xa000
    14f8:	3a0b0b01 	bcc	2c4104 <__Stack_Size+0x2c3d04>
    14fc:	01053b0b 	tsteq	r5, fp, lsl #22
    1500:	0b000013 	bleq	1554 <__Stack_Size+0x1154>
    1504:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1508:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    150c:	0b381349 	bleq	e06238 <__Stack_Size+0xe05e38>
    1510:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1514:	3a0e0300 	bcc	38211c <__Stack_Size+0x381d1c>
    1518:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    151c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1520:	00160d00 	andseq	r0, r6, r0, lsl #26
    1524:	0b3a0e03 	bleq	e84d38 <__Stack_Size+0xe84938>
    1528:	1349053b 	movtne	r0, #38203	; 0x953b
    152c:	130e0000 	movwne	r0, #57344	; 0xe000
    1530:	3a0b0b01 	bcc	2c413c <__Stack_Size+0x2c3d3c>
    1534:	010b3b0b 	tsteq	fp, fp, lsl #22
    1538:	0f000013 	svceq	0x00000013
    153c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1540:	0b3b0b3a 	bleq	ec4230 <__Stack_Size+0xec3e30>
    1544:	0b381349 	bleq	e06270 <__Stack_Size+0xe05e70>
    1548:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    154c:	03193f00 	tsteq	r9, #0, 30
    1550:	3b0b3a0e 	blcc	2cfd90 <__Stack_Size+0x2cf990>
    1554:	1119270b 	tstne	r9, fp, lsl #14
    1558:	40061201 	andmi	r1, r6, r1, lsl #4
    155c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1560:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1564:	03193f01 	tsteq	r9, #1, 30
    1568:	3b0b3a0e 	blcc	2cfda8 <__Stack_Size+0x2cf9a8>
    156c:	1119270b 	tstne	r9, fp, lsl #14
    1570:	40061201 	andmi	r1, r6, r1, lsl #4
    1574:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1578:	00001301 	andeq	r1, r0, r1, lsl #6
    157c:	03000512 	movweq	r0, #1298	; 0x512
    1580:	3b0b3a0e 	blcc	2cfdc0 <__Stack_Size+0x2cf9c0>
    1584:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1588:	13000018 	movwne	r0, #24
    158c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1590:	0b3b0b3a 	bleq	ec4280 <__Stack_Size+0xec3e80>
    1594:	17021349 	strne	r1, [r2, -r9, asr #6]
    1598:	34140000 	ldrcc	r0, [r4], #-0
    159c:	3a0e0300 	bcc	3821a4 <__Stack_Size+0x381da4>
    15a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15a4:	00170213 	andseq	r0, r7, r3, lsl r2
    15a8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    15ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    15b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15b4:	01111927 	tsteq	r1, r7, lsr #18
    15b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15c0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    15c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    15c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15d0:	05170000 	ldreq	r0, [r7, #-0]
    15d4:	3a0e0300 	bcc	3821dc <__Stack_Size+0x381ddc>
    15d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15dc:	00170213 	andseq	r0, r7, r3, lsl r2
    15e0:	00341800 	eorseq	r1, r4, r0, lsl #16
    15e4:	0b3a0e03 	bleq	e84df8 <__Stack_Size+0xe849f8>
    15e8:	1349053b 	movtne	r0, #38203	; 0x953b
    15ec:	00001702 	andeq	r1, r0, r2, lsl #14
    15f0:	3f002e19 	svccc	0x00002e19
    15f4:	3a0e0319 	bcc	382260 <__Stack_Size+0x381e60>
    15f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    15fc:	11134919 	tstne	r3, r9, lsl r9
    1600:	40061201 	andmi	r1, r6, r1, lsl #4
    1604:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1608:	341a0000 	ldrcc	r0, [sl], #-0
    160c:	3a080300 	bcc	202214 <__Stack_Size+0x201e14>
    1610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1614:	00170213 	andseq	r0, r7, r3, lsl r2
    1618:	000f1b00 	andeq	r1, pc, r0, lsl #22
    161c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1620:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    1624:	03193f01 	tsteq	r9, #1, 30
    1628:	3b0b3a0e 	blcc	2cfe68 <__Stack_Size+0x2cfa68>
    162c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1630:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1634:	97184006 	ldrls	r4, [r8, -r6]
    1638:	13011942 	movwne	r1, #6466	; 0x1942
    163c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    1640:	03193f01 	tsteq	r9, #1, 30
    1644:	3b0b3a0e 	blcc	2cfe84 <__Stack_Size+0x2cfa84>
    1648:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    164c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1650:	97184006 	ldrls	r4, [r8, -r6]
    1654:	13011942 	movwne	r1, #6466	; 0x1942
    1658:	341e0000 	ldrcc	r0, [lr], #-0
    165c:	3a0e0300 	bcc	382264 <__Stack_Size+0x381e64>
    1660:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1664:	00180213 	andseq	r0, r8, r3, lsl r2
    1668:	82891f00 	addhi	r1, r9, #0, 30
    166c:	01110101 	tsteq	r1, r1, lsl #2
    1670:	13011331 	movwne	r1, #4913	; 0x1331
    1674:	8a200000 	bhi	80167c <__Stack_Size+0x80127c>
    1678:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    167c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1680:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    1684:	11010182 	smlabbne	r1, r2, r1, r0
    1688:	00133101 	andseq	r3, r3, r1, lsl #2
    168c:	002e2200 	eoreq	r2, lr, r0, lsl #4
    1690:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1694:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1698:	01111927 	tsteq	r1, r7, lsr #18
    169c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    16a0:	00194297 	mulseq	r9, r7, r2
    16a4:	01012300 	mrseq	r2, SP_irq
    16a8:	13011349 	movwne	r1, #4937	; 0x1349
    16ac:	21240000 			; <UNDEFINED> instruction: 0x21240000
    16b0:	2f134900 	svccs	0x00134900
    16b4:	0000000b 	andeq	r0, r0, fp
    16b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    16bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    16c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    16c4:	10011117 	andne	r1, r1, r7, lsl r1
    16c8:	02000017 	andeq	r0, r0, #23
    16cc:	0b0b0024 	bleq	2c1764 <__Stack_Size+0x2c1364>
    16d0:	0e030b3e 	vmoveq.16	d3[0], r0
    16d4:	16030000 	strne	r0, [r3], -r0
    16d8:	3a080300 	bcc	2022e0 <__Stack_Size+0x201ee0>
    16dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16e0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    16e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    16e8:	0b3b0b3a 	bleq	ec43d8 <__Stack_Size+0xec3fd8>
    16ec:	00001349 	andeq	r1, r0, r9, asr #6
    16f0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    16f4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    16f8:	0b0b0104 	bleq	2c1b10 <__Stack_Size+0x2c1710>
    16fc:	0b3a1349 	bleq	e86428 <__Stack_Size+0xe86028>
    1700:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1704:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    1708:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    170c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1710:	08030028 	stmdaeq	r3, {r3, r5}
    1714:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1718:	0b011309 	bleq	46344 <__Stack_Size+0x45f44>
    171c:	3b0b3a0b 	blcc	2cff50 <__Stack_Size+0x2cfb50>
    1720:	00130105 	andseq	r0, r3, r5, lsl #2
    1724:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1728:	0b3a0803 	bleq	e8373c <__Stack_Size+0xe8333c>
    172c:	1349053b 	movtne	r0, #38203	; 0x953b
    1730:	00000b38 	andeq	r0, r0, r8, lsr fp
    1734:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1738:	3b0b3a0e 	blcc	2cff78 <__Stack_Size+0x2cfb78>
    173c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1740:	0c00000b 	stceq	0, cr0, [r0], {11}
    1744:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1748:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    174c:	00001349 	andeq	r1, r0, r9, asr #6
    1750:	0b01130d 	bleq	4638c <__Stack_Size+0x45f8c>
    1754:	3b0b3a0b 	blcc	2cff88 <__Stack_Size+0x2cfb88>
    1758:	0013010b 	andseq	r0, r3, fp, lsl #2
    175c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1760:	0b3a0e03 	bleq	e84f74 <__Stack_Size+0xe84b74>
    1764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1768:	00000b38 	andeq	r0, r0, r8, lsr fp
    176c:	3f012e0f 	svccc	0x00012e0f
    1770:	3a0e0319 	bcc	3823dc <__Stack_Size+0x381fdc>
    1774:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1778:	010b2019 	tsteq	fp, r9, lsl r0
    177c:	10000013 	andne	r0, r0, r3, lsl r0
    1780:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1784:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1788:	00001349 	andeq	r1, r0, r9, asr #6
    178c:	03003411 	movweq	r3, #1041	; 0x411
    1790:	3b0b3a0e 	blcc	2cffd0 <__Stack_Size+0x2cfbd0>
    1794:	00134905 	andseq	r4, r3, r5, lsl #18
    1798:	000f1200 	andeq	r1, pc, r0, lsl #4
    179c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    17a0:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    17a4:	3a0e0301 	bcc	3823b0 <__Stack_Size+0x381fb0>
    17a8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    17ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    17b0:	97184006 	ldrls	r4, [r8, -r6]
    17b4:	13011942 	movwne	r1, #6466	; 0x1942
    17b8:	05140000 	ldreq	r0, [r4, #-0]
    17bc:	3a0e0300 	bcc	3823c4 <__Stack_Size+0x381fc4>
    17c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c4:	00180213 	andseq	r0, r8, r3, lsl r2
    17c8:	00051500 	andeq	r1, r5, r0, lsl #10
    17cc:	0b3a0e03 	bleq	e84fe0 <__Stack_Size+0xe84be0>
    17d0:	1349053b 	movtne	r0, #38203	; 0x953b
    17d4:	00001702 	andeq	r1, r0, r2, lsl #14
    17d8:	03003416 	movweq	r3, #1046	; 0x416
    17dc:	3b0b3a0e 	blcc	2d001c <__Stack_Size+0x2cfc1c>
    17e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    17e4:	17000017 	smladne	r0, r7, r0, r0
    17e8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    17ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17f0:	17021349 	strne	r1, [r2, -r9, asr #6]
    17f4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    17f8:	03193f01 	tsteq	r9, #1, 30
    17fc:	3b0b3a0e 	blcc	2d003c <__Stack_Size+0x2cfc3c>
    1800:	1119270b 	tstne	r9, fp, lsl #14
    1804:	40061201 	andmi	r1, r6, r1, lsl #4
    1808:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    180c:	00001301 	andeq	r1, r0, r1, lsl #6
    1810:	03000519 	movweq	r0, #1305	; 0x519
    1814:	3b0b3a0e 	blcc	2d0054 <__Stack_Size+0x2cfc54>
    1818:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    181c:	1a000017 	bne	1880 <__Stack_Size+0x1480>
    1820:	01018289 	smlabbeq	r1, r9, r2, r8
    1824:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1828:	00001301 	andeq	r1, r0, r1, lsl #6
    182c:	01828a1b 	orreq	r8, r2, fp, lsl sl
    1830:	91180200 	tstls	r8, r0, lsl #4
    1834:	00001842 	andeq	r1, r0, r2, asr #16
    1838:	0182891c 	orreq	r8, r2, ip, lsl r9
    183c:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    1840:	13311942 	teqne	r1, #1081344	; 0x108000
    1844:	051d0000 	ldreq	r0, [sp, #-0]
    1848:	3a0e0300 	bcc	382450 <__Stack_Size+0x382050>
    184c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1850:	00180213 	andseq	r0, r8, r3, lsl r2
    1854:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1858:	0b3a0e03 	bleq	e8506c <__Stack_Size+0xe84c6c>
    185c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1860:	00001702 	andeq	r1, r0, r2, lsl #14
    1864:	3f012e1f 	svccc	0x00012e1f
    1868:	3a0e0319 	bcc	3824d4 <__Stack_Size+0x3820d4>
    186c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1870:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1874:	97184006 	ldrls	r4, [r8, -r6]
    1878:	13011942 	movwne	r1, #6466	; 0x1942
    187c:	1d200000 	stcne	0, cr0, [r0, #-0]
    1880:	11133101 	tstne	r3, r1, lsl #2
    1884:	58061201 	stmdapl	r6, {r0, r9, ip}
    1888:	0005590b 	andeq	r5, r5, fp, lsl #18
    188c:	00052100 	andeq	r2, r5, r0, lsl #2
    1890:	17021331 	smladxne	r2, r1, r3, r1
    1894:	0b220000 	bleq	88189c <__Stack_Size+0x88149c>
    1898:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    189c:	23000006 	movwcs	r0, #6
    18a0:	13310034 	teqne	r1, #52	; 0x34
    18a4:	00001702 	andeq	r1, r0, r2, lsl #14
    18a8:	31011d24 	tstcc	r1, r4, lsr #26
    18ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    18b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    18b4:	00130105 	andseq	r0, r3, r5, lsl #2
    18b8:	82892500 	addhi	r2, r9, #0, 10
    18bc:	01110001 	tsteq	r1, r1
    18c0:	00001331 	andeq	r1, r0, r1, lsr r3
    18c4:	01828926 	orreq	r8, r2, r6, lsr #18
    18c8:	31011101 	tstcc	r1, r1, lsl #2
    18cc:	27000013 	smladcs	r0, r3, r0, r0
    18d0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    18d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    18d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    18dc:	00130119 	andseq	r0, r3, r9, lsl r1
    18e0:	00052800 	andeq	r2, r5, r0, lsl #16
    18e4:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    18e8:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    18ec:	3a0e0301 	bcc	3824f8 <__Stack_Size+0x3820f8>
    18f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    18f4:	010b2019 	tsteq	fp, r9, lsl r0
    18f8:	2a000013 	bcs	194c <__Stack_Size+0x154c>
    18fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1900:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1904:	00001349 	andeq	r1, r0, r9, asr #6
    1908:	31011d2b 	tstcc	r1, fp, lsr #26
    190c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1910:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1914:	00130105 	andseq	r0, r3, r5, lsl #2
    1918:	010b2c00 	tsteq	fp, r0, lsl #24
    191c:	00001755 	andeq	r1, r0, r5, asr r7
    1920:	0182892d 	orreq	r8, r2, sp, lsr #18
    1924:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    1928:	13311942 	teqne	r1, #1081344	; 0x108000
    192c:	00001301 	andeq	r1, r0, r1, lsl #6
    1930:	0182892e 	orreq	r8, r2, lr, lsr #18
    1934:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    1938:	13311942 	teqne	r1, #1081344	; 0x108000
    193c:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
    1940:	03193f01 	tsteq	r9, #1, 30
    1944:	3b0b3a0e 	blcc	2d0184 <__Stack_Size+0x2cfd84>
    1948:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    194c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1950:	97184006 	ldrls	r4, [r8, -r6]
    1954:	13011942 	movwne	r1, #6466	; 0x1942
    1958:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
    195c:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    1960:	030e6e19 	movweq	r6, #60953	; 0xee19
    1964:	3b0b3a0e 	blcc	2d01a4 <__Stack_Size+0x2cfda4>
    1968:	00000005 	andeq	r0, r0, r5
    196c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1970:	030b130e 	movweq	r1, #45838	; 0xb30e
    1974:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1978:	10011117 	andne	r1, r1, r7, lsl r1
    197c:	02000017 	andeq	r0, r0, #23
    1980:	0b0b0024 	bleq	2c1a18 <__Stack_Size+0x2c1618>
    1984:	0e030b3e 	vmoveq.16	d3[0], r0
    1988:	16030000 	strne	r0, [r3], -r0
    198c:	3a080300 	bcc	202594 <__Stack_Size+0x202194>
    1990:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1994:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1998:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    199c:	0b3b0b3a 	bleq	ec468c <__Stack_Size+0xec428c>
    19a0:	00001349 	andeq	r1, r0, r9, asr #6
    19a4:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    19a8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19ac:	13490026 	movtne	r0, #36902	; 0x9026
    19b0:	04070000 	streq	r0, [r7], #-0
    19b4:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    19b8:	3b0b3a13 	blcc	2d020c <__Stack_Size+0x2cfe0c>
    19bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    19c0:	00280800 	eoreq	r0, r8, r0, lsl #16
    19c4:	0b1c0e03 	bleq	7051d8 <__Stack_Size+0x704dd8>
    19c8:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    19cc:	1c080300 	stcne	3, cr0, [r8], {-0}
    19d0:	0a00000b 	beq	1a04 <__Stack_Size+0x1604>
    19d4:	0b0b0113 	bleq	2c1e28 <__Stack_Size+0x2c1a28>
    19d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    19dc:	00001301 	andeq	r1, r0, r1, lsl #6
    19e0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    19e4:	3b0b3a0e 	blcc	2d0224 <__Stack_Size+0x2cfe24>
    19e8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    19ec:	0c00000b 	stceq	0, cr0, [r0], {11}
    19f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    19f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    19f8:	0b381349 	bleq	e06724 <__Stack_Size+0xe06324>
    19fc:	160d0000 	strne	r0, [sp], -r0
    1a00:	3a0e0300 	bcc	382608 <__Stack_Size+0x382208>
    1a04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a08:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1a0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a10:	0b3a0e03 	bleq	e85224 <__Stack_Size+0xe84e24>
    1a14:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1a18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a1c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1a20:	00130119 	andseq	r0, r3, r9, lsl r1
    1a24:	00050f00 	andeq	r0, r5, r0, lsl #30
    1a28:	0b3a0e03 	bleq	e8523c <__Stack_Size+0xe84e3c>
    1a2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a30:	00001802 	andeq	r1, r0, r2, lsl #16
    1a34:	03000510 	movweq	r0, #1296	; 0x510
    1a38:	3b0b3a0e 	blcc	2d0278 <__Stack_Size+0x2cfe78>
    1a3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a40:	11000017 	tstne	r0, r7, lsl r0
    1a44:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1a48:	0b3a0e03 	bleq	e8525c <__Stack_Size+0xe84e5c>
    1a4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1a50:	01111349 	tsteq	r1, r9, asr #6
    1a54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a58:	00194297 	mulseq	r9, r7, r2
    1a5c:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    1a60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a64:	0b3b0b3a 	bleq	ec4754 <__Stack_Size+0xec4354>
    1a68:	13491927 	movtne	r1, #39207	; 0x9927
    1a6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1a74:	13000019 	movwne	r0, #25
    1a78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a7c:	0b3b0b3a 	bleq	ec476c <__Stack_Size+0xec436c>
    1a80:	17021349 	strne	r1, [r2, -r9, asr #6]
    1a84:	34140000 	ldrcc	r0, [r4], #-0
    1a88:	3a080300 	bcc	202690 <__Stack_Size+0x202290>
    1a8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a90:	00170213 	andseq	r0, r7, r3, lsl r2
    1a94:	11010000 	mrsne	r0, (UNDEF: 1)
    1a98:	130e2501 	movwne	r2, #58625	; 0xe501
    1a9c:	1b0e030b 	blne	3826d0 <__Stack_Size+0x3822d0>
    1aa0:	1117550e 	tstne	r7, lr, lsl #10
    1aa4:	00171001 	andseq	r1, r7, r1
    1aa8:	00240200 	eoreq	r0, r4, r0, lsl #4
    1aac:	0b3e0b0b 	bleq	f846e0 <__Stack_Size+0xf842e0>
    1ab0:	00000e03 	andeq	r0, r0, r3, lsl #28
    1ab4:	03001603 	movweq	r1, #1539	; 0x603
    1ab8:	3b0b3a08 	blcc	2d02e0 <__Stack_Size+0x2cfee0>
    1abc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ac0:	00160400 	andseq	r0, r6, r0, lsl #8
    1ac4:	0b3a0e03 	bleq	e852d8 <__Stack_Size+0xe84ed8>
    1ac8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1acc:	35050000 	strcc	r0, [r5, #-0]
    1ad0:	00134900 	andseq	r4, r3, r0, lsl #18
    1ad4:	01040600 	tsteq	r4, r0, lsl #12
    1ad8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1adc:	0b3b0b3a 	bleq	ec47cc <__Stack_Size+0xec43cc>
    1ae0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ae4:	03002807 	movweq	r2, #2055	; 0x807
    1ae8:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1aec:	00280800 	eoreq	r0, r8, r0, lsl #16
    1af0:	0b1c0803 	bleq	703b04 <__Stack_Size+0x703704>
    1af4:	13090000 	movwne	r0, #36864	; 0x9000
    1af8:	3a0b0b01 	bcc	2c4704 <__Stack_Size+0x2c4304>
    1afc:	01053b0b 	tsteq	r5, fp, lsl #22
    1b00:	0a000013 	beq	1b54 <__Stack_Size+0x1754>
    1b04:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b0c:	0b381349 	bleq	e06838 <__Stack_Size+0xe06438>
    1b10:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1b14:	3a0e0300 	bcc	38271c <__Stack_Size+0x38231c>
    1b18:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b1c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1b20:	00160c00 	andseq	r0, r6, r0, lsl #24
    1b24:	0b3a0e03 	bleq	e85338 <__Stack_Size+0xe84f38>
    1b28:	1349053b 	movtne	r0, #38203	; 0x953b
    1b2c:	130d0000 	movwne	r0, #53248	; 0xd000
    1b30:	3a0b0b01 	bcc	2c473c <__Stack_Size+0x2c433c>
    1b34:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b38:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1b3c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b40:	0b3b0b3a 	bleq	ec4830 <__Stack_Size+0xec4430>
    1b44:	0b381349 	bleq	e06870 <__Stack_Size+0xe06470>
    1b48:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1b4c:	03193f01 	tsteq	r9, #1, 30
    1b50:	3b0b3a0e 	blcc	2d0390 <__Stack_Size+0x2cff90>
    1b54:	1119270b 	tstne	r9, fp, lsl #14
    1b58:	40061201 	andmi	r1, r6, r1, lsl #4
    1b5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1b60:	00001301 	andeq	r1, r0, r1, lsl #6
    1b64:	03000510 	movweq	r0, #1296	; 0x510
    1b68:	3b0b3a0e 	blcc	2d03a8 <__Stack_Size+0x2cffa8>
    1b6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b70:	11000017 	tstne	r0, r7, lsl r0
    1b74:	01018289 	smlabbeq	r1, r9, r2, r8
    1b78:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b80:	01828a12 	orreq	r8, r2, r2, lsl sl
    1b84:	91180200 	tstls	r8, r0, lsl #4
    1b88:	00001842 	andeq	r1, r0, r2, asr #16
    1b8c:	01828913 	orreq	r8, r2, r3, lsl r9
    1b90:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    1b94:	13311942 	teqne	r1, #1081344	; 0x108000
    1b98:	00001301 	andeq	r1, r0, r1, lsl #6
    1b9c:	01828914 	orreq	r8, r2, r4, lsl r9
    1ba0:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    1ba4:	13311942 	teqne	r1, #1081344	; 0x108000
    1ba8:	0f150000 	svceq	0x00150000
    1bac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1bb0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1bb4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bb8:	0b3b0b3a 	bleq	ec48a8 <__Stack_Size+0xec44a8>
    1bbc:	17021349 	strne	r1, [r2, -r9, asr #6]
    1bc0:	34170000 	ldrcc	r0, [r7], #-0
    1bc4:	3a0e0300 	bcc	3827cc <__Stack_Size+0x3823cc>
    1bc8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bcc:	00180213 	andseq	r0, r8, r3, lsl r2
    1bd0:	82891800 	addhi	r1, r9, #0, 16
    1bd4:	01110101 	tsteq	r1, r1, lsl #2
    1bd8:	00001331 	andeq	r1, r0, r1, lsr r3
    1bdc:	03000519 	movweq	r0, #1305	; 0x519
    1be0:	3b0b3a0e 	blcc	2d0420 <__Stack_Size+0x2d0020>
    1be4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1be8:	1a000018 	bne	1c50 <__Stack_Size+0x1850>
    1bec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1bf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bf4:	17021349 	strne	r1, [r2, -r9, asr #6]
    1bf8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1bfc:	03193f01 	tsteq	r9, #1, 30
    1c00:	3b0b3a0e 	blcc	2d0440 <__Stack_Size+0x2d0040>
    1c04:	11192705 	tstne	r9, r5, lsl #14
    1c08:	40061201 	andmi	r1, r6, r1, lsl #4
    1c0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1c10:	00001301 	andeq	r1, r0, r1, lsl #6
    1c14:	0300051c 	movweq	r0, #1308	; 0x51c
    1c18:	3b0b3a0e 	blcc	2d0458 <__Stack_Size+0x2d0058>
    1c1c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1c20:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    1c24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1c28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c2c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1c30:	341e0000 	ldrcc	r0, [lr], #-0
    1c34:	3a0e0300 	bcc	38283c <__Stack_Size+0x38243c>
    1c38:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c3c:	00180213 	andseq	r0, r8, r3, lsl r2
    1c40:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    1c44:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c4c:	13491927 	movtne	r1, #39207	; 0x9927
    1c50:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c54:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c58:	00130119 	andseq	r0, r3, r9, lsl r1
    1c5c:	002e2000 	eoreq	r2, lr, r0
    1c60:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1c64:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    1c68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c70:	06100011 			; <UNDEFINED> instruction: 0x06100011
    1c74:	01120111 	tsteq	r2, r1, lsl r1
    1c78:	081b0803 	ldmdaeq	fp, {r0, r1, fp}
    1c7c:	05130825 	ldreq	r0, [r3, #-2085]	; 0xfffff7db
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
    1c84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1c88:	0e030b13 	vmoveq.32	d3[0], r0
    1c8c:	17550e1b 	smmlane	r5, fp, lr, r0
    1c90:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1c94:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    1c98:	03193f01 	tsteq	r9, #1, 30
    1c9c:	3b0b3a0e 	blcc	2d04dc <__Stack_Size+0x2d00dc>
    1ca0:	1119270b 	tstne	r9, fp, lsl #14
    1ca4:	40061201 	andmi	r1, r6, r1, lsl #4
    1ca8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1cac:	00001301 	andeq	r1, r0, r1, lsl #6
    1cb0:	03003403 	movweq	r3, #1027	; 0x403
    1cb4:	3b0b3a0e 	blcc	2d04f4 <__Stack_Size+0x2d00f4>
    1cb8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1cbc:	00340400 	eorseq	r0, r4, r0, lsl #8
    1cc0:	0b3a0e03 	bleq	e854d4 <__Stack_Size+0xe850d4>
    1cc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1cc8:	00001702 	andeq	r1, r0, r2, lsl #14
    1ccc:	01828905 	orreq	r8, r2, r5, lsl #18
    1cd0:	31011100 	mrscc	r1, (UNDEF: 17)
    1cd4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1cd8:	0b0b000f 	bleq	2c1d1c <__Stack_Size+0x2c191c>
    1cdc:	00001349 	andeq	r1, r0, r9, asr #6
    1ce0:	0b002407 	bleq	ad04 <__Stack_Size+0xa904>
    1ce4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ce8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1cec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cf0:	0b3b0b3a 	bleq	ec49e0 <__Stack_Size+0xec45e0>
    1cf4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1cf8:	0000193c 	andeq	r1, r0, ip, lsr r9
    1cfc:	03003409 	movweq	r3, #1033	; 0x409
    1d00:	3b0b3a0e 	blcc	2d0540 <__Stack_Size+0x2d0140>
    1d04:	3c193f0b 	ldccc	15, cr3, [r9], {11}
    1d08:	0a000019 	beq	1d74 <__Stack_Size+0x1974>
    1d0c:	13490101 	movtne	r0, #37121	; 0x9101
    1d10:	00001301 	andeq	r1, r0, r1, lsl #6
    1d14:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    1d18:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1d1c:	00150c00 	andseq	r0, r5, r0, lsl #24
    1d20:	00001927 	andeq	r1, r0, r7, lsr #18
    1d24:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    1d28:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1d2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d30:	0b3b0b3a 	bleq	ec4a20 <__Stack_Size+0xec4620>
    1d34:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1d38:	00001802 	andeq	r1, r0, r2, lsl #16
    1d3c:	3f002e0f 	svccc	0x00002e0f
    1d40:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    1d44:	3a0e030e 	bcc	382984 <__Stack_Size+0x382584>
    1d48:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    1d4c:	11010000 	mrsne	r0, (UNDEF: 1)
    1d50:	130e2501 	movwne	r2, #58625	; 0xe501
    1d54:	1b0e030b 	blne	382988 <__Stack_Size+0x382588>
    1d58:	1117550e 	tstne	r7, lr, lsl #10
    1d5c:	00171001 	andseq	r1, r7, r1
    1d60:	00240200 	eoreq	r0, r4, r0, lsl #4
    1d64:	0b3e0b0b 	bleq	f84998 <__Stack_Size+0xf84598>
    1d68:	00000e03 	andeq	r0, r0, r3, lsl #28
    1d6c:	03001603 	movweq	r1, #1539	; 0x603
    1d70:	3b0b3a08 	blcc	2d0598 <__Stack_Size+0x2d0198>
    1d74:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d78:	000f0400 	andeq	r0, pc, r0, lsl #8
    1d7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d80:	04050000 	streq	r0, [r5], #-0
    1d84:	0b0e0301 	bleq	382990 <__Stack_Size+0x382590>
    1d88:	3a13490b 	bcc	4d41bc <__Stack_Size+0x4d3dbc>
    1d8c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1d90:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1d94:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1d98:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1d9c:	03001607 	movweq	r1, #1543	; 0x607
    1da0:	3b0b3a0e 	blcc	2d05e0 <__Stack_Size+0x2d01e0>
    1da4:	0013490b 	andseq	r4, r3, fp, lsl #18
    1da8:	01130800 	tsteq	r3, r0, lsl #16
    1dac:	0b0b0e03 	bleq	2c55c0 <__Stack_Size+0x2c51c0>
    1db0:	0b3b0b3a 	bleq	ec4aa0 <__Stack_Size+0xec46a0>
    1db4:	00001301 	andeq	r1, r0, r1, lsl #6
    1db8:	03000d09 	movweq	r0, #3337	; 0xd09
    1dbc:	3b0b3a0e 	blcc	2d05fc <__Stack_Size+0x2d01fc>
    1dc0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1dc4:	0a00000b 	beq	1df8 <__Stack_Size+0x19f8>
    1dc8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1dcc:	13011349 	movwne	r1, #4937	; 0x1349
    1dd0:	050b0000 	streq	r0, [fp, #-0]
    1dd4:	00134900 	andseq	r4, r3, r0, lsl #18
    1dd8:	01130c00 	tsteq	r3, r0, lsl #24
    1ddc:	0b0b0803 	bleq	2c3df0 <__Stack_Size+0x2c39f0>
    1de0:	0b3b0b3a 	bleq	ec4ad0 <__Stack_Size+0xec46d0>
    1de4:	00001301 	andeq	r1, r0, r1, lsl #6
    1de8:	03000d0d 	movweq	r0, #3341	; 0xd0d
    1dec:	3b0b3a08 	blcc	2d0614 <__Stack_Size+0x2d0214>
    1df0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1df4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1df8:	0b0b0117 	bleq	2c225c <__Stack_Size+0x2c1e5c>
    1dfc:	0b3b0b3a 	bleq	ec4aec <__Stack_Size+0xec46ec>
    1e00:	00001301 	andeq	r1, r0, r1, lsl #6
    1e04:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1e08:	3b0b3a08 	blcc	2d0630 <__Stack_Size+0x2d0230>
    1e0c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e10:	00151000 	andseq	r1, r5, r0
    1e14:	00001927 	andeq	r1, r0, r7, lsr #18
    1e18:	0b000f11 	bleq	5a64 <__Stack_Size+0x5664>
    1e1c:	1200000b 	andne	r0, r0, #11
    1e20:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1e24:	0b3a0e03 	bleq	e85638 <__Stack_Size+0xe85238>
    1e28:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1e2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1e30:	00001840 	andeq	r1, r0, r0, asr #16
    1e34:	03003413 	movweq	r3, #1043	; 0x413
    1e38:	3b0b3a0e 	blcc	2d0678 <__Stack_Size+0x2d0278>
    1e3c:	3f13490b 	svccc	0x0013490b
    1e40:	00193c19 	andseq	r3, r9, r9, lsl ip
    1e44:	00341400 	eorseq	r1, r4, r0, lsl #8
    1e48:	0b3a0e03 	bleq	e8565c <__Stack_Size+0xe8525c>
    1e4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e50:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1e54:	01000000 	mrseq	r0, (UNDEF: 0)
    1e58:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1e5c:	0e030b13 	vmoveq.32	d3[0], r0
    1e60:	17550e1b 	smmlane	r5, fp, lr, r0
    1e64:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1e68:	24020000 	strcs	r0, [r2], #-0
    1e6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e70:	000e030b 	andeq	r0, lr, fp, lsl #6
    1e74:	00160300 	andseq	r0, r6, r0, lsl #6
    1e78:	0b3a0803 	bleq	e83e8c <__Stack_Size+0xe83a8c>
    1e7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e80:	04040000 	streq	r0, [r4], #-0
    1e84:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1e88:	3b0b3a13 	blcc	2d06dc <__Stack_Size+0x2d02dc>
    1e8c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e90:	00280500 	eoreq	r0, r8, r0, lsl #10
    1e94:	0b1c0e03 	bleq	7056a8 <__Stack_Size+0x7052a8>
    1e98:	16060000 	strne	r0, [r6], -r0
    1e9c:	3a0e0300 	bcc	382aa4 <__Stack_Size+0x3826a4>
    1ea0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea4:	07000013 	smladeq	r0, r3, r0, r0
    1ea8:	0e030104 	adfeqs	f0, f3, f4
    1eac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1eb0:	0b3b0b3a 	bleq	ec4ba0 <__Stack_Size+0xec47a0>
    1eb4:	00001301 	andeq	r1, r0, r1, lsl #6
    1eb8:	03011308 	movweq	r1, #4872	; 0x1308
    1ebc:	3a0b0b0e 	bcc	2c4afc <__Stack_Size+0x2c46fc>
    1ec0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1ec4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1ec8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ecc:	0b3b0b3a 	bleq	ec4bbc <__Stack_Size+0xec47bc>
    1ed0:	0b381349 	bleq	e06bfc <__Stack_Size+0xe067fc>
    1ed4:	0f0a0000 	svceq	0x000a0000
    1ed8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1edc:	0b000013 	bleq	1f30 <__Stack_Size+0x1b30>
    1ee0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1ee4:	13011349 	movwne	r1, #4937	; 0x1349
    1ee8:	050c0000 	streq	r0, [ip, #-0]
    1eec:	00134900 	andseq	r4, r3, r0, lsl #18
    1ef0:	01130d00 	tsteq	r3, r0, lsl #26
    1ef4:	0b0b0803 	bleq	2c3f08 <__Stack_Size+0x2c3b08>
    1ef8:	0b3b0b3a 	bleq	ec4be8 <__Stack_Size+0xec47e8>
    1efc:	00001301 	andeq	r1, r0, r1, lsl #6
    1f00:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1f04:	3b0b3a08 	blcc	2d072c <__Stack_Size+0x2d032c>
    1f08:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f0c:	0f00000b 	svceq	0x0000000b
    1f10:	0b0b0117 	bleq	2c2374 <__Stack_Size+0x2c1f74>
    1f14:	0b3b0b3a 	bleq	ec4c04 <__Stack_Size+0xec4804>
    1f18:	00001301 	andeq	r1, r0, r1, lsl #6
    1f1c:	03000d10 	movweq	r0, #3344	; 0xd10
    1f20:	3b0b3a08 	blcc	2d0748 <__Stack_Size+0x2d0348>
    1f24:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f28:	00151100 	andseq	r1, r5, r0, lsl #2
    1f2c:	00001927 	andeq	r1, r0, r7, lsr #18
    1f30:	0b000f12 	bleq	5b80 <__Stack_Size+0x5780>
    1f34:	1300000b 	movwne	r0, #11
    1f38:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1f3c:	0b3a0e03 	bleq	e85750 <__Stack_Size+0xe85350>
    1f40:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1f44:	0b201349 	bleq	806c70 <__Stack_Size+0x806870>
    1f48:	00001301 	andeq	r1, r0, r1, lsl #6
    1f4c:	03003414 	movweq	r3, #1044	; 0x414
    1f50:	3b0b3a08 	blcc	2d0778 <__Stack_Size+0x2d0378>
    1f54:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f58:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    1f5c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1f60:	0b3b0b3a 	bleq	ec4c50 <__Stack_Size+0xec4850>
    1f64:	13491927 	movtne	r1, #39207	; 0x9927
    1f68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1f6c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1f70:	00130119 	andseq	r0, r3, r9, lsl r1
    1f74:	00051600 	andeq	r1, r5, r0, lsl #12
    1f78:	0b3a0e03 	bleq	e8578c <__Stack_Size+0xe8538c>
    1f7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f80:	00001702 	andeq	r1, r0, r2, lsl #14
    1f84:	11010b17 	tstne	r1, r7, lsl fp
    1f88:	01061201 	tsteq	r6, r1, lsl #4
    1f8c:	18000013 	stmdane	r0, {r0, r1, r4}
    1f90:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f94:	0b3b0b3a 	bleq	ec4c84 <__Stack_Size+0xec4884>
    1f98:	17021349 	strne	r1, [r2, -r9, asr #6]
    1f9c:	0b190000 	bleq	641fa4 <__Stack_Size+0x641ba4>
    1fa0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1fa4:	1a000006 	bne	1fc4 <__Stack_Size+0x1bc4>
    1fa8:	0e03012e 	adfeqsp	f0, f3, #0.5
    1fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fb0:	01111927 	tsteq	r1, r7, lsr #18
    1fb4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1fb8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1fbc:	1b000013 	blne	2010 <__Stack_Size+0x1c10>
    1fc0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fc8:	17021349 	strne	r1, [r2, -r9, asr #6]
    1fcc:	0a1c0000 	beq	701fd4 <__Stack_Size+0x701bd4>
    1fd0:	3a0e0300 	bcc	382bd8 <__Stack_Size+0x3827d8>
    1fd4:	11053b0b 	tstne	r5, fp, lsl #22
    1fd8:	1d000001 	stcne	0, cr0, [r0, #-4]
    1fdc:	01018289 	smlabbeq	r1, r9, r2, r8
    1fe0:	13010111 	movwne	r0, #4369	; 0x1111
    1fe4:	8a1e0000 	bhi	781fec <__Stack_Size+0x781bec>
    1fe8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1fec:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1ff0:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    1ff4:	11010182 	smlabbne	r1, r2, r1, r0
    1ff8:	01133101 	tsteq	r3, r1, lsl #2
    1ffc:	20000013 	andcs	r0, r0, r3, lsl r0
    2000:	01018289 	smlabbeq	r1, r9, r2, r8
    2004:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2008:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    200c:	03193f00 	tsteq	r9, #0, 30
    2010:	3b0b3a0e 	blcc	2d0850 <__Stack_Size+0x2d0450>
    2014:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2018:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    201c:	96184006 	ldrls	r4, [r8], -r6
    2020:	00001942 	andeq	r1, r0, r2, asr #18
    2024:	31012e22 	tstcc	r1, r2, lsr #28
    2028:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    202c:	96184006 	ldrls	r4, [r8], -r6
    2030:	13011942 	movwne	r1, #6466	; 0x1942
    2034:	34230000 	strtcc	r0, [r3], #-0
    2038:	02133100 	andseq	r3, r3, #0, 2
    203c:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    2040:	13310034 	teqne	r1, #52	; 0x34
    2044:	34250000 	strtcc	r0, [r5], #-0
    2048:	3a0e0300 	bcc	382c50 <__Stack_Size+0x382850>
    204c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2050:	26000013 			; <UNDEFINED> instruction: 0x26000013
    2054:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2058:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    205c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2060:	89270000 	stmdbhi	r7!, {}	; <UNPREDICTABLE>
    2064:	11000182 	smlabbne	r0, r2, r1, r0
    2068:	00133101 	andseq	r3, r3, r1, lsl #2
    206c:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
    2070:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2074:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2078:	13491927 	movtne	r1, #39207	; 0x9927
    207c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2080:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2084:	00130119 	andseq	r0, r3, r9, lsl r1
    2088:	010b2900 	tsteq	fp, r0, lsl #18
    208c:	13011755 	movwne	r1, #5973	; 0x1755
    2090:	0b2a0000 	bleq	a82098 <__Stack_Size+0xa81c98>
    2094:	00175501 	andseq	r5, r7, r1, lsl #10
    2098:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    209c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    20a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20a4:	13491927 	movtne	r1, #39207	; 0x9927
    20a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    20ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    20b0:	2c000019 	stccs	0, cr0, [r0], {25}
    20b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    20b8:	0b3a0e03 	bleq	e858cc <__Stack_Size+0xe854cc>
    20bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    20c0:	01111349 	tsteq	r1, r9, asr #6
    20c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    20c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    20cc:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    20d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20d8:	17021349 	strne	r1, [r2, -r9, asr #6]
    20dc:	052e0000 	streq	r0, [lr, #-0]!
    20e0:	3a0e0300 	bcc	382ce8 <__Stack_Size+0x3828e8>
    20e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20e8:	00180213 	andseq	r0, r8, r3, lsl r2
    20ec:	00342f00 	eorseq	r2, r4, r0, lsl #30
    20f0:	0b3a0e03 	bleq	e85904 <__Stack_Size+0xe85504>
    20f4:	1349053b 	movtne	r0, #38203	; 0x953b
    20f8:	00001802 	andeq	r1, r0, r2, lsl #16
    20fc:	03012e30 	movweq	r2, #7728	; 0x1e30
    2100:	3b0b3a0e 	blcc	2d0940 <__Stack_Size+0x2d0540>
    2104:	20192705 	andscs	r2, r9, r5, lsl #14
    2108:	0013010b 	andseq	r0, r3, fp, lsl #2
    210c:	000a3100 	andeq	r3, sl, r0, lsl #2
    2110:	0b3a0e03 	bleq	e85924 <__Stack_Size+0xe85524>
    2114:	0000053b 	andeq	r0, r0, fp, lsr r5
    2118:	01010b32 	tsteq	r1, r2, lsr fp
    211c:	33000013 	movwcc	r0, #19
    2120:	0000010b 	andeq	r0, r0, fp, lsl #2
    2124:	49003534 	stmdbmi	r0, {r2, r4, r5, r8, sl, ip, sp}
    2128:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    212c:	0b0b0117 	bleq	2c2590 <__Stack_Size+0x2c2190>
    2130:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2134:	00001301 	andeq	r1, r0, r1, lsl #6
    2138:	03000d36 	movweq	r0, #3382	; 0xd36
    213c:	3b0b3a08 	blcc	2d0964 <__Stack_Size+0x2d0564>
    2140:	00134905 	andseq	r4, r3, r5, lsl #18
    2144:	00343700 	eorseq	r3, r4, r0, lsl #14
    2148:	0b3a0e03 	bleq	e8595c <__Stack_Size+0xe8555c>
    214c:	1349053b 	movtne	r0, #38203	; 0x953b
    2150:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2154:	31011d38 	tstcc	r1, r8, lsr sp
    2158:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    215c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2160:	00130105 	andseq	r0, r3, r5, lsl #2
    2164:	000a3900 	andeq	r3, sl, r0, lsl #18
    2168:	01111331 	tsteq	r1, r1, lsr r3
    216c:	343a0000 	ldrtcc	r0, [sl], #-0
    2170:	02133100 	andseq	r3, r3, #0, 2
    2174:	3b000018 	blcc	21dc <__Stack_Size+0x1ddc>
    2178:	01018289 	smlabbeq	r1, r9, r2, r8
    217c:	00000111 	andeq	r0, r0, r1, lsl r1
    2180:	31011d3c 	tstcc	r1, ip, lsr sp
    2184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2188:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    218c:	00130105 	andseq	r0, r3, r5, lsl #2
    2190:	82893d00 	addhi	r3, r9, #0, 26
    2194:	01110001 	tsteq	r1, r1
    2198:	31194295 			; <UNDEFINED> instruction: 0x31194295
    219c:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    21a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    21a4:	0b3a0e03 	bleq	e859b8 <__Stack_Size+0xe855b8>
    21a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    21ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    21b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    21b4:	00130119 	andseq	r0, r3, r9, lsl r1
    21b8:	00053f00 	andeq	r3, r5, r0, lsl #30
    21bc:	0b3a0803 	bleq	e841d0 <__Stack_Size+0xe83dd0>
    21c0:	1349053b 	movtne	r0, #38203	; 0x953b
    21c4:	00001702 	andeq	r1, r0, r2, lsl #14
    21c8:	03003440 	movweq	r3, #1088	; 0x440
    21cc:	3b0b3a08 	blcc	2d09f4 <__Stack_Size+0x2d05f4>
    21d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    21d4:	41000018 	tstmi	r0, r8, lsl r0
    21d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    21dc:	0b3a0e03 	bleq	e859f0 <__Stack_Size+0xe855f0>
    21e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    21e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    21e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    21ec:	42000019 	andmi	r0, r0, #25
    21f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21f4:	0b3b0b3a 	bleq	ec4ee4 <__Stack_Size+0xec4ae4>
    21f8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    21fc:	0000193c 	andeq	r1, r0, ip, lsr r9
    2200:	03003443 	movweq	r3, #1091	; 0x443
    2204:	3b0b3a0e 	blcc	2d0a44 <__Stack_Size+0x2d0644>
    2208:	3f13490b 	svccc	0x0013490b
    220c:	00180219 	andseq	r0, r8, r9, lsl r2
    2210:	002e4400 	eoreq	r4, lr, r0, lsl #8
    2214:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2218:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    221c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2220:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
    2224:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    2228:	030e6e19 	movweq	r6, #60953	; 0xee19
    222c:	3b0b3a0e 	blcc	2d0a6c <__Stack_Size+0x2d066c>
    2230:	0000000b 	andeq	r0, r0, fp
    2234:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2238:	030b130e 	movweq	r1, #45838	; 0xb30e
    223c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2240:	10011117 	andne	r1, r1, r7, lsl r1
    2244:	02000017 	andeq	r0, r0, #23
    2248:	0b0b0024 	bleq	2c22e0 <__Stack_Size+0x2c1ee0>
    224c:	0e030b3e 	vmoveq.16	d3[0], r0
    2250:	16030000 	strne	r0, [r3], -r0
    2254:	3a080300 	bcc	202e5c <__Stack_Size+0x202a5c>
    2258:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    225c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2260:	0b0b000f 	bleq	2c22a4 <__Stack_Size+0x2c1ea4>
    2264:	00001349 	andeq	r1, r0, r9, asr #6
    2268:	3f012e05 	svccc	0x00012e05
    226c:	3a0e0319 	bcc	382ed8 <__Stack_Size+0x382ad8>
    2270:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2274:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2278:	97184006 	ldrls	r4, [r8, -r6]
    227c:	13011942 	movwne	r1, #6466	; 0x1942
    2280:	05060000 	streq	r0, [r6, #-0]
    2284:	3a0e0300 	bcc	382e8c <__Stack_Size+0x382a8c>
    2288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    228c:	00170213 	andseq	r0, r7, r3, lsl r2
    2290:	00340700 	eorseq	r0, r4, r0, lsl #14
    2294:	0b3a0803 	bleq	e842a8 <__Stack_Size+0xe83ea8>
    2298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    229c:	00001802 	andeq	r1, r0, r2, lsl #16
    22a0:	03003408 	movweq	r3, #1032	; 0x408
    22a4:	3b0b3a08 	blcc	2d0acc <__Stack_Size+0x2d06cc>
    22a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    22ac:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    22b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    22b4:	0b3b0b3a 	bleq	ec4fa4 <__Stack_Size+0xec4ba4>
    22b8:	17021349 	strne	r1, [r2, -r9, asr #6]
    22bc:	01000000 	mrseq	r0, (UNDEF: 0)
    22c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    22c4:	0e030b13 	vmoveq.32	d3[0], r0
    22c8:	17550e1b 	smmlane	r5, fp, lr, r0
    22cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
    22d0:	24020000 	strcs	r0, [r2], #-0
    22d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    22d8:	000e030b 	andeq	r0, lr, fp, lsl #6
    22dc:	00160300 	andseq	r0, r6, r0, lsl #6
    22e0:	0b3a0803 	bleq	e842f4 <__Stack_Size+0xe83ef4>
    22e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22e8:	04040000 	streq	r0, [r4], #-0
    22ec:	0b0e0301 	bleq	382ef8 <__Stack_Size+0x382af8>
    22f0:	3a13490b 	bcc	4d4724 <__Stack_Size+0x4d4324>
    22f4:	010b3b0b 	tsteq	fp, fp, lsl #22
    22f8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    22fc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2300:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2304:	03001606 	movweq	r1, #1542	; 0x606
    2308:	3b0b3a0e 	blcc	2d0b48 <__Stack_Size+0x2d0748>
    230c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2310:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2314:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2318:	0b3b0b3a 	bleq	ec5008 <__Stack_Size+0xec4c08>
    231c:	13491927 	movtne	r1, #39207	; 0x9927
    2320:	13010b20 	movwne	r0, #6944	; 0x1b20
    2324:	05080000 	streq	r0, [r8, #-0]
    2328:	3a0e0300 	bcc	382f30 <__Stack_Size+0x382b30>
    232c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2330:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2334:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2338:	0b3a0e03 	bleq	e85b4c <__Stack_Size+0xe8574c>
    233c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2340:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2344:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2348:	00130119 	andseq	r0, r3, r9, lsl r1
    234c:	00050a00 	andeq	r0, r5, r0, lsl #20
    2350:	0b3a0e03 	bleq	e85b64 <__Stack_Size+0xe85764>
    2354:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2358:	00001802 	andeq	r1, r0, r2, lsl #16
    235c:	3f002e0b 	svccc	0x00002e0b
    2360:	3a0e0319 	bcc	382fcc <__Stack_Size+0x382bcc>
    2364:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2368:	11134919 	tstne	r3, r9, lsl r9
    236c:	40061201 	andmi	r1, r6, r1, lsl #4
    2370:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2374:	050c0000 	streq	r0, [ip, #-0]
    2378:	3a0e0300 	bcc	382f80 <__Stack_Size+0x382b80>
    237c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2380:	00170213 	andseq	r0, r7, r3, lsl r2
    2384:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2388:	01111331 	tsteq	r1, r1, lsr r3
    238c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2390:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2394:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2398:	13310005 	teqne	r1, #5
    239c:	00001702 	andeq	r1, r0, r2, lsl #14
    23a0:	3f012e0f 	svccc	0x00012e0f
    23a4:	3a0e0319 	bcc	383010 <__Stack_Size+0x382c10>
    23a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    23ac:	11134919 	tstne	r3, r9, lsl r9
    23b0:	40061201 	andmi	r1, r6, r1, lsl #4
    23b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	11010b10 	tstne	r1, r0, lsl fp
    23c0:	00061201 	andeq	r1, r6, r1, lsl #4
    23c4:	00341100 	eorseq	r1, r4, r0, lsl #2
    23c8:	0b3a0e03 	bleq	e85bdc <__Stack_Size+0xe857dc>
    23cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23d0:	00001702 	andeq	r1, r0, r2, lsl #14
    23d4:	03003412 	movweq	r3, #1042	; 0x412
    23d8:	3b0b3a0e 	blcc	2d0c18 <__Stack_Size+0x2d0818>
    23dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    23e0:	011d1300 	tsteq	sp, r0, lsl #6
    23e4:	01521331 	cmpeq	r2, r1, lsr r3
    23e8:	0b581755 	bleq	1608144 <__Stack_Size+0x1607d44>
    23ec:	00000b59 	andeq	r0, r0, r9, asr fp
    23f0:	3f012e14 	svccc	0x00012e14
    23f4:	3a0e0319 	bcc	383060 <__Stack_Size+0x382c60>
    23f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    23fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2400:	97184006 	ldrls	r4, [r8, -r6]
    2404:	13011942 	movwne	r1, #6466	; 0x1942
    2408:	05150000 	ldreq	r0, [r5, #-0]
    240c:	3a0e0300 	bcc	383014 <__Stack_Size+0x382c14>
    2410:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2414:	00170213 	andseq	r0, r7, r3, lsl r2
    2418:	00341600 	eorseq	r1, r4, r0, lsl #12
    241c:	0b3a0e03 	bleq	e85c30 <__Stack_Size+0xe85830>
    2420:	1349053b 	movtne	r0, #38203	; 0x953b
    2424:	00001702 	andeq	r1, r0, r2, lsl #14
    2428:	3f012e17 	svccc	0x00012e17
    242c:	3a0e0319 	bcc	383098 <__Stack_Size+0x382c98>
    2430:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2434:	11134919 	tstne	r3, r9, lsl r9
    2438:	40061201 	andmi	r1, r6, r1, lsl #4
    243c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2440:	00001301 	andeq	r1, r0, r1, lsl #6
    2444:	03000518 	movweq	r0, #1304	; 0x518
    2448:	3b0b3a0e 	blcc	2d0c88 <__Stack_Size+0x2d0888>
    244c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2450:	19000018 	stmdbne	r0, {r3, r4}
    2454:	0b0b000f 	bleq	2c2498 <__Stack_Size+0x2c2098>
    2458:	00001349 	andeq	r1, r0, r9, asr #6
    245c:	0300341a 	movweq	r3, #1050	; 0x41a
    2460:	3b0b3a0e 	blcc	2d0ca0 <__Stack_Size+0x2d08a0>
    2464:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2468:	1b000018 	blne	24d0 <__Stack_Size+0x20d0>
    246c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2470:	0b1c0000 	bleq	702478 <__Stack_Size+0x702078>
    2474:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2478:	00130106 	andseq	r0, r3, r6, lsl #2
    247c:	00051d00 	andeq	r1, r5, r0, lsl #26
    2480:	0b3a0803 	bleq	e84494 <__Stack_Size+0xe84094>
    2484:	1349053b 	movtne	r0, #38203	; 0x953b
    2488:	00001702 	andeq	r1, r0, r2, lsl #14
    248c:	0300051e 	movweq	r0, #1310	; 0x51e
    2490:	3b0b3a08 	blcc	2d0cb8 <__Stack_Size+0x2d08b8>
    2494:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2498:	1f000018 	svcne	0x00000018
    249c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24a0:	0b3a0e03 	bleq	e85cb4 <__Stack_Size+0xe858b4>
    24a4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    24a8:	01111349 	tsteq	r1, r9, asr #6
    24ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    24b0:	00194297 	mulseq	r9, r7, r2
    24b4:	11010000 	mrsne	r0, (UNDEF: 1)
    24b8:	130e2501 	movwne	r2, #58625	; 0xe501
    24bc:	1b0e030b 	blne	3830f0 <__Stack_Size+0x382cf0>
    24c0:	1117550e 	tstne	r7, lr, lsl #10
    24c4:	00171001 	andseq	r1, r7, r1
    24c8:	00240200 	eoreq	r0, r4, r0, lsl #4
    24cc:	0b3e0b0b 	bleq	f85100 <__Stack_Size+0xf84d00>
    24d0:	00000e03 	andeq	r0, r0, r3, lsl #28
    24d4:	03001603 	movweq	r1, #1539	; 0x603
    24d8:	3b0b3a08 	blcc	2d0d00 <__Stack_Size+0x2d0900>
    24dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    24e0:	000f0400 	andeq	r0, pc, r0, lsl #8
    24e4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    24e8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    24ec:	03193f00 	tsteq	r9, #0, 30
    24f0:	3b0b3a0e 	blcc	2d0d30 <__Stack_Size+0x2d0930>
    24f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    24f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24fc:	97184006 	ldrls	r4, [r8, -r6]
    2500:	00001942 	andeq	r1, r0, r2, asr #18
    2504:	3f012e06 	svccc	0x00012e06
    2508:	3a0e0319 	bcc	383174 <__Stack_Size+0x382d74>
    250c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2510:	11134919 	tstne	r3, r9, lsl r9
    2514:	40061201 	andmi	r1, r6, r1, lsl #4
    2518:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    251c:	00001301 	andeq	r1, r0, r1, lsl #6
    2520:	03000507 	movweq	r0, #1287	; 0x507
    2524:	3b0b3a0e 	blcc	2d0d64 <__Stack_Size+0x2d0964>
    2528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    252c:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    2530:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2534:	0b3b0b3a 	bleq	ec5224 <__Stack_Size+0xec4e24>
    2538:	17021349 	strne	r1, [r2, -r9, asr #6]
    253c:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    2540:	11010182 	smlabbne	r1, r2, r1, r0
    2544:	01133101 	tsteq	r3, r1, lsl #2
    2548:	0a000013 	beq	259c <__Stack_Size+0x219c>
    254c:	0001828a 	andeq	r8, r1, sl, lsl #5
    2550:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2554:	0b000018 	bleq	25bc <__Stack_Size+0x21bc>
    2558:	01018289 	smlabbeq	r1, r9, r2, r8
    255c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2560:	340c0000 	strcc	r0, [ip], #-0
    2564:	3a0e0300 	bcc	38316c <__Stack_Size+0x382d6c>
    2568:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    256c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    2570:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    2574:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2578:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
    257c:	0b3a0e03 	bleq	e85d90 <__Stack_Size+0xe85990>
    2580:	0000053b 	andeq	r0, r0, fp, lsr r5
    2584:	3f002e0e 	svccc	0x00002e0e
    2588:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    258c:	3a0e030e 	bcc	3831cc <__Stack_Size+0x382dcc>
    2590:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    2594:	11010000 	mrsne	r0, (UNDEF: 1)
    2598:	130e2501 	movwne	r2, #58625	; 0xe501
    259c:	1b0e030b 	blne	3831d0 <__Stack_Size+0x382dd0>
    25a0:	1117550e 	tstne	r7, lr, lsl #10
    25a4:	00171001 	andseq	r1, r7, r1
    25a8:	00240200 	eoreq	r0, r4, r0, lsl #4
    25ac:	0b3e0b0b 	bleq	f851e0 <__Stack_Size+0xf84de0>
    25b0:	00000e03 	andeq	r0, r0, r3, lsl #28
    25b4:	03001603 	movweq	r1, #1539	; 0x603
    25b8:	3b0b3a08 	blcc	2d0de0 <__Stack_Size+0x2d09e0>
    25bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    25c0:	00150400 	andseq	r0, r5, r0, lsl #8
    25c4:	00001927 	andeq	r1, r0, r7, lsr #18
    25c8:	0b000f05 	bleq	61e4 <__Stack_Size+0x5de4>
    25cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    25d0:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    25d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    25d8:	0b3b0b3a 	bleq	ec52c8 <__Stack_Size+0xec4ec8>
    25dc:	01111927 	tsteq	r1, r7, lsr #18
    25e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    25e4:	01194296 			; <UNDEFINED> instruction: 0x01194296
    25e8:	07000013 	smladeq	r0, r3, r0, r0
    25ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    25f0:	0b3b0b3a 	bleq	ec52e0 <__Stack_Size+0xec4ee0>
    25f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    25f8:	0b080000 	bleq	202600 <__Stack_Size+0x202200>
    25fc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2600:	00130106 	andseq	r0, r3, r6, lsl #2
    2604:	00340900 	eorseq	r0, r4, r0, lsl #18
    2608:	0b3a0e03 	bleq	e85e1c <__Stack_Size+0xe85a1c>
    260c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2610:	00001702 	andeq	r1, r0, r2, lsl #14
    2614:	0182890a 	orreq	r8, r2, sl, lsl #18
    2618:	31011100 	mrscc	r1, (UNDEF: 17)
    261c:	0b000013 	bleq	2670 <__Stack_Size+0x2270>
    2620:	13490035 	movtne	r0, #36917	; 0x9035
    2624:	340c0000 	strcc	r0, [ip], #-0
    2628:	3a0e0300 	bcc	383230 <__Stack_Size+0x382e30>
    262c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2630:	3c193f13 	ldccc	15, cr3, [r9], {19}
    2634:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    2638:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    263c:	0b3b0b3a 	bleq	ec532c <__Stack_Size+0xec4f2c>
    2640:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2644:	00001802 	andeq	r1, r0, r2, lsl #16
    2648:	0300340e 	movweq	r3, #1038	; 0x40e
    264c:	3b0b3a0e 	blcc	2d0e8c <__Stack_Size+0x2d0a8c>
    2650:	3f13490b 	svccc	0x0013490b
    2654:	00193c19 	andseq	r3, r9, r9, lsl ip
    2658:	01010f00 	tsteq	r1, r0, lsl #30
    265c:	13011349 	movwne	r1, #4937	; 0x1349
    2660:	21100000 	tstcs	r0, r0
    2664:	2f134900 	svccs	0x00134900
    2668:	1100000b 	tstne	r0, fp
    266c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2670:	0e6e193c 	mcreq	9, 3, r1, cr14, cr12, {1}
    2674:	0b3a0e03 	bleq	e85e88 <__Stack_Size+0xe85a88>
    2678:	00000b3b 	andeq	r0, r0, fp, lsr fp
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000005a5 	andeq	r0, r0, r5, lsr #11
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
       4:	011a0002 	tsteq	sl, r2
}
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	6c010000 	stcvs	0, cr0, [r1], {-0}
      1c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
      20:	6c00636e 	stcvs	3, cr6, [r0], {110}	; 0x6e
    bTmp = bByte/10;
      24:	552f6269 	strpl	r6, [pc, #-617]!	; fffffdc3 <SCS_BASE+0x1fff1dc3>
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      28:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
      2c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
      30:	0000636e 	andeq	r6, r0, lr, ror #6
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	6e69616d 	powvsez	f6, f1, #5.0
      38:	0000632e 	andeq	r6, r0, lr, lsr #6
      3c:	74730000 	ldrbtvc	r0, [r3], #-0
      40:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
}
      44:	5f783031 	svcpl	0x00783031
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
      4c:	0100682e 	tsteq	r0, lr, lsr #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74730000 	ldrbtvc	r0, [r3], #-0
      54:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      58:	5f783031 	svcpl	0x00783031


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      5c:	2e70616d 	rpwcssz	f6, f0, #5.0
      60:	00010068 	andeq	r0, r1, r8, rrx
      64:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      68:	31663233 	cmncc	r6, r3, lsr r2
      6c:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
      70:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	0100682e 	tsteq	r0, lr, lsr #16
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
      78:	74730000 	ldrbtvc	r0, [r3], #-0
      7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    }
          
    if(status != FLASH_BUSY)
      80:	5f783031 	svcpl	0x00783031
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      84:	6f697067 	svcvs	0x00697067
      88:	0100682e 	tsteq	r0, lr, lsr #16
      8c:	74730000 	ldrbtvc	r0, [r3], #-0
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      94:	5f783031 	svcpl	0x00783031
      98:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
      9c:	0100682e 	tsteq	r0, lr, lsr #16
      a0:	74730000 	ldrbtvc	r0, [r3], #-0
      a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      a8:	5f783031 	svcpl	0x00783031
      ac:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	00010068 	andeq	r0, r1, r8, rrx
      b4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	31663233 	cmncc	r6, r3, lsr r2
      bc:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffff894 <SCS_BASE+0x1fff1894>
      break; 
      
    default:
      break;
  }
}
      c0:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	0100682e 	tsteq	r0, lr, lsr #16
      c8:	74730000 	ldrbtvc	r0, [r3], #-0
      cc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      d0:	5f783031 	svcpl	0x00783031
      d4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
      d8:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
      dc:	00010068 	andeq	r0, r1, r8, rrx
      e0:	42535500 	subsmi	r5, r3, #0, 10
      e4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      e8:	0000682e 	andeq	r6, r0, lr, lsr #16
      ec:	74730000 	ldrbtvc	r0, [r3], #-0
      f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      f4:	5f783031 	svcpl	0x00783031
      f8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
      fc:	00010068 	andeq	r0, r1, r8, rrx
     100:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     104:	31663233 	cmncc	r6, r3, lsr r2
     108:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     10c:	2e676477 	mcrcs	4, 3, r6, cr7, cr7, {3}
     110:	00010068 	andeq	r0, r1, r8, rrx
     114:	62737500 	rsbsvs	r7, r3, #0, 10
     118:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     11c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     120:	00000002 	andeq	r0, r0, r2
     124:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
     128:	03080001 	movweq	r0, #32769	; 0x8001
     12c:	140101ef 	strne	r0, [r1], #-495	; 0xfffffe11
     130:	01000602 	tsteq	r0, r2, lsl #12
     134:	02050001 	andeq	r0, r5, #1
     138:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
     13c:	0101f403 	tsteq	r1, r3, lsl #8	; <UNPREDICTABLE>
     140:	08023316 	stmdaeq	r2, {r1, r2, r4, r8, r9, ip, sp}
     144:	00010100 	andeq	r0, r1, r0, lsl #2
     148:	01c40205 	biceq	r0, r4, r5, lsl #4
     14c:	81030800 	tsthi	r3, r0, lsl #16
     150:	4b130102 	blmi	4c0560 <__Stack_Size+0x4c0160>
     154:	01000602 	tsteq	r0, r2, lsl #12
     158:	02050001 	andeq	r0, r5, #1
     15c:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
     160:	01028703 	tsteq	r2, r3, lsl #14
     164:	251b4324 	ldrcs	r4, [fp, #-804]	; 0xfffffcdc
     168:	2f2f2f29 	svccs	0x002f2f29
     16c:	5d773330 	ldclpl	3, cr3, [r7, #-192]!	; 0xffffff40
     170:	0003026d 	andeq	r0, r3, sp, ror #4
     174:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     178:	00000002 	andeq	r0, r0, r2
     17c:	02a80300 	adceq	r0, r8, #0, 6
     180:	0a021301 	beq	84d8c <__Stack_Size+0x8498c>
     184:	00010100 	andeq	r0, r1, r0, lsl #2
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	ad030000 	stcge	0, cr0, [r3, #-0]
     190:	2f130102 	svccs	0x00130102
     194:	03901c03 	orrseq	r1, r0, #768	; 0x300
     198:	1e035864 	cdpne	8, 0, cr5, cr3, cr4, {3}
     19c:	0006022e 	andeq	r0, r6, lr, lsr #4
     1a0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     1a4:	00022802 	andeq	r2, r2, r2, lsl #16
     1a8:	02fb0308 	rscseq	r0, fp, #8, 6	; 0x20000000
     1ac:	4b212001 	blmi	8481b8 <__Stack_Size+0x847db8>
     1b0:	01040200 	mrseq	r0, R12_usr
     1b4:	0402674b 	streq	r6, [r2], #-1867	; 0xfffff8b5
     1b8:	00010100 	andeq	r0, r1, r0, lsl #2
     1bc:	00000205 	andeq	r0, r0, r5, lsl #4
     1c0:	81030000 	mrshi	r0, (UNDEF: 3)
     1c4:	3a220103 	bcc	8805d8 <__Stack_Size+0x8801d8>
     1c8:	3d755923 	ldclcc	9, cr5, [r5, #-140]!	; 0xffffff74
     1cc:	022d835a 	eoreq	r8, sp, #1744830465	; 0x68000001
     1d0:	01010002 	tsteq	r1, r2
     1d4:	50020500 	andpl	r0, r2, r0, lsl #10
     1d8:	03080002 	movweq	r0, #32770	; 0x8002
     1dc:	0001038d 	andeq	r0, r1, sp, lsl #7
     1e0:	30010402 	andcc	r0, r1, r2, lsl #8
     1e4:	03040200 	movweq	r0, #16896	; 0x4200
     1e8:	01023e3e 	tsteq	r2, lr, lsr lr
     1ec:	00010100 	andeq	r0, r1, r0, lsl #2
     1f0:	02620205 	rsbeq	r0, r2, #1342177280	; 0x50000000
     1f4:	96030800 	strls	r0, [r3], -r0, lsl #16
     1f8:	23200103 			; <UNDEFINED> instruction: 0x23200103
     1fc:	3e2c4d4b 	cdpcc	13, 2, cr4, cr12, cr11, {2}
     200:	2d214b2f 	fstmdbxcs	r1!, {d4-d26}	;@ Deprecated
     204:	01000202 	tsteq	r0, r2, lsl #4
     208:	02050001 	andeq	r0, r5, #1
     20c:	08000296 	stmdaeq	r0, {r1, r2, r4, r7, r9}
     210:	0103a303 	tsteq	r3, r3, lsl #6
     214:	213d2120 	teqcs	sp, r0, lsr #2
     218:	0002022d 	andeq	r0, r2, sp, lsr #4
     21c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     220:	0002aa02 	andeq	sl, r2, r2, lsl #20
     224:	03a90308 			; <UNDEFINED> instruction: 0x03a90308
     228:	3d212001 	stccc	0, cr2, [r1, #-4]!
     22c:	02022d21 	andeq	r2, r2, #2112	; 0x840
     230:	00010100 	andeq	r0, r1, r0, lsl #2
     234:	00000205 	andeq	r0, r0, r5, lsl #4
     238:	b0030000 	andlt	r0, r3, r0
     23c:	3a220103 	bcc	880650 <__Stack_Size+0x880250>
     240:	3d755923 	ldclcc	9, cr5, [r5, #-140]!	; 0xffffff74
     244:	022d835a 	eoreq	r8, sp, #1744830465	; 0x68000001
     248:	01010002 	tsteq	r1, r2
     24c:	be020500 	cfsh32lt	mvfx0, mvfx2, #0
     250:	03080002 	movweq	r0, #32770	; 0x8002
     254:	000103bd 			; <UNDEFINED> instruction: 0x000103bd
     258:	30010402 	andcc	r0, r1, r2, lsl #8
     25c:	03040200 	movweq	r0, #16896	; 0x4200
     260:	01023e3e 	tsteq	r2, lr, lsr lr
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	00000205 	andeq	r0, r0, r5, lsl #4
     26c:	c6030000 	strgt	r0, [r3], -r0
     270:	23200103 			; <UNDEFINED> instruction: 0x23200103
     274:	3e2c4d4b 	cdpcc	13, 2, cr4, cr12, cr11, {2}
     278:	2d214b2f 	fstmdbxcs	r1!, {d4-d26}	;@ Deprecated
     27c:	01000202 	tsteq	r0, r2, lsl #4
     280:	02050001 	andeq	r0, r5, #1
     284:	00000000 	andeq	r0, r0, r0
     288:	0103d303 	tsteq	r3, r3, lsl #6
     28c:	213d2120 	teqcs	sp, r0, lsr #2
     290:	0002022d 	andeq	r0, r2, sp, lsr #4
     294:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     298:	00000002 	andeq	r0, r0, r2
     29c:	03d90300 	bicseq	r0, r9, #0, 6
     2a0:	3d212001 	stccc	0, cr2, [r1, #-4]!
     2a4:	02022d21 	andeq	r2, r2, #2112	; 0x840
     2a8:	00010100 	andeq	r0, r1, r0, lsl #2
     2ac:	00000205 	andeq	r0, r0, r5, lsl #4
     2b0:	e0030000 	and	r0, r3, r0
     2b4:	9f130103 	svcls	0x00130103
     2b8:	01000602 	tsteq	r0, r2, lsl #12
     2bc:	02050001 	andeq	r0, r5, #1
     2c0:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
     2c4:	0103ec03 	tsteq	r3, r3, lsl #24
     2c8:	003e2220 	eorseq	r2, lr, r0, lsr #4
     2cc:	30010402 	andcc	r0, r1, r2, lsl #8
     2d0:	2d214c3f 	stccs	12, cr4, [r1, #-252]!	; 0xffffff04
     2d4:	01000502 	tsteq	r0, r2, lsl #10
     2d8:	02050001 	andeq	r0, r5, #1
     2dc:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
     2e0:	0107c303 	tsteq	r7, r3, lsl #6
     2e4:	211f7731 	tstcs	pc, r1, lsr r7	; <UNPREDICTABLE>
     2e8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
     2ec:	002e0601 	eoreq	r0, lr, r1, lsl #12
     2f0:	3c040402 	cfstrscc	mvf0, [r4], {2}
     2f4:	022f4c06 	eoreq	r4, pc, #1536	; 0x600
     2f8:	01010001 	tsteq	r1, r1
     2fc:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
     300:	03080003 	movweq	r0, #32771	; 0x8003
     304:	5c0107d1 	stcpl	7, cr0, [r1], {209}	; 0xd1
     308:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     30c:	02423902 	subeq	r3, r2, #32768	; 0x8000
     310:	01010002 	tsteq	r1, r2
     314:	50020500 	andpl	r0, r2, r0, lsl #10
     318:	03080003 	movweq	r0, #32771	; 0x8003
     31c:	4d010898 	stcmi	8, cr0, [r1, #-608]	; 0xfffffda0
     320:	2f2f3d3f 	svccs	0x002f3d3f
     324:	25291e31 	strcs	r1, [r9, #-3633]!	; 0xfffff1cf
     328:	3e3d2230 	mrccc	2, 1, r2, cr13, cr0, {1}
     32c:	303f6a4d 	eorscc	r6, pc, sp, asr #20
     330:	694d3e3d 	stmdbvs	sp, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}^
     334:	3e3d313f 	mrccc	1, 1, r3, cr13, cr15, {1}
     338:	024c6a4d 	subeq	r6, ip, #315392	; 0x4d000
     33c:	01010009 	tsteq	r1, r9
     340:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     344:	03080004 	movweq	r0, #32772	; 0x8004
     348:	170103ff 			; <UNDEFINED> instruction: 0x170103ff
     34c:	207a0321 	rsbscs	r0, sl, r1, lsr #6
     350:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
     354:	00200603 	eoreq	r0, r0, r3, lsl #12
     358:	06030402 	streq	r0, [r3], -r2, lsl #8
     35c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
     360:	02002f03 	andeq	r2, r0, #3, 30
     364:	1d2d0304 	stcne	3, cr0, [sp, #-16]!
     368:	30200a03 	eorcc	r0, r0, r3, lsl #20
     36c:	1b592f2c 	blne	164c024 <__Stack_Size+0x164bc24>
     370:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
     374:	200d0301 	andcs	r0, sp, r1, lsl #6
     378:	21661603 	cmncs	r6, r3, lsl #12
     37c:	0330421f 	teqeq	r0, #-268435455	; 0xf0000001
     380:	294f2079 	stmdbcs	pc, {r0, r3, r4, r5, r6, sp}^	; <UNPREDICTABLE>
     384:	03040200 	movweq	r0, #16896	; 0x4200
     388:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
     38c:	00434903 	subeq	r4, r3, r3, lsl #18
     390:	06010402 	streq	r0, [r1], -r2, lsl #8
     394:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     398:	5b063c02 	blpl	18f3a8 <__Stack_Size+0x18efa8>
     39c:	03820c03 	orreq	r0, r2, #768	; 0x300
     3a0:	2f362078 	svccs	0x00362078
     3a4:	201d033e 	andscs	r0, sp, lr, lsr r3
     3a8:	212e6303 			; <UNDEFINED> instruction: 0x212e6303
     3ac:	303c1503 	eorscc	r1, ip, r3, lsl #10
     3b0:	1b33324e 	blne	ccccf0 <__Stack_Size+0xccc8f0>
     3b4:	3425312b 	strtcc	r3, [r5], #-299	; 0xfffffed5
     3b8:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
     3bc:	02003901 	andeq	r3, r0, #16384	; 0x4000
     3c0:	3c060304 	stccc	3, cr0, [r6], {4}
     3c4:	02004d06 	andeq	r4, r0, #384	; 0x180
     3c8:	00840204 	addeq	r0, r4, r4, lsl #4
     3cc:	83020402 	movwhi	r0, #9218	; 0x2402
     3d0:	02040200 	andeq	r0, r4, #0, 4
     3d4:	03667a03 	cmneq	r6, #12288	; 0x3000
     3d8:	2f4c4a10 	svccs	0x004c4a10
     3dc:	2d213d23 	stccs	13, cr3, [r1, #-140]!	; 0xffffff74
     3e0:	59422f21 	stmdbpl	r2, {r0, r5, r8, r9, sl, fp, sp}^
     3e4:	3a304b3d 	bcc	c130e0 <__Stack_Size+0xc12ce0>
     3e8:	2e7cd403 	cdpcs	4, 7, cr13, cr12, cr3, {0}
     3ec:	2e03ae03 	cdpcs	14, 0, cr10, cr3, cr3, {0}
     3f0:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     3f4:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
     3f8:	3c77032e 	ldclcc	3, cr0, [r7], #-184	; 0xffffff48
     3fc:	212e0903 			; <UNDEFINED> instruction: 0x212e0903
     400:	003f2f50 	eorseq	r2, pc, r0, asr pc	; <UNPREDICTABLE>
     404:	06010402 	streq	r0, [r1], -r2, lsl #8
     408:	314b0658 	cmpcc	fp, r8, asr r6
     40c:	10034d3e 	andne	r4, r3, lr, lsr sp
     410:	0b034466 	bleq	d15b0 <__Stack_Size+0xd11b0>
     414:	6a303d2e 	bvs	c0f8d4 <__Stack_Size+0xc0f4d4>
     418:	003d863e 	eorseq	r8, sp, lr, lsr r6
     41c:	06010402 	streq	r0, [r1], -r2, lsl #8
     420:	3d3e064a 	ldccc	6, cr0, [lr, #-296]!	; 0xfffffed8
     424:	02002f86 	andeq	r2, r0, #536	; 0x218
     428:	66060104 	strvs	r0, [r6], -r4, lsl #2
     42c:	01040200 	mrseq	r0, R12_usr
     430:	09035906 	stmdbeq	r3, {r1, r2, r8, fp, ip, lr}
     434:	509c3074 	addspl	r3, ip, r4, ror r0
     438:	3d304723 	ldccc	7, cr4, [r0, #-140]!	; 0xffffff74
     43c:	005e324b 	subseq	r3, lr, fp, asr #4
     440:	06010402 	streq	r0, [r1], -r2, lsl #8
     444:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     448:	4d064a02 	vstrmi	s8, [r6, #-8]
     44c:	4b213d1f 	blmi	84f8d0 <__Stack_Size+0x84f4d0>
     450:	02004b22 	andeq	r4, r0, #34816	; 0x8800
     454:	2e060104 	adfcss	f0, f6, f4
     458:	02005906 	andeq	r5, r0, #98304	; 0x18000
     45c:	00670104 	rsbeq	r0, r7, r4, lsl #2
     460:	64020402 	strvs	r0, [r2], #-1026	; 0xfffffbfe
     464:	2f163202 	svccs	0x00163202
     468:	6732212d 	ldrvs	r2, [r2, -sp, lsr #2]!
     46c:	9f681e22 	svcls	0x00681e22
     470:	4e31676c 	cdpmi	7, 3, cr6, cr1, cr12, {3}
     474:	01040200 	mrseq	r0, R12_usr
     478:	4b062e06 	blmi	18bc98 <__Stack_Size+0x18b898>
     47c:	001e223f 	andseq	r2, lr, pc, lsr r2
     480:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
     484:	03040200 	movweq	r0, #16896	; 0x4200
     488:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
     48c:	02002f03 	andeq	r2, r0, #3, 30
     490:	232d0304 			; <UNDEFINED> instruction: 0x232d0304
     494:	01001502 	tsteq	r0, r2, lsl #10
     498:	02050001 	andeq	r0, r5, #1
     49c:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
     4a0:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
     4a4:	3e4d3122 	dvfccep	f3, f5, f2
     4a8:	2803301e 	stmdacs	r3, {r1, r2, r3, r4, ip, sp}
     4ac:	58130320 	ldmdapl	r3, {r5, r8, r9}
     4b0:	032e7803 			; <UNDEFINED> instruction: 0x032e7803
     4b4:	3f3f4a50 	svccc	0x003f4a50
     4b8:	694d3f3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
     4bc:	01040200 	mrseq	r0, R12_usr
     4c0:	003e5c3f 	eorseq	r5, lr, pc, lsr ip
     4c4:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
     4c8:	01000902 	tsteq	r0, r2, lsl #18
     4cc:	02050001 	andeq	r0, r5, #1
     4d0:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
     4d4:	0109ce03 	tsteq	r9, r3, lsl #28
     4d8:	032e0c03 			; <UNDEFINED> instruction: 0x032e0c03
     4dc:	22282074 	eorcs	r2, r8, #116	; 0x74
     4e0:	79033322 	stmdbvc	r3, {r1, r5, r8, r9, ip, sp}
     4e4:	312f2c20 			; <UNDEFINED> instruction: 0x312f2c20
     4e8:	342c2232 	strtcc	r2, [ip], #-562	; 0xfffffdce
     4ec:	2e7a032f 	cdpcs	3, 7, cr0, cr10, cr15, {1}
     4f0:	0c03342f 	cfstrseq	mvf3, [r3], {47}	; 0x2f
     4f4:	0d032d2e 	stceq	13, cr2, [r3, #-184]	; 0xffffff48
     4f8:	2e650320 	cdpcs	3, 6, cr0, cr5, cr0, {1}
     4fc:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
     500:	03312e0c 	teqeq	r1, #12, 28	; 0xc0
     504:	2f2f2e7a 	svccs	0x002f2e7a
     508:	2f2b342f 	svccs	0x002b342f
     50c:	1f322f2f 	svcne	0x00322f2f
     510:	3e2d2c31 	mcrcc	12, 1, r2, cr13, cr1, {1}
     514:	315a302f 	cmpcc	sl, pc, lsr #32
     518:	2f2f2f2b 	svccs	0x002f2f2b
     51c:	2f2c2230 	svccs	0x002c2230
     520:	2b23302f 	blcs	8cc5e4 <__Stack_Size+0x8cc1e4>
     524:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     528:	4c4d4b4c 	mcrrmi	11, 4, r4, sp, cr12
     52c:	000a024d 	andeq	r0, sl, sp, asr #4
     530:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     534:	0009d002 	andeq	sp, r9, r2
     538:	0aa50308 	beq	fe941160 <SCS_BASE+0x1e933160>
     53c:	200b0301 	andcs	r0, fp, r1, lsl #6
     540:	7903355d 	stmdbvc	r3, {r0, r2, r3, r4, r6, r8, sl, ip, sp}
     544:	241f3320 	ldrcs	r3, [pc], #-800	; 54c <__Stack_Size+0x14c>
     548:	2f2f2f1c 	svccs	0x002f2f1c
     54c:	1c24312f 	stfnes	f3, [r4], #-188	; 0xffffff44
     550:	2f2f2f2f 	svccs	0x002f2f2f
     554:	2f1c2431 	svccs	0x001c2431
     558:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     55c:	2f2f1c24 	svccs	0x002f1c24
     560:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
     564:	01010002 	tsteq	r1, r2
     568:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     56c:	0308000a 	movweq	r0, #32778	; 0x800a
     570:	2201019b 	andcs	r0, r1, #-1073741786	; 0xc0000026
     574:	31303131 	teqcc	r0, r1, lsr r1
     578:	3e4c3e4d 	cdpcc	14, 4, cr3, cr12, cr13, {2}
     57c:	593c0c03 	ldmdbpl	ip!, {r0, r1, sl, fp}
     580:	31211f4b 			; <UNDEFINED> instruction: 0x31211f4b
     584:	25446731 	strbcs	r6, [r4, #-1841]	; 0xfffff8cf
     588:	2f4e251b 	svccs	0x004e251b
     58c:	01040200 	mrseq	r0, R12_usr
     590:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
     594:	06660602 	strbteq	r0, [r6], -r2, lsl #12
     598:	302e1903 	eorcc	r1, lr, r3, lsl #18
     59c:	01040200 	mrseq	r0, R12_usr
     5a0:	402e6a03 	eormi	r6, lr, r3, lsl #20
     5a4:	01000e02 	tsteq	r0, r2, lsl #28
     5a8:	0000f201 	andeq	pc, r0, r1, lsl #4
     5ac:	7c000200 	sfmvc	f0, 4, [r0], {-0}
     5b0:	02000000 	andeq	r0, r0, #0
     5b4:	0d0efb01 	vstreq	d15, [lr, #-4]
     5b8:	01010100 	mrseq	r0, (UNDEF: 17)
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	01000001 	tsteq	r0, r1
     5c4:	2f62696c 	svccs	0x0062696c
     5c8:	00636e69 	rsbeq	r6, r3, r9, ror #28
     5cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5d0:	31663233 	cmncc	r6, r3, lsr r2
     5d4:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     5d8:	00632e74 	rsbeq	r2, r3, r4, ror lr
     5dc:	73000000 	movwvc	r0, #0
     5e0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     5e8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5ec:	00682e65 	rsbeq	r2, r8, r5, ror #28
     5f0:	73000001 	movwvc	r0, #1
     5f4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     5f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     5fc:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     600:	0100682e 	tsteq	r0, lr, lsr #16
     604:	74730000 	ldrbtvc	r0, [r3], #-0
     608:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     60c:	5f783031 	svcpl	0x00783031
     610:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
     614:	00010068 	andeq	r0, r1, r8, rrx
     618:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     61c:	31663233 	cmncc	r6, r3, lsr r2
     620:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffffdf8 <SCS_BASE+0x1fff1df8>
     624:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
     628:	0100682e 	tsteq	r0, lr, lsr #16
     62c:	00000000 	andeq	r0, r0, r0
     630:	0b100205 	bleq	400e4c <__Stack_Size+0x400a4c>
     634:	8c030800 	stchi	8, cr0, [r3], {-0}
     638:	3e170101 	mufccs	f0, f7, f1
     63c:	01000702 	tsteq	r0, r2, lsl #14
     640:	02050001 	andeq	r0, r5, #1
     644:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
     648:	0102fd03 	tsteq	r2, r3, lsl #26	; <UNPREDICTABLE>
     64c:	00020213 	andeq	r0, r2, r3, lsl r2
     650:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     654:	000b5002 	andeq	r5, fp, r2
     658:	03dc0308 	bicseq	r0, ip, #8, 6	; 0x20000000
     65c:	5e230101 	sufpls	f0, f3, f1
     660:	0002022c 	andeq	r0, r2, ip, lsr #4
     664:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     668:	000b7402 	andeq	r7, fp, r2, lsl #8
     66c:	04cd0308 	strbeq	r0, [sp], #776	; 0x308
     670:	67210101 	strvs	r0, [r1, -r1, lsl #2]!
     674:	01001302 	tsteq	r0, r2, lsl #6
     678:	02050001 	andeq	r0, r5, #1
     67c:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
     680:	0104dd03 	tsteq	r4, r3, lsl #26
     684:	207a0318 	rsbscs	r0, sl, r8, lsl r3
     688:	0802d726 	stmdaeq	r2, {r1, r2, r5, r8, r9, sl, ip, lr, pc}
     68c:	00010100 	andeq	r0, r1, r0, lsl #2
     690:	0c000205 	sfmeq	f0, 4, [r0], {5}
     694:	d3030800 	movwle	r0, #14336	; 0x3800
     698:	01020106 	tsteq	r2, r6, lsl #2
     69c:	43010100 	movwmi	r0, #4352	; 0x1100
     6a0:	02000000 	andeq	r0, r0, #0
     6a4:	00003d00 	andeq	r3, r0, r0, lsl #26
     6a8:	fb010200 	blx	40eb2 <__Stack_Size+0x40ab2>
     6ac:	01000d0e 	tsteq	r0, lr, lsl #26
     6b0:	00010101 	andeq	r0, r1, r1, lsl #2
     6b4:	00010000 	andeq	r0, r1, r0
     6b8:	696c0100 	stmdbvs	ip!, {r8}^
     6bc:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     6c0:	75000063 	strvc	r0, [r0, #-99]	; 0xffffff9d
     6c4:	645f6273 	ldrbvs	r6, [pc], #-627	; 6cc <__Stack_Size+0x2cc>
     6c8:	2e637365 	cdpcs	3, 6, cr7, cr3, cr5, {3}
     6cc:	00000063 	andeq	r0, r0, r3, rrx
     6d0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     6d4:	31663233 	cmncc	r6, r3, lsr r2
     6d8:	745f7830 	ldrbvc	r7, [pc], #-2096	; 6e0 <__Stack_Size+0x2e0>
     6dc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     6e0:	00010068 	andeq	r0, r1, r8, rrx
     6e4:	01610000 	cmneq	r1, r0
     6e8:	00020000 	andeq	r0, r2, r0
     6ec:	0000008c 	andeq	r0, r0, ip, lsl #1
     6f0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6f4:	0101000d 	tsteq	r1, sp
     6f8:	00000101 	andeq	r0, r0, r1, lsl #2
     6fc:	00000100 	andeq	r0, r0, r0, lsl #2
     700:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     704:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     708:	62696c00 	rsbvs	r6, r9, #0, 24
     70c:	4253552f 	subsmi	r5, r3, #197132288	; 0xbc00000
     710:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     714:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     718:	73750000 	cmnvc	r5, #0
     71c:	6e655f62 	cdpvs	15, 6, cr5, cr5, cr2, {3}
     720:	632e7064 			; <UNDEFINED> instruction: 0x632e7064
     724:	00000000 	andeq	r0, r0, r0
     728:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     72c:	30316632 	eorscc	r6, r1, r2, lsr r6
     730:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     734:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     738:	00000100 	andeq	r0, r0, r0, lsl #2
     73c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     740:	30316632 	eorscc	r6, r1, r2, lsr r6
     744:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     748:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     74c:	00010068 	andeq	r0, r1, r8, rrx
     750:	62737500 	rsbsvs	r7, r3, #0, 10
     754:	6c69735f 	stclvs	3, cr7, [r9], #-380	; 0xfffffe84
     758:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     75c:	73750000 	cmnvc	r5, #0
     760:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     764:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
     768:	00000200 	andeq	r0, r0, r0, lsl #4
     76c:	53552f2e 	cmppl	r5, #46, 30	; 0xb8
     770:	696e4942 	stmdbvs	lr!, {r1, r6, r8, fp, lr}^
     774:	00682e74 	rsbeq	r2, r8, r4, ror lr
     778:	00000000 	andeq	r0, r0, r0
     77c:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
     780:	0308000c 	movweq	r0, #32780	; 0x800c
     784:	140100c1 	strne	r0, [r1], #-193	; 0xffffff3f
     788:	01000602 	tsteq	r0, r2, lsl #12
     78c:	02050001 	andeq	r0, r5, #1
     790:	08000c10 	stmdaeq	r0, {r4, sl, fp}
     794:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
     798:	207a0334 	rsbscs	r0, sl, r4, lsr r3
     79c:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     7a0:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     7a4:	0b032326 	bleq	c9444 <__Stack_Size+0xc9044>
     7a8:	2015034a 	andscs	r0, r5, sl, asr #6
     7ac:	222e6003 	eorcs	r6, lr, #3
     7b0:	01040200 	mrseq	r0, R12_usr
     7b4:	36062006 	strcc	r2, [r6], -r6
     7b8:	1f671fbb 	svcne	0x00671fbb
     7bc:	32684c21 	rsbcc	r4, r8, #8448	; 0x2100
     7c0:	4c233d4c 	stcmi	13, cr3, [r3], #-304	; 0xfffffed0
     7c4:	02040200 	andeq	r0, r4, #0, 4
     7c8:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
     7cc:	02003e02 	andeq	r3, r0, #2, 28
     7d0:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
     7d4:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     7d8:	201e0302 	andscs	r0, lr, r2, lsl #6
     7dc:	02040200 	andeq	r0, r4, #0, 4
     7e0:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     7e4:	02001e02 	andeq	r1, r0, #2, 28
     7e8:	00300204 	eorseq	r0, r0, r4, lsl #4
     7ec:	03020402 	movweq	r0, #9218	; 0x2402
     7f0:	02002060 	andeq	r2, r0, #96	; 0x60
     7f4:	20030204 	andcs	r0, r3, r4, lsl #4
     7f8:	4d304020 	ldcmi	0, cr4, [r0, #-128]!	; 0xffffff80
     7fc:	301e1e4c 	andscc	r1, lr, ip, asr #28
     800:	2009031e 	andcs	r0, r9, lr, lsl r3
     804:	01001502 	tsteq	r0, r2, lsl #10
     808:	02050001 	andeq	r0, r5, #1
     80c:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
     810:	0100d903 	tsteq	r0, r3, lsl #18
     814:	4a090323 	bmi	2414a8 <__Stack_Size+0x2410a8>
     818:	03207703 			; <UNDEFINED> instruction: 0x03207703
     81c:	77032009 	strvc	r2, [r3, -r9]
     820:	20090320 	andcs	r0, r9, r0, lsr #6
     824:	03207703 			; <UNDEFINED> instruction: 0x03207703
     828:	2f212e09 	svccs	0x00212e09
     82c:	7a03265b 	bvc	ca1a0 <__Stack_Size+0xc9da0>
     830:	022ca620 	eoreq	sl, ip, #32, 12	; 0x2000000
     834:	0101000c 	tsteq	r1, ip
     838:	00020500 	andeq	r0, r2, r0, lsl #10
     83c:	03000000 	movweq	r0, #0
     840:	150101be 	strne	r0, [r1, #-446]	; 0xfffffe42
     844:	07025b4c 	streq	r5, [r2, -ip, asr #22]
     848:	8e010100 	adfhis	f0, f1, f0
     84c:	02000000 	andeq	r0, r0, #0
     850:	00006800 	andeq	r6, r0, r0, lsl #16
     854:	fb010200 	blx	4105e <__Stack_Size+0x40c5e>
     858:	01000d0e 	tsteq	r0, lr, lsl #26
     85c:	00010101 	andeq	r0, r1, r1, lsl #2
     860:	00010000 	andeq	r0, r1, r0
     864:	696c0100 	stmdbvs	ip!, {r8}^
     868:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     86c:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
     870:	53552f62 	cmppl	r5, #392	; 0x188
     874:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
     878:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     87c:	75000063 	strvc	r0, [r0, #-99]	; 0xffffff9d
     880:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     884:	2e727473 	mrccs	4, 3, r7, cr2, cr3, {3}
     888:	00000063 	andeq	r0, r0, r3, rrx
     88c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     890:	31663233 	cmncc	r6, r3, lsr r2
     894:	745f7830 	ldrbvc	r7, [pc], #-2096	; 89c <__Stack_Size+0x49c>
     898:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     89c:	00010068 	andeq	r0, r1, r8, rrx
     8a0:	62737500 	rsbsvs	r7, r3, #0, 10
     8a4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     8a8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8ac:	75000002 	strvc	r0, [r0, #-2]
     8b0:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     8b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     8b8:	00000200 	andeq	r0, r0, r0, lsl #4
     8bc:	02050000 	andeq	r0, r5, #0
     8c0:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
     8c4:	22013e03 	andcs	r3, r1, #3, 28	; 0x30
     8c8:	1f2f435b 	svcne	0x002f435b
     8cc:	09035021 	stmdbeq	r3, {r0, r5, ip, lr}
     8d0:	3d44343c 	cfstrdcc	mvd3, [r4, #-240]	; 0xffffff10
     8d4:	36503543 	ldrbcc	r3, [r0], -r3, asr #10
     8d8:	01000d02 	tsteq	r0, r2, lsl #26
     8dc:	00020f01 	andeq	r0, r2, r1, lsl #30
     8e0:	ba000200 	blt	10e8 <__Stack_Size+0xce8>
     8e4:	02000000 	andeq	r0, r0, #0
     8e8:	0d0efb01 	vstreq	d15, [lr, #-4]
     8ec:	01010100 	mrseq	r0, (UNDEF: 17)
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	01000001 	tsteq	r0, r1
     8f8:	2f62696c 	svccs	0x0062696c
     8fc:	00636e69 	rsbeq	r6, r3, r9, ror #28
     900:	2f62696c 	svccs	0x0062696c
     904:	5f425355 	svcpl	0x00425355
     908:	2f62696c 	svccs	0x0062696c
     90c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     910:	62737500 	rsbsvs	r7, r3, #0, 10
     914:	6f72705f 	svcvs	0x0072705f
     918:	00632e70 	rsbeq	r2, r3, r0, ror lr
     91c:	73000000 	movwvc	r0, #0
     920:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     924:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     928:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     92c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     930:	75000001 	strvc	r0, [r0, #-1]
     934:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
     938:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
     93c:	00020068 	andeq	r0, r2, r8, rrx
     940:	62737500 	rsbsvs	r7, r3, #0, 10
     944:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     948:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     94c:	73750000 	cmnvc	r5, #0
     950:	72705f62 	rsbsvc	r5, r0, #392	; 0x188
     954:	682e706f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}
     958:	00000000 	andeq	r0, r0, r0
     95c:	49425355 	stmdbmi	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
     960:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     964:	00000068 	andeq	r0, r0, r8, rrx
     968:	62737500 	rsbsvs	r7, r3, #0, 10
     96c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     970:	00682e74 	rsbeq	r2, r8, r4, ror lr
     974:	75000002 	strvc	r0, [r0, #-2]
     978:	645f6273 	ldrbvs	r6, [pc], #-627	; 980 <__Stack_Size+0x580>
     97c:	2e637365 	cdpcs	3, 6, cr7, cr3, cr5, {3}
     980:	00000068 	andeq	r0, r0, r8, rrx
     984:	62737500 	rsbsvs	r7, r3, #0, 10
     988:	6c69735f 	stclvs	3, cr7, [r9], #-380	; 0xfffffe84
     98c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     990:	73750000 	cmnvc	r5, #0
     994:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     998:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
     99c:	00000200 	andeq	r0, r0, r0, lsl #4
     9a0:	02050000 	andeq	r0, r5, #0
     9a4:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
     9a8:	0101c903 	tsteq	r1, r3, lsl #18
     9ac:	09023f15 	stmdbeq	r2, {r0, r2, r4, r8, r9, sl, fp, ip, sp}
     9b0:	00010100 	andeq	r0, r1, r0, lsl #2
     9b4:	0dec0205 	sfmeq	f0, 2, [ip, #20]!
     9b8:	db030800 	blle	c29c0 <__Stack_Size+0xc25c0>
     9bc:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     9c0:	01010006 	tsteq	r1, r6
     9c4:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
     9c8:	0308000d 	movweq	r0, #32781	; 0x800d
     9cc:	130101e8 	movwne	r0, #4584	; 0x11e8
     9d0:	00070241 	andeq	r0, r7, r1, asr #4
     9d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     9d8:	000e0c02 	andeq	r0, lr, r2, lsl #24
     9dc:	01fb0308 	mvnseq	r0, r8, lsl #6
     9e0:	00010201 	andeq	r0, r1, r1, lsl #4
     9e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     9e8:	000e1002 	andeq	r1, lr, r2
     9ec:	02880308 	addeq	r0, r8, #8, 6	; 0x20000000
     9f0:	79031901 	stmdbvc	r3, {r0, r8, fp, ip}
     9f4:	03222720 			; <UNDEFINED> instruction: 0x03222720
     9f8:	75037410 	strvc	r7, [r3, #-1040]	; 0xfffffbf0
     9fc:	1c24302e 	stcne	0, cr3, [r4], #-184	; 0xffffff48
     a00:	4f301c32 	svcmi	0x00301c32
     a04:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
     a08:	1f212011 	svcne	0x00212011
     a0c:	21211e22 			; <UNDEFINED> instruction: 0x21211e22
     a10:	0a022121 	beq	88e9c <__Stack_Size+0x88a9c>
     a14:	00010100 	andeq	r0, r1, r0, lsl #2
     a18:	0e6c0205 	cdpeq	2, 6, cr0, cr12, cr5, {0}
     a1c:	b4030800 	strlt	r0, [r3], #-2048	; 0xfffff800
     a20:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
     a24:	523e7601 	eorspl	r7, lr, #1048576	; 0x100000
     a28:	00030221 	andeq	r0, r3, r1, lsr #4
     a2c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     a30:	000e9002 	andeq	r9, lr, r2
     a34:	038e0308 	orreq	r0, lr, #8, 6	; 0x20000000
     a38:	24241401 	strtcs	r1, [r4], #-1025	; 0xfffffbff
     a3c:	274a7a03 	strbcs	r7, [sl, -r3, lsl #20]
     a40:	01000102 	tsteq	r0, r2, lsl #2
     a44:	02050001 	andeq	r0, r5, #1
     a48:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
     a4c:	0103a303 	tsteq	r3, r3, lsl #6
     a50:	22010e03 	andcs	r0, r1, #3, 28	; 0x30
     a54:	0221224b 	eoreq	r2, r1, #-1342177276	; 0xb0000004
     a58:	01010005 	tsteq	r1, r5
     a5c:	b8020500 	stmdalt	r2, {r8, sl}
     a60:	0308000e 	movweq	r0, #32782	; 0x800e
     a64:	160103c1 	strne	r0, [r1], -r1, asr #7
     a68:	4b224c4c 	blmi	893ba0 <__Stack_Size+0x8937a0>
     a6c:	07022123 	streq	r2, [r2, -r3, lsr #2]
     a70:	00010100 	andeq	r0, r1, r0, lsl #2
     a74:	0ee40205 	cdpeq	2, 14, cr0, cr4, cr5, {0}
     a78:	ea030800 	b	c2a80 <__Stack_Size+0xc2680>
     a7c:	30240100 	eorcc	r0, r4, r0, lsl #2
     a80:	0230314d 	eorseq	r3, r0, #1073741843	; 0x40000013
     a84:	01010007 	tsteq	r1, r7
     a88:	08020500 	stmdaeq	r2, {r8, sl}
     a8c:	0308000f 	movweq	r0, #32783	; 0x800f
     a90:	14010184 	strne	r0, [r1], #-388	; 0xfffffe7c
     a94:	1b231d23 	blne	8c7f28 <__Stack_Size+0x8c7b28>
     a98:	261d2322 	ldrcs	r2, [sp], -r2, lsr #6
     a9c:	3f200f03 	svccc	0x00200f03
     aa0:	4b4b4b59 	blmi	12d380c <__Stack_Size+0x12d340c>
     aa4:	4b3f673d 	blmi	fda7a0 <__Stack_Size+0xfda3a0>
     aa8:	594d4b4b 	stmdbpl	sp, {r0, r1, r3, r6, r8, r9, fp, lr}^
     aac:	4b4d4b59 	blmi	1353818 <__Stack_Size+0x1353418>
     ab0:	4d594b59 	vldrmi	d20, [r9, #-356]	; 0xfffffe9c
     ab4:	000c023f 	andeq	r0, ip, pc, lsr r2
     ab8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     abc:	000fe802 	andeq	lr, pc, r2, lsl #16
     ac0:	02dd0308 	sbcseq	r0, sp, #8, 6	; 0x20000000
     ac4:	06021401 	streq	r1, [r2], -r1, lsl #8
     ac8:	00010100 	andeq	r0, r1, r0, lsl #2
     acc:	0ff40205 	svceq	0x00f40205
     ad0:	ea030800 	b	c2ad8 <__Stack_Size+0xc26d8>
     ad4:	02140102 	andseq	r0, r4, #-2147483648	; 0x80000000
     ad8:	01010006 	tsteq	r1, r6
     adc:	00020500 	andeq	r0, r2, r0, lsl #10
     ae0:	03080010 	movweq	r0, #32784	; 0x8010
     ae4:	140102f7 	strne	r0, [r1], #-759	; 0xfffffd09
     ae8:	025a343d 	subseq	r3, sl, #1023410176	; 0x3d000000
     aec:	01010006 	tsteq	r1, r6
     af0:	00000189 	andeq	r0, r0, r9, lsl #3
     af4:	00c50002 	sbceq	r0, r5, r2
     af8:	01020000 	mrseq	r0, (UNDEF: 2)
     afc:	000d0efb 	strdeq	r0, [sp], -fp
     b00:	01010101 	tsteq	r1, r1, lsl #2
     b04:	01000000 	mrseq	r0, (UNDEF: 0)
     b08:	6c010000 	stcvs	0, cr0, [r1], {-0}
     b0c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     b10:	6c00636e 	stcvs	3, cr6, [r0], {110}	; 0x6e
     b14:	552f6269 	strpl	r6, [pc, #-617]!	; 8b3 <__Stack_Size+0x4b3>
     b18:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
     b1c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     b20:	0000636e 	andeq	r6, r0, lr, ror #6
     b24:	49425355 	stmdbmi	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
     b28:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     b2c:	00000063 	andeq	r0, r0, r3, rrx
     b30:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     b34:	31663233 	cmncc	r6, r3, lsr r2
     b38:	745f7830 	ldrbvc	r7, [pc], #-2096	; b40 <__Stack_Size+0x740>
     b3c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     b40:	00010068 	andeq	r0, r1, r8, rrx
     b44:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     b48:	31663233 	cmncc	r6, r3, lsr r2
     b4c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; a94 <__Stack_Size+0x694>
     b50:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     b54:	00000100 	andeq	r0, r0, r0, lsl #2
     b58:	5f627375 	svcpl	0x00627375
     b5c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     b60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     b64:	53550000 	cmppl	r5, #0
     b68:	696e4942 	stmdbvs	lr!, {r1, r6, r8, fp, lr}^
     b6c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     b70:	75000000 	strvc	r0, [r0, #-0]
     b74:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     b78:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     b7c:	00020068 	andeq	r0, r2, r8, rrx
     b80:	62737500 	rsbsvs	r7, r3, #0, 10
     b84:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     b88:	00682e63 	rsbeq	r2, r8, r3, ror #28
     b8c:	73000000 	movwvc	r0, #0
     b90:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b94:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b98:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     b9c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     ba0:	75000001 	strvc	r0, [r0, #-1]
     ba4:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 9e0 <__Stack_Size+0x5e0>
     ba8:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     bac:	00000200 	andeq	r0, r0, r0, lsl #4
     bb0:	5f627375 	svcpl	0x00627375
     bb4:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
     bb8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	10200205 	eorne	r0, r0, r5, lsl #4
     bc4:	f3030800 	vsub.i8	d0, d3, d0
     bc8:	1d150102 	ldfnes	f0, [r5, #-8]
     bcc:	00201003 	eoreq	r1, r0, r3
     bd0:	03010402 	movweq	r0, #5122	; 0x1402
     bd4:	303e2073 	eorscc	r2, lr, r3, ror r0
     bd8:	222c4132 	eorcs	r4, ip, #-2147483636	; 0x8000000c
     bdc:	0001023e 	andeq	r0, r1, lr, lsr r2
     be0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     be4:	00104802 	andseq	r4, r0, r2, lsl #16
     be8:	01270308 			; <UNDEFINED> instruction: 0x01270308
     bec:	20028303 	andcs	r8, r2, r3, lsl #6
     bf0:	587e8603 	ldmdapl	lr!, {r0, r1, r9, sl, pc}^
     bf4:	1c241e42 	stcne	14, cr1, [r4], #-264	; 0xfffffef8
     bf8:	243d2222 	ldrtcs	r2, [sp], #-546	; 0xfffffdde
     bfc:	01000a02 	tsteq	r0, r2, lsl #20
     c00:	02050001 	andeq	r0, r5, #1
     c04:	00000000 	andeq	r0, r0, r0
     c08:	0100da03 	tsteq	r0, r3, lsl #20
     c0c:	00020213 	andeq	r0, r2, r3, lsl r2
     c10:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     c14:	00108002 	andseq	r8, r0, r2
     c18:	02a60308 	adceq	r0, r6, #8, 6	; 0x20000000
     c1c:	232b1601 			; <UNDEFINED> instruction: 0x232b1601
     c20:	00060241 	andeq	r0, r6, r1, asr #4
     c24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     c28:	00109802 	andseq	r9, r0, r2, lsl #16
     c2c:	00c70308 	sbceq	r0, r7, r8, lsl #6
     c30:	3e3e2301 	cdpcc	3, 3, cr2, cr14, cr1, {0}
     c34:	0602353e 			; <UNDEFINED> instruction: 0x0602353e
     c38:	00010100 	andeq	r0, r1, r0, lsl #2
     c3c:	10bc0205 	adcsne	r0, ip, r5, lsl #4
     c40:	df030800 	svcle	0x00030800
     c44:	02130100 	andseq	r0, r3, #0, 2
     c48:	01010002 	tsteq	r1, r2
     c4c:	c0020500 	andgt	r0, r2, r0, lsl #10
     c50:	03080010 	movweq	r0, #32784	; 0x8010
     c54:	160102bb 			; <UNDEFINED> instruction: 0x160102bb
     c58:	21231d1f 			; <UNDEFINED> instruction: 0x21231d1f
     c5c:	4b302421 	blmi	c09ce8 <__Stack_Size+0xc098e8>
     c60:	0d022b23 	vstreq	d2, [r2, #-140]	; 0xffffff74
     c64:	00010100 	andeq	r0, r1, r0, lsl #2
     c68:	10f80205 	rscsne	r0, r8, r5, lsl #4
     c6c:	dd030800 	stcle	8, cr0, [r3, #-0]
     c70:	40200102 	eormi	r0, r0, r2, lsl #2
     c74:	3e4b593e 	mcrcc	9, 2, r5, cr11, cr14, {1}
     c78:	01000202 	tsteq	r0, r2, lsl #4
     c7c:	00030e01 	andeq	r0, r3, r1, lsl #28
     c80:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
     c84:	02000000 	andeq	r0, r0, #0
     c88:	0d0efb01 	vstreq	d15, [lr, #-4]
     c8c:	01010100 	mrseq	r0, (UNDEF: 17)
     c90:	00000001 	andeq	r0, r0, r1
     c94:	01000001 	tsteq	r0, r1
     c98:	2f62696c 	svccs	0x0062696c
     c9c:	00637273 	rsbeq	r7, r3, r3, ror r2
     ca0:	2f62696c 	svccs	0x0062696c
     ca4:	00636e69 	rsbeq	r6, r3, r9, ror #28
     ca8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     cac:	31663233 	cmncc	r6, r3, lsr r2
     cb0:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
     cb4:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     cb8:	0100632e 	tsteq	r0, lr, lsr #6
     cbc:	74730000 	ldrbtvc	r0, [r3], #-0
     cc0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     cc4:	5f783031 	svcpl	0x00783031
     cc8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     ccc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     cd0:	74730000 	ldrbtvc	r0, [r3], #-0
     cd4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     cd8:	5f783031 	svcpl	0x00783031
     cdc:	2e70616d 	rpwcssz	f6, f0, #5.0
     ce0:	00020068 	andeq	r0, r2, r8, rrx
     ce4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     ce8:	31663233 	cmncc	r6, r3, lsr r2
     cec:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
     cf0:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     cf4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	11240205 			; <UNDEFINED> instruction: 0x11240205
     d00:	d6030800 	strle	r0, [r3], -r0, lsl #16
     d04:	59170100 	ldmdbpl	r7, {r8}
     d08:	01000702 	tsteq	r0, r2, lsl #14
     d0c:	02050001 	andeq	r0, r5, #1
     d10:	00000000 	andeq	r0, r0, r0
     d14:	0100ea03 	tsteq	r0, r3, lsl #20
     d18:	07025917 	smladeq	r2, r7, r9, r5
     d1c:	00010100 	andeq	r0, r1, r0, lsl #2
     d20:	113c0205 	teqne	ip, r5, lsl #4
     d24:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
     d28:	59170100 	ldmdbpl	r7, {r8}
     d2c:	01000702 	tsteq	r0, r2, lsl #14
     d30:	02050001 	andeq	r0, r5, #1
     d34:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
     d38:	01019003 	tsteq	r1, r3
     d3c:	09023d14 	stmdbeq	r2, {r2, r4, r8, sl, fp, ip, sp}
     d40:	00010100 	andeq	r0, r1, r0, lsl #2
     d44:	116c0205 	cmnne	ip, r5, lsl #4
     d48:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     d4c:	02140101 	andseq	r0, r4, #1073741824	; 0x40000000
     d50:	01010008 	tsteq	r1, r8
     d54:	00020500 	andeq	r0, r2, r0, lsl #10
     d58:	03000000 	movweq	r0, #0
     d5c:	14010596 	strne	r0, [r1], #-1430	; 0xfffffa6a
     d60:	0004022f 	andeq	r0, r4, pc, lsr #4
     d64:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     d68:	00000002 	andeq	r0, r0, r2
     d6c:	05a30300 	streq	r0, [r3, #768]!	; 0x300
     d70:	022f1401 	eoreq	r1, pc, #16777216	; 0x1000000
     d74:	01010004 	tsteq	r1, r4
     d78:	00020500 	andeq	r0, r2, r0, lsl #10
     d7c:	03000000 	movweq	r0, #0
     d80:	150105b1 	strne	r0, [r1, #-1457]	; 0xfffffa4f
     d84:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
     d88:	01010006 	tsteq	r1, r6
     d8c:	00020500 	andeq	r0, r2, r0, lsl #10
     d90:	03000000 	movweq	r0, #0
     d94:	150105c7 	strne	r0, [r1, #-1479]	; 0xfffffa39
     d98:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
     d9c:	01010006 	tsteq	r1, r6
     da0:	00020500 	andeq	r0, r2, r0, lsl #10
     da4:	03000000 	movweq	r0, #0
     da8:	280105e2 	stmdacs	r1, {r1, r5, r6, r7, r8, sl}
     dac:	0233231d 	eorseq	r2, r3, #1946157056	; 0x74000000
     db0:	01010007 	tsteq	r1, r7
     db4:	00020500 	andeq	r0, r2, r0, lsl #10
     db8:	03000000 	movweq	r0, #0
     dbc:	18010681 	stmdane	r1, {r0, r7, r9, sl}
     dc0:	1b41263e 	blne	104a6c0 <__Stack_Size+0x104a2c0>
     dc4:	024a1003 	subeq	r1, sl, #3
     dc8:	01010004 	tsteq	r1, r4
     dcc:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
     dd0:	03080011 	movweq	r0, #32785	; 0x8011
     dd4:	170106ae 	strne	r0, [r1, -lr, lsr #13]
     dd8:	01000602 	tsteq	r0, r2, lsl #12
     ddc:	02050001 	andeq	r0, r5, #1
     de0:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
     de4:	0106bf03 	tsteq	r6, r3, lsl #30
     de8:	42425015 	submi	r5, r2, #21
     dec:	344a7003 	strbcc	r7, [sl], #-3
     df0:	02201003 	eoreq	r1, r0, #3
     df4:	01010003 	tsteq	r1, r3
     df8:	b0020500 	andlt	r0, r2, r0, lsl #10
     dfc:	03080011 	movweq	r0, #32785	; 0x8011
     e00:	200106e6 	andcs	r0, r1, r6, ror #13
     e04:	2e1c0324 	cdpcs	3, 1, cr0, cr12, cr4, {1}
     e08:	20650322 	rsbcs	r0, r5, r2, lsr #6
     e0c:	01040200 	mrseq	r0, R12_usr
     e10:	03062e06 	movweq	r2, #28166	; 0x6e06
     e14:	03222019 			; <UNDEFINED> instruction: 0x03222019
     e18:	332f7468 			; <UNDEFINED> instruction: 0x332f7468
     e1c:	0002025d 	andeq	r0, r2, sp, asr r2
     e20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e24:	0011e802 	andseq	lr, r1, r2, lsl #16
     e28:	01ad0308 			; <UNDEFINED> instruction: 0x01ad0308
     e2c:	4c272001 	stcmi	0, cr2, [r7], #-4
     e30:	4b292531 	blmi	a4a2fc <__Stack_Size+0xa49efc>
     e34:	23304d21 	teqcs	r0, #2112	; 0x840
     e38:	0003026b 	andeq	r0, r3, fp, ror #4
     e3c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e40:	00000002 	andeq	r0, r0, r2
     e44:	01d40300 	bicseq	r0, r4, r0, lsl #6
     e48:	314c2401 	cmpcc	ip, r1, lsl #8
     e4c:	4d4b2a24 	vstrmi	s5, [fp, #-144]	; 0xffffff70
     e50:	026b2330 	rsbeq	r2, fp, #48, 6	; 0xc0000000
     e54:	01010003 	tsteq	r1, r3
     e58:	00020500 	andeq	r0, r2, r0, lsl #10
     e5c:	03000000 	movweq	r0, #0
     e60:	240101f7 	strcs	r0, [r1], #-503	; 0xfffffe09
     e64:	0336314c 	teqeq	r6, #76, 2
     e68:	3f212e78 	svccc	0x00212e78
     e6c:	31304d4b 	teqcc	r0, fp, asr #26
     e70:	033c0903 	teqeq	ip, #49152	; 0xc000
     e74:	23312077 	teqcs	r1, #119	; 0x77
     e78:	03313f1d 	teqeq	r1, #29, 30	; 0x74
     e7c:	6c232e0a 	stcvs	14, cr2, [r3], #-40	; 0xffffffd8
     e80:	01000702 	tsteq	r0, r2, lsl #14
     e84:	02050001 	andeq	r0, r5, #1
     e88:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
     e8c:	0102b603 	tsteq	r2, r3, lsl #12
     e90:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
     e94:	32302720 	eorscc	r2, r0, #32, 14	; 0x800000
     e98:	314c1b25 	cmpcc	ip, r5, lsr #22
     e9c:	03313230 	teqeq	r1, #48, 4
     ea0:	6c233c0a 	stcvs	12, cr3, [r3], #-40	; 0xffffffd8
     ea4:	01000402 	tsteq	r0, r2, lsl #8
     ea8:	02050001 	andeq	r0, r5, #1
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	0102f103 	tsteq	r2, r3, lsl #2	; <UNPREDICTABLE>
     eb4:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
     eb8:	31302720 	teqcc	r0, r0, lsr #14
     ebc:	224c1c24 	subcs	r1, ip, #36, 24	; 0x2400
     ec0:	026b2330 	rsbeq	r2, fp, #48, 6	; 0xc0000000
     ec4:	01010004 	tsteq	r1, r4
     ec8:	00020500 	andeq	r0, r2, r0, lsl #10
     ecc:	03000000 	movweq	r0, #0
     ed0:	20010399 	mulcs	r1, r9, r3
     ed4:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     ed8:	33313026 	teqcc	r1, #38	; 0x26
     edc:	243f211b 	ldrtcs	r2, [pc], #-283	; ee4 <__Stack_Size+0xae4>
     ee0:	30233d1c 	eorcc	r3, r3, ip, lsl sp
     ee4:	06026b23 	streq	r6, [r2], -r3, lsr #22
     ee8:	00010100 	andeq	r0, r1, r0, lsl #2
     eec:	00000205 	andeq	r0, r0, r5, lsl #4
     ef0:	ca030000 	bgt	c0ef8 <__Stack_Size+0xc0af8>
     ef4:	03200103 			; <UNDEFINED> instruction: 0x03200103
     ef8:	033e200f 	teqeq	lr, #15
     efc:	0c032e77 	stceq	14, cr2, [r3], {119}	; 0x77
     f00:	2e750320 	cdpcs	3, 7, cr0, cr5, cr0, {1}
     f04:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
     f08:	3e1e223d 	mrccc	2, 0, r2, cr14, cr13, {1}
     f0c:	03207203 			; <UNDEFINED> instruction: 0x03207203
     f10:	23372e15 	teqcs	r7, #336	; 0x150
     f14:	3e30231d 	mrccc	3, 1, r2, cr0, cr13, {0}
     f18:	31231d23 			; <UNDEFINED> instruction: 0x31231d23
     f1c:	032e6403 			; <UNDEFINED> instruction: 0x032e6403
     f20:	23302e1c 	teqcs	r0, #28, 28	; 0x1c0
     f24:	0331231d 	teqeq	r1, #1946157056	; 0x74000000
     f28:	23032e5d 	movwcs	r2, #15965	; 0x3e5d
     f2c:	5b034c20 	blpl	d3fb4 <__Stack_Size+0xd3bb4>
     f30:	20250320 	eorcs	r0, r5, r0, lsr #6
     f34:	6b313f23 	blvs	c50bc8 <__Stack_Size+0xc507c8>
     f38:	01000702 	tsteq	r0, r2, lsl #14
     f3c:	02050001 	andeq	r0, r5, #1
     f40:	00000000 	andeq	r0, r0, r0
     f44:	01049903 	tsteq	r4, r3, lsl #18
     f48:	314c2620 	cmpcc	ip, r0, lsr #12
     f4c:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
     f50:	4d4b3e21 	stclmi	14, cr3, [fp, #-132]	; 0xffffff7c
     f54:	5a5b3130 	bpl	16cd41c <__Stack_Size+0x16cd01c>
     f58:	4c323222 	lfmmi	f3, 4, [r2], #-136	; 0xffffff78
     f5c:	6c237931 	stcvs	9, cr7, [r3], #-196	; 0xffffff3c
     f60:	01000702 	tsteq	r0, r2, lsl #14
     f64:	02050001 	andeq	r0, r5, #1
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0104ea03 	tsteq	r4, r3, lsl #20
     f70:	03200903 			; <UNDEFINED> instruction: 0x03200903
     f74:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
     f78:	033f2120 	teqeq	pc, #32, 2
     f7c:	0d032073 	stceq	0, cr2, [r3, #-460]	; 0xfffffe34
     f80:	2231302e 	eorscs	r3, r1, #46	; 0x2e
     f84:	3e4d3e2c 	cdpcc	14, 4, cr3, cr13, cr12, {1}
     f88:	07026b23 	streq	r6, [r2, -r3, lsr #22]
     f8c:	cd010100 	stfgts	f0, [r1, #-0]
     f90:	02000000 	andeq	r0, r0, #0
     f94:	00005e00 	andeq	r5, r0, r0, lsl #28
     f98:	fb010200 	blx	417a2 <__Stack_Size+0x413a2>
     f9c:	01000d0e 	tsteq	r0, lr, lsl #26
     fa0:	00010101 	andeq	r0, r1, r1, lsl #2
     fa4:	00010000 	andeq	r0, r1, r0
     fa8:	696c0100 	stmdbvs	ip!, {r8}^
     fac:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     fb0:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
     fb4:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     fb8:	73000063 	movwvc	r0, #99	; 0x63
     fbc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fc0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fc4:	6477695f 	ldrbtvs	r6, [r7], #-2399	; 0xfffff6a1
     fc8:	00632e67 	rsbeq	r2, r3, r7, ror #28
     fcc:	73000001 	movwvc	r0, #1
     fd0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fd4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fd8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fdc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fe0:	73000002 	movwvc	r0, #2
     fe4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fe8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fec:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     ff0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	12700205 	rsbsne	r0, r0, #1342177280	; 0x50000000
     ffc:	2d030800 	stccs	8, cr0, [r3, #-0]
    1000:	06021601 	streq	r1, [r2], -r1, lsl #12
    1004:	00010100 	andeq	r0, r1, r0, lsl #2
    1008:	127c0205 	rsbsne	r0, ip, #1342177280	; 0x50000000
    100c:	c4030800 	strgt	r0, [r3], #-2048	; 0xfffff800
    1010:	02160100 	andseq	r0, r6, #0, 2
    1014:	01010006 	tsteq	r1, r6
    1018:	88020500 	stmdahi	r2, {r8, sl}
    101c:	03080012 	movweq	r0, #32786	; 0x8012
    1020:	160100d4 			; <UNDEFINED> instruction: 0x160100d4
    1024:	01000602 	tsteq	r0, r2, lsl #12
    1028:	02050001 	andeq	r0, r5, #1
    102c:	00000000 	andeq	r0, r0, r0
    1030:	0100e403 	tsteq	r0, r3, lsl #8
    1034:	00080213 	andeq	r0, r8, r3, lsl r2
    1038:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    103c:	00000002 	andeq	r0, r0, r2
    1040:	00f10300 	rscseq	r0, r1, r0, lsl #6
    1044:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
    1048:	00010100 	andeq	r0, r1, r0, lsl #2
    104c:	00000205 	andeq	r0, r0, r5, lsl #4
    1050:	80030000 	andhi	r0, r3, r0
    1054:	03180101 	tsteq	r8, #1073741824	; 0x40000000
    1058:	02212e0a 	eoreq	r2, r1, #10, 28	; 0xa0
    105c:	01010007 	tsteq	r1, r7
    1060:	00000233 	andeq	r0, r0, r3, lsr r2
    1064:	00850002 	addeq	r0, r5, r2
    1068:	01020000 	mrseq	r0, (UNDEF: 2)
    106c:	000d0efb 	strdeq	r0, [sp], -fp
    1070:	01010101 	tsteq	r1, r1, lsl #2
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	6c010000 	stcvs	0, cr0, [r1], {-0}
    107c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1080:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
    1084:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    1088:	0000636e 	andeq	r6, r0, lr, ror #6
    108c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1090:	30316632 	eorscc	r6, r1, r2, lsr r6
    1094:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1098:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    109c:	00000100 	andeq	r0, r0, r0, lsl #2
    10a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10a4:	30316632 	eorscc	r6, r1, r2, lsr r6
    10a8:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    10ac:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    10b0:	00000200 	andeq	r0, r0, r0, lsl #4
    10b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10b8:	30316632 	eorscc	r6, r1, r2, lsr r6
    10bc:	616d5f78 	smcvs	54776	; 0xd5f8
    10c0:	00682e70 	rsbeq	r2, r8, r0, ror lr
    10c4:	73000002 	movwvc	r0, #2
    10c8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    10cc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    10d0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    10d4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    10d8:	73000002 	movwvc	r0, #2
    10dc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    10e0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    10e4:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    10e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	00000205 	andeq	r0, r0, r5, lsl #4
    10f4:	33030000 	movwcc	r0, #12288	; 0x3000
    10f8:	4bf52401 	blmi	ffd4a104 <SCS_BASE+0x1fd3c104>
    10fc:	ac170338 	ldcge	3, cr0, [r7], {56}	; 0x38
    1100:	3c70034b 	ldclcc	3, cr0, [r0], #-300	; 0xfffffed4
    1104:	404b404b 	submi	r4, fp, fp, asr #32
    1108:	3c09034b 	stccc	3, cr0, [r9], {75}	; 0x4b
    110c:	4259404b 	subsmi	r4, r9, #75	; 0x4b
    1110:	022e7a03 	eoreq	r7, lr, #12288	; 0x3000
    1114:	01010008 	tsteq	r1, r8
    1118:	00020500 	andeq	r0, r2, r0, lsl #10
    111c:	03000000 	movweq	r0, #0
    1120:	210100eb 	smlattcs	r1, fp, r0, r0
    1124:	04022d4c 	streq	r2, [r2], #-3404	; 0xfffff2b4
    1128:	00010100 	andeq	r0, r1, r0, lsl #2
    112c:	12940205 	addsne	r0, r4, #1342177280	; 0x50000000
    1130:	fc030800 	stc2	8, cr0, [r3], {-0}
    1134:	0a030100 	beq	c153c <__Stack_Size+0xc113c>
    1138:	20760301 	rsbscs	r0, r6, r1, lsl #6
    113c:	252e0c03 	strcs	r0, [lr, #-3075]!	; 0xfffff3fd
    1140:	3e333733 	mrccc	7, 1, r3, cr3, cr3, {1}
    1144:	09032222 	stmdbeq	r3, {r1, r5, r9, sp}
    1148:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
    114c:	4d233e32 	stcmi	14, cr3, [r3, #-200]!	; 0xffffff38
    1150:	22311d31 	eorscs	r1, r1, #3136	; 0xc40
    1154:	02002233 	andeq	r2, r0, #805306371	; 0x30000003
    1158:	66030204 	strvs	r0, [r3], -r4, lsl #4
    115c:	3c1f032e 	ldccc	3, cr0, [pc], {46}	; 0x2e
    1160:	22213025 	eorcs	r3, r1, #37	; 0x25
    1164:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
    1168:	4d233e4d 	stcmi	14, cr3, [r3, #-308]!	; 0xfffffecc
    116c:	22311d31 	eorscs	r1, r1, #3136	; 0xc40
    1170:	02002231 	andeq	r2, r0, #268435459	; 0x10000003
    1174:	69030204 	stmdbvs	r3, {r2, r9}
    1178:	3c1b032e 	ldccc	3, cr0, [fp], {46}	; 0x2e
    117c:	01000302 	tsteq	r0, r2, lsl #6
    1180:	02050001 	andeq	r0, r5, #1
    1184:	00000000 	andeq	r0, r0, r0
    1188:	0101e503 	tsteq	r1, r3, lsl #10
    118c:	022f3d14 	eoreq	r3, pc, #20, 26	; 0x500
    1190:	01010003 	tsteq	r1, r3
    1194:	38020500 	stmdacc	r2, {r8, sl}
    1198:	03080013 	movweq	r0, #32787	; 0x8013
    119c:	190101f6 	stmdbne	r1, {r1, r2, r4, r5, r6, r7, r8}
    11a0:	04022128 	streq	r2, [r2], #-296	; 0xfffffed8
    11a4:	00010100 	andeq	r0, r1, r0, lsl #2
    11a8:	00000205 	andeq	r0, r0, r5, lsl #4
    11ac:	90030000 	andls	r0, r3, r0
    11b0:	21160102 	tstcs	r6, r2, lsl #2
    11b4:	01000202 	tsteq	r0, r2, lsl #4
    11b8:	02050001 	andeq	r0, r5, #1
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	0102a103 	tsteq	r2, r3, lsl #2
    11c4:	02212819 	eoreq	r2, r1, #1638400	; 0x190000
    11c8:	01010004 	tsteq	r1, r4
    11cc:	00020500 	andeq	r0, r2, r0, lsl #10
    11d0:	03000000 	movweq	r0, #0
    11d4:	160102bb 			; <UNDEFINED> instruction: 0x160102bb
    11d8:	00020221 	andeq	r0, r2, r1, lsr #4
    11dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    11e0:	00134402 	andseq	r4, r3, r2, lsl #8
    11e4:	02cd0308 	sbceq	r0, sp, #8, 6	; 0x20000000
    11e8:	02021701 	andeq	r1, r2, #262144	; 0x40000
    11ec:	00010100 	andeq	r0, r1, r0, lsl #2
    11f0:	13480205 	movtne	r0, #33285	; 0x8205
    11f4:	e0030800 	and	r0, r3, r0, lsl #16
    11f8:	02170102 	andseq	r0, r7, #-2147483648	; 0x80000000
    11fc:	01010002 	tsteq	r1, r2
    1200:	00020500 	andeq	r0, r2, r0, lsl #10
    1204:	03000000 	movweq	r0, #0
    1208:	180102f6 	stmdane	r1, {r1, r2, r4, r5, r6, r7, r9}
    120c:	02023222 	andeq	r3, r2, #536870914	; 0x20000002
    1210:	00010100 	andeq	r0, r1, r0, lsl #2
    1214:	00000205 	andeq	r0, r0, r5, lsl #4
    1218:	90030000 	andls	r0, r3, r0
    121c:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    1220:	01010002 	tsteq	r1, r2
    1224:	00020500 	andeq	r0, r2, r0, lsl #10
    1228:	03000000 	movweq	r0, #0
    122c:	190103a2 	stmdbne	r1, {r1, r5, r7, r8, r9}
    1230:	22222230 	eorcs	r2, r2, #48, 4
    1234:	00020222 	andeq	r0, r2, r2, lsr #4
    1238:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    123c:	00000002 	andeq	r0, r0, r2
    1240:	03c30300 	biceq	r0, r3, #0, 6
    1244:	30781901 	rsbscc	r1, r8, r1, lsl #18
    1248:	01000502 	tsteq	r0, r2, lsl #10
    124c:	02050001 	andeq	r0, r5, #1
    1250:	00000000 	andeq	r0, r0, r0
    1254:	0103dc03 	tsteq	r3, r3, lsl #24
    1258:	00060216 	andeq	r0, r6, r6, lsl r2
    125c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1260:	00134c02 	andseq	r4, r3, r2, lsl #24
    1264:	04870308 	streq	r0, [r7], #776	; 0x308
    1268:	45252701 	strmi	r2, [r5, #-1793]!	; 0xfffff8ff
    126c:	1f232223 	svcne	0x00232223
    1270:	29284c2f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, sl, fp, lr}
    1274:	4b4f1b25 	blmi	13c7f10 <__Stack_Size+0x13c7b10>
    1278:	025b2231 	subseq	r2, fp, #268435459	; 0x10000003
    127c:	01010005 	tsteq	r1, r5
    1280:	00020500 	andeq	r0, r2, r0, lsl #10
    1284:	03000000 	movweq	r0, #0
    1288:	190104b9 	stmdbne	r1, {r0, r3, r4, r5, r7, sl}
    128c:	27827903 	strcs	r7, [r2, r3, lsl #18]
    1290:	05026722 	streq	r6, [r2, #-1826]	; 0xfffff8de
    1294:	1a010100 	bne	4169c <__Stack_Size+0x4129c>
    1298:	02000003 	andeq	r0, r0, #3
    129c:	00008600 	andeq	r8, r0, r0, lsl #12
    12a0:	fb010200 	blx	41aaa <__Stack_Size+0x416aa>
    12a4:	01000d0e 	tsteq	r0, lr, lsl #26
    12a8:	00010101 	andeq	r0, r1, r1, lsl #2
    12ac:	00010000 	andeq	r0, r1, r0
    12b0:	696c0100 	stmdbvs	ip!, {r8}^
    12b4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    12b8:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    12bc:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    12c0:	73000063 	movwvc	r0, #99	; 0x63
    12c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    12c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    12cc:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    12d0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    12d4:	73000001 	movwvc	r0, #1
    12d8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    12dc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    12e0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    12e4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    12e8:	73000002 	movwvc	r0, #2
    12ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    12f0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    12f4:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    12f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    12fc:	74730000 	ldrbtvc	r0, [r3], #-0
    1300:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1304:	5f783031 	svcpl	0x00783031
    1308:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
    130c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1310:	6f630000 	svcvs	0x00630000
    1314:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1318:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; 116c <__Stack_Size+0xd6c>
    131c:	6f726361 	svcvs	0x00726361
    1320:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1324:	00000000 	andeq	r0, r0, r0
    1328:	00000205 	andeq	r0, r0, r5, lsl #4
    132c:	24030000 	strcs	r0, [r3], #-0
    1330:	2d211501 	cfstr32cs	mvfx1, [r1, #-4]!
    1334:	302f2f4b 	eorcc	r2, pc, fp, asr #30
    1338:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    133c:	00200603 	eoreq	r0, r0, r3, lsl #12
    1340:	06030402 	streq	r0, [r3], -r2, lsl #8
    1344:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    1348:	02003003 	andeq	r3, r0, #3
    134c:	242c0304 	strtcs	r0, [ip], #-772	; 0xfffffcfc
    1350:	01000402 	tsteq	r0, r2, lsl #8
    1354:	02050001 	andeq	r0, r5, #1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	15013b03 	strne	r3, [r1, #-2819]	; 0xfffff4fd
    1360:	2f211e3e 	svccs	0x00211e3e
    1364:	3e232121 	sufccsp	f2, f3, f1
    1368:	02213d21 	eoreq	r3, r1, #2112	; 0x840
    136c:	01010006 	tsteq	r1, r6
    1370:	a0020500 	andge	r0, r2, r0, lsl #10
    1374:	03080013 	movweq	r0, #32787	; 0x8013
    1378:	170100e1 	strne	r0, [r1, -r1, ror #1]
    137c:	01000a02 	tsteq	r0, r2, lsl #20
    1380:	02050001 	andeq	r0, r5, #1
    1384:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
    1388:	0100f403 	tsteq	r0, r3, lsl #8	; <UNPREDICTABLE>
    138c:	03010a03 	movweq	r0, #6659	; 0x1a03
    1390:	0a032076 	beq	c9570 <__Stack_Size+0xc9170>
    1394:	1c32232e 	ldcne	3, cr2, [r2], #-184	; 0xffffff48
    1398:	4d2f313d 	stfmis	f3, [pc, #-244]!	; 12ac <__Stack_Size+0xeac>
    139c:	2b22237f 	blcs	88a1a0 <__Stack_Size+0x889da0>
    13a0:	2131226d 	teqcs	r1, sp, ror #4
    13a4:	5049211f 	subpl	r2, r9, pc, lsl r1
    13a8:	0a025721 	beq	97034 <__Stack_Size+0x96c34>
    13ac:	00010100 	andeq	r0, r1, r0, lsl #2
    13b0:	00000205 	andeq	r0, r0, r5, lsl #4
    13b4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    13b8:	2f140101 	svccs	0x00140101
    13bc:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    13c0:	00010100 	andeq	r0, r1, r0, lsl #2
    13c4:	00000205 	andeq	r0, r0, r5, lsl #4
    13c8:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    13cc:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    13d0:	01010002 	tsteq	r1, r2
    13d4:	00020500 	andeq	r0, r2, r0, lsl #10
    13d8:	03000000 	movweq	r0, #0
    13dc:	130101c4 	movwne	r0, #4548	; 0x11c4
    13e0:	01000202 	tsteq	r0, r2, lsl #4
    13e4:	02050001 	andeq	r0, r5, #1
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	0101d003 	tsteq	r1, r3
    13f0:	00020213 	andeq	r0, r2, r3, lsl r2
    13f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    13f8:	00000002 	andeq	r0, r0, r2
    13fc:	01dc0300 	bicseq	r0, ip, r0, lsl #6
    1400:	02021301 	andeq	r1, r2, #67108864	; 0x4000000
    1404:	00010100 	andeq	r0, r1, r0, lsl #2
    1408:	00000205 	andeq	r0, r0, r5, lsl #4
    140c:	ea030000 	b	c1414 <__Stack_Size+0xc1014>
    1410:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    1414:	01010003 	tsteq	r1, r3
    1418:	00020500 	andeq	r0, r2, r0, lsl #10
    141c:	03000000 	movweq	r0, #0
    1420:	130101f9 	movwne	r0, #4601	; 0x11f9
    1424:	01000202 	tsteq	r0, r2, lsl #4
    1428:	02050001 	andeq	r0, r5, #1
    142c:	00000000 	andeq	r0, r0, r0
    1430:	01028503 	tsteq	r2, r3, lsl #10
    1434:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    1438:	00010100 	andeq	r0, r1, r0, lsl #2
    143c:	00000205 	andeq	r0, r0, r5, lsl #4
    1440:	92030000 	andls	r0, r3, #0
    1444:	4c190102 	ldfmis	f0, [r9], {2}
    1448:	06022160 	streq	r2, [r2], -r0, ror #2
    144c:	00010100 	andeq	r0, r1, r0, lsl #2
    1450:	00000205 	andeq	r0, r0, r5, lsl #4
    1454:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    1458:	02160102 	andseq	r0, r6, #-2147483648	; 0x80000000
    145c:	01010006 	tsteq	r1, r6
    1460:	00020500 	andeq	r0, r2, r0, lsl #10
    1464:	03000000 	movweq	r0, #0
    1468:	160102bd 			; <UNDEFINED> instruction: 0x160102bd
    146c:	01000e02 	tsteq	r0, r2, lsl #28
    1470:	02050001 	andeq	r0, r5, #1
    1474:	00000000 	andeq	r0, r0, r0
    1478:	0102cd03 	tsteq	r2, r3, lsl #26
    147c:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    1480:	00010100 	andeq	r0, r1, r0, lsl #2
    1484:	00000205 	andeq	r0, r0, r5, lsl #4
    1488:	da030000 	ble	c1490 <__Stack_Size+0xc1090>
    148c:	4c190102 	ldfmis	f0, [r9], {2}
    1490:	06022160 	streq	r2, [r2], -r0, ror #2
    1494:	00010100 	andeq	r0, r1, r0, lsl #2
    1498:	00000205 	andeq	r0, r0, r5, lsl #4
    149c:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    14a0:	2f130102 	svccs	0x00130102
    14a4:	01000402 	tsteq	r0, r2, lsl #8
    14a8:	02050001 	andeq	r0, r5, #1
    14ac:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
    14b0:	01038903 	tsteq	r3, r3, lsl #18
    14b4:	000a0217 	andeq	r0, sl, r7, lsl r2
    14b8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    14bc:	00144c02 	andseq	r4, r4, r2, lsl #24
    14c0:	03990308 	orrseq	r0, r9, #8, 6	; 0x20000000
    14c4:	023d2101 	eorseq	r2, sp, #1073741824	; 0x40000000
    14c8:	01010008 	tsteq	r1, r8
    14cc:	00020500 	andeq	r0, r2, r0, lsl #10
    14d0:	03000000 	movweq	r0, #0
    14d4:	130103a7 	movwne	r0, #5031	; 0x13a7
    14d8:	01000802 	tsteq	r0, r2, lsl #16
    14dc:	02050001 	andeq	r0, r5, #1
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	0103ba03 	tsteq	r3, r3, lsl #20
    14e8:	32221e27 	eorcc	r1, r2, #624	; 0x270
    14ec:	01000702 	tsteq	r0, r2, lsl #14
    14f0:	02050001 	andeq	r0, r5, #1
    14f4:	00000000 	andeq	r0, r0, r0
    14f8:	0103d803 	tsteq	r3, r3, lsl #16
    14fc:	221e6a19 	andscs	r6, lr, #102400	; 0x19000
    1500:	00060232 	andeq	r0, r6, r2, lsr r2
    1504:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1508:	00000002 	andeq	r0, r0, r2
    150c:	04810300 	streq	r0, [r1], #768	; 0x300
    1510:	01090301 	tsteq	r9, r1, lsl #6
    1514:	03207703 			; <UNDEFINED> instruction: 0x03207703
    1518:	314b2009 	cmpcc	fp, r9
    151c:	93246821 			; <UNDEFINED> instruction: 0x93246821
    1520:	024b231d 	subeq	r2, fp, #1946157056	; 0x74000000
    1524:	01010009 	tsteq	r1, r9
    1528:	00020500 	andeq	r0, r2, r0, lsl #10
    152c:	03000000 	movweq	r0, #0
    1530:	030104aa 	movweq	r0, #5290	; 0x14aa
    1534:	301e010a 	andscc	r0, lr, sl, lsl #2
    1538:	2e0a0330 	mcrcs	3, 0, r0, cr10, cr0, {1}
    153c:	0007022f 	andeq	r0, r7, pc, lsr #4
    1540:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1544:	00000002 	andeq	r0, r0, r2
    1548:	04d00300 	ldrbeq	r0, [r0], #768	; 0x300
    154c:	01090301 	tsteq	r9, r1, lsl #6
    1550:	01000c02 	tsteq	r0, r2, lsl #24
    1554:	02050001 	andeq	r0, r5, #1
    1558:	00000000 	andeq	r0, r0, r0
    155c:	0104e803 	tsteq	r4, r3, lsl #16
    1560:	02010903 	andeq	r0, r1, #49152	; 0xc000
    1564:	0101000e 	tsteq	r1, lr
    1568:	00020500 	andeq	r0, r2, r0, lsl #10
    156c:	03000000 	movweq	r0, #0
    1570:	03010586 	movweq	r0, #5510	; 0x1586
    1574:	301e010a 	andscc	r0, lr, sl, lsl #2
    1578:	2e0a0330 	mcrcs	3, 0, r0, cr10, cr0, {1}
    157c:	0007022f 	andeq	r0, r7, pc, lsr #4
    1580:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1584:	00000002 	andeq	r0, r0, r2
    1588:	05ae0300 	streq	r0, [lr, #768]!	; 0x300
    158c:	223f1901 	eorscs	r1, pc, #16384	; 0x4000
    1590:	2e7a0330 	mrccs	3, 3, r0, cr10, cr0, {1}
    1594:	40224b36 	eormi	r4, r2, r6, lsr fp
    1598:	03022333 	movweq	r2, #9011	; 0x2333
    159c:	00010100 	andeq	r0, r1, r0, lsl #2
    15a0:	00000205 	andeq	r0, r0, r5, lsl #4
    15a4:	dc030000 	stcle	0, cr0, [r3], {-0}
    15a8:	09030105 	stmdbeq	r3, {r0, r2, r8}
    15ac:	23323020 	teqcs	r2, #32
    15b0:	01000402 	tsteq	r0, r2, lsl #8
    15b4:	00031701 	andeq	r1, r3, r1, lsl #14
    15b8:	70000200 	andvc	r0, r0, r0, lsl #4
    15bc:	02000000 	andeq	r0, r0, #0
    15c0:	0d0efb01 	vstreq	d15, [lr, #-4]
    15c4:	01010100 	mrseq	r0, (UNDEF: 17)
    15c8:	00000001 	andeq	r0, r0, r1
    15cc:	01000001 	tsteq	r0, r1
    15d0:	2f62696c 	svccs	0x0062696c
    15d4:	00637273 	rsbeq	r7, r3, r3, ror r2
    15d8:	2f62696c 	svccs	0x0062696c
    15dc:	00636e69 	rsbeq	r6, r3, r9, ror #28
    15e0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15e4:	31663233 	cmncc	r6, r3, lsr r2
    15e8:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    15ec:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    15f0:	00000100 	andeq	r0, r0, r0, lsl #2
    15f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15f8:	30316632 	eorscc	r6, r1, r2, lsr r6
    15fc:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1600:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1604:	00000200 	andeq	r0, r0, r0, lsl #4
    1608:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    160c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1610:	616d5f78 	smcvs	54776	; 0xd5f8
    1614:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1618:	73000002 	movwvc	r0, #2
    161c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1620:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1624:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1628:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    162c:	00000000 	andeq	r0, r0, r0
    1630:	14640205 	strbtne	r0, [r4], #-517	; 0xfffffdfb
    1634:	fc030800 	stc2	8, cr0, [r3], {-0}
    1638:	5b140100 	blpl	501a40 <__Stack_Size+0x501640>
    163c:	4d4d694d 	stclmi	9, cr6, [sp, #-308]	; 0xfffffecc
    1640:	01000702 	tsteq	r0, r2, lsl #14
    1644:	02050001 	andeq	r0, r5, #1
    1648:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
    164c:	01019f03 	tsteq	r1, r3, lsl #30
    1650:	7a032618 	bvc	caeb8 <__Stack_Size+0xcaab8>
    1654:	5c4d4d2e 	mcrrpl	13, 2, r4, sp, cr14
    1658:	0008024f 	andeq	r0, r8, pc, asr #4
    165c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1660:	00000002 	andeq	r0, r0, r2
    1664:	01e90300 	mvneq	r0, r0, lsl #6
    1668:	31311801 	teqcc	r1, r1, lsl #16
    166c:	00040231 	andeq	r0, r4, r1, lsr r2
    1670:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1674:	00000002 	andeq	r0, r0, r2
    1678:	02860300 	addeq	r0, r6, #0, 6
    167c:	06021601 	streq	r1, [r2], -r1, lsl #12
    1680:	00010100 	andeq	r0, r1, r0, lsl #2
    1684:	14d80205 	ldrbne	r0, [r8], #517	; 0x205
    1688:	9f030800 	svcls	0x00030800
    168c:	5e190102 	mufple	f0, f1, f2
    1690:	00040223 	andeq	r0, r4, r3, lsr #4
    1694:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1698:	0014ec02 	andseq	lr, r4, r2, lsl #24
    169c:	02bc0308 	adcseq	r0, ip, #8, 6	; 0x20000000
    16a0:	06021601 	streq	r1, [r2], -r1, lsl #12
    16a4:	00010100 	andeq	r0, r1, r0, lsl #2
    16a8:	14f80205 	ldrbtne	r0, [r8], #517	; 0x205
    16ac:	cf030800 	svcgt	0x00030800
    16b0:	31180102 	tstcc	r8, r2, lsl #2
    16b4:	05022331 	streq	r2, [r2, #-817]	; 0xfffffccf
    16b8:	00010100 	andeq	r0, r1, r0, lsl #2
    16bc:	150c0205 	strne	r0, [ip, #-517]	; 0xfffffdfb
    16c0:	ed030800 	stc	8, cr0, [r3, #-0]
    16c4:	2f130102 	svccs	0x00130102
    16c8:	01000602 	tsteq	r0, r2, lsl #12
    16cc:	02050001 	andeq	r0, r5, #1
    16d0:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
    16d4:	01038403 	tsteq	r3, r3, lsl #8
    16d8:	23313118 	teqcs	r1, #24, 2
    16dc:	01000502 	tsteq	r0, r2, lsl #10
    16e0:	02050001 	andeq	r0, r5, #1
    16e4:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
    16e8:	0103a503 	tsteq	r3, r3, lsl #10
    16ec:	23313118 	teqcs	r1, #24, 2
    16f0:	01000502 	tsteq	r0, r2, lsl #10
    16f4:	02050001 	andeq	r0, r5, #1
    16f8:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    16fc:	0103c603 	tsteq	r3, r3, lsl #12
    1700:	31313118 	teqcc	r1, r8, lsl r1
    1704:	01000402 	tsteq	r0, r2, lsl #8
    1708:	02050001 	andeq	r0, r5, #1
    170c:	00000000 	andeq	r0, r0, r0
    1710:	0103e903 	tsteq	r3, r3, lsl #18
    1714:	33231d28 			; <UNDEFINED> instruction: 0x33231d28
    1718:	01000702 	tsteq	r0, r2, lsl #14
    171c:	02050001 	andeq	r0, r5, #1
    1720:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
    1724:	01048803 	tsteq	r4, r3, lsl #16
    1728:	00060216 	andeq	r0, r6, r6, lsl r2
    172c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1730:	00000002 	andeq	r0, r0, r2
    1734:	049d0300 	ldreq	r0, [sp], #768	; 0x300
    1738:	31311801 	teqcc	r1, r1, lsl #16
    173c:	00050223 	andeq	r0, r5, r3, lsr #4
    1740:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1744:	00000002 	andeq	r0, r0, r2
    1748:	04bc0300 	ldrteq	r0, [ip], #768	; 0x300
    174c:	03341801 	teqeq	r4, #65536	; 0x10000
    1750:	2323207a 			; <UNDEFINED> instruction: 0x2323207a
    1754:	0224214e 	eoreq	r2, r4, #-2147483629	; 0x80000013
    1758:	01010005 	tsteq	r1, r5
    175c:	00020500 	andeq	r0, r2, r0, lsl #10
    1760:	03000000 	movweq	r0, #0
    1764:	160104e3 	strne	r0, [r1], -r3, ror #9
    1768:	01000602 	tsteq	r0, r2, lsl #12
    176c:	02050001 	andeq	r0, r5, #1
    1770:	00000000 	andeq	r0, r0, r0
    1774:	0104f903 	tsteq	r4, r3, lsl #18	; <UNPREDICTABLE>
    1778:	00080217 	andeq	r0, r8, r7, lsl r2
    177c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1780:	00000002 	andeq	r0, r0, r2
    1784:	058c0300 	streq	r0, [ip, #768]	; 0x300
    1788:	06021601 	streq	r1, [r2], -r1, lsl #12
    178c:	00010100 	andeq	r0, r1, r0, lsl #2
    1790:	15640205 	strbne	r0, [r4, #-517]!	; 0xfffffdfb
    1794:	9c030800 	stcls	8, cr0, [r3], {-0}
    1798:	1c160105 	ldfnes	f0, [r6], {5}
    179c:	336d2224 	cmncc	sp, #36, 4	; 0x40000002
    17a0:	1c321e23 	ldcne	14, cr1, [r2], #-140	; 0xffffff74
    17a4:	323f2732 	eorscc	r2, pc, #13107200	; 0xc80000
    17a8:	223c0c03 	eorscs	r0, ip, #768	; 0x300
    17ac:	31224d3f 			; <UNDEFINED> instruction: 0x31224d3f
    17b0:	3f31224d 	svccc	0x0031224d
    17b4:	0e023f22 	cdpeq	15, 0, cr3, cr2, cr2, {1}
    17b8:	00010100 	andeq	r0, r1, r0, lsl #2
    17bc:	00000205 	andeq	r0, r0, r5, lsl #4
    17c0:	80030000 	andhi	r0, r3, r0
    17c4:	1e270106 	sufnes	f0, f7, f6
    17c8:	07023222 	streq	r3, [r2, -r2, lsr #4]
    17cc:	00010100 	andeq	r0, r1, r0, lsl #2
    17d0:	15e80205 	strbne	r0, [r8, #517]!	; 0x205
    17d4:	a1030800 	tstge	r3, r0, lsl #16
    17d8:	1e270106 	sufnes	f0, f7, f6
    17dc:	07023222 	streq	r3, [r2, -r2, lsr #4]
    17e0:	00010100 	andeq	r0, r1, r0, lsl #2
    17e4:	16000205 	strne	r0, [r0], -r5, lsl #4
    17e8:	c3030800 	movwgt	r0, #14336	; 0x3800
    17ec:	1e270106 	sufnes	f0, f7, f6
    17f0:	07023222 	streq	r3, [r2, -r2, lsr #4]
    17f4:	00010100 	andeq	r0, r1, r0, lsl #2
    17f8:	16180205 	ldrne	r0, [r8], -r5, lsl #4
    17fc:	e3030800 	movw	r0, #14336	; 0x3800
    1800:	1e270106 	sufnes	f0, f7, f6
    1804:	07023222 	streq	r3, [r2, -r2, lsr #4]
    1808:	00010100 	andeq	r0, r1, r0, lsl #2
    180c:	16300205 	ldrtne	r0, [r0], -r5, lsl #4
    1810:	84030800 	strhi	r0, [r3], #-2048	; 0xfffff800
    1814:	1e270107 	sufnes	f0, f7, f7
    1818:	07023222 	streq	r3, [r2, -r2, lsr #4]
    181c:	00010100 	andeq	r0, r1, r0, lsl #2
    1820:	00000205 	andeq	r0, r0, r5, lsl #4
    1824:	9c030000 	stcls	0, cr0, [r3], {-0}
    1828:	02160107 	andseq	r0, r6, #-1073741823	; 0xc0000001
    182c:	01010006 	tsteq	r1, r6
    1830:	00020500 	andeq	r0, r2, r0, lsl #10
    1834:	03000000 	movweq	r0, #0
    1838:	160107ac 	strne	r0, [r1], -ip, lsr #15
    183c:	01000602 	tsteq	r0, r2, lsl #12
    1840:	02050001 	andeq	r0, r5, #1
    1844:	00000000 	andeq	r0, r0, r0
    1848:	0107c103 	tsteq	r7, r3, lsl #2
    184c:	00060217 	andeq	r0, r6, r7, lsl r2
    1850:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1854:	00164802 	andseq	r4, r6, r2, lsl #16
    1858:	07dd0308 	ldrbeq	r0, [sp, r8, lsl #6]
    185c:	01090301 	tsteq	r9, r1, lsl #6
    1860:	22303e22 	eorscs	r3, r0, #544	; 0x220
    1864:	20100332 	andscs	r0, r0, r2, lsr r3
    1868:	0006024b 	andeq	r0, r6, fp, asr #4
    186c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1870:	00167002 	andseq	r7, r6, r2
    1874:	01c60308 	biceq	r0, r6, r8, lsl #6
    1878:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    187c:	00350204 	eorseq	r0, r5, r4, lsl #4
    1880:	3d020402 	cfstrscc	mvf0, [r2, #-8]
    1884:	02040200 	andeq	r0, r4, #0, 4
    1888:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    188c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1890:	3c0a034d 	stccc	3, cr0, [sl], {77}	; 0x4d
    1894:	01000602 	tsteq	r0, r2, lsl #12
    1898:	02050001 	andeq	r0, r5, #1
    189c:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
    18a0:	01089003 	tsteq	r8, r3
    18a4:	00080214 	andeq	r0, r8, r4, lsl r2
    18a8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    18ac:	00000002 	andeq	r0, r0, r2
    18b0:	08a40300 	stmiaeq	r4!, {r8, r9}
    18b4:	0a031901 	beq	c7cc0 <__Stack_Size+0xc78c0>
    18b8:	0702212e 	streq	r2, [r2, -lr, lsr #2]
    18bc:	00010100 	andeq	r0, r1, r0, lsl #2
    18c0:	00000205 	andeq	r0, r0, r5, lsl #4
    18c4:	c7030000 	strgt	r0, [r3, -r0]
    18c8:	02180108 	andseq	r0, r8, #8, 2
    18cc:	01010006 	tsteq	r1, r6
    18d0:	000008ee 	andeq	r0, r0, lr, ror #17
    18d4:	00830002 	addeq	r0, r3, r2
    18d8:	01020000 	mrseq	r0, (UNDEF: 2)
    18dc:	000d0efb 	strdeq	r0, [sp], -fp
    18e0:	01010101 	tsteq	r1, r1, lsl #2
    18e4:	01000000 	mrseq	r0, (UNDEF: 0)
    18e8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    18ec:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    18f0:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
    18f4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    18f8:	0000636e 	andeq	r6, r0, lr, ror #6
    18fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1900:	30316632 	eorscc	r6, r1, r2, lsr r6
    1904:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1908:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    190c:	73000001 	movwvc	r0, #1
    1910:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1914:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1918:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    191c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1920:	73000002 	movwvc	r0, #2
    1924:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1928:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    192c:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1930:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1934:	74730000 	ldrbtvc	r0, [r3], #-0
    1938:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    193c:	5f783031 	svcpl	0x00783031
    1940:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
    1944:	00020068 	andeq	r0, r2, r8, rrx
    1948:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    194c:	31663233 	cmncc	r6, r3, lsr r2
    1950:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    1954:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1958:	00000200 	andeq	r0, r0, r0, lsl #4
    195c:	02050000 	andeq	r0, r5, #0
    1960:	00000000 	andeq	r0, r0, r0
    1964:	0117ee03 	tsteq	r7, r3, lsl #28
    1968:	1f216824 	svcne	0x00216824
    196c:	235c6a21 	cmpcs	ip, #135168	; 0x21000
    1970:	00020221 	andeq	r0, r2, r1, lsr #4
    1974:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1978:	00000002 	andeq	r0, r0, r2
    197c:	189c0300 	ldmne	ip, {r8, r9}
    1980:	21682401 	cmncs	r8, r1, lsl #8
    1984:	242a32c0 	strtcs	r3, [sl], #-704	; 0xfffffd40
    1988:	02022123 	andeq	r2, r2, #-1073741816	; 0xc0000008
    198c:	00010100 	andeq	r0, r1, r0, lsl #2
    1990:	00000205 	andeq	r0, r0, r5, lsl #4
    1994:	86030000 	strhi	r0, [r3], -r0
    1998:	ec240101 	stfs	f0, [r4], #-4
    199c:	3c77034b 	ldclcc	3, cr0, [r7], #-300	; 0xfffffed4
    19a0:	03591508 	cmpeq	r9, #8, 10	; 0x2000000
    19a4:	034b4a09 	movteq	r4, #47625	; 0xba09
    19a8:	61032e1f 	tstvs	r3, pc, lsl lr
    19ac:	404b322e 	submi	r3, fp, lr, lsr #4
    19b0:	404b404b 	submi	r4, fp, fp, asr #32
    19b4:	4259404b 	subsmi	r4, r9, #75	; 0x4b
    19b8:	022e7a03 	eoreq	r7, lr, #12288	; 0x3000
    19bc:	01010009 	tsteq	r1, r9
    19c0:	b0020500 	andlt	r0, r2, r0, lsl #10
    19c4:	03080016 	movweq	r0, #32790	; 0x8016
    19c8:	190101c6 	stmdbne	r1, {r1, r2, r6, r7, r8}
    19cc:	773d1f21 	ldrvc	r1, [sp, -r1, lsr #30]!
    19d0:	00303131 	eorseq	r3, r0, r1, lsr r1
    19d4:	06010402 	streq	r0, [r1], -r2, lsl #8
    19d8:	024d063c 	subeq	r0, sp, #60, 12	; 0x3c00000
    19dc:	01010005 	tsteq	r1, r5
    19e0:	00020500 	andeq	r0, r2, r0, lsl #10
    19e4:	03000000 	movweq	r0, #0
    19e8:	030101ed 	movweq	r0, #4589	; 0x11ed
    19ec:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    19f0:	200a0320 	andcs	r0, sl, r0, lsr #6
    19f4:	2623235b 			; <UNDEFINED> instruction: 0x2623235b
    19f8:	032b501d 			; <UNDEFINED> instruction: 0x032b501d
    19fc:	7a032009 	bvc	c9a28 <__Stack_Size+0xc9628>
    1a00:	0323262e 			; <UNDEFINED> instruction: 0x0323262e
    1a04:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    1a08:	251b2220 	ldrcs	r2, [fp, #-544]	; 0xfffffde0
    1a0c:	03206903 			; <UNDEFINED> instruction: 0x03206903
    1a10:	00252012 	eoreq	r2, r5, r2, lsl r0
    1a14:	06010402 	streq	r0, [r1], -r2, lsl #8
    1a18:	15030620 	strne	r0, [r3, #-1568]	; 0xfffff9e0
    1a1c:	2e76034a 	cdpcs	3, 7, cr0, cr6, cr10, {2}
    1a20:	1d26311d 	stfnes	f3, [r6, #-116]!	; 0xffffff8c
    1a24:	0a031c35 	beq	c8b00 <__Stack_Size+0xc8700>
    1a28:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1a2c:	01000502 	tsteq	r0, r2, lsl #10
    1a30:	02050001 	andeq	r0, r5, #1
    1a34:	00000000 	andeq	r0, r0, r0
    1a38:	0102c803 	tsteq	r2, r3, lsl #16
    1a3c:	03010a03 	movweq	r0, #6659	; 0x1a03
    1a40:	0a032076 	beq	c9c20 <__Stack_Size+0xc9820>
    1a44:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1a48:	314d1d26 	cmpcc	sp, r6, lsr #26
    1a4c:	1d23232b 	stcne	3, cr2, [r3, #-172]!	; 0xffffff54
    1a50:	6e033123 	adfvssp	f3, f3, f3
    1a54:	20120320 	andscs	r0, r2, r0, lsr #6
    1a58:	22231d31 	eorcs	r1, r3, #3136	; 0xc40
    1a5c:	01040200 	mrseq	r0, R12_usr
    1a60:	52063c06 	andpl	r3, r6, #1536	; 0x600
    1a64:	31231d31 			; <UNDEFINED> instruction: 0x31231d31
    1a68:	033f403f 	teqeq	pc, #63	; 0x3f
    1a6c:	31272079 			; <UNDEFINED> instruction: 0x31272079
    1a70:	0223234e 	eoreq	r2, r3, #939524097	; 0x38000001
    1a74:	01010004 	tsteq	r1, r4
    1a78:	00020500 	andeq	r0, r2, r0, lsl #10
    1a7c:	03000000 	movweq	r0, #0
    1a80:	030103a4 	movweq	r0, #5028	; 0x13a4
    1a84:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    1a88:	200a0320 	andcs	r0, sl, r0, lsr #6
    1a8c:	2623235b 			; <UNDEFINED> instruction: 0x2623235b
    1a90:	232b501d 			; <UNDEFINED> instruction: 0x232b501d
    1a94:	31231d23 			; <UNDEFINED> instruction: 0x31231d23
    1a98:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
    1a9c:	1d312012 	ldcne	0, cr2, [r1, #-72]!	; 0xffffffb8
    1aa0:	02002223 	andeq	r2, r0, #805306370	; 0x30000002
    1aa4:	3c060104 	stfccs	f0, [r6], {4}
    1aa8:	03315206 	teqeq	r1, #1610612736	; 0x60000000
    1aac:	7303200a 	movwvc	r2, #12298	; 0x300a
    1ab0:	3531232e 	ldrcc	r2, [r1, #-814]!	; 0xfffffcd2
    1ab4:	20760323 	rsbscs	r0, r6, r3, lsr #6
    1ab8:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1abc:	0a032e79 	beq	cd4a8 <__Stack_Size+0xcd0a8>
    1ac0:	20760320 	rsbscs	r0, r6, r0, lsr #6
    1ac4:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
    1ac8:	0a032e76 	beq	cd4a8 <__Stack_Size+0xcd0a8>
    1acc:	23232420 			; <UNDEFINED> instruction: 0x23232420
    1ad0:	01000402 	tsteq	r0, r2, lsl #8
    1ad4:	02050001 	andeq	r0, r5, #1
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	01048003 	tsteq	r4, r3
    1ae0:	03010a03 	movweq	r0, #6659	; 0x1a03
    1ae4:	0a032076 	beq	c9cc4 <__Stack_Size+0xc98c4>
    1ae8:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1aec:	2b501d26 	blcs	1408f8c <__Stack_Size+0x1408b8c>
    1af0:	231d2331 	tstcs	sp, #-1006632960	; 0xc4000000
    1af4:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1af8:	31201203 			; <UNDEFINED> instruction: 0x31201203
    1afc:	03207403 			; <UNDEFINED> instruction: 0x03207403
    1b00:	1b30200c 	blne	c09b38 <__Stack_Size+0xc09738>
    1b04:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    1b08:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1b0c:	40311d52 	eorsmi	r1, r1, r2, asr sp
    1b10:	04022323 	streq	r2, [r2], #-803	; 0xfffffcdd
    1b14:	00010100 	andeq	r0, r1, r0, lsl #2
    1b18:	00000205 	andeq	r0, r0, r5, lsl #4
    1b1c:	d1030000 	mrsle	r0, (UNDEF: 3)
    1b20:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    1b24:	01000801 	tsteq	r0, r1, lsl #16
    1b28:	02050001 	andeq	r0, r5, #1
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	0105ee03 	tsteq	r5, r3, lsl #28
    1b34:	212f3d14 			; <UNDEFINED> instruction: 0x212f3d14
    1b38:	00020221 	andeq	r0, r2, r1, lsr #4
    1b3c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1b40:	00000002 	andeq	r0, r0, r2
    1b44:	06800300 	streq	r0, [r0], r0, lsl #6
    1b48:	212f1401 			; <UNDEFINED> instruction: 0x212f1401
    1b4c:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1b50:	00020221 	andeq	r0, r2, r1, lsr #4
    1b54:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1b58:	00000002 	andeq	r0, r0, r2
    1b5c:	06950300 	ldreq	r0, [r5], r0, lsl #6
    1b60:	1e221401 	cdpne	4, 2, cr1, cr2, cr1, {0}
    1b64:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1b68:	01000202 	tsteq	r0, r2, lsl #4
    1b6c:	02050001 	andeq	r0, r5, #1
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	0106a703 	tsteq	r6, r3, lsl #14
    1b78:	21212f14 			; <UNDEFINED> instruction: 0x21212f14
    1b7c:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    1b80:	01010002 	tsteq	r1, r2
    1b84:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1b88:	03080016 	movweq	r0, #32790	; 0x8016
    1b8c:	1a0106bc 	bne	43684 <__Stack_Size+0x43284>
    1b90:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1b94:	01010006 	tsteq	r1, r6
    1b98:	00020500 	andeq	r0, r2, r0, lsl #10
    1b9c:	03000000 	movweq	r0, #0
    1ba0:	1a0106d7 	bne	43704 <__Stack_Size+0x43304>
    1ba4:	026b232b 	rsbeq	r2, fp, #-1409286144	; 0xac000000
    1ba8:	01010005 	tsteq	r1, r5
    1bac:	00020500 	andeq	r0, r2, r0, lsl #10
    1bb0:	03000000 	movweq	r0, #0
    1bb4:	190107a0 	stmdbne	r1, {r5, r7, r8, r9, sl}
    1bb8:	01000202 	tsteq	r0, r2, lsl #4
    1bbc:	02050001 	andeq	r0, r5, #1
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	0107bf03 	tsteq	r7, r3, lsl #30
    1bc8:	00040219 	andeq	r0, r4, r9, lsl r2
    1bcc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1bd0:	00170402 	andseq	r0, r7, r2, lsl #8
    1bd4:	07dc0308 	ldrbeq	r0, [ip, r8, lsl #6]
    1bd8:	010a0301 	tsteq	sl, r1, lsl #6
    1bdc:	0233232b 	eorseq	r2, r3, #-1409286144	; 0xac000000
    1be0:	01010004 	tsteq	r1, r4
    1be4:	00020500 	andeq	r0, r2, r0, lsl #10
    1be8:	03000000 	movweq	r0, #0
    1bec:	170107f8 			; <UNDEFINED> instruction: 0x170107f8
    1bf0:	01000702 	tsteq	r0, r2, lsl #14
    1bf4:	02050001 	andeq	r0, r5, #1
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	01088e03 	tsteq	r8, r3, lsl #28
    1c00:	01029203 	tsteq	r2, r3, lsl #4
    1c04:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1c08:	02207dee 	eoreq	r7, r0, #15232	; 0x3b80
    1c0c:	01010006 	tsteq	r1, r6
    1c10:	00020500 	andeq	r0, r2, r0, lsl #10
    1c14:	03000000 	movweq	r0, #0
    1c18:	200108ae 	andcs	r0, r1, lr, lsr #17
    1c1c:	20780328 	rsbscs	r0, r8, r8, lsr #6
    1c20:	2c2e0a03 	stccs	10, cr0, [lr], #-12
    1c24:	e4034022 	str	r4, [r3], #-34	; 0xffffffde
    1c28:	4d232e01 	stcmi	14, cr2, [r3, #-4]!
    1c2c:	7e9a0323 	cdpvc	3, 9, cr0, cr10, cr3, {1}
    1c30:	00060220 	andeq	r0, r6, r0, lsr #4
    1c34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1c38:	00000002 	andeq	r0, r0, r2
    1c3c:	09b20300 	ldmibeq	r2!, {r8, r9}
    1c40:	20090301 	andcs	r0, r9, r1, lsl #6
    1c44:	0202236c 	andeq	r2, r2, #108, 6	; 0xb0000001
    1c48:	00010100 	andeq	r0, r1, r0, lsl #2
    1c4c:	00000205 	andeq	r0, r0, r5, lsl #4
    1c50:	dc030000 	stcle	0, cr0, [r3], {-0}
    1c54:	0a030108 	beq	c207c <__Stack_Size+0xc1c7c>
    1c58:	09033120 	stmdbeq	r3, {r5, r8, ip, sp}
    1c5c:	02023158 	andeq	r3, r2, #88, 2
    1c60:	00010100 	andeq	r0, r1, r0, lsl #2
    1c64:	00000205 	andeq	r0, r0, r5, lsl #4
    1c68:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    1c6c:	31280109 			; <UNDEFINED> instruction: 0x31280109
    1c70:	01000602 	tsteq	r0, r2, lsl #12
    1c74:	02050001 	andeq	r0, r5, #1
    1c78:	0800171a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip}
    1c7c:	0109d603 	tsteq	r9, r3, lsl #12
    1c80:	02022318 	andeq	r2, r2, #24, 6	; 0x60000000
    1c84:	00010100 	andeq	r0, r1, r0, lsl #2
    1c88:	00000205 	andeq	r0, r0, r5, lsl #4
    1c8c:	f2030000 	vhadd.s8	d0, d3, d0
    1c90:	23190109 	tstcs	r9, #1073741826	; 0x40000002
    1c94:	0202234d 	andeq	r2, r2, #872415233	; 0x34000001
    1c98:	00010100 	andeq	r0, r1, r0, lsl #2
    1c9c:	00000205 	andeq	r0, r0, r5, lsl #4
    1ca0:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    1ca4:	231a010a 	tstcs	sl, #-2147483646	; 0x80000002
    1ca8:	0202234d 	andeq	r2, r2, #872415233	; 0x34000001
    1cac:	00010100 	andeq	r0, r1, r0, lsl #2
    1cb0:	00000205 	andeq	r0, r0, r5, lsl #4
    1cb4:	c6030000 	strgt	r0, [r3], -r0
    1cb8:	0c03010a 	stfeqs	f0, [r3], {10}
    1cbc:	27232320 	strcs	r2, [r3, -r0, lsr #6]!
    1cc0:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    1cc4:	242a3246 	strtcs	r3, [sl], #-582	; 0xfffffdba
    1cc8:	0332251c 	teqeq	r2, #28, 10	; 0x7000000
    1ccc:	32242e78 	eorcc	r2, r4, #120, 28	; 0x780
    1cd0:	02232323 	eoreq	r2, r3, #-1946157056	; 0x8c000000
    1cd4:	01010002 	tsteq	r1, r2
    1cd8:	00020500 	andeq	r0, r2, r0, lsl #10
    1cdc:	03000000 	movweq	r0, #0
    1ce0:	19010aff 	stmdbne	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp}
    1ce4:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1ce8:	01010002 	tsteq	r1, r2
    1cec:	00020500 	andeq	r0, r2, r0, lsl #10
    1cf0:	03000000 	movweq	r0, #0
    1cf4:	19010ba1 	stmdbne	r1, {r0, r5, r7, r8, r9, fp}
    1cf8:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1cfc:	01010002 	tsteq	r1, r2
    1d00:	00020500 	andeq	r0, r2, r0, lsl #10
    1d04:	03000000 	movweq	r0, #0
    1d08:	19010bc3 	stmdbne	r1, {r0, r1, r6, r7, r8, r9, fp}
    1d0c:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1d10:	01010002 	tsteq	r1, r2
    1d14:	00020500 	andeq	r0, r2, r0, lsl #10
    1d18:	03000000 	movweq	r0, #0
    1d1c:	18010be5 	stmdane	r1, {r0, r2, r5, r6, r7, r8, r9, fp}
    1d20:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1d24:	01010002 	tsteq	r1, r2
    1d28:	00020500 	andeq	r0, r2, r0, lsl #10
    1d2c:	03000000 	movweq	r0, #0
    1d30:	1a010c82 	bne	44f40 <__Stack_Size+0x44b40>
    1d34:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1d38:	01010006 	tsteq	r1, r6
    1d3c:	00020500 	andeq	r0, r2, r0, lsl #10
    1d40:	03000000 	movweq	r0, #0
    1d44:	1a010c9d 	bne	44fc0 <__Stack_Size+0x44bc0>
    1d48:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1d4c:	01010006 	tsteq	r1, r6
    1d50:	00020500 	andeq	r0, r2, r0, lsl #10
    1d54:	03000000 	movweq	r0, #0
    1d58:	1a010cb9 	bne	45044 <__Stack_Size+0x44c44>
    1d5c:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1d60:	01010006 	tsteq	r1, r6
    1d64:	00020500 	andeq	r0, r2, r0, lsl #10
    1d68:	03000000 	movweq	r0, #0
    1d6c:	1a010cd5 	bne	450c8 <__Stack_Size+0x44cc8>
    1d70:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1d74:	01010006 	tsteq	r1, r6
    1d78:	00020500 	andeq	r0, r2, r0, lsl #10
    1d7c:	03000000 	movweq	r0, #0
    1d80:	19010cf4 	stmdbne	r1, {r2, r4, r5, r6, r7, sl, fp}
    1d84:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1d88:	01010002 	tsteq	r1, r2
    1d8c:	00020500 	andeq	r0, r2, r0, lsl #10
    1d90:	03000000 	movweq	r0, #0
    1d94:	19010d95 	stmdbne	r1, {r0, r2, r4, r7, r8, sl, fp}
    1d98:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1d9c:	01010002 	tsteq	r1, r2
    1da0:	00020500 	andeq	r0, r2, r0, lsl #10
    1da4:	03000000 	movweq	r0, #0
    1da8:	19010db6 	stmdbne	r1, {r1, r2, r4, r5, r7, r8, sl, fp}
    1dac:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1db0:	01010002 	tsteq	r1, r2
    1db4:	00020500 	andeq	r0, r2, r0, lsl #10
    1db8:	03000000 	movweq	r0, #0
    1dbc:	19010dd7 	stmdbne	r1, {r0, r1, r2, r4, r6, r7, r8, sl, fp}
    1dc0:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1dc4:	01010002 	tsteq	r1, r2
    1dc8:	00020500 	andeq	r0, r2, r0, lsl #10
    1dcc:	03000000 	movweq	r0, #0
    1dd0:	1a010df7 	bne	455b4 <__Stack_Size+0x451b4>
    1dd4:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1dd8:	01010002 	tsteq	r1, r2
    1ddc:	00020500 	andeq	r0, r2, r0, lsl #10
    1de0:	03000000 	movweq	r0, #0
    1de4:	1a010e98 	bne	4584c <__Stack_Size+0x4544c>
    1de8:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1dec:	01010002 	tsteq	r1, r2
    1df0:	00020500 	andeq	r0, r2, r0, lsl #10
    1df4:	03000000 	movweq	r0, #0
    1df8:	1a010eb9 	bne	458e4 <__Stack_Size+0x454e4>
    1dfc:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1e00:	01010002 	tsteq	r1, r2
    1e04:	00020500 	andeq	r0, r2, r0, lsl #10
    1e08:	03000000 	movweq	r0, #0
    1e0c:	1a010eda 	bne	4597c <__Stack_Size+0x4557c>
    1e10:	023f4d23 	eorseq	r4, pc, #2240	; 0x8c0
    1e14:	01010002 	tsteq	r1, r2
    1e18:	00020500 	andeq	r0, r2, r0, lsl #10
    1e1c:	03000000 	movweq	r0, #0
    1e20:	19010efb 	stmdbne	r1, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp}
    1e24:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1e28:	01010002 	tsteq	r1, r2
    1e2c:	00020500 	andeq	r0, r2, r0, lsl #10
    1e30:	03000000 	movweq	r0, #0
    1e34:	19010f9b 	stmdbne	r1, {r0, r1, r3, r4, r7, r8, r9, sl, fp}
    1e38:	023f3123 	eorseq	r3, pc, #-1073741816	; 0xc0000008
    1e3c:	01010002 	tsteq	r1, r2
    1e40:	00020500 	andeq	r0, r2, r0, lsl #10
    1e44:	03000000 	movweq	r0, #0
    1e48:	19010fbb 	stmdbne	r1, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp}
    1e4c:	02234d23 	eoreq	r4, r3, #2240	; 0x8c0
    1e50:	01010002 	tsteq	r1, r2
    1e54:	00020500 	andeq	r0, r2, r0, lsl #10
    1e58:	03000000 	movweq	r0, #0
    1e5c:	19010fdb 	stmdbne	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, fp}
    1e60:	023f3123 	eorseq	r3, pc, #-1073741816	; 0xc0000008
    1e64:	01010002 	tsteq	r1, r2
    1e68:	00020500 	andeq	r0, r2, r0, lsl #10
    1e6c:	03000000 	movweq	r0, #0
    1e70:	19010ffb 	stmdbne	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1e74:	02234b23 	eoreq	r4, r3, #35840	; 0x8c00
    1e78:	01010002 	tsteq	r1, r2
    1e7c:	00020500 	andeq	r0, r2, r0, lsl #10
    1e80:	03000000 	movweq	r0, #0
    1e84:	19011098 	stmdbne	r1, {r3, r4, r7, ip}
    1e88:	02234b23 	eoreq	r4, r3, #35840	; 0x8c00
    1e8c:	01010002 	tsteq	r1, r2
    1e90:	00020500 	andeq	r0, r2, r0, lsl #10
    1e94:	03000000 	movweq	r0, #0
    1e98:	190110b6 	stmdbne	r1, {r1, r2, r4, r5, r7, ip}
    1e9c:	023f4b23 	eorseq	r4, pc, #35840	; 0x8c00
    1ea0:	01010002 	tsteq	r1, r2
    1ea4:	00020500 	andeq	r0, r2, r0, lsl #10
    1ea8:	03000000 	movweq	r0, #0
    1eac:	190110d3 	stmdbne	r1, {r0, r1, r4, r6, r7, ip}
    1eb0:	023f4b23 	eorseq	r4, pc, #35840	; 0x8c00
    1eb4:	01010002 	tsteq	r1, r2
    1eb8:	00020500 	andeq	r0, r2, r0, lsl #10
    1ebc:	03000000 	movweq	r0, #0
    1ec0:	190110f1 	stmdbne	r1, {r0, r4, r5, r6, r7, ip}
    1ec4:	023f4b23 	eorseq	r4, pc, #35840	; 0x8c00
    1ec8:	01010002 	tsteq	r1, r2
    1ecc:	00020500 	andeq	r0, r2, r0, lsl #10
    1ed0:	03000000 	movweq	r0, #0
    1ed4:	1901118e 	stmdbne	r1, {r1, r2, r3, r7, r8, ip}
    1ed8:	023f4b23 	eorseq	r4, pc, #35840	; 0x8c00
    1edc:	01010002 	tsteq	r1, r2
    1ee0:	00020500 	andeq	r0, r2, r0, lsl #10
    1ee4:	03000000 	movweq	r0, #0
    1ee8:	190111ac 	stmdbne	r1, {r2, r3, r5, r7, r8, ip}
    1eec:	023f4b23 	eorseq	r4, pc, #35840	; 0x8c00
    1ef0:	01010002 	tsteq	r1, r2
    1ef4:	00020500 	andeq	r0, r2, r0, lsl #10
    1ef8:	03000000 	movweq	r0, #0
    1efc:	270111ce 	strcs	r1, [r1, -lr, asr #3]
    1f00:	02691d23 	rsbeq	r1, r9, #2240	; 0x8c0
    1f04:	01010005 	tsteq	r1, r5
    1f08:	00020500 	andeq	r0, r2, r0, lsl #10
    1f0c:	03000000 	movweq	r0, #0
    1f10:	270111ea 	strcs	r1, [r1, -sl, ror #3]
    1f14:	02691d23 	rsbeq	r1, r9, #2240	; 0x8c0
    1f18:	01010005 	tsteq	r1, r5
    1f1c:	00020500 	andeq	r0, r2, r0, lsl #10
    1f20:	03000000 	movweq	r0, #0
    1f24:	19011292 	stmdbne	r1, {r1, r4, r7, r9, ip}
    1f28:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1f2c:	34694d68 	strbtcc	r4, [r9], #-3432	; 0xfffff298
    1f30:	02311d69 	eorseq	r1, r1, #6720	; 0x1a40
    1f34:	01010005 	tsteq	r1, r5
    1f38:	00020500 	andeq	r0, r2, r0, lsl #10
    1f3c:	03000000 	movweq	r0, #0
    1f40:	1a0112b8 	bne	46a28 <__Stack_Size+0x46628>
    1f44:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1f48:	01010006 	tsteq	r1, r6
    1f4c:	00020500 	andeq	r0, r2, r0, lsl #10
    1f50:	03000000 	movweq	r0, #0
    1f54:	1a0112d5 	bne	46ab0 <__Stack_Size+0x466b0>
    1f58:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1f5c:	01010006 	tsteq	r1, r6
    1f60:	00020500 	andeq	r0, r2, r0, lsl #10
    1f64:	03000000 	movweq	r0, #0
    1f68:	1a0112f0 	bne	46b30 <__Stack_Size+0x46730>
    1f6c:	024f231d 	subeq	r2, pc, #1946157056	; 0x74000000
    1f70:	01010006 	tsteq	r1, r6
    1f74:	00020500 	andeq	r0, r2, r0, lsl #10
    1f78:	03000000 	movweq	r0, #0
    1f7c:	1801138d 	stmdane	r1, {r0, r2, r3, r7, r8, r9, ip}
    1f80:	00050269 	andeq	r0, r5, r9, ror #4
    1f84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1f88:	00000002 	andeq	r0, r0, r2
    1f8c:	13ae0300 			; <UNDEFINED> instruction: 0x13ae0300
    1f90:	02691901 	rsbeq	r1, r9, #16384	; 0x4000
    1f94:	01010005 	tsteq	r1, r5
    1f98:	00020500 	andeq	r0, r2, r0, lsl #10
    1f9c:	03000000 	movweq	r0, #0
    1fa0:	180113ca 	stmdane	r1, {r1, r3, r6, r7, r8, r9, ip}
    1fa4:	00050269 	andeq	r0, r5, r9, ror #4
    1fa8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1fac:	00000002 	andeq	r0, r0, r2
    1fb0:	13e40300 	mvnne	r0, #0, 6
    1fb4:	02691801 	rsbeq	r1, r9, #65536	; 0x10000
    1fb8:	01010005 	tsteq	r1, r5
    1fbc:	00020500 	andeq	r0, r2, r0, lsl #10
    1fc0:	03000000 	movweq	r0, #0
    1fc4:	170113f9 			; <UNDEFINED> instruction: 0x170113f9
    1fc8:	01000202 	tsteq	r0, r2, lsl #4
    1fcc:	02050001 	andeq	r0, r5, #1
    1fd0:	00000000 	andeq	r0, r0, r0
    1fd4:	01148a03 	tsteq	r4, r3, lsl #20
    1fd8:	00020217 	andeq	r0, r2, r7, lsl r2
    1fdc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1fe0:	00000002 	andeq	r0, r0, r2
    1fe4:	149c0300 	ldrne	r0, [ip], #768	; 0x300
    1fe8:	02021701 	andeq	r1, r2, #262144	; 0x40000
    1fec:	00010100 	andeq	r0, r1, r0, lsl #2
    1ff0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ff4:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    1ff8:	02170114 	andseq	r0, r7, #20, 2
    1ffc:	01010002 	tsteq	r1, r2
    2000:	00020500 	andeq	r0, r2, r0, lsl #10
    2004:	03000000 	movweq	r0, #0
    2008:	170114c0 	strne	r1, [r1, -r0, asr #9]
    200c:	01000202 	tsteq	r0, r2, lsl #4
    2010:	02050001 	andeq	r0, r5, #1
    2014:	00000000 	andeq	r0, r0, r0
    2018:	0114d203 	tsteq	r4, r3, lsl #4
    201c:	00030217 	andeq	r0, r3, r7, lsl r2
    2020:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2024:	00000002 	andeq	r0, r0, r2
    2028:	14ea0300 	strbtne	r0, [sl], #768	; 0x300
    202c:	02691801 	rsbeq	r1, r9, #65536	; 0x10000
    2030:	01010005 	tsteq	r1, r5
    2034:	00020500 	andeq	r0, r2, r0, lsl #10
    2038:	03000000 	movweq	r0, #0
    203c:	18011586 	stmdane	r1, {r1, r2, r7, r8, sl, ip}
    2040:	00070269 	andeq	r0, r7, r9, ror #4
    2044:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2048:	00000002 	andeq	r0, r0, r2
    204c:	058a0300 	streq	r0, [sl, #768]	; 0x300
    2050:	03282001 			; <UNDEFINED> instruction: 0x03282001
    2054:	7603200a 	strvc	r2, [r3], -sl
    2058:	20130320 	andscs	r0, r3, r0, lsr #6
    205c:	402e7303 	eormi	r7, lr, r3, lsl #6
    2060:	323f4d26 	eorscc	r4, pc, #2432	; 0x980
    2064:	11035b3f 	tstne	r3, pc, lsr fp
    2068:	2e6f0320 	cdpcs	3, 6, cr0, cr15, cr0, {1}
    206c:	5b3f3233 	blpl	fce940 <__Stack_Size+0xfce540>
    2070:	02022c22 	andeq	r2, r2, #8704	; 0x2200
    2074:	00010100 	andeq	r0, r1, r0, lsl #2
    2078:	00000205 	andeq	r0, r0, r5, lsl #4
    207c:	a2030000 	andge	r0, r3, #0
    2080:	69180115 	ldmdbvs	r8, {r0, r2, r4, r8}
    2084:	01000502 	tsteq	r0, r2, lsl #10
    2088:	02050001 	andeq	r0, r5, #1
    208c:	00000000 	andeq	r0, r0, r0
    2090:	0115be03 	tsteq	r5, r3, lsl #28
    2094:	07026918 	smladeq	r2, r8, r9, r6
    2098:	00010100 	andeq	r0, r1, r0, lsl #2
    209c:	00000205 	andeq	r0, r0, r5, lsl #4
    20a0:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    20a4:	09030104 	stmdbeq	r3, {r2, r8}
    20a8:	20770320 	rsbscs	r0, r7, r0, lsr #6
    20ac:	234a0903 	movtcs	r0, #43267	; 0xa903
    20b0:	20200333 	eorcs	r0, r0, r3, lsr r3
    20b4:	302e6003 	eorcc	r6, lr, r3
    20b8:	16033331 			; <UNDEFINED> instruction: 0x16033331
    20bc:	2e6a0320 	cdpcs	3, 6, cr0, cr10, cr0, {1}
    20c0:	13ea0330 	mvnne	r0, #48, 6	; 0xc0000000
    20c4:	6c96033c 	ldcvs	3, cr0, [r6], {60}	; 0x3c
    20c8:	13ea0320 	mvnne	r0, #32, 6	; 0x80000000
    20cc:	1f215a20 	svcne	0x00215a20
    20d0:	77243359 			; <UNDEFINED> instruction: 0x77243359
    20d4:	206c8f03 	rsbcs	r8, ip, r3, lsl #30
    20d8:	2013f203 	andscs	pc, r3, r3, lsl #4
    20dc:	206c9a03 	rsbcs	r9, ip, r3, lsl #20
    20e0:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    20e4:	5a2e1491 	bpl	b87330 <__Stack_Size+0xb86f30>
    20e8:	82090321 	andhi	r0, r9, #-2080374784	; 0x84000000
    20ec:	241c3246 	ldrcs	r3, [ip], #-582	; 0xfffffdba
    20f0:	6bea0331 	blvs	ffa82dbc <SCS_BASE+0x1fa74dbc>
    20f4:	95032220 	strls	r2, [r3, #-544]	; 0xfffffde0
    20f8:	e9032e14 	stmdb	r3, {r2, r4, r9, sl, fp, sp}
    20fc:	0202206b 	andeq	r2, r2, #107	; 0x6b
    2100:	00010100 	andeq	r0, r1, r0, lsl #2
    2104:	00000205 	andeq	r0, r0, r5, lsl #4
    2108:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    210c:	3f180115 	svccc	0x00180115
    2110:	01000502 	tsteq	r0, r2, lsl #10
    2114:	02050001 	andeq	r0, r5, #1
    2118:	00000000 	andeq	r0, r0, r0
    211c:	0115ec03 	tsteq	r5, r3, lsl #24
    2120:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    2124:	00010100 	andeq	r0, r1, r0, lsl #2
    2128:	00000205 	andeq	r0, r0, r5, lsl #4
    212c:	fd030000 	stc2	0, cr0, [r3, #-0]
    2130:	21170115 	tstcs	r7, r5, lsl r1
    2134:	01000202 	tsteq	r0, r2, lsl #4
    2138:	02050001 	andeq	r0, r5, #1
    213c:	00000000 	andeq	r0, r0, r0
    2140:	01168e03 	tsteq	r6, r3, lsl #28
    2144:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    2148:	00010100 	andeq	r0, r1, r0, lsl #2
    214c:	00000205 	andeq	r0, r0, r5, lsl #4
    2150:	9f030000 	svcls	0x00030000
    2154:	2f170116 	svccs	0x00170116
    2158:	01000202 	tsteq	r0, r2, lsl #4
    215c:	02050001 	andeq	r0, r5, #1
    2160:	00000000 	andeq	r0, r0, r0
    2164:	0116af03 	tsteq	r6, r3, lsl #30
    2168:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    216c:	00010100 	andeq	r0, r1, r0, lsl #2
    2170:	00000205 	andeq	r0, r0, r5, lsl #4
    2174:	bf030000 	svclt	0x00030000
    2178:	21170116 	tstcs	r7, r6, lsl r1
    217c:	01000202 	tsteq	r0, r2, lsl #4
    2180:	02050001 	andeq	r0, r5, #1
    2184:	00000000 	andeq	r0, r0, r0
    2188:	0116dd03 	tsteq	r6, r3, lsl #26
    218c:	0221281a 	eoreq	r2, r1, #1703936	; 0x1a0000
    2190:	01010004 	tsteq	r1, r4
    2194:	00020500 	andeq	r0, r2, r0, lsl #10
    2198:	03000000 	movweq	r0, #0
    219c:	030117a2 	movweq	r1, #6050	; 0x17a2
    21a0:	22220109 	eorcs	r0, r2, #1073741826	; 0x40000002
    21a4:	0200222c 	andeq	r2, r0, #44, 4	; 0xc0000002
    21a8:	51220104 			; <UNDEFINED> instruction: 0x51220104
    21ac:	01000102 	tsteq	r0, r2, lsl #2
    21b0:	02050001 	andeq	r0, r5, #1
    21b4:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
    21b8:	0117cd03 	tsteq	r7, r3, lsl #26
    21bc:	00040218 	andeq	r0, r4, r8, lsl r2
    21c0:	00de0101 	sbcseq	r0, lr, r1, lsl #2
    21c4:	00020000 	andeq	r0, r2, r0
    21c8:	00000061 	andeq	r0, r0, r1, rrx
    21cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    21d0:	0101000d 	tsteq	r1, sp
    21d4:	00000101 	andeq	r0, r0, r1, lsl #2
    21d8:	00000100 	andeq	r0, r0, r0, lsl #2
    21dc:	62696c01 	rsbvs	r6, r9, #256	; 0x100
    21e0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    21e4:	62696c00 	rsbvs	r6, r9, #0, 24
    21e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    21ec:	74730000 	ldrbtvc	r0, [r3], #-0
    21f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    21f4:	5f783031 	svcpl	0x00783031
    21f8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    21fc:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    2200:	00010063 	andeq	r0, r1, r3, rrx
    2204:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2208:	31663233 	cmncc	r6, r3, lsr r2
    220c:	745f7830 	ldrbvc	r7, [pc], #-2096	; 2214 <__Stack_Size+0x1e14>
    2210:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2214:	00020068 	andeq	r0, r2, r8, rrx
    2218:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    221c:	31663233 	cmncc	r6, r3, lsr r2
    2220:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 2168 <__Stack_Size+0x1d68>
    2224:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    2228:	00000200 	andeq	r0, r0, r0, lsl #4
    222c:	02050000 	andeq	r0, r5, #0
    2230:	00000000 	andeq	r0, r0, r0
    2234:	24012b03 	strcs	r2, [r1], #-2819	; 0xfffff4fd
    2238:	06024e22 	streq	r4, [r2], -r2, lsr #28
    223c:	00010100 	andeq	r0, r1, r0, lsl #2
    2240:	17300205 	ldrne	r0, [r0, -r5, lsl #4]!
    2244:	c2030800 	andgt	r0, r3, #0, 16
    2248:	02160100 	andseq	r0, r6, #0, 2
    224c:	01010006 	tsteq	r1, r6
    2250:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    2254:	03080017 	movweq	r0, #32791	; 0x8017
    2258:	160100d5 			; <UNDEFINED> instruction: 0x160100d5
    225c:	5c304c3e 	ldcpl	12, cr4, [r0], #-248	; 0xffffff08
    2260:	01000602 	tsteq	r0, r2, lsl #12
    2264:	02050001 	andeq	r0, r5, #1
    2268:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    226c:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    2270:	40221e26 	eormi	r1, r2, r6, lsr #28
    2274:	01000602 	tsteq	r0, r2, lsl #12
    2278:	02050001 	andeq	r0, r5, #1
    227c:	00000000 	andeq	r0, r0, r0
    2280:	01018603 	tsteq	r1, r3, lsl #12
    2284:	04022f13 	streq	r2, [r2], #-3859	; 0xfffff0ed
    2288:	00010100 	andeq	r0, r1, r0, lsl #2
    228c:	00000205 	andeq	r0, r0, r5, lsl #4
    2290:	96030000 	strls	r0, [r3], -r0
    2294:	0a030101 	beq	c26a0 <__Stack_Size+0xc22a0>
    2298:	03323e01 	teqeq	r2, #1, 28
    229c:	022f200b 	eoreq	r2, pc, #11
    22a0:	01010006 	tsteq	r1, r6
    22a4:	000002f3 	strdeq	r0, [r0], -r3
    22a8:	00870002 	addeq	r0, r7, r2
    22ac:	01020000 	mrseq	r0, (UNDEF: 2)
    22b0:	000d0efb 	strdeq	r0, [sp], -fp
    22b4:	01010101 	tsteq	r1, r1, lsl #2
    22b8:	01000000 	mrseq	r0, (UNDEF: 0)
    22bc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    22c0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    22c4:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
    22c8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    22cc:	0000636e 	andeq	r6, r0, lr, ror #6
    22d0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    22d4:	30316632 	eorscc	r6, r1, r2, lsr r6
    22d8:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    22dc:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    22e0:	00010063 	andeq	r0, r1, r3, rrx
    22e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    22e8:	31663233 	cmncc	r6, r3, lsr r2
    22ec:	745f7830 	ldrbvc	r7, [pc], #-2096	; 22f4 <__Stack_Size+0x1ef4>
    22f0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    22f4:	00020068 	andeq	r0, r2, r8, rrx
    22f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    22fc:	31663233 	cmncc	r6, r3, lsr r2
    2300:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 2248 <__Stack_Size+0x1e48>
    2304:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    2308:	00000200 	andeq	r0, r0, r0, lsl #4
    230c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2310:	30316632 	eorscc	r6, r1, r2, lsr r6
    2314:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    2318:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    231c:	00020068 	andeq	r0, r2, r8, rrx
    2320:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2324:	31663233 	cmncc	r6, r3, lsr r2
    2328:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    232c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    2330:	00000200 	andeq	r0, r0, r0, lsl #4
    2334:	02050000 	andeq	r0, r5, #0
    2338:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
    233c:	0100da03 	tsteq	r0, r3, lsl #20
    2340:	033f0824 	teqeq	pc, #36, 16	; 0x240000
    2344:	6603581b 			; <UNDEFINED> instruction: 0x6603581b
    2348:	4e595c2e 	cdpmi	12, 5, cr5, cr9, cr14, {1}
    234c:	4e594e59 	mrcmi	14, 2, r4, cr9, cr9, {2}
    2350:	7a034259 	bvc	d2cbc <__Stack_Size+0xd28bc>
    2354:	0008022e 	andeq	r0, r8, lr, lsr #4
    2358:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    235c:	00181802 	andseq	r1, r8, r2, lsl #16
    2360:	018c0308 	orreq	r0, ip, r8, lsl #6
    2364:	3c150301 	ldccc	3, cr0, [r5], {1}
    2368:	23660903 	cmncs	r6, #49152	; 0xc000
    236c:	23c80c03 	biccs	r0, r8, #768	; 0x300
    2370:	03585003 	cmpeq	r8, #3
    2374:	43242e39 			; <UNDEFINED> instruction: 0x43242e39
    2378:	674e241c 	smlaldvs	r2, lr, ip, r4
    237c:	023d934e 	eorseq	r9, sp, #939524097	; 0x38000001
    2380:	01010005 	tsteq	r1, r5
    2384:	a0020500 	andge	r0, r2, r0, lsl #10
    2388:	03080018 	movweq	r0, #32792	; 0x8018
    238c:	140101e8 	strne	r0, [r1], #-488	; 0xfffffe18
    2390:	212f1d40 			; <UNDEFINED> instruction: 0x212f1d40
    2394:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
    2398:	00010100 	andeq	r0, r1, r0, lsl #2
    239c:	00000205 	andeq	r0, r0, r5, lsl #4
    23a0:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    23a4:	0b030101 	bleq	c27b0 <__Stack_Size+0xc23b0>
    23a8:	ac0d033c 	stcge	3, cr0, [sp], {60}	; 0x3c
    23ac:	01000202 	tsteq	r0, r2, lsl #4
    23b0:	02050001 	andeq	r0, r5, #1
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	0102a303 	tsteq	r2, r3, lsl #6
    23bc:	21212f14 			; <UNDEFINED> instruction: 0x21212f14
    23c0:	01000202 	tsteq	r0, r2, lsl #4
    23c4:	02050001 	andeq	r0, r5, #1
    23c8:	080018b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip}
    23cc:	0102b703 	tsteq	r2, r3, lsl #14
    23d0:	4f231d1a 	svcmi	0x00231d1a
    23d4:	01000602 	tsteq	r0, r2, lsl #12
    23d8:	02050001 	andeq	r0, r5, #1
    23dc:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    23e0:	0102e203 	tsteq	r2, r3, lsl #4
    23e4:	03011203 	movweq	r1, #4611	; 0x1203
    23e8:	0d03206e 	stceq	0, cr2, [r3, #-440]	; 0xfffffe48
    23ec:	4c1e3520 	cfldr32mi	mvfx3, [lr], {32}
    23f0:	32223022 	eorcc	r3, r2, #34	; 0x22
    23f4:	32221e24 	eorcc	r1, r2, #36, 28	; 0x240
    23f8:	01000402 	tsteq	r0, r2, lsl #8
    23fc:	02050001 	andeq	r0, r5, #1
    2400:	00000000 	andeq	r0, r0, r0
    2404:	01039d03 	tsteq	r3, r3, lsl #26
    2408:	2a010a03 	bcs	44c1c <__Stack_Size+0x4481c>
    240c:	04023424 	streq	r3, [r2], #-1060	; 0xfffffbdc
    2410:	00010100 	andeq	r0, r1, r0, lsl #2
    2414:	00000205 	andeq	r0, r0, r5, lsl #4
    2418:	bc030000 	stclt	0, cr0, [r3], {-0}
    241c:	68180103 	ldmdavs	r8, {r0, r1, r8}
    2420:	01000502 	tsteq	r0, r2, lsl #10
    2424:	02050001 	andeq	r0, r5, #1
    2428:	00000000 	andeq	r0, r0, r0
    242c:	0103d503 	tsteq	r3, r3, lsl #10
    2430:	05026717 	streq	r6, [r2, #-1815]	; 0xfffff8e9
    2434:	00010100 	andeq	r0, r1, r0, lsl #2
    2438:	00000205 	andeq	r0, r0, r5, lsl #4
    243c:	ea030000 	b	c2444 <__Stack_Size+0xc2044>
    2440:	1d1a0103 	ldfnes	f0, [sl, #-12]
    2444:	06024f23 	streq	r4, [r2], -r3, lsr #30
    2448:	00010100 	andeq	r0, r1, r0, lsl #2
    244c:	00000205 	andeq	r0, r0, r5, lsl #4
    2450:	8a030000 	bhi	c2458 <__Stack_Size+0xc2058>
    2454:	67170104 	ldrvs	r0, [r7, -r4, lsl #2]
    2458:	01000502 	tsteq	r0, r2, lsl #10
    245c:	02050001 	andeq	r0, r5, #1
    2460:	00000000 	andeq	r0, r0, r0
    2464:	01049f03 	tsteq	r4, r3, lsl #30
    2468:	4f231d1a 	svcmi	0x00231d1a
    246c:	01000602 	tsteq	r0, r2, lsl #12
    2470:	02050001 	andeq	r0, r5, #1
    2474:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
    2478:	0104bb03 	tsteq	r4, r3, lsl #22
    247c:	00040218 	andeq	r0, r4, r8, lsl r2
    2480:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2484:	00190602 	andseq	r0, r9, r2, lsl #12
    2488:	04ce0308 	strbeq	r0, [lr], #776	; 0x308
    248c:	02211701 	eoreq	r1, r1, #262144	; 0x40000
    2490:	01010003 	tsteq	r1, r3
    2494:	00020500 	andeq	r0, r2, r0, lsl #10
    2498:	03000000 	movweq	r0, #0
    249c:	170104e0 	strne	r0, [r1, -r0, ror #9]
    24a0:	01000602 	tsteq	r0, r2, lsl #12
    24a4:	02050001 	andeq	r0, r5, #1
    24a8:	00000000 	andeq	r0, r0, r0
    24ac:	0104f303 	tsteq	r4, r3, lsl #6	; <UNPREDICTABLE>
    24b0:	06023e17 			; <UNDEFINED> instruction: 0x06023e17
    24b4:	00010100 	andeq	r0, r1, r0, lsl #2
    24b8:	00000205 	andeq	r0, r0, r5, lsl #4
    24bc:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    24c0:	4c170105 	ldfmis	f0, [r7], {5}
    24c4:	01000502 	tsteq	r0, r2, lsl #10
    24c8:	02050001 	andeq	r0, r5, #1
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	01059f03 	tsteq	r5, r3, lsl #30
    24d4:	4f231d1a 	svcmi	0x00231d1a
    24d8:	01000602 	tsteq	r0, r2, lsl #12
    24dc:	02050001 	andeq	r0, r5, #1
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	0105bc03 	tsteq	r5, r3, lsl #24
    24e8:	4f231d1a 	svcmi	0x00231d1a
    24ec:	01000602 	tsteq	r0, r2, lsl #12
    24f0:	02050001 	andeq	r0, r5, #1
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	0105d903 	tsteq	r5, r3, lsl #18
    24fc:	4f231d1a 	svcmi	0x00231d1a
    2500:	01000602 	tsteq	r0, r2, lsl #12
    2504:	02050001 	andeq	r0, r5, #1
    2508:	00000000 	andeq	r0, r0, r0
    250c:	0105f803 	tsteq	r5, r3, lsl #16	; <UNPREDICTABLE>
    2510:	05026717 	streq	r6, [r2, #-1815]	; 0xfffff8e9
    2514:	00010100 	andeq	r0, r1, r0, lsl #2
    2518:	00000205 	andeq	r0, r0, r5, lsl #4
    251c:	8d030000 	stchi	0, cr0, [r3, #-0]
    2520:	1d1a0106 	ldfnes	f0, [sl, #-24]	; 0xffffffe8
    2524:	06024f23 	streq	r4, [r2], -r3, lsr #30
    2528:	00010100 	andeq	r0, r1, r0, lsl #2
    252c:	190e0205 	stmdbne	lr, {r0, r2, r9}
    2530:	b5030800 	strlt	r0, [r3, #-2048]	; 0xfffff800
    2534:	281a0106 	ldmdacs	sl, {r1, r2, r8}
    2538:	00040221 	andeq	r0, r4, r1, lsr #4
    253c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2540:	00191a02 	andseq	r1, r9, r2, lsl #20
    2544:	06e90308 	strbteq	r0, [r9], r8, lsl #6
    2548:	04021801 	streq	r1, [r2], #-2049	; 0xfffff7ff
    254c:	00010100 	andeq	r0, r1, r0, lsl #2
    2550:	19220205 	stmdbne	r2!, {r0, r2, r9}
    2554:	8a030800 	bhi	c455c <__Stack_Size+0xc415c>
    2558:	0f030107 	svceq	0x00030107
    255c:	20710301 	rsbscs	r0, r1, r1, lsl #6
    2560:	31200a03 			; <UNDEFINED> instruction: 0x31200a03
    2564:	22301e32 	eorscs	r1, r0, #800	; 0x320
    2568:	42322230 	eorsmi	r2, r2, #48, 4
    256c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2570:	02001d01 	andeq	r1, r0, #1, 26	; 0x40
    2574:	001e0104 	andseq	r0, lr, r4, lsl #2
    2578:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    257c:	01040200 	mrseq	r0, R12_usr
    2580:	02245c33 	eoreq	r5, r4, #13056	; 0x3300
    2584:	01010001 	tsteq	r1, r1
    2588:	00020500 	andeq	r0, r2, r0, lsl #10
    258c:	03000000 	movweq	r0, #0
    2590:	030107da 	movweq	r0, #6106	; 0x17da
    2594:	0802010b 	stmdaeq	r2, {r0, r1, r3, r8}
    2598:	96010100 	strls	r0, [r1], -r0, lsl #2
    259c:	02000000 	andeq	r0, r0, #0
    25a0:	00002f00 	andeq	r2, r0, r0, lsl #30
    25a4:	fb010200 	blx	42dae <__Stack_Size+0x429ae>
    25a8:	01000d0e 	tsteq	r0, lr, lsl #26
    25ac:	00010101 	andeq	r0, r1, r1, lsl #2
    25b0:	00010000 	andeq	r0, r1, r0
    25b4:	696c0100 	stmdbvs	ip!, {r8}^
    25b8:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    25bc:	63000063 	movwvs	r0, #99	; 0x63
    25c0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    25c4:	5f336d78 	svcpl	0x00336d78
    25c8:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    25cc:	00732e6f 	rsbseq	r2, r3, pc, ror #28
    25d0:	00000001 	andeq	r0, r0, r1
    25d4:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    25d8:	03080001 	movweq	r0, #32769	; 0x8001
    25dc:	03210134 			; <UNDEFINED> instruction: 0x03210134
    25e0:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    25e4:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    25e8:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    25ec:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    25f0:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    25f4:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    25f8:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    25fc:	2f2f200b 	svccs	0x002f200b
    2600:	2f200a03 	svccs	0x00200a03
    2604:	2f200b03 	svccs	0x00200b03
    2608:	2f200b03 	svccs	0x00200b03
    260c:	2f200b03 	svccs	0x00200b03
    2610:	21200a03 			; <UNDEFINED> instruction: 0x21200a03
    2614:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
    2618:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
    261c:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
    2620:	2f200b03 	svccs	0x00200b03
    2624:	2f200b03 	svccs	0x00200b03
    2628:	21200a03 			; <UNDEFINED> instruction: 0x21200a03
    262c:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
    2630:	01000102 	tsteq	r0, r2, lsl #2
    2634:	00006201 	andeq	r6, r0, r1, lsl #4
    2638:	31000200 	mrscc	r0, R8_usr
    263c:	02000000 	andeq	r0, r0, #0
    2640:	0d0efb01 	vstreq	d15, [lr, #-4]
    2644:	01010100 	mrseq	r0, (UNDEF: 17)
    2648:	00000001 	andeq	r0, r0, r1
    264c:	01000001 	tsteq	r0, r1
    2650:	2f62696c 	svccs	0x0062696c
    2654:	00637273 	rsbeq	r7, r3, r3, ror r2
    2658:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    265c:	31663233 	cmncc	r6, r3, lsr r2
    2660:	765f7830 			; <UNDEFINED> instruction: 0x765f7830
    2664:	6f746365 	svcvs	0x00746365
    2668:	00632e72 	rsbeq	r2, r3, r2, ror lr
    266c:	00000001 	andeq	r0, r0, r1
    2670:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    2674:	03080019 	movweq	r0, #32793	; 0x8019
    2678:	7b0101d7 	blvc	42ddc <__Stack_Size+0x429dc>
    267c:	01040200 	mrseq	r0, R12_usr
    2680:	30062006 	andcc	r2, r6, r6
    2684:	01040200 	mrseq	r0, R12_usr
    2688:	0402006c 	streq	r0, [r2], #-108	; 0xffffff94
    268c:	02002201 	andeq	r2, r0, #268435456	; 0x10000000
    2690:	301e0104 	andscc	r0, lr, r4, lsl #2
    2694:	0f022f42 	svceq	0x00022f42
    2698:	8b010100 	blhi	42aa0 <__Stack_Size+0x426a0>
    269c:	02000000 	andeq	r0, r0, #0
    26a0:	00006d00 	andeq	r6, r0, r0, lsl #26
    26a4:	fb010200 	blx	42eae <__Stack_Size+0x42aae>
    26a8:	01000d0e 	tsteq	r0, lr, lsl #26
    26ac:	00010101 	andeq	r0, r1, r1, lsl #2
    26b0:	00010000 	andeq	r0, r1, r0
    26b4:	696c0100 	stmdbvs	ip!, {r8}^
    26b8:	53552f62 	cmppl	r5, #392	; 0x188
    26bc:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    26c0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    26c4:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    26c8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    26cc:	2f2e0063 	svccs	0x002e0063
    26d0:	2f62696c 	svccs	0x0062696c
    26d4:	5f425355 	svcpl	0x00425355
    26d8:	2f62696c 	svccs	0x0062696c
    26dc:	00636e69 	rsbeq	r6, r3, r9, ror #28
    26e0:	62737500 	rsbsvs	r7, r3, #0, 10
    26e4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    26e8:	00632e74 	rsbeq	r2, r3, r4, ror lr
    26ec:	73000001 	movwvc	r0, #1
    26f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    26f4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    26f8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    26fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2700:	75000002 	strvc	r0, [r0, #-2]
    2704:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    2708:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    270c:	00030068 	andeq	r0, r3, r8, rrx
    2710:	05000000 	streq	r0, [r0, #-0]
    2714:	0019b402 	andseq	fp, r9, r2, lsl #8
    2718:	01350308 	teqeq	r5, r8, lsl #6
    271c:	211d3113 	tstcs	sp, r3, lsl r1
    2720:	1e223d2f 	cdpne	13, 2, cr3, cr2, cr15, {1}
    2724:	000e0222 	andeq	r0, lr, r2, lsr #4
    2728:	038d0101 	orreq	r0, sp, #1073741824	; 0x40000000
    272c:	00020000 	andeq	r0, r2, r0
    2730:	000000a3 	andeq	r0, r0, r3, lsr #1
    2734:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2738:	0101000d 	tsteq	r1, sp
    273c:	00000101 	andeq	r0, r0, r1, lsl #2
    2740:	00000100 	andeq	r0, r0, r0, lsl #2
    2744:	62696c01 	rsbvs	r6, r9, #256	; 0x100
    2748:	4253552f 	subsmi	r5, r3, #197132288	; 0xbc00000
    274c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2750:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2754:	62696c00 	rsbvs	r6, r9, #0, 24
    2758:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    275c:	6c2f2e00 	stcvs	14, cr2, [pc], #-0	; 2764 <__Stack_Size+0x2364>
    2760:	552f6269 	strpl	r6, [pc, #-617]!	; 24ff <__Stack_Size+0x20ff>
    2764:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
    2768:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    276c:	0000636e 	andeq	r6, r0, lr, ror #6
    2770:	5f627375 	svcpl	0x00627375
    2774:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    2778:	0100632e 	tsteq	r0, lr, lsr #6
    277c:	74730000 	ldrbtvc	r0, [r3], #-0
    2780:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2784:	5f783031 	svcpl	0x00783031
    2788:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    278c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2790:	73750000 	cmnvc	r5, #0
    2794:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
    2798:	00682e66 	rsbeq	r2, r8, r6, ror #28
    279c:	75000003 	strvc	r0, [r0, #-3]
    27a0:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    27a4:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    27a8:	00030068 	andeq	r0, r3, r8, rrx
    27ac:	62737500 	rsbsvs	r7, r3, #0, 10
    27b0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    27b4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    27b8:	75000003 	strvc	r0, [r0, #-3]
    27bc:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    27c0:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    27c4:	00030068 	andeq	r0, r3, r8, rrx
    27c8:	62737500 	rsbsvs	r7, r3, #0, 10
    27cc:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    27d0:	0300682e 	movweq	r6, #2094	; 0x82e
    27d4:	00000000 	andeq	r0, r0, r0
    27d8:	19e80205 	stmibne	r8!, {r0, r2, r9}^
    27dc:	3d030800 	stccc	8, cr0, [r3, #-0]
    27e0:	3e222f01 	cdpcc	15, 2, cr2, cr2, cr1, {0}
    27e4:	022f4b22 	eoreq	r4, pc, #34816	; 0x8800
    27e8:	01010005 	tsteq	r1, r5
    27ec:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    27f0:	0308001a 	movweq	r0, #32794	; 0x801a
    27f4:	2f0100eb 	svccs	0x000100eb
    27f8:	4b223e22 	blmi	892088 <__Stack_Size+0x891c88>
    27fc:	0005022f 	andeq	r0, r5, pc, lsr #4
    2800:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2804:	001a3002 	andseq	r3, sl, r2
    2808:	01a30308 			; <UNDEFINED> instruction: 0x01a30308
    280c:	3d222f01 	stccc	15, cr2, [r2, #-4]!
    2810:	4c1e2224 	lfmmi	f2, 4, [lr], {36}	; 0x24
    2814:	4422233f 	strtmi	r2, [r2], #-831	; 0xfffffcc1
    2818:	33404e30 	movtcc	r4, #3632	; 0xe30
    281c:	47402231 	smlaldxmi	r2, r0, r1, r2
    2820:	4c231d31 	stcmi	13, cr1, [r3], #-196	; 0xffffff3c
    2824:	580b0342 	stmdapl	fp, {r1, r6, r8, r9}
    2828:	02242b4b 	eoreq	r2, r4, #76800	; 0x12c00
    282c:	01010007 	tsteq	r1, r7
    2830:	c0020500 	andgt	r0, r2, r0, lsl #10
    2834:	0308001a 	movweq	r0, #32794	; 0x801a
    2838:	2f0103f4 	svccs	0x000103f4
    283c:	0200264b 	andeq	r2, r0, #78643200	; 0x4b00000
    2840:	20060104 	andcs	r0, r6, r4, lsl #2
    2844:	a04d3e06 	subge	r3, sp, r6, lsl #28
    2848:	032e0c03 			; <UNDEFINED> instruction: 0x032e0c03
    284c:	0e033c79 	mcreq	12, 0, r3, cr3, cr9, {3}
    2850:	7951212e 	ldmdbvc	r1, {r1, r2, r3, r5, r8, sp}^
    2854:	2a244c85 	bcs	915a70 <__Stack_Size+0x915670>
    2858:	1d3e2f2f 	ldcne	15, cr2, [lr, #-188]!	; 0xffffff44
    285c:	00082323 	andeq	r2, r8, r3, lsr #6
    2860:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2864:	001b6c02 	andseq	r6, fp, r2, lsl #24
    2868:	00d20308 	sbcseq	r0, r2, r8, lsl #6
    286c:	1f212201 	svcne	0x00212201
    2870:	21302f59 	teqcs	r0, r9, asr pc
    2874:	0222324b 	eoreq	r3, r2, #-1342177276	; 0xb0000004
    2878:	01010008 	tsteq	r1, r8
    287c:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    2880:	0308001b 	movweq	r0, #32795	; 0x801b
    2884:	24010180 	strcs	r0, [r1], #-384	; 0xfffffe80
    2888:	02003e84 	andeq	r3, r0, #132, 28	; 0x840
    288c:	20060104 	andcs	r0, r6, r4, lsl #2
    2890:	4b342f06 	blmi	d0e4b0 <__Stack_Size+0xd0e0b0>
    2894:	422f1f21 	eormi	r1, pc, #33, 30	; 0x84
    2898:	00070221 	andeq	r0, r7, r1, lsr #4
    289c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    28a0:	001bec02 	andseq	lr, fp, r2, lsl #24
    28a4:	01f50308 	mvnseq	r0, r8, lsl #6
    28a8:	3e402101 	dvfccs	f2, f0, f1
    28ac:	3d35224b 	lfmcc	f2, 4, [r5, #-300]!	; 0xfffffed4
    28b0:	200f0342 	andcs	r0, pc, r2, asr #6
    28b4:	43207203 			; <UNDEFINED> instruction: 0x43207203
    28b8:	2075035f 	rsbscs	r0, r5, pc, asr r3
    28bc:	00314032 	eorseq	r4, r1, r2, lsr r0
    28c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    28c4:	032f062e 			; <UNDEFINED> instruction: 0x032f062e
    28c8:	23473c09 	movtcs	r3, #31753	; 0x7c09
    28cc:	4c4d231d 	mcrrmi	3, 1, r2, sp, cr13
    28d0:	6c235a5e 	stcvs	10, cr5, [r3], #-376	; 0xfffffe88
    28d4:	314bcc30 	cmpcc	fp, r0, lsr ip
    28d8:	00090221 	andeq	r0, r9, r1, lsr #4
    28dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    28e0:	001cc402 	andseq	ip, ip, r2, lsl #8
    28e4:	02d20308 	sbcseq	r0, r2, #8, 6	; 0x20000000
    28e8:	0f032601 	svceq	0x00032601
    28ec:	20710320 	rsbscs	r0, r1, r0, lsr #6
    28f0:	03200f03 			; <UNDEFINED> instruction: 0x03200f03
    28f4:	43212071 			; <UNDEFINED> instruction: 0x43212071
    28f8:	31403254 	cmpcc	r0, r4, asr r2
    28fc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    2900:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    2904:	2e090321 	cdpcs	3, 0, cr0, cr9, cr1, {1}
    2908:	03422355 	movteq	r2, #9045	; 0x2355
    290c:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    2910:	03342e7a 	teqeq	r4, #1952	; 0x7a0
    2914:	7734207a 			; <UNDEFINED> instruction: 0x7734207a
    2918:	2e6f034b 	cdpcs	3, 6, cr0, cr15, cr11, {2}
    291c:	02201203 	eoreq	r1, r0, #805306368	; 0x30000000
    2920:	01010008 	tsteq	r1, r8
    2924:	50020500 	andpl	r0, r2, r0, lsl #10
    2928:	0308001d 	movweq	r0, #32797	; 0x801d
    292c:	21010388 	smlabbcs	r1, r8, r3, r0
    2930:	07024c67 	streq	r4, [r2, -r7, ror #24]
    2934:	00010100 	andeq	r0, r1, r0, lsl #2
    2938:	1d740205 	lfmne	f0, 2, [r4, #-20]!	; 0xffffffec
    293c:	a2030800 	andge	r0, r3, #0, 16
    2940:	1d150103 	ldfnes	f0, [r5, #-12]
    2944:	3d222f23 	stccc	15, cr2, [r2, #-140]!	; 0xffffff74
    2948:	03022f23 	movweq	r2, #12067	; 0x2f23
    294c:	00010100 	andeq	r0, r1, r0, lsl #2
    2950:	1d900205 	lfmne	f0, 4, [r0, #20]
    2954:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    2958:	68250107 	stmdavs	r5!, {r0, r1, r2, r8}
    295c:	18034b5a 	stmdane	r3, {r1, r3, r4, r6, r8, r9, fp, lr}
    2960:	000d023c 	andeq	r0, sp, ip, lsr r2
    2964:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2968:	001dd002 	andseq	sp, sp, r2
    296c:	06ed0308 	strbteq	r0, [sp], r8, lsl #6
    2970:	20140301 	andscs	r0, r4, r1, lsl #6
    2974:	231d231d 	tstcs	sp, #1946157056	; 0x74000000
    2978:	302fa339 	eorcc	sl, pc, r9, lsr r3	; <UNPREDICTABLE>
    297c:	3d3f5a4c 	vldmdbcc	pc!, {s10-s85}
    2980:	587db103 	ldmdapl	sp!, {r0, r1, r8, ip, sp, pc}^
    2984:	30403040 	subcc	r3, r0, r0, asr #32
    2988:	3d3d294f 	ldccc	9, cr2, [sp, #-316]!	; 0xfffffec4
    298c:	30581003 	subscc	r1, r8, r3
    2990:	593c3c03 	ldmdbpl	ip!, {r0, r1, sl, fp, ip, sp}
    2994:	3d3c4403 	cfldrscc	mvf4, [ip, #-12]!
    2998:	3d30443e 	cfldrscc	mvf4, [r0, #-248]!	; 0xffffff08
    299c:	0b033e3d 	bleq	d2298 <__Stack_Size+0xd1e98>
    29a0:	4130313c 	teqmi	r0, ip, lsr r1
    29a4:	03303331 	teqeq	r0, #-1006632960	; 0xc4000000
    29a8:	0a032e09 	beq	ce1d4 <__Stack_Size+0xcddd4>
    29ac:	1003374a 	andne	r3, r3, sl, asr #14
    29b0:	3c1a0320 	ldccc	3, cr0, [sl], {32}
    29b4:	302f4c30 	eorcc	r4, pc, r0, lsr ip	; <UNPREDICTABLE>
    29b8:	3e3e303e 	mrccc	0, 1, r3, cr14, cr14, {1}
    29bc:	3d856842 	stccc	8, cr6, [r5, #264]	; 0x108
    29c0:	5183305e 	orrpl	r3, r3, lr, asr r0
    29c4:	200e033e 	andcs	r0, lr, lr, lsr r3
    29c8:	43207203 			; <UNDEFINED> instruction: 0x43207203
    29cc:	2075035f 	rsbscs	r0, r5, pc, asr r3
    29d0:	75314032 	ldrvc	r4, [r1, #-50]!	; 0xffffffce
    29d4:	304a0903 	subcc	r0, sl, r3, lsl #18
    29d8:	5930324c 	ldmdbpl	r0!, {r2, r3, r6, r9, ip, sp}
    29dc:	33766767 	cmncc	r6, #27000832	; 0x19c0000
    29e0:	2f233d30 	svccs	0x00233d30
    29e4:	69200c03 	stmdbvs	r0!, {r0, r1, sl, fp}
    29e8:	4d413f31 	stclmi	15, cr3, [r1, #-196]	; 0xffffff3c
    29ec:	303f3e3f 	eorscc	r3, pc, pc, lsr lr	; <UNPREDICTABLE>
    29f0:	405a305a 	subsmi	r3, sl, sl, asr r0
    29f4:	2f40084b 	svccs	0x0040084b
    29f8:	2f4a3903 	svccs	0x004a3903
    29fc:	2e7e9203 	cdpcs	2, 7, cr9, cr14, cr3, {0}
    2a00:	2e3c039c 	mrccs	3, 1, r0, cr12, cr12, {4}
    2a04:	2e00c703 	cdpcs	7, 0, cr12, cr0, cr3, {0}
    2a08:	10023067 	andne	r3, r2, r7, rrx
    2a0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a10:	20d00205 	sbcscs	r0, r0, r5, lsl #4
    2a14:	cb030800 	blgt	c4a1c <__Stack_Size+0xc461c>
    2a18:	3e210107 	sufccs	f0, f1, f7
    2a1c:	01040200 	mrseq	r0, R12_usr
    2a20:	33062e06 	movwcc	r2, #28166	; 0x6e06
    2a24:	01040200 	mrseq	r0, R12_usr
    2a28:	03062e06 	movweq	r2, #28166	; 0x6e06
    2a2c:	1e2e7bea 	vnmulne.f64	d7, d30, d26
    2a30:	59263322 	stmdbpl	r6!, {r1, r5, r8, r9, ip, sp}
    2a34:	252f211f 	strcs	r2, [pc, #-287]!	; 291d <__Stack_Size+0x251d>
    2a38:	3078331b 	rsbscc	r3, r8, fp, lsl r3
    2a3c:	1f2f1f21 	svcne	0x002f1f21
    2a40:	3e3f2f21 	cdpcc	15, 3, cr2, cr15, cr1, {1}
    2a44:	2232221e 	eorscs	r2, r2, #-536870911	; 0xe0000001
    2a48:	ef032f40 	svc	0x00032f40
    2a4c:	303f9e03 	eorscc	r9, pc, r3, lsl #28
    2a50:	034a7603 	movteq	r7, #42499	; 0xa603
    2a54:	2d312017 	ldccs	0, cr2, [r1, #-92]!	; 0xffffffa4
    2a58:	01000f02 	tsteq	r0, r2, lsl #30
    2a5c:	02050001 	andeq	r0, r5, #1
    2a60:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
    2a64:	0108a203 	tsteq	r8, r3, lsl #4
    2a68:	001d2325 	andseq	r2, sp, r5, lsr #6
    2a6c:	23010402 	movwcs	r0, #5122	; 0x1402
    2a70:	03040200 	movweq	r0, #16896	; 0x4200
    2a74:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2a78:	0232e203 	eorseq	lr, r2, #805306368	; 0x30000000
    2a7c:	01010009 	tsteq	r1, r9
    2a80:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    2a84:	03080021 	movweq	r0, #32801	; 0x8021
    2a88:	210107a3 	smlatbcs	r1, r3, r7, r0
    2a8c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    2a90:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    2a94:	303f3030 	eorscc	r3, pc, r0, lsr r0	; <UNPREDICTABLE>
    2a98:	01040200 	mrseq	r0, R12_usr
    2a9c:	3f063c06 	svccc	0x00063c06
    2aa0:	23504c3d 	cmpcs	r0, #15616	; 0x3d00
    2aa4:	09022d31 	stmdbeq	r2, {r0, r4, r5, r8, sl, fp, sp}
    2aa8:	00010100 	andeq	r0, r1, r0, lsl #2
    2aac:	22380205 	eorscs	r0, r8, #1342177280	; 0x50000000
    2ab0:	ba030800 	blt	c4ab8 <__Stack_Size+0xc46b8>
    2ab4:	01020108 	tsteq	r2, r8, lsl #2
    2ab8:	96010100 	strls	r0, [r1], -r0, lsl #2
    2abc:	02000000 	andeq	r0, r0, #0
    2ac0:	00004c00 	andeq	r4, r0, r0, lsl #24
    2ac4:	fb010200 	blx	432ce <__Stack_Size+0x42ece>
    2ac8:	01000d0e 	tsteq	r0, lr, lsl #26
    2acc:	00010101 	andeq	r0, r1, r1, lsl #2
    2ad0:	00010000 	andeq	r0, r1, r0
    2ad4:	696c0100 	stmdbvs	ip!, {r8}^
    2ad8:	53552f62 	cmppl	r5, #392	; 0x188
    2adc:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    2ae0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2ae4:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    2ae8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2aec:	75000063 	strvc	r0, [r0, #-99]	; 0xffffff9d
    2af0:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 292c <__Stack_Size+0x252c>
    2af4:	632e6d65 			; <UNDEFINED> instruction: 0x632e6d65
    2af8:	00000100 	andeq	r0, r0, r0, lsl #2
    2afc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2b00:	30316632 	eorscc	r6, r1, r2, lsr r6
    2b04:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b08:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    2b0c:	00000200 	andeq	r0, r0, r0, lsl #4
    2b10:	02050000 	andeq	r0, r5, #0
    2b14:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
    2b18:	24012403 	strcs	r2, [r1], #-1027	; 0xfffffbfd
    2b1c:	232b232b 			; <UNDEFINED> instruction: 0x232b232b
    2b20:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2b24:	00200601 	eoreq	r0, r0, r1, lsl #12
    2b28:	06030402 	streq	r0, [r3], -r2, lsl #8
    2b2c:	01024e4f 	tsteq	r2, pc, asr #28
    2b30:	00010100 	andeq	r0, r1, r0, lsl #2
    2b34:	225e0205 	subscs	r0, lr, #1342177280	; 0x50000000
    2b38:	3d030800 	stccc	8, cr0, [r3, #-0]
    2b3c:	232b2401 			; <UNDEFINED> instruction: 0x232b2401
    2b40:	0021232b 	eoreq	r2, r1, fp, lsr #6
    2b44:	06010402 	streq	r0, [r1], -r2, lsl #8
    2b48:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    2b4c:	69300603 	ldmdbvs	r0!, {r0, r1, r9, sl}
    2b50:	01000102 	tsteq	r0, r2, lsl #2
    2b54:	00047a01 	andeq	r7, r4, r1, lsl #20
    2b58:	6d000200 	sfmvs	f0, 4, [r0, #-0]
    2b5c:	02000000 	andeq	r0, r0, #0
    2b60:	0d0efb01 	vstreq	d15, [lr, #-4]
    2b64:	01010100 	mrseq	r0, (UNDEF: 17)
    2b68:	00000001 	andeq	r0, r0, r1
    2b6c:	01000001 	tsteq	r0, r1
    2b70:	2f62696c 	svccs	0x0062696c
    2b74:	5f425355 	svcpl	0x00425355
    2b78:	2f62696c 	svccs	0x0062696c
    2b7c:	00637273 	rsbeq	r7, r3, r3, ror r2
    2b80:	2f62696c 	svccs	0x0062696c
    2b84:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2b88:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    2b8c:	53552f62 	cmppl	r5, #392	; 0x188
    2b90:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    2b94:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    2b98:	75000063 	strvc	r0, [r0, #-99]	; 0xffffff9d
    2b9c:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    2ba0:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    2ba4:	00010063 	andeq	r0, r1, r3, rrx
    2ba8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2bac:	31663233 	cmncc	r6, r3, lsr r2
    2bb0:	745f7830 	ldrbvc	r7, [pc], #-2096	; 2bb8 <__Stack_Size+0x27b8>
    2bb4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2bb8:	00020068 	andeq	r0, r2, r8, rrx
    2bbc:	62737500 	rsbsvs	r7, r3, #0, 10
    2bc0:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    2bc4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2bc8:	00000003 	andeq	r0, r0, r3
    2bcc:	00020500 	andeq	r0, r2, r0, lsl #10
    2bd0:	03000000 	movweq	r0, #0
    2bd4:	02130123 	andseq	r0, r3, #-1073741816	; 0xc0000008
    2bd8:	01010006 	tsteq	r1, r6
    2bdc:	00020500 	andeq	r0, r2, r0, lsl #10
    2be0:	03000000 	movweq	r0, #0
    2be4:	2f13012f 	svccs	0x0013012f
    2be8:	01000402 	tsteq	r0, r2, lsl #8
    2bec:	02050001 	andeq	r0, r5, #1
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	13013b03 	movwne	r3, #6915	; 0x1b03
    2bf8:	01000602 	tsteq	r0, r2, lsl #12
    2bfc:	02050001 	andeq	r0, r5, #1
    2c00:	00000000 	andeq	r0, r0, r0
    2c04:	0100c703 	tsteq	r0, r3, lsl #14
    2c08:	04022f13 	streq	r2, [r2], #-3859	; 0xfffff0ed
    2c0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c10:	00000205 	andeq	r0, r0, r5, lsl #4
    2c14:	d3030000 	movwle	r0, #12288	; 0x3000
    2c18:	2f130100 	svccs	0x00130100
    2c1c:	01000402 	tsteq	r0, r2, lsl #8
    2c20:	02050001 	andeq	r0, r5, #1
    2c24:	00000000 	andeq	r0, r0, r0
    2c28:	0100df03 	tsteq	r0, r3, lsl #30
    2c2c:	00060213 	andeq	r0, r6, r3, lsl r2
    2c30:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c34:	00000002 	andeq	r0, r0, r2
    2c38:	00eb0300 	rsceq	r0, fp, r0, lsl #6
    2c3c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    2c40:	01010004 	tsteq	r1, r4
    2c44:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    2c48:	03080022 	movweq	r0, #32802	; 0x8022
    2c4c:	130100f7 	movwne	r0, #4343	; 0x10f7
    2c50:	01000802 	tsteq	r0, r2, lsl #16
    2c54:	02050001 	andeq	r0, r5, #1
    2c58:	00000000 	andeq	r0, r0, r0
    2c5c:	01018303 	tsteq	r1, r3, lsl #6
    2c60:	04022f13 	streq	r2, [r2], #-3859	; 0xfffff0ed
    2c64:	00010100 	andeq	r0, r1, r0, lsl #2
    2c68:	00000205 	andeq	r0, r0, r5, lsl #4
    2c6c:	90030000 	andls	r0, r3, r0
    2c70:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    2c74:	01010007 	tsteq	r1, r7
    2c78:	00020500 	andeq	r0, r2, r0, lsl #10
    2c7c:	03000000 	movweq	r0, #0
    2c80:	1301019c 	movwne	r0, #4508	; 0x119c
    2c84:	00020267 	andeq	r0, r2, r7, ror #4
    2c88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c8c:	00229402 	eoreq	r9, r2, r2, lsl #8
    2c90:	01a90308 			; <UNDEFINED> instruction: 0x01a90308
    2c94:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    2c98:	00010100 	andeq	r0, r1, r0, lsl #2
    2c9c:	00000205 	andeq	r0, r0, r5, lsl #4
    2ca0:	b5030000 	strlt	r0, [r3, #-0]
    2ca4:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    2ca8:	01000302 	tsteq	r0, r2, lsl #6
    2cac:	02050001 	andeq	r0, r5, #1
    2cb0:	080022b0 	stmdaeq	r0, {r4, r5, r7, r9, sp}
    2cb4:	0101c203 	tsteq	r1, r3, lsl #4
    2cb8:	00190213 	andseq	r0, r9, r3, lsl r2
    2cbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2cc0:	0022e202 	eoreq	lr, r2, r2, lsl #4
    2cc4:	01cf0308 	biceq	r0, pc, r8, lsl #6
    2cc8:	19021301 	stmdbne	r2, {r0, r8, r9, ip}
    2ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    2cd0:	00000205 	andeq	r0, r0, r5, lsl #4
    2cd4:	dc030000 	stcle	0, cr0, [r3], {-0}
    2cd8:	41030101 	tstmi	r3, r1, lsl #2
    2cdc:	00c20301 	sbceq	r0, r2, r1, lsl #6
    2ce0:	7fbe0358 	svcvc	0x00be0358
    2ce4:	00c20320 	sbceq	r0, r2, r0, lsr #6
    2ce8:	303e2220 	eorscc	r2, lr, r0, lsr #4
    2cec:	01000502 	tsteq	r0, r2, lsl #10
    2cf0:	02050001 	andeq	r0, r5, #1
    2cf4:	00000000 	andeq	r0, r0, r0
    2cf8:	0101f103 	tsteq	r1, r3, lsl #2	; <UNPREDICTABLE>
    2cfc:	03026713 	movweq	r6, #10003	; 0x2713
    2d00:	00010100 	andeq	r0, r1, r0, lsl #2
    2d04:	00000205 	andeq	r0, r0, r5, lsl #4
    2d08:	fd030000 	stc2	0, cr0, [r3, #-0]
    2d0c:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    2d10:	01000302 	tsteq	r0, r2, lsl #6
    2d14:	02050001 	andeq	r0, r5, #1
    2d18:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
    2d1c:	01028903 	tsteq	r2, r3, lsl #18
    2d20:	00130213 	andseq	r0, r3, r3, lsl r2
    2d24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2d28:	00233a02 	eoreq	r3, r3, r2, lsl #20
    2d2c:	02950308 	addseq	r0, r5, #8, 6	; 0x20000000
    2d30:	13021301 	movwne	r1, #8961	; 0x2301
    2d34:	00010100 	andeq	r0, r1, r0, lsl #2
    2d38:	00000205 	andeq	r0, r0, r5, lsl #4
    2d3c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    2d40:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    2d44:	01010010 	tsteq	r1, r0, lsl r0
    2d48:	60020500 	andvs	r0, r2, r0, lsl #10
    2d4c:	03080023 	movweq	r0, #32803	; 0x8023
    2d50:	130102d9 	movwne	r0, #4825	; 0x12d9
    2d54:	01001002 	tsteq	r0, r2
    2d58:	02050001 	andeq	r0, r5, #1
    2d5c:	00000000 	andeq	r0, r0, r0
    2d60:	0102e403 	tsteq	r2, r3, lsl #8
    2d64:	05028313 	streq	r8, [r2, #-787]	; 0xfffffced
    2d68:	00010100 	andeq	r0, r1, r0, lsl #2
    2d6c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d70:	ef030000 	svc	0x00030000
    2d74:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
    2d78:	01000502 	tsteq	r0, r2, lsl #10
    2d7c:	02050001 	andeq	r0, r5, #1
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	0102fa03 	tsteq	r2, r3, lsl #20	; <UNPREDICTABLE>
    2d88:	000c0213 	andeq	r0, ip, r3, lsl r2
    2d8c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2d90:	00000002 	andeq	r0, r0, r2
    2d94:	03850300 	orreq	r0, r5, #0, 6
    2d98:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    2d9c:	00010100 	andeq	r0, r1, r0, lsl #2
    2da0:	00000205 	andeq	r0, r0, r5, lsl #4
    2da4:	90030000 	andls	r0, r3, r0
    2da8:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    2dac:	01010010 	tsteq	r1, r0, lsl r0
    2db0:	00020500 	andeq	r0, r2, r0, lsl #10
    2db4:	03000000 	movweq	r0, #0
    2db8:	1301039b 	movwne	r0, #5019	; 0x139b
    2dbc:	01001002 	tsteq	r0, r2
    2dc0:	02050001 	andeq	r0, r5, #1
    2dc4:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
    2dc8:	0103a603 	tsteq	r3, r3, lsl #12
    2dcc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    2dd0:	02820601 	addeq	r0, r2, #1048576	; 0x100000
    2dd4:	0101000a 	tsteq	r1, sl
    2dd8:	a8020500 	stmdage	r2, {r8, sl}
    2ddc:	03080023 	movweq	r0, #32803	; 0x8023
    2de0:	130103b1 	movwne	r0, #5041	; 0x13b1
    2de4:	01040200 	mrseq	r0, R12_usr
    2de8:	0a028206 	beq	a3608 <__Stack_Size+0xa3208>
    2dec:	00010100 	andeq	r0, r1, r0, lsl #2
    2df0:	00000205 	andeq	r0, r0, r5, lsl #4
    2df4:	bd030000 	stclt	0, cr0, [r3, #-0]
    2df8:	08130103 	ldmdaeq	r3, {r0, r1, r8}
    2dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    2e00:	00000205 	andeq	r0, r0, r5, lsl #4
    2e04:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    2e08:	67130103 	ldrvs	r0, [r3, -r3, lsl #2]
    2e0c:	01000302 	tsteq	r0, r2, lsl #6
    2e10:	02050001 	andeq	r0, r5, #1
    2e14:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
    2e18:	01048203 	tsteq	r4, r3, lsl #4
    2e1c:	000e0213 	andeq	r0, lr, r3, lsl r2
    2e20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2e24:	00000002 	andeq	r0, r0, r2
    2e28:	048e0300 	streq	r0, [lr], #768	; 0x300
    2e2c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    2e30:	2e060104 	adfcss	f0, f6, f4
    2e34:	02040200 	andeq	r0, r4, #0, 4
    2e38:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    2e3c:	02025808 	andeq	r5, r2, #8, 16	; 0x80000
    2e40:	00010100 	andeq	r0, r1, r0, lsl #2
    2e44:	23e80205 	mvncs	r0, #1342177280	; 0x50000000
    2e48:	9a030800 	bls	c4e50 <__Stack_Size+0xc4a50>
    2e4c:	00130104 	andseq	r0, r3, r4, lsl #2
    2e50:	06010402 	streq	r0, [r1], -r2, lsl #8
    2e54:	040200ac 	streq	r0, [r2], #-172	; 0xffffff54
    2e58:	02009e02 	andeq	r9, r0, #2, 28
    2e5c:	02580804 	subseq	r0, r8, #4, 16	; 0x40000
    2e60:	01010006 	tsteq	r1, r6
    2e64:	00020500 	andeq	r0, r2, r0, lsl #10
    2e68:	03000000 	movweq	r0, #0
    2e6c:	210104bd 			; <UNDEFINED> instruction: 0x210104bd
    2e70:	01001b02 	tsteq	r0, r2, lsl #22
    2e74:	02050001 	andeq	r0, r5, #1
    2e78:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    2e7c:	0104c903 	tsteq	r4, r3, lsl #18
    2e80:	00100213 	andseq	r0, r0, r3, lsl r2
    2e84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2e88:	00244c02 	eoreq	r4, r4, r2, lsl #24
    2e8c:	04d50308 	ldrbeq	r0, [r5], #776	; 0x308
    2e90:	10021301 	andne	r1, r2, r1, lsl #6
    2e94:	00010100 	andeq	r0, r1, r0, lsl #2
    2e98:	24700205 	ldrbtcs	r0, [r0], #-517	; 0xfffffdfb
    2e9c:	e0030800 	and	r0, r3, r0, lsl #16
    2ea0:	9f130104 	svcls	0x00130104
    2ea4:	01000402 	tsteq	r0, r2, lsl #8
    2ea8:	02050001 	andeq	r0, r5, #1
    2eac:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
    2eb0:	0104eb03 	tsteq	r4, r3, lsl #22
    2eb4:	06028313 			; <UNDEFINED> instruction: 0x06028313
    2eb8:	00010100 	andeq	r0, r1, r0, lsl #2
    2ebc:	00000205 	andeq	r0, r0, r5, lsl #4
    2ec0:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    2ec4:	1f130104 	svcne	0x00130104
    2ec8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2ecc:	00200601 	eoreq	r0, r0, r1, lsl #12
    2ed0:	ac030402 	cfstrsge	mvf0, [r3], {2}
    2ed4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2ed8:	040200ac 	streq	r0, [r2], #-172	; 0xffffff54
    2edc:	0200660a 	andeq	r6, r0, #10485760	; 0xa00000
    2ee0:	009e1004 	addseq	r1, lr, r4
    2ee4:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    2ee8:	0b040200 	bleq	1036f0 <__Stack_Size+0x1032f0>
    2eec:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2ef0:	00120811 	andseq	r0, r2, r1, lsl r8
    2ef4:	58170402 	ldmdapl	r7, {r1, sl}
    2ef8:	17040200 	strne	r0, [r4, -r0, lsl #4]
    2efc:	08022106 	stmdaeq	r2, {r1, r2, r8, sp}
    2f00:	00010100 	andeq	r0, r1, r0, lsl #2
    2f04:	00000205 	andeq	r0, r0, r5, lsl #4
    2f08:	83030000 	movwhi	r0, #12288	; 0x3000
    2f0c:	00130105 	andseq	r0, r3, r5, lsl #2
    2f10:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f14:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2f18:	0200ac03 	andeq	sl, r0, #768	; 0x300
    2f1c:	009e0404 	addseq	r0, lr, r4, lsl #8
    2f20:	580a0402 	stmdapl	sl, {r1, sl}
    2f24:	02040200 	andeq	r0, r4, #0, 4
    2f28:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2f2c:	0e022e0b 	cdpeq	14, 0, cr2, cr2, cr11, {0}
    2f30:	00010100 	andeq	r0, r1, r0, lsl #2
    2f34:	00000205 	andeq	r0, r0, r5, lsl #4
    2f38:	8f030000 	svchi	0x00030000
    2f3c:	00130105 	andseq	r0, r3, r5, lsl #2
    2f40:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f44:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2f48:	0200ac03 	andeq	sl, r0, #768	; 0x300
    2f4c:	009e0404 	addseq	r0, lr, r4, lsl #8
    2f50:	580a0402 	stmdapl	sl, {r1, sl}
    2f54:	02040200 	andeq	r0, r4, #0, 4
    2f58:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2f5c:	0e022e0b 	cdpeq	14, 0, cr2, cr2, cr11, {0}
    2f60:	00010100 	andeq	r0, r1, r0, lsl #2
    2f64:	00000205 	andeq	r0, r0, r5, lsl #4
    2f68:	9b030000 	blls	c2f70 <__Stack_Size+0xc2b70>
    2f6c:	91130105 	tstls	r3, r5, lsl #2
    2f70:	01000702 	tsteq	r0, r2, lsl #14
    2f74:	02050001 	andeq	r0, r5, #1
    2f78:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
    2f7c:	0105a703 	tsteq	r5, r3, lsl #14
    2f80:	07029113 	smladeq	r2, r3, r1, r9
    2f84:	00010100 	andeq	r0, r1, r0, lsl #2
    2f88:	00000205 	andeq	r0, r0, r5, lsl #4
    2f8c:	b3030000 	movwlt	r0, #12288	; 0x3000
    2f90:	bc130105 	ldflts	f0, [r3], {5}
    2f94:	022546a1 	eoreq	r4, r5, #168820736	; 0xa100000
    2f98:	01010007 	tsteq	r1, r7
    2f9c:	00020500 	andeq	r0, r2, r0, lsl #10
    2fa0:	03000000 	movweq	r0, #0
    2fa4:	130105c4 	movwne	r0, #5572	; 0x15c4
    2fa8:	0230d830 	eorseq	sp, r0, #48, 16	; 0x300000
    2fac:	0101000f 	tsteq	r1, pc
    2fb0:	00020500 	andeq	r0, r2, r0, lsl #10
    2fb4:	03000000 	movweq	r0, #0
    2fb8:	160105d7 			; <UNDEFINED> instruction: 0x160105d7
    2fbc:	01000302 	tsteq	r0, r2, lsl #6
    2fc0:	02050001 	andeq	r0, r5, #1
    2fc4:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    2fc8:	0105e403 	tsteq	r5, r3, lsl #8
    2fcc:	03022f17 	movweq	r2, #12055	; 0x2f17
    2fd0:	bd010100 	stflts	f0, [r1, #-0]
    2fd4:	02000000 	andeq	r0, r0, #0
    2fd8:	00008700 	andeq	r8, r0, r0, lsl #14
    2fdc:	fb010200 	blx	437e6 <__Stack_Size+0x433e6>
    2fe0:	01000d0e 	tsteq	r0, lr, lsl #26
    2fe4:	00010101 	andeq	r0, r1, r1, lsl #2
    2fe8:	00010000 	andeq	r0, r1, r0
    2fec:	696c0100 	stmdbvs	ip!, {r8}^
    2ff0:	53552f62 	cmppl	r5, #392	; 0x188
    2ff4:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    2ff8:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2ffc:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    3000:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    3004:	2f2e0063 	svccs	0x002e0063
    3008:	2f62696c 	svccs	0x0062696c
    300c:	5f425355 	svcpl	0x00425355
    3010:	2f62696c 	svccs	0x0062696c
    3014:	00636e69 	rsbeq	r6, r3, r9, ror #28
    3018:	62737500 	rsbsvs	r7, r3, #0, 10
    301c:	6c69735f 	stclvs	3, cr7, [r9], #-380	; 0xfffffe84
    3020:	0100632e 	tsteq	r0, lr, lsr #6
    3024:	74730000 	ldrbtvc	r0, [r3], #-0
    3028:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    302c:	5f783031 	svcpl	0x00783031
    3030:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3034:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3038:	73750000 	cmnvc	r5, #0
    303c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
    3040:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    3044:	00000300 	andeq	r0, r0, r0, lsl #6
    3048:	5f627375 	svcpl	0x00627375
    304c:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    3050:	00030068 	andeq	r0, r3, r8, rrx
    3054:	62737500 	rsbsvs	r7, r3, #0, 10
    3058:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    305c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3060:	00000003 	andeq	r0, r0, r3
    3064:	e0020500 	and	r0, r2, r0, lsl #10
    3068:	03080024 	movweq	r0, #32804	; 0x8024
    306c:	2f170123 	svccs	0x00170123
    3070:	033e211f 	teqeq	lr, #-1073741817	; 0xc0000007
    3074:	07022e0a 	streq	r2, [r2, -sl, lsl #28]
    3078:	00010100 	andeq	r0, r1, r0, lsl #2
    307c:	25000205 	strcs	r0, [r0, #-517]	; 0xfffffdfb
    3080:	df030800 	svcle	0x00030800
    3084:	03260100 			; <UNDEFINED> instruction: 0x03260100
    3088:	3f263c7a 	svccc	0x00263c7a
    308c:	02821303 	addeq	r1, r2, #201326592	; 0xc000000
    3090:	01010002 	tsteq	r1, r2
    3094:	000000ec 	andeq	r0, r0, ip, ror #1
    3098:	00880002 	addeq	r0, r8, r2
    309c:	01020000 	mrseq	r0, (UNDEF: 2)
    30a0:	000d0efb 	strdeq	r0, [sp], -fp
    30a4:	01010101 	tsteq	r1, r1, lsl #2
    30a8:	01000000 	mrseq	r0, (UNDEF: 0)
    30ac:	6c010000 	stcvs	0, cr0, [r1], {-0}
    30b0:	552f6269 	strpl	r6, [pc, #-617]!	; 2e4f <__Stack_Size+0x2a4f>
    30b4:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
    30b8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    30bc:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
    30c0:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    30c4:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
    30c8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    30cc:	4253552f 	subsmi	r5, r3, #197132288	; 0xbc00000
    30d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    30d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    30d8:	73750000 	cmnvc	r5, #0
    30dc:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    30e0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    30e4:	73000001 	movwvc	r0, #1
    30e8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    30ec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    30f0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    30f4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    30f8:	75000002 	strvc	r0, [r0, #-2]
    30fc:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    3100:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    3104:	00030068 	andeq	r0, r3, r8, rrx
    3108:	62737500 	rsbsvs	r7, r3, #0, 10
    310c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3110:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3114:	75000003 	strvc	r0, [r0, #-3]
    3118:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    311c:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3120:	00030068 	andeq	r0, r3, r8, rrx
    3124:	05000000 	streq	r0, [r0, #-0]
    3128:	00252402 	eoreq	r2, r5, r2, lsl #8
    312c:	012a0308 			; <UNDEFINED> instruction: 0x012a0308
    3130:	1e301b34 	vmovne.s16	r1, d0[2]
    3134:	034b7730 	movteq	r7, #46896	; 0xb730
    3138:	1f3d2e0a 	svcne	0x003d2e0a
    313c:	cc4c592f 	mcrrgt	9, 2, r5, ip, cr15
    3140:	0e035952 	mcreq	9, 0, r5, cr3, cr2, {2}
    3144:	594c4c3c 	stmdbpl	ip, {r2, r3, r4, r5, sl, fp, lr}^
    3148:	31594c43 	cmpcc	r9, r3, asr #24
    314c:	0903e508 	stmdbeq	r3, {r3, r8, sl, sp, lr, pc}
    3150:	3f4d9120 	svccc	0x004d9120
    3154:	5b4e311d 	blpl	138f5d0 <__Stack_Size+0x138f1d0>
    3158:	5e311da1 	cdppl	13, 3, cr1, cr1, cr1, {5}
    315c:	01001302 	tsteq	r0, r2, lsl #6
    3160:	02050001 	andeq	r0, r5, #1
    3164:	00000000 	andeq	r0, r0, r0
    3168:	01019803 	tsteq	r1, r3, lsl #16
    316c:	5a1c3223 	bpl	70fa00 <__Stack_Size+0x70f600>
    3170:	223a3e3e 	eorscs	r3, sl, #992	; 0x3e0
    3174:	1d3f313d 	ldfnes	f3, [pc, #-244]!	; 3088 <__Stack_Size+0x2c88>
    3178:	3f313131 	svccc	0x00313131
    317c:	025e311d 	subseq	r3, lr, #1073741831	; 0x40000007
    3180:	0101000b 	tsteq	r1, fp

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	080001a4 	stmdaeq	r0, {r2, r5, r7, r8}
      1c:	0000000c 	andeq	r0, r0, ip
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
      20:	0000000c 	andeq	r0, r0, ip
    bTmp = bByte/10;
      24:	00000000 	andeq	r0, r0, r0
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      28:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
      2c:	00000014 	andeq	r0, r0, r4, lsl r0
      30:	0000000c 	andeq	r0, r0, ip
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	00000000 	andeq	r0, r0, r0
      38:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
      3c:	00000014 	andeq	r0, r0, r4, lsl r0
      40:	00000014 	andeq	r0, r0, r4, lsl r0
}
      44:	00000000 	andeq	r0, r0, r0
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
      4c:	0000004e 	andeq	r0, r0, lr, asr #32
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	8e180e41 	cdphi	14, 1, cr0, cr8, cr1, {2}
      54:	040e6401 	streq	r6, [lr], #-1025	; 0xfffffbff
      58:	0000000c 	andeq	r0, r0, ip
	...


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      64:	00000014 	andeq	r0, r0, r4, lsl r0
      68:	0000000c 	andeq	r0, r0, ip
	...
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	00000030 	andeq	r0, r0, r0, lsr r0
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
      78:	00000014 	andeq	r0, r0, r4, lsl r0
      7c:	00000000 	andeq	r0, r0, r0
    }
          
    if(status != FLASH_BUSY)
      80:	08000228 	stmdaeq	r0, {r3, r5, r9}
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      84:	00000028 	andeq	r0, r0, r8, lsr #32
      88:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      8c:	00018e02 	andeq	r8, r1, r2, lsl #28
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	00000020 	andeq	r0, r0, r0, lsr #32
	...
      9c:	0000004a 	andeq	r0, r0, sl, asr #32
      a0:	83100e41 	tsthi	r0, #1040	; 0x410
      a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      a8:	62018e02 	andvs	r8, r1, #2, 28
      ac:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	0000000e 	andeq	r0, r0, lr
      b4:	00000014 	andeq	r0, r0, r4, lsl r0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	00000000 	andeq	r0, r0, r0
      bc:	08000250 	stmdaeq	r0, {r4, r6, r9}
      break; 
      
    default:
      break;
  }
}
      c0:	00000012 	andeq	r0, r0, r2, lsl r0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      c8:	00018e02 	andeq	r8, r1, r2, lsl #28
      cc:	00000018 	andeq	r0, r0, r8, lsl r0
      d0:	00000000 	andeq	r0, r0, r0
      d4:	08000262 	stmdaeq	r0, {r1, r5, r6, r9}
      d8:	00000034 	andeq	r0, r0, r4, lsr r0
      dc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      e0:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
      e4:	000ec4ce 	andeq	ip, lr, lr, asr #9
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
      ec:	00000000 	andeq	r0, r0, r0
      f0:	08000296 	stmdaeq	r0, {r1, r2, r4, r7, r9}
      f4:	00000014 	andeq	r0, r0, r4, lsl r0
      f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      fc:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     100:	000ec4ce 	andeq	ip, lr, lr, asr #9
     104:	00000018 	andeq	r0, r0, r8, lsl r0
     108:	00000000 	andeq	r0, r0, r0
     10c:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
     110:	00000014 	andeq	r0, r0, r4, lsl r0
     114:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     118:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     11c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     120:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     12c:	0000004a 	andeq	r0, r0, sl, asr #32
     130:	83100e41 	tsthi	r0, #1040	; 0x410
     134:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     138:	62018e02 	andvs	r8, r1, #2, 28
     13c:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
     140:	0000000e 	andeq	r0, r0, lr
     144:	00000014 	andeq	r0, r0, r4, lsl r0
     148:	00000000 	andeq	r0, r0, r0
     14c:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
     150:	00000012 	andeq	r0, r0, r2, lsl r0
     154:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     158:	00018e02 	andeq	r8, r1, r2, lsl #28
     15c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
     168:	00000034 	andeq	r0, r0, r4, lsr r0
     16c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     170:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     174:	000ec4ce 	andeq	ip, lr, lr, asr #9
     178:	00000018 	andeq	r0, r0, r8, lsl r0
	...
     184:	00000014 	andeq	r0, r0, r4, lsl r0
     188:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     18c:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     190:	000ec4ce 	andeq	ip, lr, lr, asr #9
     194:	00000018 	andeq	r0, r0, r8, lsl r0
	...
     1a0:	00000014 	andeq	r0, r0, r4, lsl r0
     1a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     1a8:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     1ac:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1b0:	0000000c 	andeq	r0, r0, ip
	...
     1bc:	00000020 	andeq	r0, r0, r0, lsr #32
     1c0:	00000018 	andeq	r0, r0, r8, lsl r0
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
     1cc:	0000002c 	andeq	r0, r0, ip, lsr #32
     1d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     1d4:	50018e02 	andpl	r8, r1, r2, lsl #28
     1d8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1dc:	00000018 	andeq	r0, r0, r8, lsl r0
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
     1e8:	00000030 	andeq	r0, r0, r0, lsr r0
     1ec:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     1f0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     1f4:	00000001 	andeq	r0, r0, r1
     1f8:	00000018 	andeq	r0, r0, r8, lsl r0
     1fc:	00000000 	andeq	r0, r0, r0
     200:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
     204:	00000024 	andeq	r0, r0, r4, lsr #32
     208:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     20c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     210:	00000001 	andeq	r0, r0, r1
     214:	0000001c 	andeq	r0, r0, ip, lsl r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	08000350 	stmdaeq	r0, {r4, r6, r8, r9}
     220:	000000bc 	strheq	r0, [r0], -ip
     224:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     228:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     22c:	200e4301 	andcs	r4, lr, r1, lsl #6
     230:	0c0e5202 	sfmeq	f5, 4, [lr], {2}
     234:	00000024 	andeq	r0, r0, r4, lsr #32
     238:	00000000 	andeq	r0, r0, r0
     23c:	0800040c 	stmdaeq	r0, {r2, r3, sl}
     240:	00000410 	andeq	r0, r0, r0, lsl r4
     244:	84240e44 	strthi	r0, [r4], #-3652	; 0xfffff1bc
     248:	86088509 	strhi	r8, [r8], -r9, lsl #10
     24c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     250:	8a048905 	bhi	12266c <__Stack_Size+0x12226c>
     254:	8e028b03 	vmlahi.f64	d8, d2, d3
     258:	580e4101 	stmdapl	lr, {r0, r8, lr}
     25c:	0000001c 	andeq	r0, r0, ip, lsl r0
     260:	00000000 	andeq	r0, r0, r0
     264:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
     268:	0000008c 	andeq	r0, r0, ip, lsl #1
     26c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     270:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
     274:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     278:	000b4400 	andeq	r4, fp, r0, lsl #8
     27c:	00000028 	andeq	r0, r0, r8, lsr #32
     280:	00000000 	andeq	r0, r0, r0
     284:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
     288:	00000128 	andeq	r0, r0, r8, lsr #2
     28c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     290:	86088509 	strhi	r8, [r8], -r9, lsl #10
     294:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     298:	8a048905 	bhi	1226b4 <__Stack_Size+0x1222b4>
     29c:	8e028b03 	vmlahi.f64	d8, d2, d3
     2a0:	380e4201 	stmdacc	lr, {r0, r9, lr}
     2a4:	240e8702 	strcs	r8, [lr], #-1794	; 0xfffff8fe
     2a8:	00000018 	andeq	r0, r0, r8, lsl r0
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
     2b4:	0000007c 	andeq	r0, r0, ip, ror r0
     2b8:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
     2bc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     2c0:	0c0e7c01 	stceq	12, cr7, [lr], {1}
     2c4:	00000018 	andeq	r0, r0, r8, lsl r0
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
     2d0:	000000b4 	strheq	r0, [r0], -r4
     2d4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     2d8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     2e0:	0000000c 	andeq	r0, r0, ip
     2e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     2ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2f0:	0000000c 	andeq	r0, r0, ip
     2f4:	000002e0 	andeq	r0, r0, r0, ror #5
     2f8:	08000b00 	stmdaeq	r0, {r8, r9, fp}
     2fc:	00000002 	andeq	r0, r0, r2
     300:	0000000c 	andeq	r0, r0, ip
     304:	000002e0 	andeq	r0, r0, r0, ror #5
     308:	08000b02 	stmdaeq	r0, {r1, r8, r9, fp}
     30c:	00000002 	andeq	r0, r0, r2
     310:	0000000c 	andeq	r0, r0, ip
     314:	000002e0 	andeq	r0, r0, r0, ror #5
     318:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
     31c:	00000002 	andeq	r0, r0, r2
     320:	0000000c 	andeq	r0, r0, ip
     324:	000002e0 	andeq	r0, r0, r0, ror #5
     328:	08000b06 	stmdaeq	r0, {r1, r2, r8, r9, fp}
     32c:	00000002 	andeq	r0, r0, r2
     330:	0000000c 	andeq	r0, r0, ip
     334:	000002e0 	andeq	r0, r0, r0, ror #5
     338:	08000b08 	stmdaeq	r0, {r3, r8, r9, fp}
     33c:	00000002 	andeq	r0, r0, r2
     340:	0000000c 	andeq	r0, r0, ip
     344:	000002e0 	andeq	r0, r0, r0, ror #5
     348:	08000b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp}
     34c:	00000002 	andeq	r0, r0, r2
     350:	0000000c 	andeq	r0, r0, ip
     354:	000002e0 	andeq	r0, r0, r0, ror #5
     358:	08000b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp}
     35c:	00000002 	andeq	r0, r0, r2
     360:	0000000c 	andeq	r0, r0, ip
     364:	000002e0 	andeq	r0, r0, r0, ror #5
     368:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
     36c:	00000002 	andeq	r0, r0, r2
     370:	0000000c 	andeq	r0, r0, ip
     374:	000002e0 	andeq	r0, r0, r0, ror #5
     378:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     37c:	00000014 	andeq	r0, r0, r4, lsl r0
     380:	0000000c 	andeq	r0, r0, ip
     384:	000002e0 	andeq	r0, r0, r0, ror #5
     388:	08000b24 	stmdaeq	r0, {r2, r5, r8, r9, fp}
     38c:	00000002 	andeq	r0, r0, r2
     390:	0000000c 	andeq	r0, r0, ip
     394:	000002e0 	andeq	r0, r0, r0, ror #5
     398:	08000b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp}
     39c:	00000002 	andeq	r0, r0, r2
     3a0:	0000000c 	andeq	r0, r0, ip
     3a4:	000002e0 	andeq	r0, r0, r0, ror #5
     3a8:	08000b28 	stmdaeq	r0, {r3, r5, r8, r9, fp}
     3ac:	00000002 	andeq	r0, r0, r2
     3b0:	0000000c 	andeq	r0, r0, ip
     3b4:	000002e0 	andeq	r0, r0, r0, ror #5
     3b8:	08000b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp}
     3bc:	00000002 	andeq	r0, r0, r2
     3c0:	0000000c 	andeq	r0, r0, ip
     3c4:	000002e0 	andeq	r0, r0, r0, ror #5
     3c8:	08000b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp}
     3cc:	00000002 	andeq	r0, r0, r2
     3d0:	0000000c 	andeq	r0, r0, ip
     3d4:	000002e0 	andeq	r0, r0, r0, ror #5
     3d8:	08000b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp}
     3dc:	00000002 	andeq	r0, r0, r2
     3e0:	0000000c 	andeq	r0, r0, ip
     3e4:	000002e0 	andeq	r0, r0, r0, ror #5
     3e8:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
     3ec:	00000002 	andeq	r0, r0, r2
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	000002e0 	andeq	r0, r0, r0, ror #5
     3f8:	08000b32 	stmdaeq	r0, {r1, r4, r5, r8, r9, fp}
     3fc:	00000002 	andeq	r0, r0, r2
     400:	0000000c 	andeq	r0, r0, ip
     404:	000002e0 	andeq	r0, r0, r0, ror #5
     408:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
     40c:	00000002 	andeq	r0, r0, r2
     410:	0000000c 	andeq	r0, r0, ip
     414:	000002e0 	andeq	r0, r0, r0, ror #5
     418:	08000b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp}
     41c:	00000002 	andeq	r0, r0, r2
     420:	0000000c 	andeq	r0, r0, ip
     424:	000002e0 	andeq	r0, r0, r0, ror #5
     428:	08000b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp}
     42c:	00000002 	andeq	r0, r0, r2
     430:	0000000c 	andeq	r0, r0, ip
     434:	000002e0 	andeq	r0, r0, r0, ror #5
     438:	00000000 	andeq	r0, r0, r0
     43c:	00000002 	andeq	r0, r0, r2
     440:	0000000c 	andeq	r0, r0, ip
     444:	000002e0 	andeq	r0, r0, r0, ror #5
     448:	00000000 	andeq	r0, r0, r0
     44c:	00000002 	andeq	r0, r0, r2
     450:	0000000c 	andeq	r0, r0, ip
     454:	000002e0 	andeq	r0, r0, r0, ror #5
     458:	00000000 	andeq	r0, r0, r0
     45c:	00000002 	andeq	r0, r0, r2
     460:	0000000c 	andeq	r0, r0, ip
     464:	000002e0 	andeq	r0, r0, r0, ror #5
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000002 	andeq	r0, r0, r2
     470:	0000000c 	andeq	r0, r0, ip
     474:	000002e0 	andeq	r0, r0, r0, ror #5
     478:	00000000 	andeq	r0, r0, r0
     47c:	00000002 	andeq	r0, r0, r2
     480:	0000000c 	andeq	r0, r0, ip
     484:	000002e0 	andeq	r0, r0, r0, ror #5
     488:	00000000 	andeq	r0, r0, r0
     48c:	00000002 	andeq	r0, r0, r2
     490:	0000000c 	andeq	r0, r0, ip
     494:	000002e0 	andeq	r0, r0, r0, ror #5
     498:	00000000 	andeq	r0, r0, r0
     49c:	00000002 	andeq	r0, r0, r2
     4a0:	0000000c 	andeq	r0, r0, ip
     4a4:	000002e0 	andeq	r0, r0, r0, ror #5
     4a8:	08000b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp}
     4ac:	00000002 	andeq	r0, r0, r2
     4b0:	0000000c 	andeq	r0, r0, ip
     4b4:	000002e0 	andeq	r0, r0, r0, ror #5
     4b8:	08000b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp}
     4bc:	00000002 	andeq	r0, r0, r2
     4c0:	0000000c 	andeq	r0, r0, ip
     4c4:	000002e0 	andeq	r0, r0, r0, ror #5
     4c8:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
     4cc:	00000004 	andeq	r0, r0, r4
     4d0:	0000000c 	andeq	r0, r0, ip
     4d4:	000002e0 	andeq	r0, r0, r0, ror #5
     4d8:	08000b42 	stmdaeq	r0, {r1, r6, r8, r9, fp}
     4dc:	00000002 	andeq	r0, r0, r2
     4e0:	0000000c 	andeq	r0, r0, ip
     4e4:	000002e0 	andeq	r0, r0, r0, ror #5
     4e8:	08000b44 	stmdaeq	r0, {r2, r6, r8, r9, fp}
     4ec:	00000002 	andeq	r0, r0, r2
     4f0:	0000000c 	andeq	r0, r0, ip
     4f4:	000002e0 	andeq	r0, r0, r0, ror #5
     4f8:	08000b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp}
     4fc:	00000002 	andeq	r0, r0, r2
     500:	0000000c 	andeq	r0, r0, ip
     504:	000002e0 	andeq	r0, r0, r0, ror #5
     508:	08000b48 	stmdaeq	r0, {r3, r6, r8, r9, fp}
     50c:	00000002 	andeq	r0, r0, r2
     510:	0000000c 	andeq	r0, r0, ip
     514:	000002e0 	andeq	r0, r0, r0, ror #5
     518:	08000b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp}
     51c:	00000002 	andeq	r0, r0, r2
     520:	0000000c 	andeq	r0, r0, ip
     524:	000002e0 	andeq	r0, r0, r0, ror #5
     528:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
     52c:	00000002 	andeq	r0, r0, r2
     530:	0000000c 	andeq	r0, r0, ip
     534:	000002e0 	andeq	r0, r0, r0, ror #5
     538:	08000b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp}
     53c:	00000002 	andeq	r0, r0, r2
     540:	00000018 	andeq	r0, r0, r8, lsl r0
     544:	000002e0 	andeq	r0, r0, r0, ror #5
     548:	08000b50 	stmdaeq	r0, {r4, r6, r8, r9, fp}
     54c:	00000014 	andeq	r0, r0, r4, lsl r0
     550:	83080e41 	movwhi	r0, #36417	; 0x8e41
     554:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     558:	000ec3ce 	andeq	ip, lr, lr, asr #7
     55c:	0000000c 	andeq	r0, r0, ip
     560:	000002e0 	andeq	r0, r0, r0, ror #5
     564:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
     568:	00000002 	andeq	r0, r0, r2
     56c:	0000000c 	andeq	r0, r0, ip
     570:	000002e0 	andeq	r0, r0, r0, ror #5
     574:	08000b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp}
     578:	00000002 	andeq	r0, r0, r2
     57c:	0000000c 	andeq	r0, r0, ip
     580:	000002e0 	andeq	r0, r0, r0, ror #5
     584:	08000b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp}
     588:	00000002 	andeq	r0, r0, r2
     58c:	0000000c 	andeq	r0, r0, ip
     590:	000002e0 	andeq	r0, r0, r0, ror #5
     594:	08000b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp}
     598:	00000002 	andeq	r0, r0, r2
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	000002e0 	andeq	r0, r0, r0, ror #5
     5a4:	08000b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp}
     5a8:	00000002 	andeq	r0, r0, r2
     5ac:	0000000c 	andeq	r0, r0, ip
     5b0:	000002e0 	andeq	r0, r0, r0, ror #5
     5b4:	08000b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp}
     5b8:	00000002 	andeq	r0, r0, r2
     5bc:	0000000c 	andeq	r0, r0, ip
     5c0:	000002e0 	andeq	r0, r0, r0, ror #5
     5c4:	08000b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp}
     5c8:	00000002 	andeq	r0, r0, r2
     5cc:	0000000c 	andeq	r0, r0, ip
     5d0:	000002e0 	andeq	r0, r0, r0, ror #5
     5d4:	08000b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp}
     5d8:	00000002 	andeq	r0, r0, r2
     5dc:	00000014 	andeq	r0, r0, r4, lsl r0
     5e0:	000002e0 	andeq	r0, r0, r0, ror #5
     5e4:	08000b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp}
     5e8:	00000034 	andeq	r0, r0, r4, lsr r0
     5ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f4:	00000018 	andeq	r0, r0, r8, lsl r0
     5f8:	000002e0 	andeq	r0, r0, r0, ror #5
     5fc:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
     600:	00000030 	andeq	r0, r0, r0, lsr r0
     604:	83100e42 	tsthi	r0, #1056	; 0x420
     608:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
     610:	0000000c 	andeq	r0, r0, ip
     614:	000002e0 	andeq	r0, r0, r0, ror #5
     618:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
     61c:	00000002 	andeq	r0, r0, r2
     620:	0000000c 	andeq	r0, r0, ip
     624:	000002e0 	andeq	r0, r0, r0, ror #5
     628:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     62c:	00000002 	andeq	r0, r0, r2
     630:	0000000c 	andeq	r0, r0, ip
     634:	000002e0 	andeq	r0, r0, r0, ror #5
     638:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
     63c:	00000002 	andeq	r0, r0, r2
     640:	0000000c 	andeq	r0, r0, ip
     644:	000002e0 	andeq	r0, r0, r0, ror #5
     648:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}
     64c:	00000002 	andeq	r0, r0, r2
     650:	0000000c 	andeq	r0, r0, ip
     654:	000002e0 	andeq	r0, r0, r0, ror #5
     658:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
     65c:	00000002 	andeq	r0, r0, r2
     660:	0000000c 	andeq	r0, r0, ip
     664:	000002e0 	andeq	r0, r0, r0, ror #5
     668:	08000be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp}
     66c:	00000002 	andeq	r0, r0, r2
     670:	0000000c 	andeq	r0, r0, ip
     674:	000002e0 	andeq	r0, r0, r0, ror #5
     678:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
     67c:	00000002 	andeq	r0, r0, r2
     680:	0000000c 	andeq	r0, r0, ip
     684:	000002e0 	andeq	r0, r0, r0, ror #5
     688:	08000be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp}
     68c:	00000002 	andeq	r0, r0, r2
     690:	0000000c 	andeq	r0, r0, ip
     694:	000002e0 	andeq	r0, r0, r0, ror #5
     698:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
     69c:	00000002 	andeq	r0, r0, r2
     6a0:	0000000c 	andeq	r0, r0, ip
     6a4:	000002e0 	andeq	r0, r0, r0, ror #5
     6a8:	08000bea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, fp}
     6ac:	00000002 	andeq	r0, r0, r2
     6b0:	0000000c 	andeq	r0, r0, ip
     6b4:	000002e0 	andeq	r0, r0, r0, ror #5
     6b8:	08000bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp}
     6bc:	00000002 	andeq	r0, r0, r2
     6c0:	0000000c 	andeq	r0, r0, ip
     6c4:	000002e0 	andeq	r0, r0, r0, ror #5
     6c8:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
     6cc:	00000002 	andeq	r0, r0, r2
     6d0:	0000000c 	andeq	r0, r0, ip
     6d4:	000002e0 	andeq	r0, r0, r0, ror #5
     6d8:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
     6dc:	00000002 	andeq	r0, r0, r2
     6e0:	0000000c 	andeq	r0, r0, ip
     6e4:	000002e0 	andeq	r0, r0, r0, ror #5
     6e8:	08000bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp}
     6ec:	00000002 	andeq	r0, r0, r2
     6f0:	0000000c 	andeq	r0, r0, ip
     6f4:	000002e0 	andeq	r0, r0, r0, ror #5
     6f8:	08000bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp}
     6fc:	00000002 	andeq	r0, r0, r2
     700:	0000000c 	andeq	r0, r0, ip
     704:	000002e0 	andeq	r0, r0, r0, ror #5
     708:	08000bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp}
     70c:	00000002 	andeq	r0, r0, r2
     710:	0000000c 	andeq	r0, r0, ip
     714:	000002e0 	andeq	r0, r0, r0, ror #5
     718:	08000bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp}
     71c:	00000002 	andeq	r0, r0, r2
     720:	0000000c 	andeq	r0, r0, ip
     724:	000002e0 	andeq	r0, r0, r0, ror #5
     728:	08000bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp}
     72c:	00000002 	andeq	r0, r0, r2
     730:	0000000c 	andeq	r0, r0, ip
     734:	000002e0 	andeq	r0, r0, r0, ror #5
     738:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
     73c:	00000002 	andeq	r0, r0, r2
     740:	0000000c 	andeq	r0, r0, ip
     744:	000002e0 	andeq	r0, r0, r0, ror #5
     748:	08000bfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, fp}
     74c:	00000002 	andeq	r0, r0, r2
     750:	0000000c 	andeq	r0, r0, ip
     754:	000002e0 	andeq	r0, r0, r0, ror #5
     758:	08000c00 	stmdaeq	r0, {sl, fp}
     75c:	00000002 	andeq	r0, r0, r2
     760:	0000000c 	andeq	r0, r0, ip
     764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     768:	7c020001 	stcvc	0, cr0, [r2], {1}
     76c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     770:	0000000c 	andeq	r0, r0, ip
     774:	00000760 	andeq	r0, r0, r0, ror #14
     778:	08000c04 	stmdaeq	r0, {r2, sl, fp}
     77c:	0000000c 	andeq	r0, r0, ip
     780:	00000028 	andeq	r0, r0, r8, lsr #32
     784:	00000760 	andeq	r0, r0, r0, ror #14
     788:	08000c10 	stmdaeq	r0, {r4, sl, fp}
     78c:	00000100 	andeq	r0, r0, r0, lsl #2
     790:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     794:	86088509 	strhi	r8, [r8], -r9, lsl #10
     798:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     79c:	8a048905 	bhi	122bb8 <__Stack_Size+0x1227b8>
     7a0:	8e028b03 	vmlahi.f64	d8, d2, d3
     7a4:	380e4201 	stmdacc	lr, {r0, r9, lr}
     7a8:	240e6902 	strcs	r6, [lr], #-2306	; 0xfffff6fe
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
     7b0:	00000760 	andeq	r0, r0, r0, ror #14
     7b4:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
     7b8:	0000005c 	andeq	r0, r0, ip, asr r0
     7bc:	83100e41 	tsthi	r0, #1040	; 0x410
     7c0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     7c4:	61018e02 	tstvs	r1, r2, lsl #28
     7c8:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
     7cc:	0000000e 	andeq	r0, r0, lr
     7d0:	0000000c 	andeq	r0, r0, ip
     7d4:	00000760 	andeq	r0, r0, r0, ror #14
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	00000020 	andeq	r0, r0, r0, lsr #32
     7e0:	0000000c 	andeq	r0, r0, ip
     7e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     7ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7f0:	00000018 	andeq	r0, r0, r8, lsl r0
     7f4:	000007e0 	andeq	r0, r0, r0, ror #15
     7f8:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
     7fc:	00000068 	andeq	r0, r0, r8, rrx
     800:	83100e41 	tsthi	r0, #1040	; 0x410
     804:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     808:	00018e02 	andeq	r8, r1, r2, lsl #28
     80c:	0000000c 	andeq	r0, r0, ip
     810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     814:	7c020001 	stcvc	0, cr0, [r2], {1}
     818:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     81c:	0000000c 	andeq	r0, r0, ip
     820:	0000080c 	andeq	r0, r0, ip, lsl #16
     824:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
     828:	00000018 	andeq	r0, r0, r8, lsl r0
     82c:	0000000c 	andeq	r0, r0, ip
     830:	0000080c 	andeq	r0, r0, ip, lsl #16
     834:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     838:	0000000c 	andeq	r0, r0, ip
     83c:	0000000c 	andeq	r0, r0, ip
     840:	0000080c 	andeq	r0, r0, ip, lsl #16
     844:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
     848:	00000014 	andeq	r0, r0, r4, lsl r0
     84c:	0000000c 	andeq	r0, r0, ip
     850:	0000080c 	andeq	r0, r0, ip, lsl #16
     854:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
     858:	00000002 	andeq	r0, r0, r2
     85c:	00000014 	andeq	r0, r0, r4, lsl r0
     860:	0000080c 	andeq	r0, r0, ip, lsl #16
     864:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     868:	0000005c 	andeq	r0, r0, ip, asr r0
     86c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
     874:	0000000c 	andeq	r0, r0, ip
     878:	0000080c 	andeq	r0, r0, ip, lsl #16
     87c:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
     880:	00000024 	andeq	r0, r0, r4, lsr #32
     884:	0000000c 	andeq	r0, r0, ip
     888:	0000080c 	andeq	r0, r0, ip, lsl #16
     88c:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
     890:	00000010 	andeq	r0, r0, r0, lsl r0
     894:	0000000c 	andeq	r0, r0, ip
     898:	0000080c 	andeq	r0, r0, ip, lsl #16
     89c:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
     8a0:	00000018 	andeq	r0, r0, r8, lsl r0
     8a4:	0000000c 	andeq	r0, r0, ip
     8a8:	0000080c 	andeq	r0, r0, ip, lsl #16
     8ac:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     8b0:	0000002c 	andeq	r0, r0, ip, lsr #32
     8b4:	00000014 	andeq	r0, r0, r4, lsl r0
     8b8:	0000080c 	andeq	r0, r0, ip, lsl #16
     8bc:	08000ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp}
     8c0:	00000024 	andeq	r0, r0, r4, lsr #32
     8c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8cc:	00000014 	andeq	r0, r0, r4, lsl r0
     8d0:	0000080c 	andeq	r0, r0, ip, lsl #16
     8d4:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     8d8:	000000e0 	andeq	r0, r0, r0, ror #1
     8dc:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     8e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8e4:	0000000c 	andeq	r0, r0, ip
     8e8:	0000080c 	andeq	r0, r0, ip, lsl #16
     8ec:	08000fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp}
     8f0:	0000000c 	andeq	r0, r0, ip
     8f4:	0000000c 	andeq	r0, r0, ip
     8f8:	0000080c 	andeq	r0, r0, ip, lsl #16
     8fc:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
     900:	0000000c 	andeq	r0, r0, ip
     904:	0000000c 	andeq	r0, r0, ip
     908:	0000080c 	andeq	r0, r0, ip, lsl #16
     90c:	08001000 	stmdaeq	r0, {ip}
     910:	00000020 	andeq	r0, r0, r0, lsr #32
     914:	0000000c 	andeq	r0, r0, ip
     918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     91c:	7c020001 	stcvc	0, cr0, [r2], {1}
     920:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     924:	00000018 	andeq	r0, r0, r8, lsl r0
     928:	00000914 	andeq	r0, r0, r4, lsl r9
     92c:	08001020 	stmdaeq	r0, {r5, ip}
     930:	00000028 	andeq	r0, r0, r8, lsr #32
     934:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     938:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000014 	andeq	r0, r0, r4, lsl r0
     944:	00000914 	andeq	r0, r0, r4, lsl r9
     948:	08001048 	stmdaeq	r0, {r3, r6, ip}
     94c:	00000038 	andeq	r0, r0, r8, lsr r0
     950:	83080e41 	movwhi	r0, #36417	; 0x8e41
     954:	00018e02 	andeq	r8, r1, r2, lsl #28
     958:	0000000c 	andeq	r0, r0, ip
     95c:	00000914 	andeq	r0, r0, r4, lsl r9
     960:	00000000 	andeq	r0, r0, r0
     964:	00000004 	andeq	r0, r0, r4
     968:	0000000c 	andeq	r0, r0, ip
     96c:	00000914 	andeq	r0, r0, r4, lsl r9
     970:	08001080 	stmdaeq	r0, {r7, ip}
     974:	00000018 	andeq	r0, r0, r8, lsl r0
     978:	00000018 	andeq	r0, r0, r8, lsl r0
     97c:	00000914 	andeq	r0, r0, r4, lsl r9
     980:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
     984:	00000024 	andeq	r0, r0, r4, lsr #32
     988:	83100e41 	tsthi	r0, #1040	; 0x410
     98c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     990:	00018e02 	andeq	r8, r1, r2, lsl #28
     994:	0000000c 	andeq	r0, r0, ip
     998:	00000914 	andeq	r0, r0, r4, lsl r9
     99c:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
     9a0:	00000004 	andeq	r0, r0, r4
     9a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a8:	00000914 	andeq	r0, r0, r4, lsl r9
     9ac:	080010c0 	stmdaeq	r0, {r6, r7, ip}
     9b0:	00000038 	andeq	r0, r0, r8, lsr r0
     9b4:	84080e43 	strhi	r0, [r8], #-3651	; 0xfffff1bd
     9b8:	4c018e02 	stcmi	14, cr8, [r1], {2}
     9bc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     9c0:	000b4400 	andeq	r4, fp, r0, lsl #8
     9c4:	00000018 	andeq	r0, r0, r8, lsl r0
     9c8:	00000914 	andeq	r0, r0, r4, lsl r9
     9cc:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
     9d0:	0000002a 	andeq	r0, r0, sl, lsr #32
     9d4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     9d8:	53018e02 	movwpl	r8, #7682	; 0x1e02
     9dc:	0000080e 	andeq	r0, r0, lr, lsl #16
     9e0:	0000000c 	andeq	r0, r0, ip
     9e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     9ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9f0:	0000000c 	andeq	r0, r0, ip
     9f4:	000009e0 	andeq	r0, r0, r0, ror #19
     9f8:	08001124 	stmdaeq	r0, {r2, r5, r8, ip}
     9fc:	00000018 	andeq	r0, r0, r8, lsl r0
     a00:	0000000c 	andeq	r0, r0, ip
     a04:	000009e0 	andeq	r0, r0, r0, ror #19
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	00000018 	andeq	r0, r0, r8, lsl r0
     a10:	0000000c 	andeq	r0, r0, ip
     a14:	000009e0 	andeq	r0, r0, r0, ror #19
     a18:	0800113c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip}
     a1c:	00000018 	andeq	r0, r0, r8, lsl r0
     a20:	0000000c 	andeq	r0, r0, ip
     a24:	000009e0 	andeq	r0, r0, r0, ror #19
     a28:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
     a2c:	00000018 	andeq	r0, r0, r8, lsl r0
     a30:	0000000c 	andeq	r0, r0, ip
     a34:	000009e0 	andeq	r0, r0, r0, ror #19
     a38:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
     a3c:	00000010 	andeq	r0, r0, r0, lsl r0
     a40:	0000000c 	andeq	r0, r0, ip
     a44:	000009e0 	andeq	r0, r0, r0, ror #19
     a48:	00000000 	andeq	r0, r0, r0
     a4c:	0000000c 	andeq	r0, r0, ip
     a50:	0000000c 	andeq	r0, r0, ip
     a54:	000009e0 	andeq	r0, r0, r0, ror #19
     a58:	00000000 	andeq	r0, r0, r0
     a5c:	0000000c 	andeq	r0, r0, ip
     a60:	0000000c 	andeq	r0, r0, ip
     a64:	000009e0 	andeq	r0, r0, r0, ror #19
     a68:	00000000 	andeq	r0, r0, r0
     a6c:	00000010 	andeq	r0, r0, r0, lsl r0
     a70:	0000000c 	andeq	r0, r0, ip
     a74:	000009e0 	andeq	r0, r0, r0, ror #19
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	00000010 	andeq	r0, r0, r0, lsl r0
     a80:	0000000c 	andeq	r0, r0, ip
     a84:	000009e0 	andeq	r0, r0, r0, ror #19
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	00000018 	andeq	r0, r0, r8, lsl r0
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	000009e0 	andeq	r0, r0, r0, ror #19
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	00000020 	andeq	r0, r0, r0, lsr #32
     aa0:	0000000c 	andeq	r0, r0, ip
     aa4:	000009e0 	andeq	r0, r0, r0, ror #19
     aa8:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
     aac:	0000000c 	andeq	r0, r0, ip
     ab0:	0000000c 	andeq	r0, r0, ip
     ab4:	000009e0 	andeq	r0, r0, r0, ror #19
     ab8:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
     abc:	00000028 	andeq	r0, r0, r8, lsr #32
     ac0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ac4:	000009e0 	andeq	r0, r0, r0, ror #19
     ac8:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
     acc:	00000038 	andeq	r0, r0, r8, lsr r0
     ad0:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
     ad4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ad8:	5a018e02 	bpl	642e8 <__Stack_Size+0x63ee8>
     adc:	0000100e 	andeq	r1, r0, lr
     ae0:	00000018 	andeq	r0, r0, r8, lsl r0
     ae4:	000009e0 	andeq	r0, r0, r0, ror #19
     ae8:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
     aec:	00000040 	andeq	r0, r0, r0, asr #32
     af0:	83100e41 	tsthi	r0, #1040	; 0x410
     af4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     af8:	00018e02 	andeq	r8, r1, r2, lsl #28
     afc:	00000014 	andeq	r0, r0, r4, lsl r0
     b00:	000009e0 	andeq	r0, r0, r0, ror #19
     b04:	00000000 	andeq	r0, r0, r0
     b08:	0000003c 	andeq	r0, r0, ip, lsr r0
     b0c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b10:	00018e02 	andeq	r8, r1, r2, lsl #28
     b14:	00000014 	andeq	r0, r0, r4, lsl r0
     b18:	000009e0 	andeq	r0, r0, r0, ror #19
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	00000070 	andeq	r0, r0, r0, ror r0
     b24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b28:	00018e02 	andeq	r8, r1, r2, lsl #28
     b2c:	00000018 	andeq	r0, r0, r8, lsl r0
     b30:	000009e0 	andeq	r0, r0, r0, ror #19
     b34:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
     b38:	00000048 	andeq	r0, r0, r8, asr #32
     b3c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b40:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b44:	00018e02 	andeq	r8, r1, r2, lsl #28
     b48:	00000018 	andeq	r0, r0, r8, lsl r0
     b4c:	000009e0 	andeq	r0, r0, r0, ror #19
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00000038 	andeq	r0, r0, r8, lsr r0
     b58:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b5c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b60:	00018e02 	andeq	r8, r1, r2, lsl #28
     b64:	00000018 	andeq	r0, r0, r8, lsl r0
     b68:	000009e0 	andeq	r0, r0, r0, ror #19
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	00000048 	andeq	r0, r0, r8, asr #32
     b74:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b78:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b80:	00000014 	andeq	r0, r0, r4, lsl r0
     b84:	000009e0 	andeq	r0, r0, r0, ror #19
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	0000009c 	muleq	r0, ip, r0
     b90:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b94:	00018e02 	andeq	r8, r1, r2, lsl #28
     b98:	00000018 	andeq	r0, r0, r8, lsl r0
     b9c:	000009e0 	andeq	r0, r0, r0, ror #19
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	0000008c 	andeq	r0, r0, ip, lsl #1
     ba8:	83100e41 	tsthi	r0, #1040	; 0x410
     bac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     bb0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb8:	000009e0 	andeq	r0, r0, r0, ror #19
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	00000054 	andeq	r0, r0, r4, asr r0
     bc4:	83180e41 	tsthi	r8, #1040	; 0x410
     bc8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     bcc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd4:	0000000c 	andeq	r0, r0, ip
     bd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bdc:	7c020001 	stcvc	0, cr0, [r2], {1}
     be0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     be4:	0000000c 	andeq	r0, r0, ip
     be8:	00000bd4 	ldrdeq	r0, [r0], -r4
     bec:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     bf0:	0000000c 	andeq	r0, r0, ip
     bf4:	0000000c 	andeq	r0, r0, ip
     bf8:	00000bd4 	ldrdeq	r0, [r0], -r4
     bfc:	0800127c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip}
     c00:	0000000c 	andeq	r0, r0, ip
     c04:	0000000c 	andeq	r0, r0, ip
     c08:	00000bd4 	ldrdeq	r0, [r0], -r4
     c0c:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
     c10:	0000000c 	andeq	r0, r0, ip
     c14:	0000000c 	andeq	r0, r0, ip
     c18:	00000bd4 	ldrdeq	r0, [r0], -r4
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	00000010 	andeq	r0, r0, r0, lsl r0
     c24:	0000000c 	andeq	r0, r0, ip
     c28:	00000bd4 	ldrdeq	r0, [r0], -r4
     c2c:	00000000 	andeq	r0, r0, r0
     c30:	00000010 	andeq	r0, r0, r0, lsl r0
     c34:	0000000c 	andeq	r0, r0, ip
     c38:	00000bd4 	ldrdeq	r0, [r0], -r4
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	00000014 	andeq	r0, r0, r4, lsl r0
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c4c:	7c020001 	stcvc	0, cr0, [r2], {1}
     c50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000c44 	andeq	r0, r0, r4, asr #24
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     c64:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c68:	02018e02 	andeq	r8, r1, #2, 28
     c6c:	c3ce0a4f 	bicgt	r0, lr, #323584	; 0x4f000
     c70:	0b42000e 	bleq	1080cb0 <__Stack_Size+0x10808b0>
     c74:	00000018 	andeq	r0, r0, r8, lsl r0
     c78:	00000c44 	andeq	r0, r0, r4, asr #24
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	00000016 	andeq	r0, r0, r6, lsl r0
     c84:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c88:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     c8c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     c90:	0000001c 	andeq	r0, r0, ip, lsl r0
     c94:	00000c44 	andeq	r0, r0, r4, asr #24
     c98:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
     c9c:	000000a4 	andeq	r0, r0, r4, lsr #1
     ca0:	84180e43 	ldrhi	r0, [r8], #-3651	; 0xfffff1bd
     ca4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ca8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     cac:	00018e02 	andeq	r8, r1, r2, lsl #28
     cb0:	0000000c 	andeq	r0, r0, ip
     cb4:	00000c44 	andeq	r0, r0, r4, asr #24
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	00000010 	andeq	r0, r0, r0, lsl r0
     cc0:	0000000c 	andeq	r0, r0, ip
     cc4:	00000c44 	andeq	r0, r0, r4, asr #24
     cc8:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
     ccc:	0000000c 	andeq	r0, r0, ip
     cd0:	0000000c 	andeq	r0, r0, ip
     cd4:	00000c44 	andeq	r0, r0, r4, asr #24
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	00000006 	andeq	r0, r0, r6
     ce0:	0000000c 	andeq	r0, r0, ip
     ce4:	00000c44 	andeq	r0, r0, r4, asr #24
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	0000000c 	andeq	r0, r0, ip
     cf0:	0000000c 	andeq	r0, r0, ip
     cf4:	00000c44 	andeq	r0, r0, r4, asr #24
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00000006 	andeq	r0, r0, r6
     d00:	0000000c 	andeq	r0, r0, ip
     d04:	00000c44 	andeq	r0, r0, r4, asr #24
     d08:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
     d0c:	00000004 	andeq	r0, r0, r4
     d10:	0000000c 	andeq	r0, r0, ip
     d14:	00000c44 	andeq	r0, r0, r4, asr #24
     d18:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
     d1c:	00000004 	andeq	r0, r0, r4
     d20:	0000000c 	andeq	r0, r0, ip
     d24:	00000c44 	andeq	r0, r0, r4, asr #24
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	0000000a 	andeq	r0, r0, sl
     d30:	0000000c 	andeq	r0, r0, ip
     d34:	00000c44 	andeq	r0, r0, r4, asr #24
     d38:	00000000 	andeq	r0, r0, r0
     d3c:	00000004 	andeq	r0, r0, r4
     d40:	0000000c 	andeq	r0, r0, ip
     d44:	00000c44 	andeq	r0, r0, r4, asr #24
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	00000010 	andeq	r0, r0, r0, lsl r0
     d50:	0000000c 	andeq	r0, r0, ip
     d54:	00000c44 	andeq	r0, r0, r4, asr #24
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	0000000c 	andeq	r0, r0, ip
     d64:	00000c44 	andeq	r0, r0, r4, asr #24
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	0000000c 	andeq	r0, r0, ip
     d70:	00000018 	andeq	r0, r0, r8, lsl r0
     d74:	00000c44 	andeq	r0, r0, r4, asr #24
     d78:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
     d7c:	00000054 	andeq	r0, r0, r4, asr r0
     d80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     d84:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     d88:	00000001 	andeq	r0, r0, r1
     d8c:	00000014 	andeq	r0, r0, r4, lsl r0
     d90:	00000c44 	andeq	r0, r0, r4, asr #24
     d94:	00000000 	andeq	r0, r0, r0
     d98:	0000002a 	andeq	r0, r0, sl, lsr #32
     d9c:	84080e49 	strhi	r0, [r8], #-3657	; 0xfffff1b7
     da0:	00018e02 	andeq	r8, r1, r2, lsl #28
     da4:	0000000c 	andeq	r0, r0, ip
     da8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dac:	7c020001 	stcvc	0, cr0, [r2], {1}
     db0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     db4:	0000000c 	andeq	r0, r0, ip
     db8:	00000da4 	andeq	r0, r0, r4, lsr #27
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	00000034 	andeq	r0, r0, r4, lsr r0
     dc4:	0000000c 	andeq	r0, r0, ip
     dc8:	00000da4 	andeq	r0, r0, r4, lsr #27
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	00000030 	andeq	r0, r0, r0, lsr r0
     dd4:	0000000c 	andeq	r0, r0, ip
     dd8:	00000da4 	andeq	r0, r0, r4, lsr #27
     ddc:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
     de0:	00000014 	andeq	r0, r0, r4, lsl r0
     de4:	00000018 	andeq	r0, r0, r8, lsl r0
     de8:	00000da4 	andeq	r0, r0, r4, lsr #27
     dec:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
     df0:	00000084 	andeq	r0, r0, r4, lsl #1
     df4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     df8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     dfc:	00000001 	andeq	r0, r0, r1
     e00:	0000000c 	andeq	r0, r0, ip
     e04:	00000da4 	andeq	r0, r0, r4, lsr #27
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	0000000c 	andeq	r0, r0, ip
     e10:	0000000c 	andeq	r0, r0, ip
     e14:	00000da4 	andeq	r0, r0, r4, lsr #27
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	00000004 	andeq	r0, r0, r4
     e20:	0000000c 	andeq	r0, r0, ip
     e24:	00000da4 	andeq	r0, r0, r4, lsr #27
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	00000004 	andeq	r0, r0, r4
     e30:	0000000c 	andeq	r0, r0, ip
     e34:	00000da4 	andeq	r0, r0, r4, lsr #27
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	00000004 	andeq	r0, r0, r4
     e40:	0000000c 	andeq	r0, r0, ip
     e44:	00000da4 	andeq	r0, r0, r4, lsr #27
     e48:	00000000 	andeq	r0, r0, r0
     e4c:	00000004 	andeq	r0, r0, r4
     e50:	0000000c 	andeq	r0, r0, ip
     e54:	00000da4 	andeq	r0, r0, r4, lsr #27
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	00000006 	andeq	r0, r0, r6
     e60:	0000000c 	andeq	r0, r0, ip
     e64:	00000da4 	andeq	r0, r0, r4, lsr #27
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	00000004 	andeq	r0, r0, r4
     e70:	0000000c 	andeq	r0, r0, ip
     e74:	00000da4 	andeq	r0, r0, r4, lsr #27
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	00000010 	andeq	r0, r0, r0, lsl r0
     e80:	0000000c 	andeq	r0, r0, ip
     e84:	00000da4 	andeq	r0, r0, r4, lsr #27
     e88:	00000000 	andeq	r0, r0, r0
     e8c:	00000020 	andeq	r0, r0, r0, lsr #32
     e90:	0000000c 	andeq	r0, r0, ip
     e94:	00000da4 	andeq	r0, r0, r4, lsr #27
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	0000000c 	andeq	r0, r0, ip
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	00000da4 	andeq	r0, r0, r4, lsr #27
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	00000da4 	andeq	r0, r0, r4, lsr #27
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	00000010 	andeq	r0, r0, r0, lsl r0
     ec0:	0000000c 	andeq	r0, r0, ip
     ec4:	00000da4 	andeq	r0, r0, r4, lsr #27
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	00000020 	andeq	r0, r0, r0, lsr #32
     ed0:	0000000c 	andeq	r0, r0, ip
     ed4:	00000da4 	andeq	r0, r0, r4, lsr #27
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	0000000c 	andeq	r0, r0, ip
     ee0:	0000000c 	andeq	r0, r0, ip
     ee4:	00000da4 	andeq	r0, r0, r4, lsr #27
     ee8:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     eec:	00000014 	andeq	r0, r0, r4, lsl r0
     ef0:	00000014 	andeq	r0, r0, r4, lsl r0
     ef4:	00000da4 	andeq	r0, r0, r4, lsr #27
     ef8:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
     efc:	00000018 	andeq	r0, r0, r8, lsl r0
     f00:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f04:	00018e02 	andeq	r8, r1, r2, lsl #28
     f08:	0000000c 	andeq	r0, r0, ip
     f0c:	00000da4 	andeq	r0, r0, r4, lsr #27
     f10:	00000000 	andeq	r0, r0, r0
     f14:	00000010 	andeq	r0, r0, r0, lsl r0
     f18:	0000000c 	andeq	r0, r0, ip
     f1c:	00000da4 	andeq	r0, r0, r4, lsr #27
     f20:	00000000 	andeq	r0, r0, r0
     f24:	00000018 	andeq	r0, r0, r8, lsl r0
     f28:	0000000c 	andeq	r0, r0, ip
     f2c:	00000da4 	andeq	r0, r0, r4, lsr #27
     f30:	00000000 	andeq	r0, r0, r0
     f34:	00000020 	andeq	r0, r0, r0, lsr #32
     f38:	00000014 	andeq	r0, r0, r4, lsl r0
     f3c:	00000da4 	andeq	r0, r0, r4, lsr #27
     f40:	00000000 	andeq	r0, r0, r0
     f44:	00000050 	andeq	r0, r0, r0, asr r0
     f48:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     f4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000da4 	andeq	r0, r0, r4, lsr #27
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	00000020 	andeq	r0, r0, r0, lsr #32
     f60:	0000000c 	andeq	r0, r0, ip
     f64:	00000da4 	andeq	r0, r0, r4, lsr #27
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	00000da4 	andeq	r0, r0, r4, lsr #27
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f80:	0000000c 	andeq	r0, r0, ip
     f84:	00000da4 	andeq	r0, r0, r4, lsr #27
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	00000020 	andeq	r0, r0, r0, lsr #32
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	00000da4 	andeq	r0, r0, r4, lsr #27
     f98:	00000000 	andeq	r0, r0, r0
     f9c:	00000030 	andeq	r0, r0, r0, lsr r0
     fa0:	0000000c 	andeq	r0, r0, ip
     fa4:	00000da4 	andeq	r0, r0, r4, lsr #27
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	00000014 	andeq	r0, r0, r4, lsl r0
     fb0:	0000000c 	andeq	r0, r0, ip
     fb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     fbc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
     fc8:	08001464 	stmdaeq	r0, {r2, r5, r6, sl, ip}
     fcc:	0000003c 	andeq	r0, r0, ip, lsr r0
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
     fd8:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
     fdc:	00000038 	andeq	r0, r0, r8, lsr r0
     fe0:	0000000c 	andeq	r0, r0, ip
     fe4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
     fe8:	00000000 	andeq	r0, r0, r0
     fec:	00000014 	andeq	r0, r0, r4, lsl r0
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	0000000c 	andeq	r0, r0, ip
    1004:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1008:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
    100c:	00000014 	andeq	r0, r0, r4, lsl r0
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1018:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1028:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
    102c:	00000014 	andeq	r0, r0, r4, lsl r0
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1038:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
    103c:	00000010 	andeq	r0, r0, r0, lsl r0
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1048:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
    104c:	00000014 	andeq	r0, r0, r4, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
    1054:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1058:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
    105c:	00000014 	andeq	r0, r0, r4, lsl r0
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1068:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    106c:	00000014 	andeq	r0, r0, r4, lsl r0
    1070:	0000000c 	andeq	r0, r0, ip
    1074:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00000018 	andeq	r0, r0, r8, lsl r0
    1080:	0000000c 	andeq	r0, r0, ip
    1084:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1088:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	0000000c 	andeq	r0, r0, ip
    1094:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1098:	00000000 	andeq	r0, r0, r0
    109c:	00000014 	andeq	r0, r0, r4, lsl r0
    10a0:	0000000c 	andeq	r0, r0, ip
    10a4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	00000020 	andeq	r0, r0, r0, lsr #32
    10b0:	0000000c 	andeq	r0, r0, ip
    10b4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	0000000c 	andeq	r0, r0, ip
    10c0:	0000000c 	andeq	r0, r0, ip
    10c4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	00000010 	andeq	r0, r0, r0, lsl r0
    10d0:	0000000c 	andeq	r0, r0, ip
    10d4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    10d8:	00000000 	andeq	r0, r0, r0
    10dc:	0000000c 	andeq	r0, r0, ip
    10e0:	00000014 	andeq	r0, r0, r4, lsl r0
    10e4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    10e8:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
    10ec:	00000084 	andeq	r0, r0, r4, lsl #1
    10f0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    10f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    10f8:	0000000c 	andeq	r0, r0, ip
    10fc:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00000018 	andeq	r0, r0, r8, lsl r0
    1108:	0000000c 	andeq	r0, r0, ip
    110c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1110:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
    1114:	00000018 	andeq	r0, r0, r8, lsl r0
    1118:	0000000c 	andeq	r0, r0, ip
    111c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1120:	08001600 	stmdaeq	r0, {r9, sl, ip}
    1124:	00000018 	andeq	r0, r0, r8, lsl r0
    1128:	0000000c 	andeq	r0, r0, ip
    112c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1130:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
    1134:	00000018 	andeq	r0, r0, r8, lsl r0
    1138:	0000000c 	andeq	r0, r0, ip
    113c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1140:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
    1144:	00000018 	andeq	r0, r0, r8, lsl r0
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1150:	00000000 	andeq	r0, r0, r0
    1154:	0000000c 	andeq	r0, r0, ip
    1158:	0000000c 	andeq	r0, r0, ip
    115c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1160:	00000000 	andeq	r0, r0, r0
    1164:	0000000c 	andeq	r0, r0, ip
    1168:	0000000c 	andeq	r0, r0, ip
    116c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1170:	00000000 	andeq	r0, r0, r0
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	0000000c 	andeq	r0, r0, ip
    117c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1180:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
    1184:	00000028 	andeq	r0, r0, r8, lsr #32
    1188:	00000014 	andeq	r0, r0, r4, lsl r0
    118c:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    1190:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
    1194:	0000002e 	andeq	r0, r0, lr, lsr #32
    1198:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    119c:	040e5401 	streq	r5, [lr], #-1025	; 0xfffffbff
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    11a8:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
    11ac:	00000010 	andeq	r0, r0, r0, lsl r0
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	00000014 	andeq	r0, r0, r4, lsl r0
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	0000000c 	andeq	r0, r0, ip
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11e0:	00000018 	andeq	r0, r0, r8, lsl r0
    11e4:	000011d0 	ldrdeq	r1, [r0], -r0
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00000032 	andeq	r0, r0, r2, lsr r0
    11f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    11f4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    11f8:	00000001 	andeq	r0, r0, r1
    11fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1200:	000011d0 	ldrdeq	r1, [r0], -r0
    1204:	00000000 	andeq	r0, r0, r0
    1208:	0000003a 	andeq	r0, r0, sl, lsr r0
    120c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1210:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1214:	00000001 	andeq	r0, r0, r1
    1218:	00000024 	andeq	r0, r0, r4, lsr #32
    121c:	000011d0 	ldrdeq	r1, [r0], -r0
    1220:	00000000 	andeq	r0, r0, r0
    1224:	000000d4 	ldrdeq	r0, [r0], -r4
    1228:	83080e41 	movwhi	r0, #36417	; 0x8e41
    122c:	78018e02 	stmdavc	r1, {r1, r9, sl, fp, pc}
    1230:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1234:	660b4200 	strvs	r4, [fp], -r0, lsl #4
    1238:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    123c:	000b4200 	andeq	r4, fp, r0, lsl #4
    1240:	0000000c 	andeq	r0, r0, ip
    1244:	000011d0 	ldrdeq	r1, [r0], -r0
    1248:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
    124c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1250:	00000018 	andeq	r0, r0, r8, lsl r0
    1254:	000011d0 	ldrdeq	r1, [r0], -r0
    1258:	00000000 	andeq	r0, r0, r0
    125c:	00000074 	andeq	r0, r0, r4, ror r0
    1260:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1264:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1268:	00018e02 	andeq	r8, r1, r2, lsl #28
    126c:	00000018 	andeq	r0, r0, r8, lsl r0
    1270:	000011d0 	ldrdeq	r1, [r0], -r0
    1274:	00000000 	andeq	r0, r0, r0
    1278:	00000088 	andeq	r0, r0, r8, lsl #1
    127c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1280:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1284:	00000001 	andeq	r0, r0, r1
    1288:	00000018 	andeq	r0, r0, r8, lsl r0
    128c:	000011d0 	ldrdeq	r1, [r0], -r0
    1290:	00000000 	andeq	r0, r0, r0
    1294:	00000084 	andeq	r0, r0, r4, lsl #1
    1298:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    129c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    12a4:	00000018 	andeq	r0, r0, r8, lsl r0
    12a8:	000011d0 	ldrdeq	r1, [r0], -r0
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	00000068 	andeq	r0, r0, r8, rrx
    12b4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    12b8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    12bc:	00000001 	andeq	r0, r0, r1
    12c0:	0000000c 	andeq	r0, r0, ip
    12c4:	000011d0 	ldrdeq	r1, [r0], -r0
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	00000022 	andeq	r0, r0, r2, lsr #32
    12d0:	0000000c 	andeq	r0, r0, ip
    12d4:	000011d0 	ldrdeq	r1, [r0], -r0
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	00000012 	andeq	r0, r0, r2, lsl r0
    12e0:	0000000c 	andeq	r0, r0, ip
    12e4:	000011d0 	ldrdeq	r1, [r0], -r0
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	00000014 	andeq	r0, r0, r4, lsl r0
    12f0:	0000000c 	andeq	r0, r0, ip
    12f4:	000011d0 	ldrdeq	r1, [r0], -r0
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	00000010 	andeq	r0, r0, r0, lsl r0
    1300:	0000000c 	andeq	r0, r0, ip
    1304:	000011d0 	ldrdeq	r1, [r0], -r0
    1308:	00000000 	andeq	r0, r0, r0
    130c:	00000012 	andeq	r0, r0, r2, lsl r0
    1310:	0000000c 	andeq	r0, r0, ip
    1314:	000011d0 	ldrdeq	r1, [r0], -r0
    1318:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
    131c:	00000018 	andeq	r0, r0, r8, lsl r0
    1320:	0000000c 	andeq	r0, r0, ip
    1324:	000011d0 	ldrdeq	r1, [r0], -r0
    1328:	00000000 	andeq	r0, r0, r0
    132c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1330:	0000000c 	andeq	r0, r0, ip
    1334:	000011d0 	ldrdeq	r1, [r0], -r0
    1338:	00000000 	andeq	r0, r0, r0
    133c:	00000004 	andeq	r0, r0, r4
    1340:	0000000c 	andeq	r0, r0, ip
    1344:	000011d0 	ldrdeq	r1, [r0], -r0
    1348:	00000000 	andeq	r0, r0, r0
    134c:	00000008 	andeq	r0, r0, r8
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	000011d0 	ldrdeq	r1, [r0], -r0
    1358:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
    135c:	00000012 	andeq	r0, r0, r2, lsl r0
    1360:	0000000c 	andeq	r0, r0, ip
    1364:	000011d0 	ldrdeq	r1, [r0], -r0
    1368:	08001716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, ip}
    136c:	00000004 	andeq	r0, r0, r4
    1370:	0000000c 	andeq	r0, r0, ip
    1374:	000011d0 	ldrdeq	r1, [r0], -r0
    1378:	00000000 	andeq	r0, r0, r0
    137c:	0000000e 	andeq	r0, r0, lr
    1380:	0000000c 	andeq	r0, r0, ip
    1384:	000011d0 	ldrdeq	r1, [r0], -r0
    1388:	00000000 	andeq	r0, r0, r0
    138c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
    1394:	000011d0 	ldrdeq	r1, [r0], -r0
    1398:	00000000 	andeq	r0, r0, r0
    139c:	00000034 	andeq	r0, r0, r4, lsr r0
    13a0:	83100e41 	tsthi	r0, #1040	; 0x410
    13a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    13a8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13ac:	00000014 	andeq	r0, r0, r4, lsl r0
    13b0:	000011d0 	ldrdeq	r1, [r0], -r0
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	00000014 	andeq	r0, r0, r4, lsl r0
    13bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c4:	00000014 	andeq	r0, r0, r4, lsl r0
    13c8:	000011d0 	ldrdeq	r1, [r0], -r0
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	00000018 	andeq	r0, r0, r8, lsl r0
    13d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13dc:	00000014 	andeq	r0, r0, r4, lsl r0
    13e0:	000011d0 	ldrdeq	r1, [r0], -r0
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	00000012 	andeq	r0, r0, r2, lsl r0
    13ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13f0:	00018e02 	andeq	r8, r1, r2, lsl #28
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	000011d0 	ldrdeq	r1, [r0], -r0
    13fc:	0800171a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip}
    1400:	00000006 	andeq	r0, r0, r6
    1404:	0000000c 	andeq	r0, r0, ip
    1408:	000011d0 	ldrdeq	r1, [r0], -r0
    140c:	00000000 	andeq	r0, r0, r0
    1410:	00000010 	andeq	r0, r0, r0, lsl r0
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	000011d0 	ldrdeq	r1, [r0], -r0
    141c:	00000000 	andeq	r0, r0, r0
    1420:	00000010 	andeq	r0, r0, r0, lsl r0
    1424:	00000018 	andeq	r0, r0, r8, lsl r0
    1428:	000011d0 	ldrdeq	r1, [r0], -r0
    142c:	00000000 	andeq	r0, r0, r0
    1430:	0000003c 	andeq	r0, r0, ip, lsr r0
    1434:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1438:	86038504 	strhi	r8, [r3], -r4, lsl #10
    143c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	000011d0 	ldrdeq	r1, [r0], -r0
    1448:	00000000 	andeq	r0, r0, r0
    144c:	00000010 	andeq	r0, r0, r0, lsl r0
    1450:	0000000c 	andeq	r0, r0, ip
    1454:	000011d0 	ldrdeq	r1, [r0], -r0
    1458:	00000000 	andeq	r0, r0, r0
    145c:	00000014 	andeq	r0, r0, r4, lsl r0
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	000011d0 	ldrdeq	r1, [r0], -r0
    1468:	00000000 	andeq	r0, r0, r0
    146c:	00000010 	andeq	r0, r0, r0, lsl r0
    1470:	0000000c 	andeq	r0, r0, ip
    1474:	000011d0 	ldrdeq	r1, [r0], -r0
    1478:	00000000 	andeq	r0, r0, r0
    147c:	00000014 	andeq	r0, r0, r4, lsl r0
    1480:	0000000c 	andeq	r0, r0, ip
    1484:	000011d0 	ldrdeq	r1, [r0], -r0
    1488:	00000000 	andeq	r0, r0, r0
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	0000000c 	andeq	r0, r0, ip
    1494:	000011d0 	ldrdeq	r1, [r0], -r0
    1498:	00000000 	andeq	r0, r0, r0
    149c:	00000018 	andeq	r0, r0, r8, lsl r0
    14a0:	0000000c 	andeq	r0, r0, ip
    14a4:	000011d0 	ldrdeq	r1, [r0], -r0
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	00000018 	andeq	r0, r0, r8, lsl r0
    14b0:	0000000c 	andeq	r0, r0, ip
    14b4:	000011d0 	ldrdeq	r1, [r0], -r0
    14b8:	00000000 	andeq	r0, r0, r0
    14bc:	00000018 	andeq	r0, r0, r8, lsl r0
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	000011d0 	ldrdeq	r1, [r0], -r0
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	00000010 	andeq	r0, r0, r0, lsl r0
    14d0:	0000000c 	andeq	r0, r0, ip
    14d4:	000011d0 	ldrdeq	r1, [r0], -r0
    14d8:	00000000 	andeq	r0, r0, r0
    14dc:	00000014 	andeq	r0, r0, r4, lsl r0
    14e0:	0000000c 	andeq	r0, r0, ip
    14e4:	000011d0 	ldrdeq	r1, [r0], -r0
    14e8:	00000000 	andeq	r0, r0, r0
    14ec:	00000010 	andeq	r0, r0, r0, lsl r0
    14f0:	0000000c 	andeq	r0, r0, ip
    14f4:	000011d0 	ldrdeq	r1, [r0], -r0
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1500:	0000000c 	andeq	r0, r0, ip
    1504:	000011d0 	ldrdeq	r1, [r0], -r0
    1508:	00000000 	andeq	r0, r0, r0
    150c:	00000010 	andeq	r0, r0, r0, lsl r0
    1510:	0000000c 	andeq	r0, r0, ip
    1514:	000011d0 	ldrdeq	r1, [r0], -r0
    1518:	00000000 	andeq	r0, r0, r0
    151c:	00000014 	andeq	r0, r0, r4, lsl r0
    1520:	0000000c 	andeq	r0, r0, ip
    1524:	000011d0 	ldrdeq	r1, [r0], -r0
    1528:	00000000 	andeq	r0, r0, r0
    152c:	00000010 	andeq	r0, r0, r0, lsl r0
    1530:	0000000c 	andeq	r0, r0, ip
    1534:	000011d0 	ldrdeq	r1, [r0], -r0
    1538:	00000000 	andeq	r0, r0, r0
    153c:	00000014 	andeq	r0, r0, r4, lsl r0
    1540:	0000000c 	andeq	r0, r0, ip
    1544:	000011d0 	ldrdeq	r1, [r0], -r0
    1548:	00000000 	andeq	r0, r0, r0
    154c:	00000010 	andeq	r0, r0, r0, lsl r0
    1550:	0000000c 	andeq	r0, r0, ip
    1554:	000011d0 	ldrdeq	r1, [r0], -r0
    1558:	00000000 	andeq	r0, r0, r0
    155c:	00000010 	andeq	r0, r0, r0, lsl r0
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	000011d0 	ldrdeq	r1, [r0], -r0
    1568:	00000000 	andeq	r0, r0, r0
    156c:	00000010 	andeq	r0, r0, r0, lsl r0
    1570:	0000000c 	andeq	r0, r0, ip
    1574:	000011d0 	ldrdeq	r1, [r0], -r0
    1578:	00000000 	andeq	r0, r0, r0
    157c:	00000010 	andeq	r0, r0, r0, lsl r0
    1580:	0000000c 	andeq	r0, r0, ip
    1584:	000011d0 	ldrdeq	r1, [r0], -r0
    1588:	00000000 	andeq	r0, r0, r0
    158c:	00000010 	andeq	r0, r0, r0, lsl r0
    1590:	0000000c 	andeq	r0, r0, ip
    1594:	000011d0 	ldrdeq	r1, [r0], -r0
    1598:	00000000 	andeq	r0, r0, r0
    159c:	00000010 	andeq	r0, r0, r0, lsl r0
    15a0:	0000000c 	andeq	r0, r0, ip
    15a4:	000011d0 	ldrdeq	r1, [r0], -r0
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	00000014 	andeq	r0, r0, r4, lsl r0
    15b0:	0000000c 	andeq	r0, r0, ip
    15b4:	000011d0 	ldrdeq	r1, [r0], -r0
    15b8:	00000000 	andeq	r0, r0, r0
    15bc:	00000014 	andeq	r0, r0, r4, lsl r0
    15c0:	0000000c 	andeq	r0, r0, ip
    15c4:	000011d0 	ldrdeq	r1, [r0], -r0
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	00000014 	andeq	r0, r0, r4, lsl r0
    15d0:	0000000c 	andeq	r0, r0, ip
    15d4:	000011d0 	ldrdeq	r1, [r0], -r0
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	00000014 	andeq	r0, r0, r4, lsl r0
    15e0:	0000000c 	andeq	r0, r0, ip
    15e4:	000011d0 	ldrdeq	r1, [r0], -r0
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	00000014 	andeq	r0, r0, r4, lsl r0
    15f0:	00000018 	andeq	r0, r0, r8, lsl r0
    15f4:	000011d0 	ldrdeq	r1, [r0], -r0
    15f8:	00000000 	andeq	r0, r0, r0
    15fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1600:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1604:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1608:	00000001 	andeq	r0, r0, r1
    160c:	00000018 	andeq	r0, r0, r8, lsl r0
    1610:	000011d0 	ldrdeq	r1, [r0], -r0
    1614:	00000000 	andeq	r0, r0, r0
    1618:	0000001c 	andeq	r0, r0, ip, lsl r0
    161c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1620:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1624:	00000001 	andeq	r0, r0, r1
    1628:	00000014 	andeq	r0, r0, r4, lsl r0
    162c:	000011d0 	ldrdeq	r1, [r0], -r0
    1630:	00000000 	andeq	r0, r0, r0
    1634:	00000044 	andeq	r0, r0, r4, asr #32
    1638:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    163c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1640:	0000000c 	andeq	r0, r0, ip
    1644:	000011d0 	ldrdeq	r1, [r0], -r0
    1648:	00000000 	andeq	r0, r0, r0
    164c:	00000018 	andeq	r0, r0, r8, lsl r0
    1650:	0000000c 	andeq	r0, r0, ip
    1654:	000011d0 	ldrdeq	r1, [r0], -r0
    1658:	00000000 	andeq	r0, r0, r0
    165c:	00000018 	andeq	r0, r0, r8, lsl r0
    1660:	0000000c 	andeq	r0, r0, ip
    1664:	000011d0 	ldrdeq	r1, [r0], -r0
    1668:	00000000 	andeq	r0, r0, r0
    166c:	00000018 	andeq	r0, r0, r8, lsl r0
    1670:	0000000c 	andeq	r0, r0, ip
    1674:	000011d0 	ldrdeq	r1, [r0], -r0
    1678:	00000000 	andeq	r0, r0, r0
    167c:	00000016 	andeq	r0, r0, r6, lsl r0
    1680:	0000000c 	andeq	r0, r0, ip
    1684:	000011d0 	ldrdeq	r1, [r0], -r0
    1688:	00000000 	andeq	r0, r0, r0
    168c:	00000016 	andeq	r0, r0, r6, lsl r0
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	000011d0 	ldrdeq	r1, [r0], -r0
    1698:	00000000 	andeq	r0, r0, r0
    169c:	00000016 	andeq	r0, r0, r6, lsl r0
    16a0:	0000000c 	andeq	r0, r0, ip
    16a4:	000011d0 	ldrdeq	r1, [r0], -r0
    16a8:	00000000 	andeq	r0, r0, r0
    16ac:	00000016 	andeq	r0, r0, r6, lsl r0
    16b0:	0000000c 	andeq	r0, r0, ip
    16b4:	000011d0 	ldrdeq	r1, [r0], -r0
    16b8:	00000000 	andeq	r0, r0, r0
    16bc:	00000004 	andeq	r0, r0, r4
    16c0:	0000000c 	andeq	r0, r0, ip
    16c4:	000011d0 	ldrdeq	r1, [r0], -r0
    16c8:	00000000 	andeq	r0, r0, r0
    16cc:	00000004 	andeq	r0, r0, r4
    16d0:	0000000c 	andeq	r0, r0, ip
    16d4:	000011d0 	ldrdeq	r1, [r0], -r0
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	00000004 	andeq	r0, r0, r4
    16e0:	0000000c 	andeq	r0, r0, ip
    16e4:	000011d0 	ldrdeq	r1, [r0], -r0
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	00000004 	andeq	r0, r0, r4
    16f0:	0000000c 	andeq	r0, r0, ip
    16f4:	000011d0 	ldrdeq	r1, [r0], -r0
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	00000004 	andeq	r0, r0, r4
    1700:	0000000c 	andeq	r0, r0, ip
    1704:	000011d0 	ldrdeq	r1, [r0], -r0
    1708:	00000000 	andeq	r0, r0, r0
    170c:	00000006 	andeq	r0, r0, r6
    1710:	0000000c 	andeq	r0, r0, ip
    1714:	000011d0 	ldrdeq	r1, [r0], -r0
    1718:	00000000 	andeq	r0, r0, r0
    171c:	00000016 	andeq	r0, r0, r6, lsl r0
    1720:	0000000c 	andeq	r0, r0, ip
    1724:	000011d0 	ldrdeq	r1, [r0], -r0
    1728:	00000000 	andeq	r0, r0, r0
    172c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1730:	00000030 	andeq	r0, r0, r0, lsr r0
    1734:	000011d0 	ldrdeq	r1, [r0], -r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	00000060 	andeq	r0, r0, r0, rrx
    1740:	83180e41 	tsthi	r8, #1040	; 0x410
    1744:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1748:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    174c:	5e018e02 	cdppl	14, 0, cr8, cr1, cr2, {0}
    1750:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1754:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1758:	4d0b4200 	sfmmi	f4, 4, [fp, #-0]
    175c:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1760:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	000011d0 	ldrdeq	r1, [r0], -r0
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00000016 	andeq	r0, r0, r6, lsl r0
    1774:	0000000c 	andeq	r0, r0, ip
    1778:	000011d0 	ldrdeq	r1, [r0], -r0
    177c:	00000000 	andeq	r0, r0, r0
    1780:	0000001a 	andeq	r0, r0, sl, lsl r0
    1784:	00000048 	andeq	r0, r0, r8, asr #32
    1788:	000011d0 	ldrdeq	r1, [r0], -r0
    178c:	00000000 	andeq	r0, r0, r0
    1790:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1794:	83180e41 	tsthi	r8, #1040	; 0x410
    1798:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    179c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    17a0:	4b018e02 	blmi	64fb0 <__Stack_Size+0x64bb0>
    17a4:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    17a8:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    17ac:	470b4200 	strmi	r4, [fp, -r0, lsl #4]
    17b0:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    17b4:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    17b8:	600b4200 	andvs	r4, fp, r0, lsl #4
    17bc:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    17c0:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    17c4:	5c0b4200 	sfmpl	f4, 4, [fp], {-0}
    17c8:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    17cc:	000ec3c4 	andeq	ip, lr, r4, asr #7
    17d0:	0000000c 	andeq	r0, r0, ip
    17d4:	000011d0 	ldrdeq	r1, [r0], -r0
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	00000010 	andeq	r0, r0, r0, lsl r0
    17e0:	0000000c 	andeq	r0, r0, ip
    17e4:	000011d0 	ldrdeq	r1, [r0], -r0
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	00000006 	andeq	r0, r0, r6
    17f0:	0000000c 	andeq	r0, r0, ip
    17f4:	000011d0 	ldrdeq	r1, [r0], -r0
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	00000006 	andeq	r0, r0, r6
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	000011d0 	ldrdeq	r1, [r0], -r0
    1808:	00000000 	andeq	r0, r0, r0
    180c:	00000006 	andeq	r0, r0, r6
    1810:	0000000c 	andeq	r0, r0, ip
    1814:	000011d0 	ldrdeq	r1, [r0], -r0
    1818:	00000000 	andeq	r0, r0, r0
    181c:	00000008 	andeq	r0, r0, r8
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	000011d0 	ldrdeq	r1, [r0], -r0
    1828:	00000000 	andeq	r0, r0, r0
    182c:	00000006 	andeq	r0, r0, r6
    1830:	0000000c 	andeq	r0, r0, ip
    1834:	000011d0 	ldrdeq	r1, [r0], -r0
    1838:	00000000 	andeq	r0, r0, r0
    183c:	00000006 	andeq	r0, r0, r6
    1840:	0000000c 	andeq	r0, r0, ip
    1844:	000011d0 	ldrdeq	r1, [r0], -r0
    1848:	00000000 	andeq	r0, r0, r0
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	0000000c 	andeq	r0, r0, ip
    1854:	000011d0 	ldrdeq	r1, [r0], -r0
    1858:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
    185c:	00000008 	andeq	r0, r0, r8
    1860:	0000000c 	andeq	r0, r0, ip
    1864:	000011d0 	ldrdeq	r1, [r0], -r0
    1868:	00000000 	andeq	r0, r0, r0
    186c:	00000016 	andeq	r0, r0, r6, lsl r0
    1870:	0000000c 	andeq	r0, r0, ip
    1874:	000011d0 	ldrdeq	r1, [r0], -r0
    1878:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
    187c:	00000008 	andeq	r0, r0, r8
    1880:	0000000c 	andeq	r0, r0, ip
    1884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1888:	7c020001 	stcvc	0, cr0, [r2], {1}
    188c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1890:	0000000c 	andeq	r0, r0, ip
    1894:	00001880 	andeq	r1, r0, r0, lsl #17
    1898:	00000000 	andeq	r0, r0, r0
    189c:	00000018 	andeq	r0, r0, r8, lsl r0
    18a0:	0000000c 	andeq	r0, r0, ip
    18a4:	00001880 	andeq	r1, r0, r0, lsl #17
    18a8:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
    18ac:	0000000c 	andeq	r0, r0, ip
    18b0:	0000000c 	andeq	r0, r0, ip
    18b4:	00001880 	andeq	r1, r0, r0, lsl #17
    18b8:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
    18bc:	00000028 	andeq	r0, r0, r8, lsr #32
    18c0:	0000000c 	andeq	r0, r0, ip
    18c4:	00001880 	andeq	r1, r0, r0, lsl #17
    18c8:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    18cc:	00000018 	andeq	r0, r0, r8, lsl r0
    18d0:	0000000c 	andeq	r0, r0, ip
    18d4:	00001880 	andeq	r1, r0, r0, lsl #17
    18d8:	00000000 	andeq	r0, r0, r0
    18dc:	0000000c 	andeq	r0, r0, ip
    18e0:	0000000c 	andeq	r0, r0, ip
    18e4:	00001880 	andeq	r1, r0, r0, lsl #17
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    18f0:	0000000c 	andeq	r0, r0, ip
    18f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1900:	00000024 	andeq	r0, r0, r4, lsr #32
    1904:	000018f0 	strdeq	r1, [r0], -r0
    1908:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
    190c:	0000009c 	muleq	r0, ip, r0
    1910:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1914:	5b018e02 	blpl	65124 <__Stack_Size+0x64d24>
    1918:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    191c:	650b4500 	strvs	r4, [fp, #-1280]	; 0xfffffb00
    1920:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1924:	000b4200 	andeq	r4, fp, r0, lsl #4
    1928:	0000001c 	andeq	r0, r0, ip, lsl r0
    192c:	000018f0 	strdeq	r1, [r0], -r0
    1930:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
    1934:	00000088 	andeq	r0, r0, r8, lsl #1
    1938:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    193c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1940:	280e5d01 	stmdacs	lr, {r0, r8, sl, fp, ip, lr}
    1944:	000c0e62 	andeq	r0, ip, r2, ror #28
    1948:	0000000c 	andeq	r0, r0, ip
    194c:	000018f0 	strdeq	r1, [r0], -r0
    1950:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    1954:	00000016 	andeq	r0, r0, r6, lsl r0
    1958:	00000014 	andeq	r0, r0, r4, lsl r0
    195c:	000018f0 	strdeq	r1, [r0], -r0
    1960:	00000000 	andeq	r0, r0, r0
    1964:	00000020 	andeq	r0, r0, r0, lsr #32
    1968:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    196c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1970:	0000000c 	andeq	r0, r0, ip
    1974:	000018f0 	strdeq	r1, [r0], -r0
    1978:	00000000 	andeq	r0, r0, r0
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	0000000c 	andeq	r0, r0, ip
    1984:	000018f0 	strdeq	r1, [r0], -r0
    1988:	080018b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip}
    198c:	00000018 	andeq	r0, r0, r8, lsl r0
    1990:	00000014 	andeq	r0, r0, r4, lsl r0
    1994:	000018f0 	strdeq	r1, [r0], -r0
    1998:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    199c:	00000030 	andeq	r0, r0, r0, lsr r0
    19a0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    19a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    19a8:	0000000c 	andeq	r0, r0, ip
    19ac:	000018f0 	strdeq	r1, [r0], -r0
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	00000012 	andeq	r0, r0, r2, lsl r0
    19b8:	0000000c 	andeq	r0, r0, ip
    19bc:	000018f0 	strdeq	r1, [r0], -r0
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	00000016 	andeq	r0, r0, r6, lsl r0
    19c8:	0000000c 	andeq	r0, r0, ip
    19cc:	000018f0 	strdeq	r1, [r0], -r0
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	00000016 	andeq	r0, r0, r6, lsl r0
    19d8:	0000000c 	andeq	r0, r0, ip
    19dc:	000018f0 	strdeq	r1, [r0], -r0
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	00000018 	andeq	r0, r0, r8, lsl r0
    19e8:	0000000c 	andeq	r0, r0, ip
    19ec:	000018f0 	strdeq	r1, [r0], -r0
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	00000016 	andeq	r0, r0, r6, lsl r0
    19f8:	0000000c 	andeq	r0, r0, ip
    19fc:	000018f0 	strdeq	r1, [r0], -r0
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	00000018 	andeq	r0, r0, r8, lsl r0
    1a08:	0000000c 	andeq	r0, r0, ip
    1a0c:	000018f0 	strdeq	r1, [r0], -r0
    1a10:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
    1a14:	00000008 	andeq	r0, r0, r8
    1a18:	0000000c 	andeq	r0, r0, ip
    1a1c:	000018f0 	strdeq	r1, [r0], -r0
    1a20:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
    1a24:	00000008 	andeq	r0, r0, r8
    1a28:	0000000c 	andeq	r0, r0, ip
    1a2c:	000018f0 	strdeq	r1, [r0], -r0
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	0000000c 	andeq	r0, r0, ip
    1a38:	0000000c 	andeq	r0, r0, ip
    1a3c:	000018f0 	strdeq	r1, [r0], -r0
    1a40:	00000000 	andeq	r0, r0, r0
    1a44:	00000012 	andeq	r0, r0, r2, lsl r0
    1a48:	0000000c 	andeq	r0, r0, ip
    1a4c:	000018f0 	strdeq	r1, [r0], -r0
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	00000012 	andeq	r0, r0, r2, lsl r0
    1a58:	0000000c 	andeq	r0, r0, ip
    1a5c:	000018f0 	strdeq	r1, [r0], -r0
    1a60:	00000000 	andeq	r0, r0, r0
    1a64:	00000018 	andeq	r0, r0, r8, lsl r0
    1a68:	0000000c 	andeq	r0, r0, ip
    1a6c:	000018f0 	strdeq	r1, [r0], -r0
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	00000018 	andeq	r0, r0, r8, lsl r0
    1a78:	0000000c 	andeq	r0, r0, ip
    1a7c:	000018f0 	strdeq	r1, [r0], -r0
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	00000018 	andeq	r0, r0, r8, lsl r0
    1a88:	0000000c 	andeq	r0, r0, ip
    1a8c:	000018f0 	strdeq	r1, [r0], -r0
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	00000016 	andeq	r0, r0, r6, lsl r0
    1a98:	0000000c 	andeq	r0, r0, ip
    1a9c:	000018f0 	strdeq	r1, [r0], -r0
    1aa0:	00000000 	andeq	r0, r0, r0
    1aa4:	00000018 	andeq	r0, r0, r8, lsl r0
    1aa8:	0000000c 	andeq	r0, r0, ip
    1aac:	000018f0 	strdeq	r1, [r0], -r0
    1ab0:	0800190e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip}
    1ab4:	0000000c 	andeq	r0, r0, ip
    1ab8:	0000000c 	andeq	r0, r0, ip
    1abc:	000018f0 	strdeq	r1, [r0], -r0
    1ac0:	0800191a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip}
    1ac4:	00000008 	andeq	r0, r0, r8
    1ac8:	00000014 	andeq	r0, r0, r4, lsl r0
    1acc:	000018f0 	strdeq	r1, [r0], -r0
    1ad0:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
    1ad4:	00000040 	andeq	r0, r0, r0, asr #32
    1ad8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1adc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ae0:	0000000c 	andeq	r0, r0, ip
    1ae4:	000018f0 	strdeq	r1, [r0], -r0
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	00000010 	andeq	r0, r0, r0, lsl r0
    1af0:	0000000c 	andeq	r0, r0, ip
    1af4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1af8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1afc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b00:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b04:	00001af0 	strdeq	r1, [r0], -r0
    1b08:	08001964 	stmdaeq	r0, {r2, r5, r6, r8, fp, ip}
    1b0c:	00000050 	andeq	r0, r0, r0, asr r0
    1b10:	000d0941 	andeq	r0, sp, r1, asr #18
    1b14:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1b18:	56018e02 	strpl	r8, [r1], -r2, lsl #28
    1b1c:	000ec0ce 	andeq	ip, lr, lr, asr #1
    1b20:	0000000c 	andeq	r0, r0, ip
    1b24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b28:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b30:	0000000c 	andeq	r0, r0, ip
    1b34:	00001b20 	andeq	r1, r0, r0, lsr #22
    1b38:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
    1b3c:	00000034 	andeq	r0, r0, r4, lsr r0
    1b40:	0000000c 	andeq	r0, r0, ip
    1b44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b48:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b50:	00000014 	andeq	r0, r0, r4, lsl r0
    1b54:	00001b40 	andeq	r1, r0, r0, asr #22
    1b58:	080019e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip}
    1b5c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b60:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1b64:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b68:	00000014 	andeq	r0, r0, r4, lsl r0
    1b6c:	00001b40 	andeq	r1, r0, r0, asr #22
    1b70:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
    1b74:	00000024 	andeq	r0, r0, r4, lsr #32
    1b78:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1b7c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b80:	00000014 	andeq	r0, r0, r4, lsl r0
    1b84:	00001b40 	andeq	r1, r0, r0, asr #22
    1b88:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
    1b8c:	00000090 	muleq	r0, r0, r0
    1b90:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1b94:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b98:	00000020 	andeq	r0, r0, r0, lsr #32
    1b9c:	00001b40 	andeq	r1, r0, r0, asr #22
    1ba0:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
    1ba4:	000000ac 	andeq	r0, r0, ip, lsr #1
    1ba8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    1bac:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    1bb0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    1bb4:	89038804 	stmdbhi	r3, {r2, fp, pc}
    1bb8:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bbc:	00000014 	andeq	r0, r0, r4, lsl r0
    1bc0:	00001b40 	andeq	r1, r0, r0, asr #22
    1bc4:	08001b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip}
    1bc8:	00000038 	andeq	r0, r0, r8, lsr r0
    1bcc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bd4:	00000018 	andeq	r0, r0, r8, lsl r0
    1bd8:	00001b40 	andeq	r1, r0, r0, asr #22
    1bdc:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
    1be0:	00000048 	andeq	r0, r0, r8, asr #32
    1be4:	83100e41 	tsthi	r0, #1040	; 0x410
    1be8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1bec:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bf0:	00000018 	andeq	r0, r0, r8, lsl r0
    1bf4:	00001b40 	andeq	r1, r0, r0, asr #22
    1bf8:	08001bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip}
    1bfc:	000000d8 	ldrdeq	r0, [r0], -r8
    1c00:	83100e41 	tsthi	r0, #1040	; 0x410
    1c04:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1c08:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c0c:	00000018 	andeq	r0, r0, r8, lsl r0
    1c10:	00001b40 	andeq	r1, r0, r0, asr #22
    1c14:	08001cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip}
    1c18:	0000008c 	andeq	r0, r0, ip, lsl #1
    1c1c:	83100e41 	tsthi	r0, #1040	; 0x410
    1c20:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1c24:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c28:	00000014 	andeq	r0, r0, r4, lsl r0
    1c2c:	00001b40 	andeq	r1, r0, r0, asr #22
    1c30:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
    1c34:	00000024 	andeq	r0, r0, r4, lsr #32
    1c38:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1c3c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c40:	00000014 	andeq	r0, r0, r4, lsl r0
    1c44:	00001b40 	andeq	r1, r0, r0, asr #22
    1c48:	08001d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip}
    1c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c50:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1c54:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c58:	00000014 	andeq	r0, r0, r4, lsl r0
    1c5c:	00001b40 	andeq	r1, r0, r0, asr #22
    1c60:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
    1c64:	00000040 	andeq	r0, r0, r0, asr #32
    1c68:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1c6c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c70:	00000024 	andeq	r0, r0, r4, lsr #32
    1c74:	00001b40 	andeq	r1, r0, r0, asr #22
    1c78:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
    1c7c:	00000300 	andeq	r0, r0, r0, lsl #6
    1c80:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1c84:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1c88:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1c8c:	01580301 	cmpeq	r8, r1, lsl #6
    1c90:	41140e0a 	tstmi	r4, sl, lsl #28
    1c94:	0000000b 	andeq	r0, r0, fp
    1c98:	00000028 	andeq	r0, r0, r8, lsr #32
    1c9c:	00001b40 	andeq	r1, r0, r0, asr #22
    1ca0:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
    1ca4:	000000cc 	andeq	r0, r0, ip, asr #1
    1ca8:	83180e41 	tsthi	r8, #1040	; 0x410
    1cac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1cb0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1cb4:	02018e02 	andeq	r8, r1, #2, 28
    1cb8:	c6c7ce56 			; <UNDEFINED> instruction: 0xc6c7ce56
    1cbc:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	00000018 	andeq	r0, r0, r8, lsl r0
    1cc8:	00001b40 	andeq	r1, r0, r0, asr #22
    1ccc:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
    1cd0:	00000040 	andeq	r0, r0, r0, asr #32
    1cd4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1cd8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1cdc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ce0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ce4:	00001b40 	andeq	r1, r0, r0, asr #22
    1ce8:	080021dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sp}
    1cec:	0000005c 	andeq	r0, r0, ip, asr r0
    1cf0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1cf4:	64018e02 	strvs	r8, [r1], #-3586	; 0xfffff1fe
    1cf8:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1cfc:	0000000c 	andeq	r0, r0, ip
    1d00:	00001b40 	andeq	r1, r0, r0, asr #22
    1d04:	08002238 	stmdaeq	r0, {r3, r4, r5, r9, sp}
    1d08:	00000002 	andeq	r0, r0, r2
    1d0c:	0000000c 	andeq	r0, r0, ip
    1d10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d14:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d1c:	00000014 	andeq	r0, r0, r4, lsl r0
    1d20:	00001d0c 	andeq	r1, r0, ip, lsl #26
    1d24:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
    1d28:	00000024 	andeq	r0, r0, r4, lsr #32
    1d2c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1d30:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d34:	00000014 	andeq	r0, r0, r4, lsl r0
    1d38:	00001d0c 	andeq	r1, r0, ip, lsl #26
    1d3c:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
    1d40:	00000024 	andeq	r0, r0, r4, lsr #32
    1d44:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1d48:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d4c:	0000000c 	andeq	r0, r0, ip
    1d50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d54:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d5c:	0000000c 	andeq	r0, r0, ip
    1d60:	00001d4c 	andeq	r1, r0, ip, asr #26
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	0000000c 	andeq	r0, r0, ip
    1d6c:	0000000c 	andeq	r0, r0, ip
    1d70:	00001d4c 	andeq	r1, r0, ip, asr #26
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	0000000c 	andeq	r0, r0, ip
    1d7c:	0000000c 	andeq	r0, r0, ip
    1d80:	00001d4c 	andeq	r1, r0, ip, asr #26
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	0000000c 	andeq	r0, r0, ip
    1d8c:	0000000c 	andeq	r0, r0, ip
    1d90:	00001d4c 	andeq	r1, r0, ip, asr #26
    1d94:	00000000 	andeq	r0, r0, r0
    1d98:	0000000c 	andeq	r0, r0, ip
    1d9c:	0000000c 	andeq	r0, r0, ip
    1da0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1da4:	00000000 	andeq	r0, r0, r0
    1da8:	0000000c 	andeq	r0, r0, ip
    1dac:	0000000c 	andeq	r0, r0, ip
    1db0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1db4:	00000000 	andeq	r0, r0, r0
    1db8:	0000000c 	andeq	r0, r0, ip
    1dbc:	0000000c 	andeq	r0, r0, ip
    1dc0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	0000000c 	andeq	r0, r0, ip
    1dcc:	0000000c 	andeq	r0, r0, ip
    1dd0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1dd4:	08002284 	stmdaeq	r0, {r2, r7, r9, sp}
    1dd8:	00000010 	andeq	r0, r0, r0, lsl r0
    1ddc:	0000000c 	andeq	r0, r0, ip
    1de0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	0000000c 	andeq	r0, r0, ip
    1dec:	0000000c 	andeq	r0, r0, ip
    1df0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	0000000e 	andeq	r0, r0, lr
    1dfc:	0000000c 	andeq	r0, r0, ip
    1e00:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e04:	00000000 	andeq	r0, r0, r0
    1e08:	00000010 	andeq	r0, r0, r0, lsl r0
    1e0c:	0000000c 	andeq	r0, r0, ip
    1e10:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e14:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
    1e18:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e1c:	0000000c 	andeq	r0, r0, ip
    1e20:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e24:	00000000 	andeq	r0, r0, r0
    1e28:	00000012 	andeq	r0, r0, r2, lsl r0
    1e2c:	0000000c 	andeq	r0, r0, ip
    1e30:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e34:	080022b0 	stmdaeq	r0, {r4, r5, r7, r9, sp}
    1e38:	00000032 	andeq	r0, r0, r2, lsr r0
    1e3c:	0000000c 	andeq	r0, r0, ip
    1e40:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e44:	080022e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sp}
    1e48:	00000032 	andeq	r0, r0, r2, lsr r0
    1e4c:	0000000c 	andeq	r0, r0, ip
    1e50:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00000024 	andeq	r0, r0, r4, lsr #32
    1e5c:	0000000c 	andeq	r0, r0, ip
    1e60:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e64:	00000000 	andeq	r0, r0, r0
    1e68:	00000012 	andeq	r0, r0, r2, lsl r0
    1e6c:	0000000c 	andeq	r0, r0, ip
    1e70:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e74:	00000000 	andeq	r0, r0, r0
    1e78:	00000012 	andeq	r0, r0, r2, lsl r0
    1e7c:	0000000c 	andeq	r0, r0, ip
    1e80:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e84:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
    1e88:	00000026 	andeq	r0, r0, r6, lsr #32
    1e8c:	0000000c 	andeq	r0, r0, ip
    1e90:	00001d4c 	andeq	r1, r0, ip, asr #26
    1e94:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
    1e98:	00000026 	andeq	r0, r0, r6, lsr #32
    1e9c:	0000000c 	andeq	r0, r0, ip
    1ea0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	00000020 	andeq	r0, r0, r0, lsr #32
    1eac:	0000000c 	andeq	r0, r0, ip
    1eb0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	00000004 	andeq	r0, r0, r4
    1ebc:	0000000c 	andeq	r0, r0, ip
    1ec0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ec4:	00000000 	andeq	r0, r0, r0
    1ec8:	00000004 	andeq	r0, r0, r4
    1ecc:	0000000c 	andeq	r0, r0, ip
    1ed0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ed4:	08002360 	stmdaeq	r0, {r5, r6, r8, r9, sp}
    1ed8:	00000020 	andeq	r0, r0, r0, lsr #32
    1edc:	0000000c 	andeq	r0, r0, ip
    1ee0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ee4:	08002380 	stmdaeq	r0, {r7, r8, r9, sp}
    1ee8:	00000004 	andeq	r0, r0, r4
    1eec:	0000000c 	andeq	r0, r0, ip
    1ef0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	00000004 	andeq	r0, r0, r4
    1efc:	0000000c 	andeq	r0, r0, ip
    1f00:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	0000001a 	andeq	r0, r0, sl, lsl r0
    1f0c:	0000000c 	andeq	r0, r0, ip
    1f10:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f14:	00000000 	andeq	r0, r0, r0
    1f18:	0000001a 	andeq	r0, r0, sl, lsl r0
    1f1c:	0000000c 	andeq	r0, r0, ip
    1f20:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f24:	00000000 	andeq	r0, r0, r0
    1f28:	00000018 	andeq	r0, r0, r8, lsl r0
    1f2c:	0000000c 	andeq	r0, r0, ip
    1f30:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	0000001c 	andeq	r0, r0, ip, lsl r0
    1f3c:	0000000c 	andeq	r0, r0, ip
    1f40:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f44:	00000000 	andeq	r0, r0, r0
    1f48:	00000020 	andeq	r0, r0, r0, lsr #32
    1f4c:	0000000c 	andeq	r0, r0, ip
    1f50:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	00000020 	andeq	r0, r0, r0, lsr #32
    1f5c:	0000000c 	andeq	r0, r0, ip
    1f60:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f64:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
    1f68:	00000024 	andeq	r0, r0, r4, lsr #32
    1f6c:	0000000c 	andeq	r0, r0, ip
    1f70:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f74:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
    1f78:	00000024 	andeq	r0, r0, r4, lsr #32
    1f7c:	0000000c 	andeq	r0, r0, ip
    1f80:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	00000022 	andeq	r0, r0, r2, lsr #32
    1f8c:	0000000c 	andeq	r0, r0, ip
    1f90:	00001d4c 	andeq	r1, r0, ip, asr #26
    1f94:	00000000 	andeq	r0, r0, r0
    1f98:	00000012 	andeq	r0, r0, r2, lsl r0
    1f9c:	0000000c 	andeq	r0, r0, ip
    1fa0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1fa4:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
    1fa8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1fac:	0000000c 	andeq	r0, r0, ip
    1fb0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	00000026 	andeq	r0, r0, r6, lsr #32
    1fbc:	0000000c 	andeq	r0, r0, ip
    1fc0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1fc4:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
    1fc8:	00000040 	andeq	r0, r0, r0, asr #32
    1fcc:	00000014 	andeq	r0, r0, r4, lsl r0
    1fd0:	00001d4c 	andeq	r1, r0, ip, asr #26
    1fd4:	00000000 	andeq	r0, r0, r0
    1fd8:	00000038 	andeq	r0, r0, r8, lsr r0
    1fdc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1fe0:	00018e02 	andeq	r8, r1, r2, lsl #28
    1fe4:	0000000c 	andeq	r0, r0, ip
    1fe8:	00001d4c 	andeq	r1, r0, ip, asr #26
    1fec:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    1ff0:	00000020 	andeq	r0, r0, r0, lsr #32
    1ff4:	0000000c 	andeq	r0, r0, ip
    1ff8:	00001d4c 	andeq	r1, r0, ip, asr #26
    1ffc:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
    2000:	00000004 	andeq	r0, r0, r4
    2004:	0000000c 	andeq	r0, r0, ip
    2008:	00001d4c 	andeq	r1, r0, ip, asr #26
    200c:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
    2010:	00000020 	andeq	r0, r0, r0, lsr #32
    2014:	0000000c 	andeq	r0, r0, ip
    2018:	00001d4c 	andeq	r1, r0, ip, asr #26
    201c:	0800246c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp}
    2020:	00000004 	andeq	r0, r0, r4
    2024:	0000000c 	andeq	r0, r0, ip
    2028:	00001d4c 	andeq	r1, r0, ip, asr #26
    202c:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
    2030:	0000001c 	andeq	r0, r0, ip, lsl r0
    2034:	0000000c 	andeq	r0, r0, ip
    2038:	00001d4c 	andeq	r1, r0, ip, asr #26
    203c:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
    2040:	00000004 	andeq	r0, r0, r4
    2044:	0000000c 	andeq	r0, r0, ip
    2048:	00001d4c 	andeq	r1, r0, ip, asr #26
    204c:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
    2050:	0000001c 	andeq	r0, r0, ip, lsl r0
    2054:	0000000c 	andeq	r0, r0, ip
    2058:	00001d4c 	andeq	r1, r0, ip, asr #26
    205c:	080024ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, sp}
    2060:	00000004 	andeq	r0, r0, r4
    2064:	00000014 	andeq	r0, r0, r4, lsl r0
    2068:	00001d4c 	andeq	r1, r0, ip, asr #26
    206c:	00000000 	andeq	r0, r0, r0
    2070:	000000a8 	andeq	r0, r0, r8, lsr #1
    2074:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    2078:	00018e02 	andeq	r8, r1, r2, lsl #28
    207c:	0000000c 	andeq	r0, r0, ip
    2080:	00001d4c 	andeq	r1, r0, ip, asr #26
    2084:	00000000 	andeq	r0, r0, r0
    2088:	0000005c 	andeq	r0, r0, ip, asr r0
    208c:	0000000c 	andeq	r0, r0, ip
    2090:	00001d4c 	andeq	r1, r0, ip, asr #26
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000005c 	andeq	r0, r0, ip, asr r0
    209c:	0000000c 	andeq	r0, r0, ip
    20a0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20a4:	00000000 	andeq	r0, r0, r0
    20a8:	00000020 	andeq	r0, r0, r0, lsr #32
    20ac:	0000000c 	andeq	r0, r0, ip
    20b0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	00000004 	andeq	r0, r0, r4
    20bc:	0000000c 	andeq	r0, r0, ip
    20c0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20c4:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
    20c8:	00000020 	andeq	r0, r0, r0, lsr #32
    20cc:	0000000c 	andeq	r0, r0, ip
    20d0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20d4:	080024d0 	stmdaeq	r0, {r4, r6, r7, sl, sp}
    20d8:	00000004 	andeq	r0, r0, r4
    20dc:	0000000c 	andeq	r0, r0, ip
    20e0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20e4:	00000000 	andeq	r0, r0, r0
    20e8:	00000044 	andeq	r0, r0, r4, asr #32
    20ec:	0000000c 	andeq	r0, r0, ip
    20f0:	00001d4c 	andeq	r1, r0, ip, asr #26
    20f4:	00000000 	andeq	r0, r0, r0
    20f8:	00000042 	andeq	r0, r0, r2, asr #32
    20fc:	0000000c 	andeq	r0, r0, ip
    2100:	00001d4c 	andeq	r1, r0, ip, asr #26
    2104:	00000000 	andeq	r0, r0, r0
    2108:	00000006 	andeq	r0, r0, r6
    210c:	0000000c 	andeq	r0, r0, ip
    2110:	00001d4c 	andeq	r1, r0, ip, asr #26
    2114:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    2118:	0000000a 	andeq	r0, r0, sl
    211c:	0000000c 	andeq	r0, r0, ip
    2120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2124:	7c020001 	stcvc	0, cr0, [r2], {1}
    2128:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    212c:	0000000c 	andeq	r0, r0, ip
    2130:	0000211c 	andeq	r2, r0, ip, lsl r1
    2134:	080024e0 	stmdaeq	r0, {r5, r6, r7, sl, sp}
    2138:	00000020 	andeq	r0, r0, r0, lsr #32
    213c:	00000018 	andeq	r0, r0, r8, lsl r0
    2140:	0000211c 	andeq	r2, r0, ip, lsl r1
    2144:	08002500 	stmdaeq	r0, {r8, sl, sp}
    2148:	00000024 	andeq	r0, r0, r4, lsr #32
    214c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    2150:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2154:	00018e02 	andeq	r8, r1, r2, lsl #28
    2158:	0000000c 	andeq	r0, r0, ip
    215c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2160:	7c020001 	stcvc	0, cr0, [r2], {1}
    2164:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2168:	00000024 	andeq	r0, r0, r4, lsr #32
    216c:	00002158 	andeq	r2, r0, r8, asr r1
    2170:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
    2174:	00000174 	andeq	r0, r0, r4, ror r1
    2178:	84280e42 	strthi	r0, [r8], #-3650	; 0xfffff1be
    217c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    2180:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    2184:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    2188:	0ea60201 	cdpeq	2, 10, cr0, cr6, cr1, {0}
    218c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2190:	00000018 	andeq	r0, r0, r8, lsl r0
    2194:	00002158 	andeq	r2, r0, r8, asr r1
    2198:	00000000 	andeq	r0, r0, r0
    219c:	00000070 	andeq	r0, r0, r0, ror r0
    21a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    21a4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    21a8:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
       4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c <_Minimum_Stack_Size-0xf4>
}
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	6f437700 	svcvs	0x00437700
      14:	00746e75 	rsbseq	r6, r4, r5, ror lr
      18:	5f434352 	svcpl	0x00434352
      1c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
      20:	6f434b4c 	svcvs	0x00434b4c
    bTmp = bByte/10;
      24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      28:	70776700 	rsbsvc	r6, r7, r0, lsl #14
      2c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      30:	66754254 			; <UNDEFINED> instruction: 0x66754254
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	00726566 	rsbseq	r6, r2, r6, ror #10
      38:	5f434352 	svcpl	0x00434352
      3c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
      40:	67007469 	strvs	r7, [r0, -r9, ror #8]
}
      44:	54323375 	ldrtpl	r3, [r2], #-885	; 0xfffffc8b
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
      4c:	756f4367 	strbvc	r4, [pc, #-871]!	; fffffced <SCS_BASE+0x1fff1ced>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      54:	00736d31 	rsbseq	r6, r3, r1, lsr sp
      58:	6e69616d 	powvsez	f6, f1, #5.0


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      5c:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
      60:	00525253 	subseq	r5, r2, r3, asr r2
      64:	4f495047 	svcmi	0x00495047
      68:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 70 <_Minimum_Stack_Size-0x90>
      6c:	70620065 	rsbvc	r0, r2, r5, rrx
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
      70:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	00646e61 	rsbeq	r6, r4, r1, ror #28
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
      78:	61656c43 	cmnvs	r5, r3, asr #24
      7c:	66754272 			; <UNDEFINED> instruction: 0x66754272
    }
          
    if(status != FLASH_BUSY)
      80:	32726566 	rsbscc	r6, r2, #427819008	; 0x19800000
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      84:	47003635 	smladxmi	r0, r5, r6, r3
      88:	5f4f4950 	svcpl	0x004f4950
      8c:	006e6950 	rsbeq	r6, lr, r0, asr r9
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	5f425355 	svcpl	0x00425355
      94:	5f447854 	svcpl	0x00447854
      98:	5f636544 	svcpl	0x00636544
      9c:	46003855 			; <UNDEFINED> instruction: 0x46003855
      a0:	454c4941 	strbmi	r4, [ip, #-2369]	; 0xfffff6bf
      a4:	75460044 	strbvc	r0, [r6, #-68]	; 0xffffffbc
      a8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
      ac:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
      b4:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	5f485341 	svcpl	0x00485341
      bc:	4f525245 	svcmi	0x00525245
      break; 
      
    default:
      break;
  }
}
      c0:	52575f52 	subspl	r5, r7, #328	; 0x148
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	536c0050 	cmnpl	ip, #80	; 0x50
      c8:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
      cc:	00617461 	rsbeq	r7, r1, r1, ror #8
      d0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      d4:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
      d8:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
      dc:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
      e0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
      e4:	4a007375 	bmi	1cec0 <__Stack_Size+0x1cac0>
      e8:	41706d75 	cmnmi	r0, r5, ror sp
      ec:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
      f0:	52007373 	andpl	r7, r0, #-872415231	; 0xcc000001
      f4:	505f4343 	subspl	r4, pc, r3, asr #6
      f8:	6f434c4c 	svcvs	0x00434c4c
      fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     100:	41535500 	cmpmi	r3, r0, lsl #10
     104:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     108:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
     10c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     110:	77670068 	strbvc	r0, [r7, -r8, rrx]!
     114:	6f547852 	svcvs	0x00547852
     118:	436c6174 	cmnmi	ip, #116, 2
     11c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     120:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     124:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     128:	6172656e 	cmnvs	r2, lr, ror #10
     12c:	79536574 	ldmdbvc	r3, {r2, r4, r5, r6, r8, sl, sp, lr}^
     130:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     134:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     138:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     13c:	65505f4d 	ldrbvs	r5, [r0, #-3917]	; 0xfffff0b3
     140:	646f6972 	strbtvs	r6, [pc], #-2418	; 148 <_Minimum_Stack_Size+0x48>
     144:	6d696c00 	stclvs	12, cr6, [r9, #-0]
     148:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
     14c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     150:	6f74535f 	svcvs	0x0074535f
     154:	74694270 	strbtvc	r4, [r9], #-624	; 0xfffffd90
     158:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     15c:	5f485341 	svcpl	0x00485341
     160:	66657250 			; <UNDEFINED> instruction: 0x66657250
     164:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     168:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     16c:	6d437265 	sfmvs	f7, 2, [r3, #-404]	; 0xfffffe6c
     170:	61620064 	cmnvs	r2, r4, rrx
     174:	756e6475 	strbvc	r6, [lr, #-1141]!	; 0xfffffb8b
     178:	5047006d 	subpl	r0, r7, sp, rrx
     17c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     180:	0074696e 	rsbseq	r6, r4, lr, ror #18
     184:	5f434352 	svcpl	0x00434352
     188:	4b4c4350 	blmi	1310ed0 <__Stack_Size+0x1310ad0>
     18c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     190:	00676966 	rsbeq	r6, r7, r6, ror #18
     194:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
     198:	6544676e 	strbvs	r6, [r4, #-1902]	; 0xfffff892
     19c:	0079616c 	rsbseq	r6, r9, ip, ror #2
     1a0:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
     1a4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     1a8:	47007375 	smlsdxmi	r0, r5, r3, r7
     1ac:	5f4f4950 	svcpl	0x004f4950
     1b0:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     1b4:	4d325f64 	ldcmi	15, cr5, [r2, #-400]!	; 0xfffffe70
     1b8:	46007a48 	strmi	r7, [r0], -r8, asr #20
     1bc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     1c0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     1c4:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     1c8:	47006761 	strmi	r6, [r0, -r1, ror #14]
     1cc:	00525054 	subseq	r5, r2, r4, asr r0
     1d0:	5f434352 	svcpl	0x00434352
     1d4:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     1d8:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     1dc:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     1e0:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     1e4:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     1e8:	79545f4d 	ldmdbvc	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     1ec:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     1f0:	53550066 	cmppl	r5, #102	; 0x66
     1f4:	5f545241 	svcpl	0x00545241
     1f8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     1fc:	5f425355 	svcpl	0x00425355
     200:	48447854 	stmdami	r4, {r2, r4, r6, fp, ip, sp, lr}^
     204:	36317865 	ldrtcc	r7, [r1], -r5, ror #16
     208:	41535500 	cmpmi	r3, r0, lsl #10
     20c:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     210:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     214:	00657461 	rsbeq	r7, r5, r1, ror #8
     218:	45555254 	ldrbmi	r5, [r5, #-596]	; 0xfffffdac
     21c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     220:	6f6c435f 	svcvs	0x006c435f
     224:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     228:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     22c:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
     230:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     234:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     238:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     23c:	54444200 	strbpl	r4, [r4], #-512	; 0xfffffe00
     240:	75760052 	ldrbvc	r0, [r6, #-82]!	; 0xffffffae
     244:	4e003631 	mcrmi	6, 0, r3, cr0, cr1, {1}
     248:	5f434956 	svcpl	0x00434956
     24c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     250:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     254:	00666544 	rsbeq	r6, r6, r4, asr #10
     258:	6e655362 	cdpvs	3, 6, cr5, cr5, cr2, {3}
     25c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     260:	43430061 	movtmi	r0, #12385	; 0x3061
     264:	43003152 	movwmi	r3, #338	; 0x152
     268:	00325243 	eorseq	r5, r2, r3, asr #4
     26c:	33524343 	cmpcc	r2, #201326593	; 0xc000001
     270:	52434300 	subpl	r4, r3, #0, 6
     274:	43430034 	movtmi	r0, #12340	; 0x3034
     278:	0031524d 	eorseq	r5, r1, sp, asr #4
     27c:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     280:	50470032 	subpl	r0, r7, r2, lsr r0
     284:	535f4f49 	cmppl	pc, #292	; 0x124
     288:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     28c:	4d30315f 	ldfmis	f3, [r0, #-380]!	; 0xfffffe84
     290:	67007a48 	strvs	r7, [r0, -r8, asr #20]
     294:	64644177 	strbtvs	r4, [r4], #-375	; 0xfffffe89
     298:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     29c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     2a0:	00726574 	rsbseq	r6, r2, r4, ror r5
     2a4:	41746f4e 	cmnmi	r4, lr, asr #30
     2a8:	49007070 	stmdbmi	r0, {r4, r5, r6, ip, sp, lr}
     2ac:	5f474457 	svcpl	0x00474457
     2b0:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     2b4:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
     2b8:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
     2bc:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
     2c0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     2c4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     2c8:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
     2cc:	53770061 	cmnpl	r7, #97	; 0x61
     2d0:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
     2d4:	00617461 	rsbeq	r7, r1, r1, ror #8
     2d8:	52706267 	rsbspl	r6, r0, #1879048198	; 0x70000006
     2dc:	66754278 			; <UNDEFINED> instruction: 0x66754278
     2e0:	00726566 	rsbseq	r6, r2, r6, ror #10
     2e4:	4f495047 	svcmi	0x00495047
     2e8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     2ec:	73746942 	cmnvc	r4, #1081344	; 0x108000
     2f0:	42535500 	subsmi	r5, r3, #0, 10
     2f4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     2f8:	4c460074 	mcrrmi	0, 7, r0, r6, cr4
     2fc:	53485341 	movtpl	r5, #33601	; 0x8341
     300:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     304:	50470073 	subpl	r0, r7, r3, ror r0
     308:	505f4f49 	subspl	r4, pc, r9, asr #30
     30c:	65526e69 	ldrbvs	r6, [r2, #-3689]	; 0xfffff197
     310:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
     314:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     318:	53550067 	cmppl	r5, #103	; 0x67
     31c:	5f545241 	svcpl	0x00545241
     320:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     324:	5367616c 	cmnpl	r7, #108, 2
     328:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     32c:	44620073 	strbtmi	r0, [r2], #-115	; 0xffffff8d
     330:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     334:	61745365 	cmnvs	r4, r5, ror #6
     338:	47006574 	smlsdxmi	r0, r4, r5, r6
     33c:	5f4f4950 	svcpl	0x004f4950
     340:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     344:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0xfffff6a1
     348:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     34c:	5079726f 	rsbspl	r7, r9, pc, ror #4
     350:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     354:	74536d61 	ldrbvc	r6, [r3], #-3425	; 0xfffff29f
     358:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     35c:	55776700 	ldrbpl	r6, [r7, #-1792]!	; 0xfffff900
     360:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     364:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     368:	72745065 	rsbsvc	r5, r4, #101	; 0x65
     36c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     370:	6f4d5f4f 	svcvs	0x004d5f4f
     374:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     378:	46005550 			; <UNDEFINED> instruction: 0x46005550
     37c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     380:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     384:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
     388:	42535500 	subsmi	r5, r3, #0, 10
     38c:	4478545f 	ldrbtmi	r5, [r8], #-1119	; 0xfffffba1
     390:	33786548 	cmncc	r8, #72, 10	; 0x12000000
     394:	50470032 	subpl	r0, r7, r2, lsr r0
     398:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 27c <_Minimum_Stack_Size+0x17c>
     39c:	5f65646f 	svcpl	0x0065646f
     3a0:	5f74754f 	svcpl	0x0074754f
     3a4:	4500444f 	strmi	r4, [r0, #-1103]	; 0xfffffbb1
     3a8:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
     3ac:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     3b0:	00726574 	rsbseq	r6, r2, r4, ror r5
     3b4:	44785262 	ldrbtmi	r5, [r8], #-610	; 0xfffffd9e
     3b8:	00617461 	rsbeq	r7, r1, r1, ror #8
     3bc:	4f72624e 	svcmi	0x0072624e
     3c0:	67615066 	strbvs	r5, [r1, -r6, rrx]!
     3c4:	75760065 	ldrbvc	r0, [r6, #-101]!	; 0xffffff9b
     3c8:	54003233 	strpl	r3, [r0], #-563	; 0xfffffdcd
     3cc:	505f4d49 	subspl	r4, pc, r9, asr #26
     3d0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     3d4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     3d8:	414c4600 	cmpmi	ip, r0, lsl #12
     3dc:	425f4853 	subsmi	r4, pc, #5439488	; 0x530000
     3e0:	00595355 	subseq	r5, r9, r5, asr r3
     3e4:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
     3e8:	42535500 	subsmi	r5, r3, #0, 10
     3ec:	4478545f 	ldrbtmi	r5, [r8], #-1119	; 0xfffffba1
     3f0:	38786548 	ldmdacc	r8!, {r3, r6, r8, sl, sp, lr}^
     3f4:	414c4600 	cmpmi	ip, r0, lsl #12
     3f8:	555f4853 	ldrbpl	r4, [pc, #-2131]	; fffffbad <SCS_BASE+0x1fff1bad>
     3fc:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     400:	5047006b 	subpl	r0, r7, fp, rrx
     404:	525f4f49 	subspl	r4, pc, #292	; 0x124
     408:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     40c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     410:	61746144 	cmnvs	r4, r4, asr #2
     414:	00746942 	rsbseq	r6, r4, r2, asr #18
     418:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     41c:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     420:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     424:	44410066 	strbmi	r0, [r1], #-102	; 0xffffff9a
     428:	53455244 	movtpl	r5, #21060	; 0x5244
     42c:	00444553 	subeq	r4, r4, r3, asr r5
     430:	5f4d4954 	svcpl	0x004d4954
     434:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
     438:	69746974 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     43c:	6f436e6f 	svcvs	0x00436e6f
     440:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
     444:	62670072 	rsbvs	r0, r7, #114	; 0x72
     448:	73616c46 	cmnvc	r1, #17920	; 0x4600
     44c:	776f4468 	strbvc	r4, [pc, -r8, ror #8]!
     450:	616f6c6e 	cmnvs	pc, lr, ror #24
     454:	61745364 	cmnvs	r4, r4, ror #6
     458:	54007472 	strpl	r7, [r0], #-1138	; 0xfffffb8e
     45c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     460:	4600646d 	strmi	r6, [r0], -sp, ror #8
     464:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     468:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2f4 <_Minimum_Stack_Size+0x1f4>
     46c:	54454c50 	strbpl	r4, [r5], #-3152	; 0xfffff3b0
     470:	53550045 	cmppl	r5, #69	; 0x45
     474:	5f545241 	svcpl	0x00545241
     478:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     47c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     480:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     484:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
     488:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     48c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     490:	00657261 	rsbeq	r7, r5, r1, ror #4
     494:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
     498:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     49c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     4a0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     4a4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     4a8:	00657275 	rsbeq	r7, r5, r5, ror r2
     4ac:	41534944 	cmpmi	r3, r4, asr #18
     4b0:	00454c42 	subeq	r4, r5, r2, asr #24
     4b4:	5f434352 	svcpl	0x00434352
     4b8:	31425041 	cmpcc	r2, r1, asr #32
     4bc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     4c0:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     4c4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     4c8:	7500646d 	strvc	r6, [r0, #-1133]	; 0xfffffb93
     4cc:	78526273 	ldmdavc	r2, {r0, r1, r4, r5, r6, r9, sp, lr}^
     4d0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     4d4:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     4d8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     4dc:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
     4e0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
     4e4:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     4e8:	70620065 	rsbvc	r0, r2, r5, rrx
     4ec:	00747344 	rsbseq	r7, r4, r4, asr #6
     4f0:	5f4d4954 	svcpl	0x004d4954
     4f4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     4f8:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
     4fc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     500:	53557767 	cmppl	r5, #27000832	; 0x19c0000
     504:	52545241 	subspl	r5, r4, #268435460	; 0x10000004
     508:	50646165 	rsbpl	r6, r4, r5, ror #2
     50c:	55007274 	strpl	r7, [r0, #-628]	; 0xfffffd8c
     510:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     514:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 51c <__Stack_Size+0x11c>
     518:	4d530065 	ldclmi	0, cr0, [r3, #-404]	; 0xfffffe6c
     51c:	43005243 	movwmi	r5, #579	; 0x243
     520:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     524:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     528:	61726142 	cmnvs	r2, r2, asr #2
     52c:	69675c6d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
     530:	704f5c74 	subvc	r5, pc, r4, ror ip	; <UNPREDICTABLE>
     534:	4d436e65 	stclmi	14, cr6, [r3, #-404]	; 0xfffffe6c
     538:	34302e39 	ldrtcc	r2, [r0], #-3641	; 0xfffff1c7
     53c:	6472415f 	ldrbtvs	r4, [r2], #-351	; 0xfffffea1
     540:	6f6f4275 	svcvs	0x006f4275
     544:	43520074 	cmpmi	r2, #116	; 0x74
     548:	53485f43 	movtpl	r5, #36675	; 0x8f43
     54c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     550:	00676966 	rsbeq	r6, r7, r6, ror #18
     554:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     558:	61485f54 	cmpvs	r8, r4, asr pc
     55c:	61776472 	cmnvs	r7, r2, ror r4
     560:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
     564:	6f43776f 	svcvs	0x0043776f
     568:	6f72746e 	svcvs	0x0072746e
     56c:	7767006c 	strbvc	r0, [r7, -ip, rrx]!
     570:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     574:	6f725065 	svcvs	0x00725065
     578:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
     57c:	61506465 	cmpvs	r0, r5, ror #8
     580:	00736567 	rsbseq	r6, r3, r7, ror #10
     584:	45574f50 	ldrbmi	r4, [r7, #-3920]	; 0xfffff0b0
     588:	00444552 	subeq	r4, r4, r2, asr r5
     58c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     590:	6f4c5f48 	svcvs	0x004c5f48
     594:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     598:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     59c:	5f434352 	svcpl	0x00434352
     5a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5a4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     5a8:	6f697461 	svcvs	0x00697461
     5ac:	7567006e 	strbvc	r0, [r7, #-110]!	; 0xffffff92
     5b0:	69543233 	ldmdbvs	r4, {r0, r1, r4, r5, r9, ip, sp}^
     5b4:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
     5b8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     5bc:	31726574 	cmncc	r2, r4, ror r5
     5c0:	545f736d 	ldrbpl	r7, [pc], #-877	; 5c8 <__Stack_Size+0x1c8>
     5c4:	49006478 	stmdbmi	r0, {r3, r4, r5, r6, sl, sp, lr}
     5c8:	5f474457 	svcpl	0x00474457
     5cc:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
     5d0:	616f6c65 	cmnvs	pc, r5, ror #24
     5d4:	62670064 	rsbvs	r0, r7, #100	; 0x64
     5d8:	6c467349 	mcrrvs	3, 4, r7, r6, cr9
     5dc:	4c687361 	stclmi	3, cr7, [r8], #-388	; 0xfffffe7c
     5e0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     5e4:	4f495047 	svcmi	0x00495047
     5e8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     5ec:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     5f0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
     5f4:	49006572 	stmdbmi	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     5f8:	5f474457 	svcpl	0x00474457
     5fc:	50746553 	rsbspl	r6, r4, r3, asr r5
     600:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     604:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     608:	44785200 	ldrbtmi	r5, [r8], #-512	; 0xfffffe00
     60c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     610:	72467265 	subvc	r7, r6, #1342177286	; 0x50000006
     614:	6f486d6f 	svcvs	0x00486d6f
     618:	49007473 	stmdbmi	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     61c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     620:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     624:	00736d31 	rsbseq	r6, r3, r1, lsr sp
     628:	5f434352 	svcpl	0x00434352
     62c:	4b4c4348 	blmi	1311354 <__Stack_Size+0x1310f54>
     630:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     634:	62006769 	andvs	r6, r0, #27525120	; 0x1a40000
     638:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
     63c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     640:	52495f43 	subpl	r5, r9, #268	; 0x10c
     644:	61684351 	cmnvs	r8, r1, asr r3
     648:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     64c:	43435200 	movtmi	r5, #12800	; 0x3200
     650:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     654:	6f43314b 	svcvs	0x0043314b
     658:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     65c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     660:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     664:	6f007469 	svcvs	0x00007469
     668:	6f697470 	svcvs	0x00697470
     66c:	6267006e 	rsbvs	r0, r7, #110	; 0x6e
     670:	4c584470 	cfldrdmi	mvd4, [r8], {112}	; 0x70
     674:	61746144 	cmnvs	r4, r4, asr #2
     678:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     67c:	47007265 	strmi	r7, [r0, -r5, ror #4]
     680:	5f4f4950 	svcpl	0x004f4950
     684:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     688:	5f46415f 	svcpl	0x0046415f
     68c:	5400444f 	strpl	r4, [r0], #-1103	; 0xfffffbb1
     690:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     694:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     698:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
     69c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6a0:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
     6a4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     6a8:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
     6ac:	50470072 	subpl	r0, r7, r2, ror r0
     6b0:	525f4f49 	subspl	r4, pc, #292	; 0x124
     6b4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     6b8:	73746942 	cmnvc	r4, #1081344	; 0x108000
     6bc:	656c4300 	strbvs	r4, [ip, #-768]!	; 0xfffffd00
     6c0:	69547261 	ldmdbvs	r4, {r0, r5, r6, r9, ip, sp, lr}^
     6c4:	754f656d 	strbvc	r6, [pc, #-1389]	; 15f <_Minimum_Stack_Size+0x5f>
     6c8:	66754274 			; <UNDEFINED> instruction: 0x66754274
     6cc:	00726566 	rsbseq	r6, r2, r6, ror #10
     6d0:	53414c46 	movtpl	r4, #7238	; 0x1c46
     6d4:	65535f48 	ldrbvs	r5, [r3, #-3912]	; 0xfffff0b8
     6d8:	74614c74 	strbtvc	r4, [r1], #-3188	; 0xfffff38c
     6dc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     6e0:	414c4600 	cmpmi	ip, r0, lsl #12
     6e4:	535f4853 	cmppl	pc, #5439488	; 0x530000
     6e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     6ec:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
     6f0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     6f4:	54495f6b 	strbpl	r5, [r9], #-3947	; 0xfffff095
     6f8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6fc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     700:	555f4343 	ldrbpl	r4, [pc, #-835]	; 3c5 <_Minimum_Stack_Size+0x2c5>
     704:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
     708:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     70c:	00676966 	rsbeq	r6, r7, r6, ror #18
     710:	5f434352 	svcpl	0x00434352
     714:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     718:	5367616c 	cmnpl	r7, #108, 2
     71c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     720:	50470073 	subpl	r0, r7, r3, ror r0
     724:	70534f49 	subsvc	r4, r3, r9, asr #30
     728:	5f646565 	svcpl	0x00646565
     72c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     730:	00666544 	rsbeq	r6, r6, r4, asr #10
     734:	4f495047 	svcmi	0x00495047
     738:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 740 <__Stack_Size+0x340>
     73c:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     740:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0xffffffb2
     744:	56524553 			; <UNDEFINED> instruction: 0x56524553
     748:	00304445 	eorseq	r4, r0, r5, asr #8
     74c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     750:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     754:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
     758:	56524553 			; <UNDEFINED> instruction: 0x56524553
     75c:	00324445 	eorseq	r4, r2, r5, asr #8
     760:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     764:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     768:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
     76c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     770:	00344445 	eorseq	r4, r4, r5, asr #8
     774:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     778:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     77c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     780:	56524553 			; <UNDEFINED> instruction: 0x56524553
     784:	00364445 	eorseq	r4, r6, r5, asr #8
     788:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     78c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     790:	45520074 	ldrbmi	r0, [r2, #-116]	; 0xffffff8c
     794:	56524553 			; <UNDEFINED> instruction: 0x56524553
     798:	00384445 	eorseq	r4, r8, r5, asr #8
     79c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     7a0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     7a4:	50470039 	subpl	r0, r7, r9, lsr r0
     7a8:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 68c <__Stack_Size+0x28c>
     7ac:	5f65646f 	svcpl	0x0065646f
     7b0:	505f4641 	subspl	r4, pc, r1, asr #12
     7b4:	6f6c0050 	svcvs	0x006c0050
     7b8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     7bc:	4400746e 	strmi	r7, [r0], #-1134	; 0xfffffb92
     7c0:	0052414d 	subseq	r4, r2, sp, asr #2
     7c4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     7c8:	52455f48 	subpl	r5, r5, #72, 30	; 0x120
     7cc:	5f524f52 	svcpl	0x00524f52
     7d0:	50004750 	andpl	r4, r0, r0, asr r7
     7d4:	45535341 	ldrbmi	r5, [r3, #-833]	; 0xfffffcbf
     7d8:	62670044 	rsbvs	r0, r7, #68	; 0x44
     7dc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     7e0:	68430074 	stmdavs	r3, {r2, r4, r5, r6}^
     7e4:	546b6365 	strbtpl	r6, [fp], #-869	; 0xfffffc9b
     7e8:	4f656d69 	svcmi	0x00656d69
     7ec:	55007475 	strpl	r7, [r0, #-1141]	; 0xfffffb8b
     7f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     7f4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     7f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     7fc:	41460067 	cmpmi	r6, r7, rrx
     800:	0045534c 	subeq	r5, r5, ip, asr #6
     804:	6e457767 	cdpvs	7, 4, cr7, cr5, cr7, {3}
     808:	64644164 	strbtvs	r4, [r4], #-356	; 0xfffffe9c
     80c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     810:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     814:	00726574 	rsbseq	r6, r2, r4, ror r5
     818:	5f4d4954 	svcpl	0x004d4954
     81c:	6f435449 	svcvs	0x00435449
     820:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     824:	73795300 	cmnvc	r9, #0, 6
     828:	6b636954 	blvs	18dad80 <__Stack_Size+0x18da980>
     82c:	756f435f 	strbvc	r4, [pc, #-863]!	; 4d5 <__Stack_Size+0xd5>
     830:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     834:	00646d43 	rsbeq	r6, r4, r3, asr #26
     838:	65527767 	ldrbvs	r7, [r2, #-1895]	; 0xfffff899
     83c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     840:	68436465 	stmdavs	r3, {r0, r2, r5, r6, sl, sp, lr}^
     844:	536b6365 	cmnpl	fp, #-1811939327	; 0x94000001
     848:	72466d75 	subvc	r6, r6, #7488	; 0x1d40
     84c:	6f486d6f 	svcvs	0x00486d6f
     850:	55007473 	strpl	r7, [r0, #-1139]	; 0xfffffb8d
     854:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     858:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     85c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     860:	47006761 	strmi	r6, [r0, -r1, ror #14]
     864:	5f4f4950 	svcpl	0x004f4950
     868:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     86c:	00666544 	rsbeq	r6, r6, r4, asr #10
     870:	4f495047 	svcmi	0x00495047
     874:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     878:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     87c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     880:	42535500 	subsmi	r5, r3, #0, 10
     884:	5f78525f 	svcpl	0x0078525f
     888:	00746e43 	rsbseq	r6, r4, r3, asr #28
     88c:	5f434352 	svcpl	0x00434352
     890:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     894:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     898:	756f534b 	strbvc	r5, [pc, #-843]!	; 555 <__Stack_Size+0x155>
     89c:	00656372 	rsbeq	r6, r5, r2, ror r3
     8a0:	42414e45 	submi	r4, r1, #1104	; 0x450
     8a4:	4e00454c 	cfsh32mi	mvfx4, mvfx0, #44
     8a8:	5f434956 	svcpl	0x00434956
     8ac:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     8b0:	6e6e6168 	powvsez	f6, f6, #0.0
     8b4:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
     8b8:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
     8bc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     8c0:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
     8c4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     8c8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     8cc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     8d0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     8d4:	62735500 	rsbsvs	r5, r3, #0, 10
     8d8:	44706356 	ldrbtmi	r6, [r0], #-854	; 0xfffffcaa
     8dc:	6f637369 	svcvs	0x00637369
     8e0:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
     8e4:	43520074 	cmpmi	r2, #116	; 0x74
     8e8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     8ec:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     8f0:	0067616c 	rsbeq	r6, r7, ip, ror #2
     8f4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     8f8:	6f4d6c61 	svcvs	0x004d6c61
     8fc:	6f74696e 	svcvs	0x0074696e
     900:	62670072 	rsbvs	r0, r7, #114	; 0x72
     904:	574c5844 	strbpl	r5, [ip, -r4, asr #16]
     908:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     90c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     910:	00726574 	rsbseq	r6, r2, r4, ror r5
     914:	5f425355 	svcpl	0x00425355
     918:	53447854 	movtpl	r7, #18516	; 0x4854
     91c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     920:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     924:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     928:	6142656d 	cmpvs	r2, sp, ror #10
     92c:	74536573 	ldrbvc	r6, [r3], #-1395	; 0xfffffa8d
     930:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     934:	00657275 	rsbeq	r7, r5, r5, ror r2
     938:	5f6c7864 	svcpl	0x006c7864
     93c:	5f746567 	svcpl	0x00746567
     940:	64756162 	ldrbtvs	r6, [r5], #-354	; 0xfffffe9e
     944:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     948:	4e4f4300 	cdpmi	3, 4, cr4, cr15, cr0, {0}
     94c:	55474946 	strbpl	r4, [r7, #-2374]	; 0xfffff6ba
     950:	00444552 	subeq	r4, r4, r2, asr r5
     954:	4f495047 	svcmi	0x00495047
     958:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     95c:	70795474 	rsbsvc	r5, r9, r4, ror r4
     960:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     964:	736e7500 	cmnvc	lr, #0, 10
     968:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     96c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     970:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
     974:	00706d54 	rsbseq	r6, r0, r4, asr sp
     978:	4f495047 	svcmi	0x00495047
     97c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     980:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 523 <__Stack_Size+0x123>
     984:	7a484d30 	bvc	1213e4c <__Stack_Size+0x1213a4c>
     988:	41535500 	cmpmi	r3, r0, lsl #10
     98c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     990:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     994:	61727567 	cmnvs	r2, r7, ror #10
     998:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     99c:	73795300 	cmnvc	r9, #0, 6
     9a0:	6b636954 	blvs	18daef8 <__Stack_Size+0x18daaf8>
     9a4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     9a8:	6f6c6552 	svcvs	0x006c6552
     9ac:	5f006461 	svcpl	0x00006461
     9b0:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     9b4:	535f4543 	cmppl	pc, #281018368	; 0x10c00000
     9b8:	45544154 	ldrbmi	r4, [r4, #-340]	; 0xfffffeac
     9bc:	41535500 	cmpmi	r3, r0, lsl #10
     9c0:	445f5452 	ldrbmi	r5, [pc], #-1106	; 9c8 <__Stack_Size+0x5c8>
     9c4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     9c8:	754a0074 	strbvc	r0, [sl, #-116]	; 0xffffff8c
     9cc:	545f706d 	ldrbpl	r7, [pc], #-109	; 9d4 <__Stack_Size+0x5d4>
     9d0:	70415f6f 	subvc	r5, r1, pc, ror #30
     9d4:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
     9d8:	6f697461 	svcvs	0x00697461
     9dc:	564e006e 	strbpl	r0, [lr], -lr, rrx
     9e0:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
     9e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9e8:	61727567 	cmnvs	r2, r7, ror #10
     9ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     9f0:	434e5500 	movtmi	r5, #58624	; 0xe500
     9f4:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xfffff1b1
     9f8:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
     9fc:	53455200 	movtpl	r5, #20992	; 0x5200
     a00:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a04:	00303144 	eorseq	r3, r0, r4, asr #2
     a08:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     a0c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     a10:	52003131 	andpl	r3, r0, #1073741836	; 0x4000000c
     a14:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     a18:	31444556 	cmpcc	r4, r6, asr r5
     a1c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     a20:	56524553 			; <UNDEFINED> instruction: 0x56524553
     a24:	33314445 	teqcc	r1, #1157627904	; 0x45000000
     a28:	53455200 	movtpl	r5, #20992	; 0x5200
     a2c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a30:	00343144 	eorseq	r3, r4, r4, asr #2
     a34:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     a38:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     a3c:	52003531 	andpl	r3, r0, #205520896	; 0xc400000
     a40:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     a44:	31444556 	cmpcc	r4, r6, asr r5
     a48:	45520036 	ldrbmi	r0, [r2, #-54]	; 0xffffffca
     a4c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     a50:	37314445 	ldrcc	r4, [r1, -r5, asr #8]!
     a54:	53455200 	movtpl	r5, #20992	; 0x5200
     a58:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a5c:	00383144 	eorseq	r3, r8, r4, asr #2
     a60:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     a64:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     a68:	47003931 	smladxmi	r0, r1, r9, r3
     a6c:	5f4f4950 	svcpl	0x004f4950
     a70:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a74:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     a78:	6f697461 	svcvs	0x00697461
     a7c:	5355006e 	cmppl	r5, #110	; 0x6e
     a80:	5f545241 	svcpl	0x00545241
     a84:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a88:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a8c:	00666544 	rsbeq	r6, r6, r4, asr #10
     a90:	4349564e 	movtmi	r5, #38478	; 0x964e
     a94:	5152495f 	cmppl	r2, pc, asr r9
     a98:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     a9c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     aa0:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     aa4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     aa8:	55007974 	strpl	r7, [r0, #-2420]	; 0xfffff68c
     aac:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     ab0:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     ab4:	00797469 	rsbseq	r7, r9, r9, ror #8
     ab8:	5f434352 	svcpl	0x00434352
     abc:	32425041 	subcc	r5, r2, #65	; 0x41
     ac0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     ac4:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     ac8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     acc:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
     ad0:	525f4253 	subspl	r4, pc, #805306373	; 0x30000005
     ad4:	75425f78 	strbvc	r5, [r2, #-3960]	; 0xfffff088
     ad8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     adc:	65546200 	ldrbvs	r6, [r4, #-512]	; 0xfffffe00
     ae0:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     ae4:	00657461 	rsbeq	r7, r5, r1, ror #8
     ae8:	5f425355 	svcpl	0x00425355
     aec:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     af0:	00657479 	rsbeq	r7, r5, r9, ror r4
     af4:	5f434352 	svcpl	0x00434352
     af8:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     afc:	7000646d 	andvc	r6, r0, sp, ror #8
     b00:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     b04:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     b08:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     b0c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
     b10:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     b14:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     b18:	70795474 	rsbsvc	r5, r9, r4, ror r4
     b1c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     b20:	43776700 	cmnmi	r7, #0, 14
     b24:	75636c61 	strbvc	r6, [r3, #-3169]!	; 0xfffff39f
     b28:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
     b2c:	65684364 	strbvs	r4, [r8, #-868]!	; 0xfffffc9c
     b30:	75536b63 	ldrbvc	r6, [r3, #-2915]	; 0xfffff49d
     b34:	564e006d 	strbpl	r0, [lr], -sp, rrx
     b38:	505f4349 	subspl	r4, pc, r9, asr #6
     b3c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     b40:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     b44:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     b48:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     b4c:	47006769 	strmi	r6, [r0, -r9, ror #14]
     b50:	5f4f4950 	svcpl	0x004f4950
     b54:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     b58:	70620064 	rsbvc	r0, r2, r4, rrx
     b5c:	00637253 	rsbeq	r7, r3, r3, asr r2
     b60:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     b64:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     b68:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     b6c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     b70:	4100746e 	tstmi	r0, lr, ror #8
     b74:	43415454 	movtmi	r5, #5204	; 0x1454
     b78:	00444548 	subeq	r4, r4, r8, asr #10
     b7c:	6e69616d 	powvsez	f6, f1, #5.0
     b80:	414c4600 	cmpmi	ip, r0, lsl #12
     b84:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 339 <_Minimum_Stack_Size+0x239>
     b88:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
     b8c:	65676150 	strbvs	r6, [r7, #-336]!	; 0xfffffeb0
     b90:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     b94:	52495f43 	subpl	r5, r9, #268	; 0x10c
     b98:	61684351 	cmnvs	r8, r1, asr r3
     b9c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     ba0:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
     ba4:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ba8:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     bac:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     bb0:	53007974 	movwpl	r7, #2420	; 0x974
     bb4:	45505355 	ldrbmi	r5, [r0, #-853]	; 0xfffffcab
     bb8:	4445444e 	strbmi	r4, [r5], #-1102	; 0xfffffbb2
     bbc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     bc0:	6f4d5f4f 	svcvs	0x004d5f4f
     bc4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     bc8:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
     bcc:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
     bd0:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
     bd4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     bd8:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     bdc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     be0:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     be4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     be8:	6f437265 	svcvs	0x00437265
     bec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     bf0:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     bf4:	31314320 	teqcc	r1, r0, lsr #6
     bf8:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
     bfc:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     c00:	30363130 	eorscc	r3, r6, r0, lsr r1
     c04:	20393036 	eorscs	r3, r9, r6, lsr r0
     c08:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     c0c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     c10:	415b2029 	cmpmi	fp, r9, lsr #32
     c14:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffffeca <SCS_BASE+0x1fff1eca>
     c18:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     c1c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
     c20:	72622d35 	rsbvc	r2, r2, #3392	; 0xd40
     c24:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     c28:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     c2c:	6f697369 	svcvs	0x00697369
     c30:	3332206e 	teqcc	r2, #110	; 0x6e
     c34:	35313737 	ldrcc	r3, [r1, #-1847]!	; 0xfffff8c9
     c38:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     c3c:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     c40:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
     c44:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     c48:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     c4c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     c50:	672d2062 	strvs	r2, [sp, -r2, rrx]!
     c54:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     c58:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     c5c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     c60:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
     c64:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     c68:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     c6c:	44626700 	strbtmi	r6, [r2], #-1792	; 0xfffff900
     c70:	65524c58 	ldrbvs	r4, [r2, #-3160]	; 0xfffff3a8
     c74:	6f506461 	svcvs	0x00506461
     c78:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c7c:	546e0072 	strbtpl	r0, [lr], #-114	; 0xffffff8e
     c80:	00656d69 	rsbeq	r6, r5, r9, ror #26
     c84:	5f4d4954 	svcpl	0x004d4954
     c88:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     c8c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
     c90:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     c94:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0xfffff800
     c98:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     c9c:	53705574 	cmnpl	r0, #116, 10	; 0x1d000000
     ca0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     ca4:	74530073 	ldrbvc	r0, [r3], #-115	; 0xffffff8d
     ca8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     cac:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     cb0:	41535500 	cmpmi	r3, r0, lsl #10
     cb4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     cb8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     cbc:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     cc0:	434c0074 	movtmi	r0, #49268	; 0xc074
     cc4:	6400524b 	strvs	r5, [r0], #-587	; 0xfffffdb5
     cc8:	61426c78 	hvcvs	9928	; 0x26c8
     ccc:	61726475 	cmnvs	r2, r5, ror r4
     cd0:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
     cd4:	5f324d49 	svcpl	0x00324d49
     cd8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     cdc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ce0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     ce4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     ce8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     cec:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
     cf0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     cf4:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
     cf8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     cfc:	31663233 	cmncc	r6, r3, lsr r2
     d00:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     d04:	00632e74 	rsbeq	r2, r3, r4, ror lr
     d08:	5f425355 	svcpl	0x00425355
     d0c:	435f504c 	cmpmi	pc, #76	; 0x4c
     d10:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     d14:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     d18:	61485152 	cmpvs	r8, r2, asr r1
     d1c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     d20:	53550072 	cmppl	r5, #114	; 0x72
     d24:	5f545241 	svcpl	0x00545241
     d28:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     d2c:	61745354 	cmnvs	r4, r4, asr r3
     d30:	00737574 	rsbseq	r7, r3, r4, ror r5
     d34:	53555f5f 	cmppl	r5, #380	; 0x17c
     d38:	43444342 	movtmi	r4, #17218	; 0x4342
     d3c:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     d40:	41535500 	cmpmi	r3, r0, lsl #10
     d44:	5f315452 	svcpl	0x00315452
     d48:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d4c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d50:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     d54:	5f32414d 	svcpl	0x0032414d
     d58:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     d5c:	346c656e 	strbtcc	r6, [ip], #-1390	; 0xfffffa92
     d60:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     d64:	61485152 	cmpvs	r8, r2, asr r1
     d68:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     d6c:	53550072 	cmppl	r5, #114	; 0x72
     d70:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     d74:	5152495f 	cmppl	r2, pc, asr r9
     d78:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     d7c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     d80:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d84:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
     d88:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     d8c:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
     d90:	79530061 	ldmdbvc	r3, {r0, r5, r6}^
     d94:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     d98:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     d9c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     da0:	62737500 	rsbsvs	r7, r3, #0, 10
     da4:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     da8:	00632e63 	rsbeq	r2, r3, r3, ror #28
     dac:	74726956 	ldrbtvc	r6, [r2], #-2390	; 0xfffff6aa
     db0:	5f6c6175 	svcpl	0x006c6175
     db4:	5f6d6f43 	svcpl	0x006d6f43
     db8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     dbc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     dc0:	56676e69 	strbtpl	r6, [r7], -r9, ror #28
     dc4:	6f646e65 	svcvs	0x00646e65
     dc8:	69560072 	ldmdbvs	r6, {r1, r4, r5, r6}^
     dcc:	61757472 	cmnvs	r5, r2, ror r4
     dd0:	6f435f6c 	svcvs	0x00435f6c
     dd4:	6f505f6d 	svcvs	0x00505f6d
     dd8:	445f7472 	ldrbmi	r7, [pc], #-1138	; de0 <__Stack_Size+0x9e0>
     ddc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     de0:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     de4:	70697263 	rsbvc	r7, r9, r3, ror #4
     de8:	00726f74 	rsbseq	r6, r2, r4, ror pc
     dec:	74726956 	ldrbtvc	r6, [r2], #-2390	; 0xfffff6aa
     df0:	5f6c6175 	svcpl	0x006c6175
     df4:	5f6d6f43 	svcpl	0x006d6f43
     df8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     dfc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e00:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     e04:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     e08:	69560044 	ldmdbvs	r6, {r2, r6}^
     e0c:	61757472 	cmnvs	r5, r2, ror r4
     e10:	6f435f6c 	svcvs	0x00435f6c
     e14:	6f505f6d 	svcvs	0x00505f6d
     e18:	535f7472 	cmppl	pc, #1912602624	; 0x72000000
     e1c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     e20:	6f725067 	svcvs	0x00725067
     e24:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
     e28:	72695600 	rsbvc	r5, r9, #0, 12
     e2c:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
     e30:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; cbc <__Stack_Size+0x8bc>
     e34:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
     e38:	6f435f74 	svcvs	0x00435f74
     e3c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e40:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     e44:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
     e48:	5600726f 	strpl	r7, [r0], -pc, ror #4
     e4c:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
     e50:	435f6c61 	cmpmi	pc, #24832	; 0x6100
     e54:	505f6d6f 	subspl	r6, pc, pc, ror #26
     e58:	5f74726f 	svcpl	0x0074726f
     e5c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     e60:	6553676e 	ldrbvs	r6, [r3, #-1902]	; 0xfffff892
     e64:	6c616972 	stclvs	9, cr6, [r1], #-456	; 0xfffffe38
     e68:	33504500 	cmpcc	r0, #0, 10
     e6c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     e70:	6c61435f 	stclvs	3, cr4, [r1], #-380	; 0xfffffe84
     e74:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
     e78:	7375006b 	cmnvc	r5, #107	; 0x6b
     e7c:	6e655f62 	cdpvs	15, 6, cr5, cr5, cr2, {3}
     e80:	632e7064 			; <UNDEFINED> instruction: 0x632e7064
     e84:	6c466c00 	mcrrvs	12, 0, r6, r6, cr0
     e88:	43687361 	cmnmi	r8, #-2080374783	; 0x84000001
     e8c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     e90:	414c4600 	cmpmi	ip, r0, lsl #12
     e94:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     e98:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     e9c:	6f576d61 	svcvs	0x00576d61
     ea0:	57006472 	smlsdxpl	r0, r2, r4, r6
     ea4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     ea8:	73616c46 	cmnvc	r1, #17920	; 0x4600
     eac:	00343668 	eorseq	r3, r4, r8, ror #12
     eb0:	696e6946 	stmdbvs	lr!, {r1, r2, r6, r8, fp, sp, lr}^
     eb4:	6f546873 	svcvs	0x00546873
     eb8:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     ebc:	42535500 	subsmi	r5, r3, #0, 10
     ec0:	4c49535f 	mcrrmi	3, 5, r5, r9, cr15
     ec4:	6165525f 	cmnvs	r5, pc, asr r2
     ec8:	50450064 	subpl	r0, r5, r4, rrx
     ecc:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
     ed0:	6c61435f 	stclvs	3, cr4, [r1], #-380	; 0xfffffe84
     ed4:	6361626c 	cmnvs	r1, #108, 4	; 0xc0000006
     ed8:	4f53006b 	svcmi	0x0053006b
     edc:	61435f46 	cmpvs	r3, r6, asr #30
     ee0:	61626c6c 	cmnvs	r2, ip, ror #24
     ee4:	46006b63 	strmi	r6, [r0], -r3, ror #22
     ee8:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     eec:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     ef0:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
     ef4:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     ef8:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     efc:	6c006469 	cfstrsvs	mvf6, [r0], {105}	; 0x69
     f00:	52656854 	rsbpl	r6, r5, #84, 16	; 0x540000
     f04:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
     f08:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     f0c:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xfffff100
     f10:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
     f14:	4f52505f 	svcmi	0x0052505f
     f18:	78520050 	ldmdavc	r2, {r4, r6}^
     f1c:	625f5045 	subsvs	r5, pc, #69	; 0x45
     f20:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     f24:	45700072 	ldrbmi	r0, [r0, #-114]!	; 0xffffff8e
     f28:	746e4970 	strbtvc	r4, [lr], #-2416	; 0xfffff690
     f2c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     f30:	616c4300 	cmnvs	ip, r0, lsl #6
     f34:	4e5f7373 	mrcmi	3, 2, r7, cr15, cr3, {3}
     f38:	7461446f 	strbtvc	r4, [r1], #-1135	; 0xfffffb91
     f3c:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xfffff09f
     f40:	00707574 	rsbseq	r7, r0, r4, ror r5
     f44:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     f48:	505f6563 	subspl	r6, pc, r3, ror #10
     f4c:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xfffff08e
     f50:	00797472 	rsbseq	r7, r9, r2, ror r4
     f54:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0xfffff689
     f58:	525f0072 	subspl	r0, pc, #114	; 0x72
     f5c:	4c555345 	mrrcmi	3, 4, r5, r5, cr5	; <UNPREDICTABLE>
     f60:	49620054 	stmdbmi	r2!, {r2, r4, r6}^
     f64:	6150746e 	cmpvs	r0, lr, ror #8
     f68:	4f536b63 	svcmi	0x00536b63
     f6c:	53550046 	cmppl	r5, #70	; 0x46
     f70:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xfffff0be
     f74:	53454343 	movtpl	r4, #21315	; 0x5343
     f78:	72500053 	subsvc	r0, r0, #83	; 0x53
     f7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     f80:	74535f73 	ldrbvc	r5, [r3], #-3955	; 0xfffff08d
     f84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f88:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     f8c:	70457000 	subvc	r7, r5, r0
     f90:	5f746e49 	svcpl	0x00746e49
     f94:	55004e49 	strpl	r4, [r0, #-3657]	; 0xfffff1b7
     f98:	555f4253 	ldrbpl	r4, [pc, #-595]	; d4d <__Stack_Size+0x94d>
     f9c:	5055534e 	subspl	r5, r5, lr, asr #6
     fa0:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xfffff0b0
     fa4:	62737500 	rsbsvs	r7, r3, #0, 10
     fa8:	7473695f 	ldrbtvc	r6, [r3], #-2399	; 0xfffff6a1
     fac:	00632e72 	rsbeq	r2, r3, r2, ror lr
     fb0:	73616c43 	cmnvc	r1, #17152	; 0x4300
     fb4:	61445f73 	hvcvs	17907	; 0x45f3
     fb8:	535f6174 	cmppl	pc, #116, 2
     fbc:	70757465 	rsbsvc	r7, r5, r5, ror #8
     fc0:	616c4300 	cmnvs	ip, r0, lsl #6
     fc4:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     fc8:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     fcc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     fd0:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
     fd4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     fd8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     fdc:	6f725000 	svcvs	0x00725000
     fe0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     fe4:	6174535f 	cmnvs	r4, pc, asr r3
     fe8:	5f737574 	svcpl	0x00737574
     fec:	43004e49 	movwmi	r4, #3657	; 0xe49
     ff0:	4c5f5254 	lfmmi	f5, 2, [pc], {84}	; 0x54
     ff4:	53550050 	cmppl	r5, #80	; 0x50
     ff8:	4f4e5f42 	svcmi	0x004e5f42
     ffc:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
    1000:	00594441 	subseq	r4, r9, r1, asr #8
    1004:	5f425355 	svcpl	0x00425355
    1008:	4f525245 	svcmi	0x00525245
    100c:	53550052 	cmppl	r5, #82	; 0x52
    1010:	65526242 	ldrbvs	r6, [r2, #-578]	; 0xfffffdbe
    1014:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    1018:	6f630074 	svcvs	0x00630074
    101c:	6174736d 	cmnvs	r4, sp, ror #6
    1020:	65746574 	ldrbvs	r6, [r4, #-1396]!	; 0xfffffa8c
    1024:	6600706d 	strvs	r7, [r0], -sp, rrx
    1028:	616d726f 	cmnvs	sp, pc, ror #4
    102c:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
    1030:	54504574 	ldrbpl	r4, [r0], #-1396	; 0xfffffa8c
    1034:	61745378 	cmnvs	r4, r8, ror r3
    1038:	00737574 	rsbseq	r7, r3, r4, ror r5
    103c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    1040:	70795450 	rsbsvc	r5, r9, r0, asr r4
    1044:	6e4f0065 	cdpvs	0, 4, cr0, cr15, cr5, {3}
    1048:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
    104c:	70697263 	rsbvc	r7, r9, r3, ror #4
    1050:	00726f74 	rsbseq	r6, r2, r4, ror pc
    1054:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    1058:	41785250 	cmnmi	r8, r0, asr r2
    105c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1060:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
    1064:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    1068:	41444e41 	cmpmi	r4, r1, asr #28
    106c:	525f4452 	subspl	r4, pc, #1375731712	; 0x52000000
    1070:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
    1074:	00535453 	subseq	r5, r3, r3, asr r4
    1078:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    107c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1080:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1084:	70007375 	andvc	r7, r0, r5, ror r3
    1088:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    108c:	70797479 	rsbsvc	r7, r9, r9, ror r4
    1090:	53550065 	cmppl	r5, #101	; 0x65
    1094:	49535f42 	ldmdbmi	r3, {r1, r6, r8, r9, sl, fp, ip, lr}^
    1098:	6e495f4c 	cdpvs	15, 4, cr5, cr9, cr12, {2}
    109c:	5f007469 	svcpl	0x00007469
    10a0:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    10a4:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    10a8:	004f464e 	subeq	r4, pc, lr, asr #12
    10ac:	5f627375 	svcpl	0x00627375
    10b0:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    10b4:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    10b8:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    10bc:	61697265 	cmnvs	r9, r5, ror #4
    10c0:	6d754e6c 	ldclvs	14, cr4, [r5, #-432]!	; 0xfffffe50
    10c4:	42535500 	subsmi	r5, r3, #0, 10
    10c8:	646e4977 	strbtvs	r4, [lr], #-2423	; 0xfffff689
    10cc:	00737865 	rsbseq	r7, r3, r5, ror #16
    10d0:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    10d4:	69646f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
    10d8:	5600676e 	strpl	r6, [r0], -lr, ror #14
    10dc:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    10e0:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    10e4:	505f6d6f 	subspl	r6, pc, pc, ror #26
    10e8:	5f74726f 	svcpl	0x0074726f
    10ec:	61446f4e 	cmpvs	r4, lr, asr #30
    10f0:	535f6174 	cmppl	pc, #116, 2
    10f4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    10f8:	444e4500 	strbmi	r4, [lr], #-1280	; 0xfffffb00
    10fc:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1100:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
    1104:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
    1108:	00544e45 	subseq	r4, r4, r5, asr #28
    110c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1110:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1114:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1118:	65466563 	strbvs	r6, [r6, #-1379]	; 0xfffffa9d
    111c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1120:	73550065 	cmpvc	r5, #101	; 0x65
    1124:	4c775f62 	ldclmi	15, cr5, [r7], #-392	; 0xfffffe78
    1128:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    112c:	49700068 	ldmdbmi	r0!, {r3, r5, r6}^
    1130:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
    1134:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1138:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    113c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1140:	65445f67 	strbvs	r5, [r4, #-3943]	; 0xfffff099
    1144:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1148:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    114c:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    1150:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    1154:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    1158:	5f656369 	svcpl	0x00656369
    115c:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1160:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    1164:	54504574 	ldrbpl	r4, [r0], #-1396	; 0xfffffa8c
    1168:	64644178 	strbtvs	r4, [r4], #-376	; 0xfffffe88
    116c:	525f0072 	subspl	r0, pc, #114	; 0x72
    1170:	50494345 	subpl	r4, r9, r5, asr #6
    1174:	544e4549 	strbpl	r4, [lr], #-1353	; 0xfffffab7
    1178:	5059545f 	subspl	r5, r9, pc, asr r4
    117c:	74530045 	ldrbvc	r0, [r3], #-69	; 0xffffffbb
    1180:	61646e61 	cmnvs	r4, r1, ror #28
    1184:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    1188:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    118c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1190:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    1194:	61746144 	cmnvs	r4, r4, asr #2
    1198:	72695600 	rsbvc	r5, r9, #0, 12
    119c:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    11a0:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 102c <__Stack_Size+0xc2c>
    11a4:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    11a8:	65475f74 	strbvs	r5, [r7, #-3956]	; 0xfffff08c
    11ac:	6e694c74 	mcrvs	12, 3, r4, cr9, cr4, {3}
    11b0:	646f4365 	strbtvs	r4, [pc], #-869	; 11b8 <__Stack_Size+0xdb8>
    11b4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    11b8:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    11bc:	4c424154 	stfmie	f4, [r2], {84}	; 0x54
    11c0:	73550045 	cmpvc	r5, #69	; 0x45
    11c4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
    11c8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    11cc:	66726574 			; <UNDEFINED> instruction: 0x66726574
    11d0:	00656361 	rsbeq	r6, r5, r1, ror #6
    11d4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    11d8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    11dc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    11e0:	64416563 	strbvs	r6, [r1], #-1379	; 0xfffffa9d
    11e4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    11e8:	53550073 	cmppl	r5, #115	; 0x73
    11ec:	61567742 	cmpvs	r6, r2, asr #14
    11f0:	7365756c 	cmnvc	r5, #108, 10	; 0x1b000000
    11f4:	72695600 	rsbvc	r5, r9, #0, 12
    11f8:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    11fc:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 1088 <__Stack_Size+0xc88>
    1200:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1204:	65475f74 	strbvs	r5, [r7, #-3956]	; 0xfffff08c
    1208:	76654474 			; <UNDEFINED> instruction: 0x76654474
    120c:	44656369 	strbtmi	r6, [r5], #-873	; 0xfffffc97
    1210:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
    1214:	6f747069 	svcvs	0x00747069
    1218:	6f540072 	svcvs	0x00540072
    121c:	5f6c6174 	svcpl	0x006c6174
    1220:	70646e45 	rsbvc	r6, r4, r5, asr #28
    1224:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    1228:	72695600 	rsbvc	r5, r9, #0, 12
    122c:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    1230:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 10bc <__Stack_Size+0xcbc>
    1234:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1238:	65525f74 	ldrbvs	r5, [r2, #-3956]	; 0xfffff08c
    123c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1240:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    1244:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    1248:	535f726f 	cmppl	pc, #-268435450	; 0xf0000006
    124c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1250:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    1254:	53785250 	cmnpl	r8, #80, 4
    1258:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    125c:	73550073 	cmpvc	r5, #115	; 0x73
    1260:	535f7265 	cmppl	pc, #1342177286	; 0x50000006
    1264:	6f437465 	svcvs	0x00437465
    1268:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    126c:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    1270:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1274:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1278:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    127c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1280:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1284:	49700065 	ldmdbmi	r0!, {r0, r2, r5, r6}^
    1288:	006f666e 	rsbeq	r6, pc, lr, ror #12
    128c:	74726956 	ldrbtvc	r6, [r2], #-2390	; 0xfffff6aa
    1290:	5f6c6175 	svcpl	0x006c6175
    1294:	5f6d6f43 	svcpl	0x006d6f43
    1298:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    129c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    12a0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    12a4:	64416563 	strbvs	r6, [r1], #-1379	; 0xfffffa9d
    12a8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    12ac:	65440073 	strbvs	r0, [r4, #-115]	; 0xffffff8d
    12b0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    12b4:	7365445f 	cmnvc	r5, #1593835520	; 0x5f000000
    12b8:	70697263 	rsbvc	r7, r9, r3, ror #4
    12bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
    12c0:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    12c4:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
    12c8:	5355006f 	cmppl	r5, #111	; 0x6f
    12cc:	654c7742 	strbvs	r7, [ip, #-1858]	; 0xfffff8be
    12d0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    12d4:	75430073 	strbvc	r0, [r3, #-115]	; 0xffffff8d
    12d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    12dc:	6f435f74 	svcvs	0x00435f74
    12e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12e4:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    12e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12ec:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    12f0:	525f4543 	subspl	r4, pc, #281018368	; 0x10c00000
    12f4:	50494345 	subpl	r4, r9, r5, asr #6
    12f8:	544e4549 	strbpl	r4, [lr], #-1353	; 0xfffffab7
    12fc:	61567700 	cmpvs	r6, r0, lsl #14
    1300:	3065756c 	rsbcc	r7, r5, ip, ror #10
    1304:	72695600 	rsbvc	r5, r9, #0, 12
    1308:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    130c:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 1198 <__Stack_Size+0xd98>
    1310:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1314:	65535f74 	ldrbvs	r5, [r3, #-3956]	; 0xfffff08c
    1318:	6e694c74 	mcrvs	12, 3, r4, cr9, cr4, {3}
    131c:	646f4365 	strbtvs	r4, [pc], #-869	; 1324 <__Stack_Size+0xf24>
    1320:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1324:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1328:	5f746e65 	svcpl	0x00746e65
    132c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1330:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1334:	6f540065 	svcvs	0x00540065
    1338:	5f6c6174 	svcpl	0x006c6174
    133c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1340:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1344:	6f697461 	svcvs	0x00697461
    1348:	6f50006e 	svcvs	0x0050006e
    134c:	4f726577 	svcmi	0x00726577
    1350:	7355006e 	cmpvc	r5, #110	; 0x6e
    1354:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
    1358:	6f437465 	svcvs	0x00437465
    135c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1360:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    1364:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1368:	74726956 	ldrbtvc	r6, [r2], #-2390	; 0xfffff6aa
    136c:	5f6c6175 	svcpl	0x006c6175
    1370:	5f6d6f43 	svcpl	0x006d6f43
    1374:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1378:	6174535f 	cmnvs	r4, pc, asr r3
    137c:	5f737574 	svcpl	0x00737574
    1380:	43006e49 	movwmi	r6, #3657	; 0xe49
    1384:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1388:	415f746e 	cmpmi	pc, lr, ror #8
    138c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1390:	6574616e 	ldrbvs	r6, [r4, #-366]!	; 0xfffffe92
    1394:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    1398:	00676e69 	rsbeq	r6, r7, r9, ror #28
    139c:	444e455f 	strbmi	r4, [lr], #-1375	; 0xfffffaa1
    13a0:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    13a4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    13a8:	56004f46 	strpl	r4, [r0], -r6, asr #30
    13ac:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    13b0:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    13b4:	505f6d6f 	subspl	r6, pc, pc, ror #26
    13b8:	5f74726f 	svcpl	0x0074726f
    13bc:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    13c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13c4:	61727567 	cmnvs	r2, r7, ror #10
    13c8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    13cc:	706f4300 	rsbvc	r4, pc, r0, lsl #6
    13d0:	756f5279 	strbvc	r5, [pc, #-633]!	; 115f <__Stack_Size+0xd5f>
    13d4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
    13d8:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    13dc:	70797461 	rsbsvc	r7, r9, r1, ror #8
    13e0:	445f0065 	ldrbmi	r0, [pc], #-101	; 13e8 <__Stack_Size+0xfe8>
    13e4:	43495645 	movtmi	r5, #38469	; 0x9645
    13e8:	4e4f0045 	cdpmi	0, 4, cr0, cr15, cr5, {2}
    13ec:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xfffff0bb
    13f0:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    13f4:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    13f8:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
    13fc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1234 <__Stack_Size+0xe34>
    1400:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1404:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
    1408:	46524554 			; <UNDEFINED> instruction: 0x46524554
    140c:	5f454341 	svcpl	0x00454341
    1410:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
    1414:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
    1418:	6f430054 	svcvs	0x00430054
    141c:	61447970 	hvcvs	18320	; 0x4790
    1420:	55006174 	strpl	r6, [r0, #-372]	; 0xfffffe8c
    1424:	5f726573 	svcpl	0x00726573
    1428:	61656c43 	cmnvs	r5, r3, asr #24
    142c:	61654672 	smcvs	21602	; 0x5462
    1430:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1434:	72695600 	rsbvc	r5, r9, #0, 12
    1438:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    143c:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 12c8 <__Stack_Size+0xec8>
    1440:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1444:	65475f74 	strbvs	r5, [r7, #-3956]	; 0xfffff08c
    1448:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    144c:	44676e69 	strbtmi	r6, [r7], #-3689	; 0xfffff197
    1450:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
    1454:	6f747069 	svcvs	0x00747069
    1458:	53550072 	cmppl	r5, #114	; 0x72
    145c:	526d6242 	rsbpl	r6, sp, #536870916	; 0x20000004
    1460:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1464:	79547473 	ldmdbvc	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1468:	56006570 			; <UNDEFINED> instruction: 0x56006570
    146c:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    1470:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    1474:	505f6d6f 	subspl	r6, pc, pc, ror #26
    1478:	5f74726f 	svcpl	0x0074726f
    147c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1480:	4f5f7375 	svcmi	0x005f7375
    1484:	43007475 	movwmi	r7, #1141	; 0x475
    1488:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    148c:	6174535f 	cmnvs	r4, pc, asr r3
    1490:	5f737574 	svcpl	0x00737574
    1494:	0074754f 	rsbseq	r7, r4, pc, asr #10
    1498:	74726956 	ldrbtvc	r6, [r2], #-2390	; 0xfffff6aa
    149c:	5f6c6175 	svcpl	0x006c6175
    14a0:	5f6d6f43 	svcpl	0x006d6f43
    14a4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    14a8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    14ac:	746e495f 	strbtvc	r4, [lr], #-2399	; 0xfffff6a1
    14b0:	61667265 	cmnvs	r6, r5, ror #4
    14b4:	535f6563 	cmppl	pc, #415236096	; 0x18c00000
    14b8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    14bc:	4400676e 	strmi	r6, [r0], #-1902	; 0xfffff892
    14c0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    14c4:	6e495f65 	cdpvs	15, 4, cr5, cr9, cr5, {3}
    14c8:	43006f66 	movwmi	r6, #3942	; 0xf66
    14cc:	5f6c7274 	svcpl	0x006c7274
    14d0:	6f666e49 	svcvs	0x00666e49
    14d4:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
    14d8:	5f676966 	svcpl	0x00676966
    14dc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    14e0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    14e4:	4300726f 	movwmi	r7, #623	; 0x26f
    14e8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    14ec:	465f746e 	ldrbmi	r7, [pc], -lr, ror #8
    14f0:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0xfffffe9b
    14f4:	55006572 	strpl	r6, [r0, #-1394]	; 0xfffffa8e
    14f8:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
    14fc:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    1500:	55007465 	strpl	r7, [r0, #-1125]	; 0xfffffb9b
    1504:	5f726573 	svcpl	0x00726573
    1508:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    150c:	6f50646e 	svcvs	0x0050646e
    1510:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
    1514:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0xfffffe9b
    1518:	56006572 			; <UNDEFINED> instruction: 0x56006572
    151c:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    1520:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    1524:	505f6d6f 	subspl	r6, pc, pc, ror #26
    1528:	5f74726f 	svcpl	0x0074726f
    152c:	61746144 	cmnvs	r4, r4, asr #2
    1530:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1534:	56007075 			; <UNDEFINED> instruction: 0x56007075
    1538:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    153c:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    1540:	505f6d6f 	subspl	r6, pc, pc, ror #26
    1544:	5f74726f 	svcpl	0x0074726f
    1548:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    154c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1550:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
    1554:	70697263 	rsbvc	r7, r9, r3, ror #4
    1558:	00726f74 	rsbseq	r6, r2, r4, ror pc
    155c:	4548544f 	strbmi	r5, [r8, #-1103]	; 0xfffffbb1
    1560:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    1564:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
    1568:	00544e45 	subseq	r4, r4, r5, asr #28
    156c:	5f363175 	svcpl	0x00363175
    1570:	56003875 			; <UNDEFINED> instruction: 0x56003875
    1574:	75747269 	ldrbvc	r7, [r4, #-617]!	; 0xfffffd97
    1578:	435f6c61 	cmpmi	pc, #24832	; 0x6100
    157c:	505f6d6f 	subspl	r6, pc, pc, ror #26
    1580:	5f74726f 	svcpl	0x0074726f
    1584:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1588:	4e494c00 	cdpmi	12, 4, cr4, cr9, cr0, {0}
    158c:	4f435f45 	svcmi	0x00435f45
    1590:	474e4944 	strbmi	r4, [lr, -r4, asr #18]
    1594:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1598:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    159c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    15a0:	6f500074 	svcvs	0x00500074
    15a4:	4f726577 	svcmi	0x00726577
    15a8:	49006666 	stmdbmi	r0, {r1, r2, r5, r6, r9, sl, sp, lr}
    15ac:	6f54746e 	svcvs	0x0054746e
    15b0:	63696e55 	cmnvs	r9, #1360	; 0x550
    15b4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    15b8:	49425355 	stmdbmi	r2, {r0, r2, r4, r6, r8, r9, ip, lr}^
    15bc:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    15c0:	74530063 	ldrbvc	r0, [r3], #-99	; 0xffffff9d
    15c4:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    15c8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    15cc:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    15d0:	5f656369 	svcpl	0x00656369
    15d4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    15d8:	00316c61 	eorseq	r6, r1, r1, ror #24
    15dc:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    15e0:	43785450 	cmnmi	r8, #80, 8	; 0x50000000
    15e4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    15e8:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    15ec:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    15f0:	49770065 	ldmdbmi	r7!, {r0, r2, r5, r6}^
    15f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    15f8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    15fc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
    1600:	6544006b 	strbvs	r0, [r4, #-107]	; 0xffffff95
    1604:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    1608:	7265535f 	rsbvc	r5, r5, #2080374785	; 0x7c000001
    160c:	306c6169 	rsbcc	r6, ip, r9, ror #2
    1610:	76654400 	strbtvc	r4, [r5], -r0, lsl #8
    1614:	5f656369 	svcpl	0x00656369
    1618:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    161c:	00326c61 	eorseq	r6, r2, r1, ror #24
    1620:	5f425355 	svcpl	0x00425355
    1624:	6c626143 	stfvse	f6, [r2], #-268	; 0xfffffef4
    1628:	6f435f65 	svcvs	0x00435f65
    162c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1630:	42535500 	subsmi	r5, r3, #0, 10
    1634:	5f78545f 	svcpl	0x0078545f
    1638:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    163c:	73550065 	cmpvc	r5, #101	; 0x65
    1640:	70635662 	rsbvc	r5, r3, r2, ror #12
    1644:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
    1648:	00746365 	rsbseq	r6, r4, r5, ror #6
    164c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1650:	4d506f54 	ldclmi	15, cr6, [r0, #-336]	; 0xfffffeb0
    1654:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    1658:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    165c:	0079706f 	rsbseq	r7, r9, pc, rrx
    1660:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    1664:	56785450 			; <UNDEFINED> instruction: 0x56785450
    1668:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    166c:	6c617600 	stclvs	6, cr7, [r1], #-0
    1670:	55006575 	strpl	r6, [r0, #-1397]	; 0xfffffa8b
    1674:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1678:	5f78525f 	svcpl	0x0078525f
    167c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1680:	70006874 	andvc	r6, r0, r4, ror r8
    1684:	00667562 	rsbeq	r7, r6, r2, ror #10
    1688:	53414c46 	movtpl	r4, #7238	; 0x1c46
    168c:	54495f48 	strbpl	r5, [r9], #-3912	; 0xfffff0b8
    1690:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1694:	57006769 	strpl	r6, [r0, -r9, ror #14]
    1698:	5f325052 	svcpl	0x00325052
    169c:	61746144 	cmnvs	r4, r4, asr #2
    16a0:	5f424f00 	svcpl	0x00424f00
    16a4:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    16a8:	414c4600 	cmpmi	ip, r0, lsl #12
    16ac:	455f4853 	ldrbmi	r4, [pc, #-2131]	; e61 <__Stack_Size+0xa61>
    16b0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    16b4:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    16b8:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16bc:	00736574 	rsbseq	r6, r3, r4, ror r5
    16c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    16c4:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    16c8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    16cc:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    16d0:	5f485341 	svcpl	0x00485341
    16d4:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0xfffffeb4
    16d8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    16dc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    16e0:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xfffff0b8
    16e4:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0xffffff8c
    16e8:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    16ec:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    16f0:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    16f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    16f8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
    16fc:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1700:	2f62696c 	svccs	0x0062696c
    1704:	2f637273 	svccs	0x00637273
    1708:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    170c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1710:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
    1714:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
    1718:	52570063 	subspl	r0, r7, #99	; 0x63
    171c:	46005250 			; <UNDEFINED> instruction: 0x46005250
    1720:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1724:	6172455f 	cmnvs	r2, pc, asr r5
    1728:	6c416573 	cfstr64vs	mvdx6, [r1], {115}	; 0x73
    172c:	6761506c 	strbvs	r5, [r1, -ip, rrx]!
    1730:	57007365 	strpl	r7, [r0, -r5, ror #6]
    1734:	00305052 	eorseq	r5, r0, r2, asr r0
    1738:	31505257 	cmpcc	r0, r7, asr r2
    173c:	50525700 	subspl	r5, r2, r0, lsl #14
    1740:	52570032 	subspl	r0, r7, #50	; 0x32
    1744:	46003350 			; <UNDEFINED> instruction: 0x46003350
    1748:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    174c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1750:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1754:	6f725065 	svcvs	0x00725065
    1758:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    175c:	4f6e6f69 	svcmi	0x006e6f69
    1760:	6f697470 	svcvs	0x00697470
    1764:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    1768:	504f0065 	subpl	r0, pc, r5, rrx
    176c:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
    1770:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
    1774:	5f485341 	svcpl	0x00485341
    1778:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    177c:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1780:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1784:	6f436574 	svcvs	0x00436574
    1788:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    178c:	5f424f00 	svcpl	0x00424f00
    1790:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    1794:	414c4600 	cmpmi	ip, r0, lsl #12
    1798:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    179c:	4f646165 	svcmi	0x00646165
    17a0:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    17a4:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    17a8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    17ac:	616c6600 	cmnvs	ip, r0, lsl #12
    17b0:	74736873 	ldrbtvc	r6, [r3], #-2163	; 0xfffff78d
    17b4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    17b8:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    17bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    17c0:	50007375 	andpl	r7, r0, r5, ror r3
    17c4:	5f656761 	svcpl	0x00656761
    17c8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    17cc:	00737365 	rsbseq	r7, r3, r5, ror #6
    17d0:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
    17d4:	7461445f 	strbtvc	r4, [r1], #-1119	; 0xfffffba1
    17d8:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    17dc:	5f485341 	svcpl	0x00485341
    17e0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    17e4:	5367616c 	cmnpl	r7, #108, 2
    17e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    17ec:	52570073 	subspl	r0, r7, #115	; 0x73
    17f0:	445f3150 	ldrbmi	r3, [pc], #-336	; 17f8 <__Stack_Size+0x13f8>
    17f4:	00617461 	rsbeq	r7, r1, r1, ror #8
    17f8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    17fc:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1800:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1804:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xfffff0b8
    1808:	61655274 	smcvs	21796	; 0x5524
    180c:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    1810:	746f7250 	strbtvc	r7, [pc], #-592	; 1818 <__Stack_Size+0x1418>
    1814:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1818:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xfffff191
    181c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1820:	5f424f00 	svcpl	0x00424f00
    1824:	42445453 	submi	r5, r4, #1392508928	; 0x53000000
    1828:	52570059 	subspl	r0, r7, #89	; 0x59
    182c:	445f3050 	ldrbmi	r3, [pc], #-80	; 1834 <__Stack_Size+0x1434>
    1830:	00617461 	rsbeq	r7, r1, r1, ror #8
    1834:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1838:	61485f48 	cmpvs	r8, r8, asr #30
    183c:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
    1840:	41656c63 	cmnmi	r5, r3, ror #24
    1844:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    1848:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    184c:	5f485341 	svcpl	0x00485341
    1850:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1854:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1858:	424f0073 	submi	r0, pc, #115	; 0x73
    185c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1860:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1864:	414c4600 	cmpmi	ip, r0, lsl #12
    1868:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    186c:	43666c61 	cmnmi	r6, #24832	; 0x6100
    1870:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
    1874:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
    1878:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    187c:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    1880:	5f485341 	svcpl	0x00485341
    1884:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    1888:	4f6d6172 	svcmi	0x006d6172
    188c:	6f697470 	svcvs	0x00697470
    1890:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    1894:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    1898:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    189c:	5f485341 	svcpl	0x00485341
    18a0:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    18a4:	4f726573 	svcmi	0x00726573
    18a8:	6f697470 	svcvs	0x00697470
    18ac:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    18b0:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    18b4:	5f485341 	svcpl	0x00485341
    18b8:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    18bc:	486d6172 	stmdami	sp!, {r1, r4, r5, r6, r8, sp, lr}^
    18c0:	57666c61 	strbpl	r6, [r6, -r1, ror #24]!
    18c4:	0064726f 	rsbeq	r7, r4, pc, ror #4
    18c8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    18cc:	4c465f48 	mcrrmi	15, 4, r5, r6, cr8
    18d0:	46004741 	strmi	r4, [r0], -r1, asr #14
    18d4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    18d8:	616e455f 	cmnvs	lr, pc, asr r5
    18dc:	57656c62 	strbpl	r6, [r5, -r2, ror #24]!
    18e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    18e4:	746f7250 	strbtvc	r7, [pc], #-592	; 18ec <__Stack_Size+0x14ec>
    18e8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    18ec:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xfffff191
    18f0:	00524553 	subseq	r4, r2, r3, asr r5
    18f4:	61746144 	cmnvs	r4, r4, asr #2
    18f8:	61440030 	cmpvs	r4, r0, lsr r0
    18fc:	00316174 	eorseq	r6, r1, r4, ror r1
    1900:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1904:	61505f48 	cmpvs	r0, r8, asr #30
    1908:	00736567 	rsbseq	r6, r3, r7, ror #10
    190c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1910:	54495f48 	strbpl	r5, [r9], #-3912	; 0xfffff0b8
    1914:	53455200 	movtpl	r5, #20992	; 0x5200
    1918:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    191c:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
    1920:	5f485341 	svcpl	0x00485341
    1924:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1928:	00666544 	rsbeq	r6, r6, r4, asr #10
    192c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1930:	61575f48 	cmpvs	r7, r8, asr #30
    1934:	6f467469 	svcvs	0x00467469
    1938:	73614c72 	cmnvc	r1, #29184	; 0x7200
    193c:	65704f74 	ldrbvs	r4, [r0, #-3956]!	; 0xfffff08c
    1940:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1944:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    1948:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    194c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    1950:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    1954:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    1958:	00726566 	rsbseq	r6, r2, r6, ror #10
    195c:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    1960:	616e455f 	cmnvs	lr, pc, asr r5
    1964:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1968:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    196c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    1970:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1974:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
    1978:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    197c:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1980:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1984:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1988:	6477695f 	ldrbtvs	r6, [r7], #-2399	; 0xfffff6a1
    198c:	00632e67 	rsbeq	r2, r3, r7, ror #28
    1990:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    1994:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    1998:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    199c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    19a0:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    19a4:	5f474457 	svcpl	0x00474457
    19a8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    19ac:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    19b0:	72575f47 	subsvc	r5, r7, #284	; 0x11c
    19b4:	41657469 	cmnmi	r5, r9, ror #8
    19b8:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    19bc:	57490073 	smlsldxpl	r0, r9, r3, r0
    19c0:	475f4744 	ldrbmi	r4, [pc, -r4, asr #14]
    19c4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    19c8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    19cc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    19d0:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    19d4:	79545f47 	ldmdbvc	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    19d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    19dc:	69700066 	ldmdbvs	r0!, {r1, r2, r5, r6}^
    19e0:	736f706e 	cmnvc	pc, #110	; 0x6e
    19e4:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    19e8:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    19ec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19f0:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    19f4:	754f6461 	strbvc	r6, [pc, #-1121]	; 159b <__Stack_Size+0x119b>
    19f8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    19fc:	61746144 	cmnvs	r4, r4, asr #2
    1a00:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a04:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    1a08:	4f746e65 	svcmi	0x00746e65
    1a0c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1a10:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1a14:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a18:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
    1a1c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1a20:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a24:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1a28:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1a2c:	5f746942 	svcpl	0x00746942
    1a30:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1a34:	50470054 	subpl	r0, r7, r4, asr r0
    1a38:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1a3c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1a40:	00746942 	rsbseq	r6, r4, r2, asr #18
    1a44:	2f62696c 	svccs	0x0062696c
    1a48:	2f637273 	svccs	0x00637273
    1a4c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1a50:	30316632 	eorscc	r6, r1, r2, lsr r6
    1a54:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1a58:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1a5c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1a60:	00524349 	subseq	r4, r2, r9, asr #6
    1a64:	6d6e6970 	stclvs	9, cr6, [lr, #-448]!	; 0xfffffe40
    1a68:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1a6c:	4f495047 	svcmi	0x00495047
    1a70:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1a74:	756f5374 	strbvc	r5, [pc, #-884]!	; 1708 <__Stack_Size+0x1308>
    1a78:	00656372 	rsbeq	r6, r5, r2, ror r3
    1a7c:	4f495047 	svcmi	0x00495047
    1a80:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1a84:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a88:	4f495047 	svcmi	0x00495047
    1a8c:	6576455f 	ldrbvs	r4, [r6, #-1375]!	; 0xfffffaa1
    1a90:	754f746e 	strbvc	r7, [pc, #-1134]	; 162a <__Stack_Size+0x122a>
    1a94:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1a98:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a9c:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1aa0:	5f4f4950 	svcpl	0x004f4950
    1aa4:	616d6552 	cmnvs	sp, r2, asr r5
    1aa8:	6d740070 	ldclvs	0, cr0, [r4, #-448]!	; 0xfffffe40
    1aac:	67657270 			; <UNDEFINED> instruction: 0x67657270
    1ab0:	726f5000 	rsbvc	r5, pc, #0
    1ab4:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1ab8:	72756300 	rsbsvc	r6, r5, #0, 6
    1abc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1ac0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    1ac4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ac8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1acc:	756f536e 	strbvc	r5, [pc, #-878]!	; 1766 <__Stack_Size+0x1366>
    1ad0:	00656372 	rsbeq	r6, r5, r2, ror r3
    1ad4:	5f434352 	svcpl	0x00434352
    1ad8:	32425041 	subcc	r5, r2, #65	; 0x41
    1adc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ae0:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1ae4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1ae8:	4700646d 	strmi	r6, [r0, -sp, ror #8]
    1aec:	5f4f4950 	svcpl	0x004f4950
    1af0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1af4:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1af8:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1afc:	6d740061 	ldclvs	0, cr0, [r4, #-388]!	; 0xfffffe7c
    1b00:	73616d70 	cmnvc	r1, #112, 26	; 0x1c00
    1b04:	5047006b 	subpl	r0, r7, fp, rrx
    1b08:	505f4f49 	subspl	r4, pc, r9, asr #30
    1b0c:	6f4c6e69 	svcvs	0x004c6e69
    1b10:	6f436b63 	svcvs	0x00436b63
    1b14:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b18:	72756300 	rsbsvc	r6, r5, #0, 6
    1b1c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1b20:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1b24:	4f495047 	svcmi	0x00495047
    1b28:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1b2c:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    1b30:	0031706d 	eorseq	r7, r1, sp, rrx
    1b34:	4f495047 	svcmi	0x00495047
    1b38:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    1b3c:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    1b40:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1b44:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b48:	4f494641 	svcmi	0x00494641
    1b4c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1b50:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1b54:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1b58:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1b5c:	4d006e6f 	stcmi	14, cr6, [r0, #-444]	; 0xfffffe44
    1b60:	00525041 	subseq	r5, r2, r1, asr #32
    1b64:	4f495047 	svcmi	0x00495047
    1b68:	50470078 	subpl	r0, r7, r8, ror r0
    1b6c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1b70:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1b74:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1b78:	56450074 			; <UNDEFINED> instruction: 0x56450074
    1b7c:	47005243 	strmi	r5, [r0, -r3, asr #4]
    1b80:	5f4f4950 	svcpl	0x004f4950
    1b84:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1b88:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1b8c:	61447475 	hvcvs	18245	; 0x4745
    1b90:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    1b94:	50470074 	subpl	r0, r7, r4, ror r0
    1b98:	415f4f49 	cmpmi	pc, r9, asr #30
    1b9c:	444f4946 	strbmi	r4, [pc], #-2374	; 1ba4 <__Stack_Size+0x17a4>
    1ba0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1ba4:	41490074 	hvcmi	36868	; 0x9004
    1ba8:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
    1bac:	5f434956 	svcpl	0x00434956
    1bb0:	61656c43 	cmnvs	r5, r3, asr #24
    1bb4:	51524972 	cmppl	r2, r2, ror r9
    1bb8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1bbc:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1bc0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1bc4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1bc8:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1bcc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1bd0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1bd4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1bd8:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1bdc:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1be0:	75437465 	strbvc	r7, [r3, #-1125]	; 0xfffffb9b
    1be4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1be8:	6e655074 	mcrvs	0, 3, r5, cr5, cr4, {3}
    1bec:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1bf0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1bf4:	6e6e6168 	powvsez	f6, f6, #0.0
    1bf8:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
    1bfc:	5f434956 	svcpl	0x00434956
    1c00:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1c04:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1c08:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1c0c:	00737365 	rsbseq	r7, r3, r5, ror #6
    1c10:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1c14:	61486d65 	cmpvs	r8, r5, ror #26
    1c18:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1c1c:	62755372 	rsbsvs	r5, r5, #-939524095	; 0xc8000001
    1c20:	6f697250 	svcvs	0x00697250
    1c24:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c28:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c2c:	45535f43 	ldrbmi	r5, [r3, #-3907]	; 0xfffff0bd
    1c30:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    1c34:	4b53414d 	blmi	14d2170 <__Stack_Size+0x14d1d70>
    1c38:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1c3c:	00657270 	rsbeq	r7, r5, r0, ror r2
    1c40:	2f62696c 	svccs	0x0062696c
    1c44:	2f637273 	svccs	0x00637273
    1c48:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1c4c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1c50:	766e5f78 	uqsub16vc	r5, lr, r8
    1c54:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
    1c58:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c5c:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xfffff0bd
    1c60:	50544553 	subspl	r4, r4, r3, asr r5
    1c64:	414d4952 	cmpmi	sp, r2, asr r9
    1c68:	66004b53 			; <UNDEFINED> instruction: 0x66004b53
    1c6c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1c70:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1c74:	00737365 	rsbseq	r7, r3, r5, ror #6
    1c78:	4349564e 	movtmi	r5, #38478	; 0x964e
    1c7c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1c80:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1c84:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1c88:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    1c8c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1c90:	6f437974 	svcvs	0x00437974
    1c94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c98:	475f5f00 	ldrbmi	r5, [pc, -r0, lsl #30]
    1c9c:	41427465 	cmpmi	r2, r5, ror #8
    1ca0:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1ca4:	564e0049 	strbpl	r0, [lr], -r9, asr #32
    1ca8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1cac:	50437465 	subpl	r7, r3, r5, ror #8
    1cb0:	00444955 	subeq	r4, r4, r5, asr r9
    1cb4:	4349564e 	movtmi	r5, #38478	; 0x964e
    1cb8:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1cbc:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1cc0:	6f724779 	svcvs	0x00724779
    1cc4:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1cc8:	5f434956 	svcpl	0x00434956
    1ccc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1cd0:	55414654 	strbpl	r4, [r1, #-1620]	; 0xfffff9ac
    1cd4:	414d544c 	cmpmi	sp, ip, asr #8
    1cd8:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    1cdc:	5f434956 	svcpl	0x00434956
    1ce0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1ce4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1ce8:	6341746e 	movtvs	r7, #5230	; 0x146e
    1cec:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    1cf0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1cf4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1cf8:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1cfc:	61486d65 	cmpvs	r8, r5, ror #26
    1d00:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1d04:	43490072 	movtmi	r0, #36978	; 0x9072
    1d08:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
    1d0c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1d10:	00314445 	eorseq	r4, r1, r5, asr #8
    1d14:	45535f5f 	ldrbmi	r5, [r3, #-3935]	; 0xfffff0a1
    1d18:	55414654 	strbpl	r4, [r1, #-1620]	; 0xfffff9ac
    1d1c:	414d544c 	cmpmi	sp, ip, asr #8
    1d20:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    1d24:	5f434956 	svcpl	0x00434956
    1d28:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    1d2c:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    1d30:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    1d34:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1d38:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    1d3c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1d40:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1d44:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1d48:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1d4c:	4172656c 	cmnmi	r2, ip, ror #10
    1d50:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1d54:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1d58:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1d5c:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    1d60:	5f434956 	svcpl	0x00434956
    1d64:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    1d68:	43495250 	movtmi	r5, #37456	; 0x9250
    1d6c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1d70:	46420047 	strbmi	r0, [r2], -r7, asr #32
    1d74:	4e005241 	cdpmi	2, 0, cr5, cr0, cr1, {2}
    1d78:	5f434956 	svcpl	0x00434956
    1d7c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1d80:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1d84:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1d88:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    1d8c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1d90:	00746942 	rsbseq	r6, r4, r2, asr #18
    1d94:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1d98:	4300736f 	movwmi	r7, #879	; 0x36f
    1d9c:	00525346 	subseq	r5, r2, r6, asr #6
    1da0:	4349564e 	movtmi	r5, #38478	; 0x964e
    1da4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1da8:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1dac:	61486d65 	cmpvs	r8, r5, ror #26
    1db0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1db4:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    1db8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1dbc:	00746942 	rsbseq	r6, r4, r2, asr #18
    1dc0:	43524941 	cmpmi	r2, #1064960	; 0x104000
    1dc4:	43490052 	movtmi	r0, #36946	; 0x9052
    1dc8:	5f005250 	svcpl	0x00005250
    1dcc:	5341425f 	movtpl	r4, #4703	; 0x125f
    1dd0:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    1dd4:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1dd8:	5f004749 	svcpl	0x00004749
    1ddc:	4253445f 	subsmi	r4, r3, #1593835520	; 0x5f000000
    1de0:	50485300 	subpl	r5, r8, r0, lsl #6
    1de4:	48530052 	ldmdami	r3, {r1, r4, r6}^
    1de8:	00525343 	subseq	r5, r2, r3, asr #6
    1dec:	4349564e 	movtmi	r5, #38478	; 0x964e
    1df0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1df4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1df8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1dfc:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1e00:	53414274 	movtpl	r4, #4724	; 0x1274
    1e04:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    1e08:	525f5f00 	subspl	r5, pc, #0, 30
    1e0c:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1e10:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    1e14:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1e18:	4d4d004b 	stclmi	0, cr0, [sp, #-300]	; 0xfffffed4
    1e1c:	00524146 	subseq	r4, r2, r6, asr #2
    1e20:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1e24:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    1e28:	5f434956 	svcpl	0x00434956
    1e2c:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1e30:	61486d65 	cmpvs	r8, r5, ror #26
    1e34:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1e38:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1e3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e40:	4349564e 	movtmi	r5, #38478	; 0x964e
    1e44:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1e48:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    1e4c:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1e50:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e54:	4349564e 	movtmi	r5, #38478	; 0x964e
    1e58:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1e5c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1e60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1e64:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    1e68:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1e6c:	6f697270 	svcvs	0x00697270
    1e70:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e74:	4f545600 	svcmi	0x00545600
    1e78:	53490052 	movtpl	r0, #36946	; 0x9052
    1e7c:	44005250 	strmi	r5, [r0], #-592	; 0xfffffdb0
    1e80:	00525346 	subseq	r5, r2, r6, asr #6
    1e84:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
    1e88:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e8c:	45535f43 	ldrbmi	r5, [r3, #-3907]	; 0xfffff0bd
    1e90:	55414654 	strbpl	r4, [r1, #-1620]	; 0xfffff9ac
    1e94:	414d544c 	cmpmi	sp, ip, asr #8
    1e98:	74004b53 	strvc	r4, [r0], #-2899	; 0xfffff4ad
    1e9c:	0032706d 	eorseq	r7, r2, sp, rrx
    1ea0:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    1ea4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ea8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1eac:	75614674 	strbvc	r4, [r1, #-1652]!	; 0xfffff98c
    1eb0:	6148746c 	cmpvs	r8, ip, ror #8
    1eb4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1eb8:	756f5372 	strbvc	r5, [pc, #-882]!	; 1b4e <__Stack_Size+0x174e>
    1ebc:	73656372 	cmnvc	r5, #-939524095	; 0xc8000001
    1ec0:	42435300 	submi	r5, r3, #0, 6
    1ec4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1ec8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1ecc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ed0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1ed4:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    1ed8:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1edc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1ee0:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
    1ee4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1ee8:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1eec:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1ef0:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    1ef4:	5f434956 	svcpl	0x00434956
    1ef8:	61656c43 	cmnvs	r5, r3, asr #24
    1efc:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    1f00:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1f04:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1f08:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
    1f0c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1f10:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1f14:	63757600 	cmnvs	r5, #0, 12
    1f18:	66003233 			; <UNDEFINED> instruction: 0x66003233
    1f1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1f20:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    1f24:	00736563 	rsbseq	r6, r3, r3, ror #10
    1f28:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1f2c:	61486d65 	cmpvs	r8, r5, ror #26
    1f30:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1f34:	65725072 	ldrbvs	r5, [r2, #-114]!	; 0xffffff8e
    1f38:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    1f3c:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    1f40:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1f44:	00797469 	rsbseq	r7, r9, r9, ror #8
    1f48:	4349564e 	movtmi	r5, #38478	; 0x964e
    1f4c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1f50:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1f54:	6e6e6168 	powvsez	f6, f6, #0.0
    1f58:	65506c65 	ldrbvs	r6, [r0, #-3173]	; 0xfffff39b
    1f5c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1f60:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1f64:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1f68:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    1f6c:	5f434956 	svcpl	0x00434956
    1f70:	44424353 	strbmi	r4, [r2], #-851	; 0xfffffcad
    1f74:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1f78:	654e0074 	strbvs	r0, [lr, #-116]	; 0xffffff8c
    1f7c:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    1f80:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1f84:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1f88:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    1f8c:	54746365 	ldrbtpl	r6, [r4], #-869	; 0xfffffc9b
    1f90:	61006261 	tstvs	r0, r1, ror #4
    1f94:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1f98:	71726965 	cmnvc	r2, r5, ror #18
    1f9c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1fa0:	5f007375 	svcpl	0x00007375
    1fa4:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    1fa8:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1fac:	004b5341 	subeq	r5, fp, r1, asr #6
    1fb0:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    1fb4:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    1fb8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1fbc:	6b73616d 	blvs	1cda578 <__Stack_Size+0x1cda178>
    1fc0:	525f5f00 	subspl	r5, pc, #0, 30
    1fc4:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1fc8:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1fcc:	004b5341 	subeq	r5, fp, r1, asr #6
    1fd0:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    1fd4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1fd8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1fdc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1fe0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    1fe4:	51524974 	cmppl	r2, r4, ror r9
    1fe8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1fec:	416c656e 	cmnmi	ip, lr, ror #10
    1ff0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1ff4:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
    1ff8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1ffc:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    2000:	5f434956 	svcpl	0x00434956
    2004:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2008:	70007469 	andvc	r7, r0, r9, ror #8
    200c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2010:	7269676e 	rsbvc	r6, r9, #28835840	; 0x1b80000
    2014:	61747371 	cmnvs	r4, r1, ror r3
    2018:	00737574 	rsbseq	r7, r3, r4, ror r5
    201c:	5f434352 	svcpl	0x00434352
    2020:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2024:	00666544 	rsbeq	r6, r6, r4, asr #10
    2028:	31425041 	cmpcc	r2, r1, asr #32
    202c:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    2030:	43435200 	movtmi	r5, #12800	; 0x3200
    2034:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    2038:	4352004b 	cmpmi	r2, #75	; 0x4b
    203c:	44415f43 	strbmi	r5, [r1], #-3907	; 0xfffff0bd
    2040:	4b4c4343 	blmi	1312d54 <__Stack_Size+0x1312954>
    2044:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2048:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    204c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2050:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2054:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    2058:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    205c:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    2060:	62696c00 	rsbvs	r6, r9, #0, 24
    2064:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2068:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    206c:	31663233 	cmncc	r6, r3, lsr r2
    2070:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    2074:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    2078:	43435200 	movtmi	r5, #12800	; 0x3200
    207c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    2080:	43435200 	movtmi	r5, #12800	; 0x3200
    2084:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2088:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    208c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2090:	43444200 	movtmi	r4, #16896	; 0x4200
    2094:	43520052 	cmpmi	r2, #82	; 0x52
    2098:	50415f43 	subpl	r5, r1, r3, asr #30
    209c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    20a0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    20a4:	43435200 	movtmi	r5, #12800	; 0x3200
    20a8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    20ac:	5200324b 	andpl	r3, r0, #-1342177276	; 0xb0000004
    20b0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    20b4:	6b636f6c 	blvs	18dde6c <__Stack_Size+0x18dda6c>
    20b8:	70795473 	rsbsvc	r5, r9, r3, ror r4
    20bc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    20c0:	43435200 	movtmi	r5, #12800	; 0x3200
    20c4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    20c8:	006c754d 	rsbeq	r7, ip, sp, asr #10
    20cc:	5f434352 	svcpl	0x00434352
    20d0:	50424841 	subpl	r4, r2, r1, asr #16
    20d4:	70697265 	rsbvc	r7, r9, r5, ror #4
    20d8:	6f6c4368 	svcvs	0x006c4368
    20dc:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    20e0:	46430064 	strbmi	r0, [r3], -r4, rrx
    20e4:	48005247 	stmdami	r0, {r0, r1, r2, r6, r9, ip, lr}
    20e8:	5f4b4c43 	svcpl	0x004b4c43
    20ec:	71657246 	cmnvc	r5, r6, asr #4
    20f0:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    20f4:	50410079 	subpl	r0, r1, r9, ror r0
    20f8:	4e453142 	dvfmism	f3, f5, f2
    20fc:	43520052 	cmpmi	r2, #82	; 0x52
    2100:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    2104:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    2108:	00676966 	rsbeq	r6, r7, r6, ror #18
    210c:	5f434352 	svcpl	0x00434352
    2110:	43435452 	movtmi	r5, #13394	; 0x3452
    2114:	6f534b4c 	svcvs	0x00534b4c
    2118:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    211c:	43435200 	movtmi	r5, #12800	; 0x3200
    2120:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2124:	72655031 	rsbvc	r5, r5, #49	; 0x31
    2128:	52687069 	rsbpl	r7, r8, #105	; 0x69
    212c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2130:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2134:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
    2138:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    213c:	5f434352 	svcpl	0x00434352
    2140:	4349534c 	movtmi	r5, #37708	; 0x934c
    2144:	4100646d 	tstmi	r0, sp, ror #8
    2148:	52324250 	eorspl	r4, r2, #80, 4
    214c:	00525453 	subseq	r5, r2, r3, asr r4
    2150:	5f434352 	svcpl	0x00434352
    2154:	31425041 	cmpcc	r2, r1, asr #32
    2158:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    215c:	70006870 	andvc	r6, r0, r0, ror r8
    2160:	6f736c6c 	svcvs	0x00736c6c
    2164:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2168:	42484100 	submi	r4, r8, #0, 2
    216c:	00524e45 	subseq	r4, r2, r5, asr #28
    2170:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2174:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    2178:	50410067 	subpl	r0, r1, r7, rrx
    217c:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    2180:	74530052 	ldrbvc	r0, [r3], #-82	; 0xffffffae
    2184:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
    2188:	756f4370 	strbvc	r4, [pc, #-880]!	; 1e20 <__Stack_Size+0x1a20>
    218c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2190:	43435200 	movtmi	r5, #12800	; 0x3200
    2194:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2198:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    219c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    21a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    21a4:	5f434352 	svcpl	0x00434352
    21a8:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    21ac:	53487473 	movtpl	r7, #33907	; 0x8473
    21b0:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    21b4:	61726269 	cmnvs	r2, r9, ror #4
    21b8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    21bc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    21c0:	44410065 	strbmi	r0, [r1], #-101	; 0xffffff9b
    21c4:	4b4c4343 	blmi	1312ed8 <__Stack_Size+0x1312ad8>
    21c8:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    21cc:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    21d0:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    21d4:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    21d8:	0047414c 	subeq	r4, r7, ip, asr #2
    21dc:	5f434352 	svcpl	0x00434352
    21e0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    21e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    21e8:	43520065 	cmpmi	r2, #101	; 0x65
    21ec:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    21f0:	4b4c4343 	blmi	1312f04 <__Stack_Size+0x1312b04>
    21f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21f8:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    21fc:	555f4343 	ldrbpl	r4, [pc, #-835]	; 1ec1 <__Stack_Size+0x1ac1>
    2200:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    2204:	756f534b 	strbvc	r5, [pc, #-843]!	; 1ec1 <__Stack_Size+0x1ac1>
    2208:	00656372 	rsbeq	r6, r5, r2, ror r3
    220c:	5f434352 	svcpl	0x00434352
    2210:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2214:	48004b4c 	stmdami	r0, {r2, r3, r6, r8, r9, fp, lr}
    2218:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
    221c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2220:	53595300 	cmppl	r9, #0, 6
    2224:	5f4b4c43 	svcpl	0x004b4c43
    2228:	71657246 	cmnvc	r5, r6, asr #4
    222c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2230:	43520079 	cmpmi	r2, #121	; 0x79
    2234:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2238:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    223c:	4c435000 	marmi	acc0, r5, r3
    2240:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    2244:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2248:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    224c:	43435200 	movtmi	r5, #12800	; 0x3200
    2250:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2254:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2258:	72700067 	rsbsvc	r0, r0, #103	; 0x67
    225c:	00637365 	rsbeq	r7, r3, r5, ror #6
    2260:	5f434352 	svcpl	0x00434352
    2264:	00455348 	subeq	r5, r5, r8, asr #6
    2268:	5f434352 	svcpl	0x00434352
    226c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2270:	6f534b4c 	svcvs	0x00534b4c
    2274:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2278:	4c435000 	marmi	acc0, r5, r3
    227c:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    2280:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2284:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2288:	43435200 	movtmi	r5, #12800	; 0x3200
    228c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    2290:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2294:	41006769 	tstmi	r0, r9, ror #14
    2298:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    229c:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    22a0:	61546373 	cmpvs	r4, r3, ror r3
    22a4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    22a8:	5f434352 	svcpl	0x00434352
    22ac:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    22b0:	6b636f6c 	blvs	18de068 <__Stack_Size+0x18ddc68>
    22b4:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    22b8:	43520071 	cmpmi	r2, #113	; 0x71
    22bc:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    22c0:	4b4c4343 	blmi	1312fd4 <__Stack_Size+0x1312bd4>
    22c4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    22c8:	5f434352 	svcpl	0x00434352
    22cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    22d0:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    22d4:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    22d8:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    22dc:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    22e0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    22e4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    22e8:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    22ec:	43520064 	cmpmi	r2, #100	; 0x64
    22f0:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    22f4:	4352004f 	cmpmi	r2, #79	; 0x4f
    22f8:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    22fc:	43435200 	movtmi	r5, #12800	; 0x3200
    2300:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2304:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2308:	41006870 	tstmi	r0, r0, ror r8
    230c:	72504344 	subsvc	r4, r0, #68, 6	; 0x10000001
    2310:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
    2314:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2318:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    231c:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    2320:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2324:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2328:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    232c:	4f5f4d49 	svcmi	0x005f4d49
    2330:	6f503143 	svcvs	0x00503143
    2334:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2338:	6f437974 	svcvs	0x00437974
    233c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2340:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2344:	5343495f 	movtpl	r4, #14687	; 0x395f
    2348:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    234c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2350:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2354:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2358:	65725034 	ldrbvs	r5, [r2, #-52]!	; 0xffffffcc
    235c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2360:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2364:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2368:	535f4d49 	cmppl	pc, #4672	; 0x1240
    236c:	6f437465 	svcvs	0x00437465
    2370:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    2374:	54003165 	strpl	r3, [r0], #-357	; 0xfffffe9b
    2378:	535f4d49 	cmppl	pc, #4672	; 0x1240
    237c:	6f437465 	svcvs	0x00437465
    2380:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    2384:	54003265 	strpl	r3, [r0], #-613	; 0xfffffd9b
    2388:	535f4d49 	cmppl	pc, #4672	; 0x1240
    238c:	6f437465 	svcvs	0x00437465
    2390:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    2394:	54003465 	strpl	r3, [r0], #-1125	; 0xfffffb9b
    2398:	4f5f4d49 	svcmi	0x005f4d49
    239c:	504e3343 	subpl	r3, lr, r3, asr #6
    23a0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    23a4:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    23a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23ac:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23b0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    23b4:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    23b8:	0064616f 	rsbeq	r6, r4, pc, ror #2
    23bc:	5f4d4954 	svcpl	0x004d4954
    23c0:	6e49434f 	cdpvs	3, 4, cr4, cr9, cr15, {2}
    23c4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    23c8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    23cc:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    23d0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    23d4:	616c6f50 	cmnvs	ip, r0, asr pc
    23d8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    23dc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    23e0:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    23e4:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    23e8:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    23ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23f0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23f4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    23f8:	616c4674 	smcvs	50276	; 0xc464
    23fc:	61745367 	cmnvs	r4, r7, ror #6
    2400:	00737574 	rsbseq	r7, r3, r4, ror r5
    2404:	5f324954 	svcpl	0x00324954
    2408:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    240c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2410:	4f5f4d49 	svcmi	0x005f4d49
    2414:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    2418:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    241c:	4b435f4d 	blmi	10da158 <__Stack_Size+0x10d9d58>
    2420:	49540044 	ldmdbmi	r4, {r2, r6}^
    2424:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2428:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    242c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2430:	00666544 	rsbeq	r6, r6, r4, asr #10
    2434:	5f4d4954 	svcpl	0x004d4954
    2438:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    243c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2440:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2444:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2448:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    244c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 170b <__Stack_Size+0x130b>
    2450:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    2454:	65725047 	ldrbvs	r5, [r2, #-71]!	; 0xffffffb9
    2458:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    245c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2460:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2464:	434e7843 	movtmi	r7, #59459	; 0xe843
    2468:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    246c:	616e6574 	smcvs	58964	; 0xe654
    2470:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2474:	5f4d4954 	svcpl	0x004d4954
    2478:	5032434f 	eorspl	r4, r2, pc, asr #6
    247c:	6f6c6572 	svcvs	0x006c6572
    2480:	6f436461 	svcvs	0x00436461
    2484:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2488:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    248c:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2490:	4f646563 	svcmi	0x00646563
    2494:	6f433243 	svcvs	0x00433243
    2498:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    249c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24a0:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    24a4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    24a8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    24ac:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    24b0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    24b4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    24b8:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    24bc:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
    24c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24c4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    24c8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    24cc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    24d0:	4d444343 	stclmi	3, cr4, [r4, #-268]	; 0xfffffef4
    24d4:	49540041 	ldmdbmi	r4, {r0, r6}^
    24d8:	504f5f4d 	subpl	r5, pc, sp, asr #30
    24dc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    24e0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24e4:	31434f5f 	cmpcc	r3, pc, asr pc
    24e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    24ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24f0:	31434f5f 	cmpcc	r3, pc, asr pc
    24f4:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    24f8:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    24fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2500:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2504:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2508:	6c6f5031 	stclvs	0, cr5, [pc], #-196	; 244c <__Stack_Size+0x204c>
    250c:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2510:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2514:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    2518:	70614374 	rsbvc	r4, r1, r4, ror r3
    251c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    2520:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    2524:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2528:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    252c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2530:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2534:	636d7370 	cmnvs	sp, #112, 6	; 0xc0000001
    2538:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    253c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2540:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    2544:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2548:	00676966 	rsbeq	r6, r7, r6, ror #18
    254c:	784d4954 	stmdavc	sp, {r2, r4, r6, r8, fp, lr}^
    2550:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2554:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2558:	41646563 	cmnmi	r4, r3, ror #10
    255c:	6f697463 	svcvs	0x00697463
    2560:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2564:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2568:	34434974 	strbcc	r4, [r3], #-2420	; 0xfffff68c
    256c:	73657250 	cmnvc	r5, #80, 4
    2570:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2574:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2578:	6c535f4d 	mrrcvs	15, 4, r5, r3, cr13
    257c:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2580:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2584:	5f4d4954 	svcpl	0x004d4954
    2588:	4953534f 	ldmdbmi	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    258c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2590:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2594:	31726370 	cmncc	r2, r0, ror r3
    2598:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    259c:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    25a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    25a4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25a8:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    25ac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    25b0:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 25b8 <__Stack_Size+0x21b8>
    25b4:	6f433265 	svcvs	0x00433265
    25b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25bc:	31495400 	cmpcc	r9, r0, lsl #8
    25c0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    25c4:	00676966 	rsbeq	r6, r7, r6, ror #18
    25c8:	5f4d4954 	svcpl	0x004d4954
    25cc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    25d0:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0xffffff9f
    25d4:	00326572 	eorseq	r6, r2, r2, ror r5
    25d8:	5f4d4954 	svcpl	0x004d4954
    25dc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    25e0:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0xffffff9f
    25e4:	00336572 	eorseq	r6, r3, r2, ror r5
    25e8:	5f4d4954 	svcpl	0x004d4954
    25ec:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    25f0:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0xffffff9f
    25f4:	00346572 	eorseq	r6, r4, r2, ror r5
    25f8:	5f4d4954 	svcpl	0x004d4954
    25fc:	736c7550 	cmnvc	ip, #80, 10	; 0x14000000
    2600:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2604:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    2608:	72754241 	rsbsvc	r4, r5, #268435460	; 0x10000004
    260c:	654c7473 	strbvs	r7, [ip, #-1139]	; 0xfffffb8d
    2610:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2614:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2618:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    261c:	53747570 	cmnpl	r4, #112, 10	; 0x1c000000
    2620:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2624:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2628:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    262c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2630:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2634:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2638:	434f7261 	movtmi	r7, #62049	; 0xf261
    263c:	66655234 			; <UNDEFINED> instruction: 0x66655234
    2640:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2644:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    2648:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    264c:	616e7265 	cmnvs	lr, r5, ror #4
    2650:	6f6c436c 	svcvs	0x006c436c
    2654:	6f436b63 	svcvs	0x00436b63
    2658:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    265c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2660:	414d445f 	cmpmi	sp, pc, asr r4
    2664:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2668:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    266c:	415f4d49 	cmpmi	pc, r9, asr #26
    2670:	72505252 	subsvc	r5, r0, #536870917	; 0x20000005
    2674:	616f6c65 	cmnvs	pc, r5, ror #24
    2678:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    267c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2680:	5f4d4954 	svcpl	0x004d4954
    2684:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2688:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    268c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2690:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
    2694:	6363706d 	cmnvs	r3, #109	; 0x6d
    2698:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    269c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    26a0:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    26a4:	446b636f 	strbtmi	r6, [fp], #-879	; 0xfffffc91
    26a8:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    26ac:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    26b0:	5f4d4954 	svcpl	0x004d4954
    26b4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    26b8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    26bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26c0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26c4:	72425f4d 	subvc	r5, r2, #308	; 0x134
    26c8:	506b6165 	rsbpl	r6, fp, r5, ror #2
    26cc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    26d0:	00797469 	rsbseq	r7, r9, r9, ror #8
    26d4:	5f4d4954 	svcpl	0x004d4954
    26d8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    26dc:	754f7463 	strbvc	r7, [pc, #-1123]	; 2281 <__Stack_Size+0x1e81>
    26e0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    26e4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    26e8:	00726567 	rsbseq	r6, r2, r7, ror #10
    26ec:	5f4d4954 	svcpl	0x004d4954
    26f0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    26f4:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    26f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    26fc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2700:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    2704:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2708:	63656c65 	cmnvs	r5, #25856	; 0x6500
    270c:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2710:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    2714:	4c465f4d 	mcrrmi	15, 4, r5, r6, cr13
    2718:	54004741 	strpl	r4, [r0], #-1857	; 0xfffff8bf
    271c:	4c5f4d49 	mrrcmi	13, 4, r4, pc, cr9	; <UNPREDICTABLE>
    2720:	4c4b434f 	mcrrmi	3, 4, r4, fp, cr15
    2724:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    2728:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    272c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2730:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2734:	00726574 	rsbseq	r6, r2, r4, ror r5
    2738:	5f4d4954 	svcpl	0x004d4954
    273c:	6f636e45 	svcvs	0x00636e45
    2740:	4d726564 	cfldr64mi	mvdx6, [r2, #-400]!	; 0xfffffe70
    2744:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2748:	5f4d4954 	svcpl	0x004d4954
    274c:	72504349 	subsvc	r4, r0, #603979777	; 0x24000001
    2750:	61637365 	cmnvs	r3, r5, ror #6
    2754:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2758:	5f4d4954 	svcpl	0x004d4954
    275c:	6c43434f 	mcrrvs	3, 4, r4, r3, cr15
    2760:	00726165 	rsbseq	r6, r2, r5, ror #2
    2764:	5f4d4954 	svcpl	0x004d4954
    2768:	52435350 	subpl	r5, r3, #80, 6	; 0x40000001
    276c:	616f6c65 	cmnvs	pc, r5, ror #24
    2770:	646f4d64 	strbtvs	r4, [pc], #-3428	; 2778 <__Stack_Size+0x2378>
    2774:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2778:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    277c:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    2780:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2784:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2788:	73657250 	cmnvc	r5, #80, 4
    278c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2790:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2794:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    2798:	73614241 	cmnvc	r1, #268435460	; 0x10000004
    279c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    27a0:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    27a4:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    27a8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27ac:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    27b0:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    27b4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    27b8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    27bc:	6c6c6148 	stfvse	f6, [ip], #-288	; 0xfffffee0
    27c0:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    27c4:	5400726f 	strpl	r7, [r0], #-623	; 0xfffffd91
    27c8:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    27cc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    27d0:	45657461 	strbmi	r7, [r5, #-1121]!	; 0xfffffb9f
    27d4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    27d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    27dc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    27e0:	50324349 	eorspl	r4, r2, r9, asr #6
    27e4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    27e8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    27ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    27f0:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    27f4:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    27f8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    27fc:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    2800:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2804:	00676966 	rsbeq	r6, r7, r6, ror #18
    2808:	5f4d4954 	svcpl	0x004d4954
    280c:	4e784343 	cdpmi	3, 7, cr4, cr8, cr3, {2}
    2810:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2814:	6572425f 	ldrbvs	r4, [r2, #-607]!	; 0xfffffda1
    2818:	54006b61 	strpl	r6, [r0], #-2913	; 0xfffff49f
    281c:	4f5f4d49 	svcmi	0x005f4d49
    2820:	6f504e43 	svcvs	0x00504e43
    2824:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2828:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    282c:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2834 <__Stack_Size+0x2434>
    2830:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2834:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2838:	4c436c61 	mcrrmi	12, 6, r6, r3, cr1
    283c:	756f534b 	strbvc	r5, [pc, #-843]!	; 24f9 <__Stack_Size+0x20f9>
    2840:	00656372 	rsbeq	r6, r5, r2, ror r3
    2844:	5f4d4954 	svcpl	0x004d4954
    2848:	61647055 	qdsubvs	r7, r5, r4
    284c:	69446574 	stmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2850:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    2854:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2858:	00676966 	rsbeq	r6, r7, r6, ror #18
    285c:	5f4d4954 	svcpl	0x004d4954
    2860:	61647055 	qdsubvs	r7, r5, r4
    2864:	6f536574 	svcvs	0x00536574
    2868:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    286c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2870:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2874:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2878:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    287c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2880:	6f435f33 	svcvs	0x00435f33
    2884:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2888:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    288c:	756f435f 	strbvc	r4, [pc, #-863]!	; 2535 <__Stack_Size+0x2135>
    2890:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2894:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2898:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    289c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    28a0:	535f4d49 	cmppl	pc, #4672	; 0x1240
    28a4:	6f437465 	svcvs	0x00437465
    28a8:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    28ac:	54003365 	strpl	r3, [r0], #-869	; 0xfffffc9b
    28b0:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    28b4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    28b8:	5233434f 	eorspl	r4, r3, #1006632961	; 0x3c000001
    28bc:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    28c0:	4f5f4d49 	svcmi	0x005f4d49
    28c4:	6e493443 	cdpvs	4, 4, cr3, cr9, cr3, {2}
    28c8:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    28cc:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    28d0:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    28d4:	34434f64 	strbcc	r4, [r3], #-3940	; 0xfffff09c
    28d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    28dc:	6c006769 	stcvs	7, cr6, [r0], {105}	; 0x69
    28e0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    28e4:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    28e8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    28ec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    28f0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    28f4:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    28f8:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    28fc:	6f437465 	svcvs	0x00437465
    2900:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2904:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2908:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    290c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2910:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2914:	45007463 	strmi	r7, [r0, #-1123]	; 0xfffffb9d
    2918:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    291c:	6c694647 	stclvs	6, cr4, [r9], #-284	; 0xfffffee4
    2920:	00726574 	rsbseq	r6, r2, r4, ror r5
    2924:	5f4d4954 	svcpl	0x004d4954
    2928:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    292c:	6c537463 	cfldrdvs	mvd7, [r3], {99}	; 0x63
    2930:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2934:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2938:	5f4d4954 	svcpl	0x004d4954
    293c:	4631434f 	ldrtmi	r4, [r1], -pc, asr #6
    2940:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2944:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2948:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    294c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2950:	6c64494e 	stclvs	9, cr4, [r4], #-312	; 0xfffffec8
    2954:	61745365 	cmnvs	r4, r5, ror #6
    2958:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    295c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1c1b <__Stack_Size+0x181b>
    2960:	6f435254 	svcvs	0x00435254
    2964:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2968:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    296c:	31434f5f 	cmpcc	r3, pc, asr pc
    2970:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 2840 <__Stack_Size+0x2440>
    2974:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2978:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    297c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2980:	5f4d4954 	svcpl	0x004d4954
    2984:	53504349 	cmppl	r0, #603979777	; 0x24000001
    2988:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    298c:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2990:	53746e65 	cmnpl	r4, #1616	; 0x650
    2994:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2998:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    299c:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    29a0:	74003172 	strvc	r3, [r0], #-370	; 0xfffffe8e
    29a4:	6363706d 	cmnvs	r3, #109	; 0x6d
    29a8:	0032726d 	eorseq	r7, r2, sp, ror #4
    29ac:	5f4d4954 	svcpl	0x004d4954
    29b0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    29b4:	006c656e 	rsbeq	r6, ip, lr, ror #10
    29b8:	5f4d4954 	svcpl	0x004d4954
    29bc:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    29c0:	4f437463 	svcmi	0x00437463
    29c4:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    29c8:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    29cc:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    29d0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    29d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    29d8:	69006c6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}
    29dc:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    29e0:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    29e4:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    29e8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    29ec:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    29f0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    29f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    29f8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    29fc:	6b636f6c 	blvs	18de7b4 <__Stack_Size+0x18de3b4>
    2a00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a04:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2a08:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2a0c:	43497465 	movtmi	r7, #37989	; 0x9465
    2a10:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0xffffffcf
    2a14:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2a18:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2a1c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2a20:	54007843 	strpl	r7, [r0], #-2115	; 0xfffff7bd
    2a24:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2a28:	43497465 	movtmi	r7, #37989	; 0x9465
    2a2c:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0xffffffcd
    2a30:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2a34:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2a38:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2a3c:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
    2a40:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2a44:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    2a48:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1d07 <__Stack_Size+0x1907>
    2a4c:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2a50:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2a54:	3165646f 	cmncc	r5, pc, ror #8
    2a58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a5c:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    2a60:	6363706d 	cmnvs	r3, #109	; 0x6d
    2a64:	0078726d 	rsbseq	r7, r8, sp, ror #4
    2a68:	5f4d4954 	svcpl	0x004d4954
    2a6c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2a70:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
    2a74:	6c755065 	ldclvs	0, cr5, [r5], #-404	; 0xfffffe6c
    2a78:	6f4d6573 	svcvs	0x004d6573
    2a7c:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    2a80:	4f5f4d49 	svcmi	0x005f4d49
    2a84:	646f4d43 	strbtvs	r4, [pc], #-3395	; 2a8c <__Stack_Size+0x268c>
    2a88:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a8c:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2a90:	6f534f47 	svcvs	0x00534f47
    2a94:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2a98:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a9c:	53534f5f 	cmppl	r3, #380	; 0x17c
    2aa0:	61745352 	cmnvs	r4, r2, asr r3
    2aa4:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    2aa8:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2aac:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 29a8 <__Stack_Size+0x25a8>
    2ab0:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2ab4:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2ab8:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xfffff0b3
    2abc:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2ac0:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xfffff0b3
    2ac4:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2ac8:	6f636900 	svcvs	0x00636900
    2acc:	736f7070 	cmnvc	pc, #112	; 0x70
    2ad0:	70657469 	rsbvc	r7, r5, r9, ror #8
    2ad4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2ad8:	00797469 	rsbseq	r7, r9, r9, ror #8
    2adc:	5f4d4954 	svcpl	0x004d4954
    2ae0:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2ae4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ae8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2aec:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2af0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2af4:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2af8:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    2afc:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2b04 <__Stack_Size+0x2704>
    2b00:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2b04:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2b08:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2b0c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2b10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b14:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2b18:	614d5f4d 	cmpvs	sp, sp, asr #30
    2b1c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2b20:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2b24:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2b2c <__Stack_Size+0x272c>
    2b28:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2b2c:	75415f4d 	strbvc	r5, [r1, #-3917]	; 0xfffff0b3
    2b30:	616d6f74 	smcvs	55028	; 0xd6f4
    2b34:	4f636974 	svcmi	0x00636974
    2b38:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2b3c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2b44:	74754174 	ldrbtvc	r4, [r5], #-372	; 0xfffffe8c
    2b48:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    2b4c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    2b50:	5f4d4954 	svcpl	0x004d4954
    2b54:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2b58:	534e7475 	movtpl	r7, #58485	; 0xe475
    2b5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2b60:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b64:	414d445f 	cmpmi	sp, pc, asr r4
    2b68:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2b6c:	5f4d4954 	svcpl	0x004d4954
    2b70:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2b74:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    2b78:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2b7c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2b80:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2b84:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2b88:	6f503243 	svcvs	0x00503243
    2b8c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2b90:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    2b94:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2b98:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    2b9c:	31434f64 	cmpcc	r3, r4, ror #30
    2ba0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ba4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2ba8:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    2bac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bb0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2bb4:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xfffff0b3
    2bb8:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2bbc:	5400656d 	strpl	r6, [r0], #-1389	; 0xfffffa93
    2bc0:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2bc8 <__Stack_Size+0x27c8>
    2bc4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2bc8:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2bcc:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2bd0:	6f504e32 	svcvs	0x00504e32
    2bd4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2bd8:	6f437974 	svcvs	0x00437974
    2bdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2be0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2be4:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    2be8:	616c6f50 	cmnvs	ip, r0, asr pc
    2bec:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2bf0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bf4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2bf8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2bfc:	53525444 	cmppl	r2, #68, 8	; 0x44000000
    2c00:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2c04:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2c08:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2c0c:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2c10:	4f726165 	svcmi	0x00726165
    2c14:	65523143 	ldrbvs	r3, [r2, #-323]	; 0xfffffebd
    2c18:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2c1c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c20:	6c6f5033 	stclvs	0, cr5, [pc], #-204	; 2b5c <__Stack_Size+0x275c>
    2c24:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2c28:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2c2c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c30:	5f4d4954 	svcpl	0x004d4954
    2c34:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0xfffff7bb
    2c38:	6f504752 	svcvs	0x00504752
    2c3c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2c40:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    2c44:	505f4d49 	subspl	r4, pc, r9, asr #26
    2c48:	43494d57 	movtmi	r4, #40279	; 0x9d57
    2c4c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c50:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c54:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    2c58:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2c5c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2c60:	6d740073 	ldclvs	0, cr0, [r4, #-460]!	; 0xfffffe34
    2c64:	32726370 	rsbscc	r6, r2, #112, 6	; 0xc0000001
    2c68:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c6c:	0054495f 	subseq	r4, r4, pc, asr r9
    2c70:	5f4d4954 	svcpl	0x004d4954
    2c74:	63726f46 	cmnvs	r2, #280	; 0x118
    2c78:	434f6465 	movtmi	r6, #62565	; 0xf465
    2c7c:	6e6f4333 	mcrvs	3, 3, r4, cr15, cr3, {1}
    2c80:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c84:	5f4d4954 	svcpl	0x004d4954
    2c88:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2c8c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2c90:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2c94:	6c694643 	stclvs	6, cr4, [r9], #-268	; 0xfffffef4
    2c98:	00726574 	rsbseq	r6, r2, r4, ror r5
    2c9c:	5f4d4954 	svcpl	0x004d4954
    2ca0:	53414d44 	movtpl	r4, #7492	; 0x1d44
    2ca4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2ca8:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2cac:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2cb0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2cb4:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    2cb8:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    2cbc:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2cc0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2cc4:	5f4d4954 	svcpl	0x004d4954
    2cc8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2ccc:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2cd0:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
    2cd4:	67676972 			; <UNDEFINED> instruction: 0x67676972
    2cd8:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2cdc:	4f5f4d49 	svcmi	0x005f4d49
    2ce0:	6f503243 	svcvs	0x00503243
    2ce4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2ce8:	6f437974 	svcvs	0x00437974
    2cec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cf0:	73795300 	cmnvc	r9, #0, 6
    2cf4:	6b636954 	blvs	18dd24c <__Stack_Size+0x18dce4c>
    2cf8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2cfc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2d00:	00726574 	rsbseq	r6, r2, r4, ror r5
    2d04:	2f62696c 	svccs	0x0062696c
    2d08:	2f637273 	svccs	0x00637273
    2d0c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2d10:	30316632 	eorscc	r6, r1, r2, lsr r6
    2d14:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2d18:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    2d1c:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    2d20:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    2d24:	5f6b6369 	svcpl	0x006b6369
    2d28:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2d2c:	5367616c 	cmnpl	r7, #108, 2
    2d30:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2d34:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    2d38:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2d3c:	4c465f6b 	mcrrmi	15, 6, r5, r6, cr11
    2d40:	43004741 	movwmi	r4, #1857	; 0x741
    2d44:	42494c41 	submi	r4, r9, #16640	; 0x4100
    2d48:	73795300 	cmnvc	r9, #0, 6
    2d4c:	6b636954 	blvs	18dd2a4 <__Stack_Size+0x18dcea4>
    2d50:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2d54:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2d58:	52544300 	subspl	r4, r4, #0, 6
    2d5c:	7953004c 	ldmdbvc	r3, {r2, r3, r6}^
    2d60:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2d64:	6f435f6b 	svcvs	0x00435f6b
    2d68:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2d6c:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    2d70:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    2d74:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    2d78:	756f534b 	strbvc	r5, [pc, #-843]!	; 2a35 <__Stack_Size+0x2635>
    2d7c:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    2d80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d84:	4f4c0067 	svcmi	0x004c0067
    2d88:	53004441 	movwpl	r4, #1089	; 0x441
    2d8c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2d90:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2d94:	6f534b4c 	svcvs	0x00534b4c
    2d98:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2d9c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    2da0:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    2da4:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2da8:	00726564 	rsbseq	r6, r2, r4, ror #10
    2dac:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2db0:	50435f54 	subpl	r5, r3, r4, asr pc
    2db4:	55004148 	strpl	r4, [r0, #-328]	; 0xfffffeb8
    2db8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2dbc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2dc0:	73657250 	cmnvc	r5, #80, 4
    2dc4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2dc8:	53550072 	cmppl	r5, #114	; 0x72
    2dcc:	5f545241 	svcpl	0x00545241
    2dd0:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    2dd4:	6b616572 	blvs	185c3a4 <__Stack_Size+0x185bfa4>
    2dd8:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    2ddc:	654c7463 	strbvs	r7, [ip, #-1123]	; 0xfffffb9d
    2de0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2de4:	41535500 	cmpmi	r3, r0, lsl #10
    2de8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2dec:	6b636f6c 	blvs	18deba4 <__Stack_Size+0x18de7a4>
    2df0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2df4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2df8:	00666544 	rsbeq	r6, r6, r4, asr #10
    2dfc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e00:	61485f54 	cmpvs	r8, r4, asr pc
    2e04:	7544666c 	strbvc	r6, [r4, #-1644]	; 0xfffff994
    2e08:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    2e0c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2e10:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e14:	61575f54 	cmpvs	r7, r4, asr pc
    2e18:	7055656b 	subsvc	r6, r5, fp, ror #10
    2e1c:	41535500 	cmpmi	r3, r0, lsl #10
    2e20:	445f5452 	ldrbmi	r5, [pc], #-1106	; 2e28 <__Stack_Size+0x2a28>
    2e24:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2e28:	53550064 	cmppl	r5, #100	; 0x64
    2e2c:	5f545241 	svcpl	0x00545241
    2e30:	55005449 	strpl	r5, [r0, #-1097]	; 0xfffffbb7
    2e34:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2e38:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    2e3c:	646f4d41 	strbtvs	r4, [pc], #-3393	; 2e44 <__Stack_Size+0x2a44>
    2e40:	70610065 	rsbvc	r0, r1, r5, rrx
    2e44:	6f6c6362 	svcvs	0x006c6362
    2e48:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    2e4c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2e50:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2e54:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    2e58:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    2e5c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2e60:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    2e64:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2e68:	6175475f 	cmnvs	r5, pc, asr r7
    2e6c:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2e70:	5500656d 	strpl	r6, [r0, #-1389]	; 0xfffffa93
    2e74:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2e78:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2e7c:	61657242 	cmnvs	r5, r2, asr #4
    2e80:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
    2e84:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    2e88:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    2e8c:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    2e90:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e98:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    2e9c:	55004741 	strpl	r4, [r0, #-1857]	; 0xfffff8bf
    2ea0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2ea4:	6f6c435f 	svcvs	0x006c435f
    2ea8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2eac:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    2eb0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    2eb4:	41535500 	cmpmi	r3, r0, lsl #10
    2eb8:	445f5452 	ldrbmi	r5, [pc], #-1106	; 2ec0 <__Stack_Size+0x2ac0>
    2ebc:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0xfffffeb3
    2ec0:	53550071 	cmppl	r5, #113	; 0x71
    2ec4:	5f545241 	svcpl	0x00545241
    2ec8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2ecc:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    2ed0:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2ed4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2ed8:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    2edc:	61627874 	smcvs	10116	; 0x2784
    2ee0:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
    2ee4:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2ee8:	6b636f6c 	blvs	18deca0 <__Stack_Size+0x18de8a0>
    2eec:	61745373 	cmnvs	r4, r3, ror r3
    2ef0:	00737574 	rsbseq	r7, r3, r4, ror r5
    2ef4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ef8:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    2efc:	64644174 	strbtvs	r4, [r4], #-372	; 0xfffffe8c
    2f00:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2f04:	41535500 	cmpmi	r3, r0, lsl #10
    2f08:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2f0c:	75477465 	strbvc	r7, [r7, #-1125]	; 0xfffffb9b
    2f10:	54647261 	strbtpl	r7, [r4], #-609	; 0xfffffd9f
    2f14:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2f18:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f1c:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xfffff0ac
    2f20:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    2f24:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2f28:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f2c:	6c007854 	stcvs	8, cr7, [r0], {84}	; 0x54
    2f30:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2f34:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2f38:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2f3c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2f40:	6173755f 	cmnvs	r3, pc, asr r5
    2f44:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    2f48:	41535500 	cmpmi	r3, r0, lsl #10
    2f4c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f50:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2f54:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2f58:	53550074 	cmppl	r5, #116	; 0x74
    2f5c:	5f545241 	svcpl	0x00545241
    2f60:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2f64:	00737365 	rsbseq	r7, r3, r5, ror #6
    2f68:	70746962 	rsbsvc	r6, r4, r2, ror #18
    2f6c:	5500736f 	strpl	r7, [r0, #-879]	; 0xfffffc91
    2f70:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    2f74:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    2f78:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    2f7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2f80:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f84:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2f88:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2f8c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f90:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
    2f94:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2f98:	61577265 	cmpvs	r7, r5, ror #4
    2f9c:	7055656b 	subsvc	r6, r5, fp, ror #10
    2fa0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2fa4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fa8:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    2fac:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    2fb0:	53550064 	cmppl	r5, #100	; 0x64
    2fb4:	5f545241 	svcpl	0x00545241
    2fb8:	434e494c 	movtmi	r4, #59724	; 0xe94c
    2fbc:	6600646d 	strvs	r6, [r0], -sp, ror #8
    2fc0:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    2fc4:	616e6f69 	cmnvs	lr, r9, ror #30
    2fc8:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    2fcc:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2fd0:	41535500 	cmpmi	r3, r0, lsl #10
    2fd4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2fd8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2fdc:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    2fe0:	4b43414e 	blmi	10d3520 <__Stack_Size+0x10d3120>
    2fe4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2fe8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fec:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2ff0:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2ff4:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    2ff8:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    2ffc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    3000:	6f6c435f 	svcvs	0x006c435f
    3004:	6e496b63 	vmlsvs.f64	d22, d9, d19
    3008:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    300c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    3010:	6b61575f 	blvs	1858d94 <__Stack_Size+0x1858994>
    3014:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    3018:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    301c:	53550067 	cmppl	r5, #103	; 0x67
    3020:	5f545241 	svcpl	0x00545241
    3024:	73657250 	cmnvc	r5, #80, 4
    3028:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    302c:	53550072 	cmppl	r5, #114	; 0x72
    3030:	5f545241 	svcpl	0x00545241
    3034:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    3038:	6d746900 	ldclvs	9, cr6, [r4, #-0]
    303c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    3040:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3044:	614c5f54 	cmpvs	ip, r4, asr pc
    3048:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    304c:	73750074 	cmnvc	r5, #116	; 0x74
    3050:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    3054:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    3058:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    305c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    3060:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    3064:	62655f00 	rsbvs	r5, r5, #0, 30
    3068:	5f007373 	svcpl	0x00007373
    306c:	61747365 	cmnvs	r4, r5, ror #6
    3070:	6c006b63 	stcvs	11, cr6, [r0], {99}	; 0x63
    3074:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3078:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    307c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3080:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3084:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    3088:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    308c:	75700063 	ldrbvc	r0, [r0, #-99]!	; 0xffffff9d
    3090:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
    3094:	735f0074 	cmpvc	pc, #116	; 0x74
    3098:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    309c:	75700061 	ldrbvc	r0, [r0, #-97]!	; 0xffffff9f
    30a0:	6372536c 	cmnvs	r2, #108, 6	; 0xb0000001
    30a4:	705f6700 	subsvc	r6, pc, r0, lsl #14
    30a8:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xfffff19a
    30ac:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    30b0:	735f0073 	cmpvc	pc, #115	; 0x73
    30b4:	00737362 	rsbseq	r7, r3, r2, ror #6
    30b8:	6164735f 	cmnvs	r4, pc, asr r3
    30bc:	5f006174 	svcpl	0x00006174
    30c0:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
    30c4:	61530061 	cmpvs	r3, r1, rrx
    30c8:	74536576 	ldrbvc	r6, [r3], #-1398	; 0xfffffa8a
    30cc:	00657461 	rsbeq	r7, r5, r1, ror #8
    30d0:	65735570 	ldrbvs	r5, [r3, #-1392]!	; 0xfffffa90
    30d4:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xfffff08e
    30d8:	61646e61 	cmnvs	r4, r1, ror #28
    30dc:	525f6472 	subspl	r6, pc, #1912602624	; 0x72000000
    30e0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    30e4:	00737473 	rsbseq	r7, r3, r3, ror r4
    30e8:	2f62696c 	svccs	0x0062696c
    30ec:	5f425355 	svcpl	0x00425355
    30f0:	2f62696c 	svccs	0x0062696c
    30f4:	2f637273 	svccs	0x00637273
    30f8:	5f627375 	svcpl	0x00627375
    30fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    3100:	4500632e 	strmi	r6, [r0, #-814]	; 0xfffffcd2
    3104:	646e6950 	strbtvs	r6, [lr], #-2384	; 0xfffff6b0
    3108:	70007865 	andvc	r7, r0, r5, ror #16
    310c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    3110:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3114:	4f435f00 	svcmi	0x00435f00
    3118:	4f52544e 	svcmi	0x0052544e
    311c:	54535f4c 	ldrbpl	r5, [r3], #-3916	; 0xfffff0b4
    3120:	00455441 	subeq	r5, r5, r1, asr #8
    3124:	5345445f 	movtpl	r4, #21599	; 0x545f
    3128:	50495243 	subpl	r5, r9, r3, asr #4
    312c:	5f524f54 	svcpl	0x00524f54
    3130:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3134:	62696c00 	rsbvs	r6, r9, #0, 24
    3138:	4253552f 	subsmi	r5, r3, #197132288	; 0xbc00000
    313c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3140:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3144:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    3148:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    314c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    3150:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    3154:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    3158:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    315c:	65467261 	strbvs	r7, [r6, #-609]	; 0xfffffd9f
    3160:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    3164:	414c0065 	cmpmi	ip, r5, rrx
    3168:	4f5f5453 	svcmi	0x005f5453
    316c:	445f5455 	ldrbmi	r5, [pc], #-1109	; 3174 <__Stack_Size+0x2d74>
    3170:	00415441 	subeq	r5, r1, r1, asr #8
    3174:	3074754f 	rsbscc	r7, r4, pc, asr #10
    3178:	6f72505f 	svcvs	0x0072505f
    317c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    3180:	70795400 	rsbsvc	r5, r9, r0, lsl #8
    3184:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xfffff09b
    3188:	42700063 	rsbsmi	r0, r0, #99	; 0x63
    318c:	47006675 	smlsdxmi	r0, r5, r6, r6
    3190:	50457465 	subpl	r7, r5, r5, ror #8
    3194:	64417852 	strbvs	r7, [r1], #-2130	; 0xfffff7ae
    3198:	53007264 	movwpl	r7, #612	; 0x264
    319c:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    31a0:	5f647261 	svcpl	0x00647261
    31a4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    31a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    31ac:	61727567 	cmnvs	r2, r7, ror #10
    31b0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    31b4:	4e4f4300 	cdpmi	3, 4, cr4, cr15, cr0, {0}
    31b8:	5f474946 	svcpl	0x00474946
    31bc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    31c0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0xfffff6ae
    31c4:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
    31c8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31cc:	00646576 	rsbeq	r6, r4, r6, ror r5
    31d0:	5f306e49 	svcpl	0x00306e49
    31d4:	636f7250 	cmnvs	pc, #80, 4
    31d8:	00737365 	rsbseq	r7, r3, r5, ror #6
    31dc:	5f544553 	svcpl	0x00544553
    31e0:	54414546 	strbpl	r4, [r1], #-1350	; 0xfffffaba
    31e4:	00455255 	subeq	r5, r5, r5, asr r2
    31e8:	4145465f 	cmpmi	r5, pc, asr r6
    31ec:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0xfffffaac
    31f0:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
    31f4:	4f544345 	svcmi	0x00544345
    31f8:	45440052 	strbmi	r0, [r4, #-82]	; 0xffffffae
    31fc:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    3200:	4d45525f 	sfmmi	f5, 2, [r5, #-380]	; 0xfffffe84
    3204:	5f45544f 	svcpl	0x0045544f
    3208:	454b4157 	strbmi	r4, [fp, #-343]	; 0xfffffea9
    320c:	57005055 	smlsdpl	r0, r5, r0, r5
    3210:	5f544941 	svcpl	0x00544941
    3214:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    3218:	4f5f5355 	svcmi	0x005f5355
    321c:	57005455 	smlsdpl	r0, r5, r4, r5
    3220:	5f544941 	svcpl	0x00544941
    3224:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    3228:	666f0050 			; <UNDEFINED> instruction: 0x666f0050
    322c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3230:	53414c00 	movtpl	r4, #7168	; 0x1c00
    3234:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3238:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    323c:	45530041 	ldrbmi	r0, [r3, #-65]	; 0xffffffbf
    3240:	44415f54 	strbmi	r5, [r1], #-3924	; 0xfffff0ac
    3244:	53455244 	movtpl	r5, #21060	; 0x5244
    3248:	65470053 	strbvs	r0, [r7, #-83]	; 0xffffffad
    324c:	54504574 	ldrbpl	r4, [r0], #-1396	; 0xfffffa8c
    3250:	64644178 	strbtvs	r4, [r4], #-376	; 0xfffffe88
    3254:	74530072 	ldrbvc	r0, [r3], #-114	; 0xffffff8e
    3258:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    325c:	6f666e49 	svcvs	0x00666e49
    3260:	544f5400 	strbpl	r5, [pc], #-1024	; 3268 <__Stack_Size+0x2e68>
    3264:	735f4c41 	cmpvc	pc, #16640	; 0x4100
    3268:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0xfffffaae
    326c:	00545345 	subseq	r5, r4, r5, asr #6
    3270:	646e4977 	strbtvs	r4, [lr], #-2423	; 0xfffff689
    3274:	00307865 	eorseq	r7, r0, r5, ror #16
    3278:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0xfffffe8d
    327c:	654c775f 	strbvs	r7, [ip, #-1887]	; 0xfffff8a1
    3280:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3284:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    3288:	6f4e5f74 	svcvs	0x004e5f74
    328c:	61746144 	cmnvs	r4, r4, asr #2
    3290:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3294:	00307075 	eorseq	r7, r0, r5, ror r0
    3298:	5f544553 	svcpl	0x00544553
    329c:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    32a0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0xfffff6ae
    32a4:	4400524f 	strmi	r5, [r0], #-591	; 0xfffffdb1
    32a8:	5f617461 	svcpl	0x00617461
    32ac:	5f6c754d 	svcpl	0x006c754d
    32b0:	5078614d 	rsbspl	r6, r8, sp, asr #2
    32b4:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    32b8:	7a695374 	bvc	1a58090 <__Stack_Size+0x1a57c90>
    32bc:	45700065 	ldrbmi	r0, [r0, #-101]!	; 0xffffff9b
    32c0:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    32c4:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0xffffff91
    32c8:	4e495454 	mcrmi	4, 2, r5, cr9, cr4, {2}
    32cc:	50555f47 	subspl	r5, r5, r7, asr #30
    32d0:	61745300 	cmnvs	r4, r0, lsl #6
    32d4:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    32d8:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xfffff09c
    32dc:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    32e0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    32e4:	61654674 	smcvs	21604	; 0x5464
    32e8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    32ec:	736f5000 	cmnvc	pc, #0
    32f0:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    32f4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    32f8:	45007373 	strmi	r7, [r0, #-883]	; 0xfffffc8d
    32fc:	4f50444e 	svcmi	0x0050444e
    3300:	5f544e49 	svcpl	0x00544e49
    3304:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    3308:	4547004c 	strbmi	r0, [r7, #-76]	; 0xffffffb4
    330c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3310:	46524554 			; <UNDEFINED> instruction: 0x46524554
    3314:	00454341 	subeq	r4, r5, r1, asr #6
    3318:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
    331c:	00316575 	eorseq	r6, r1, r5, ror r5
    3320:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    3324:	70617753 	rsbvc	r7, r1, r3, asr r7
    3328:	656c4300 	strbvs	r4, [ip, #-768]!	; 0xfffffd00
    332c:	54447261 	strbpl	r7, [r4], #-609	; 0xfffffd9f
    3330:	525f474f 	subspl	r4, pc, #20709376	; 0x13c0000
    3334:	61730058 	cmnvs	r3, r8, asr r0
    3338:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
    333c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    3340:	43006874 	movwmi	r6, #2164	; 0x874
    3344:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    3348:	4145465f 	cmpmi	r5, pc, asr r6
    334c:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0xfffffaac
    3350:	41545300 	cmpmi	r4, r0, lsl #6
    3354:	44454c4c 	strbmi	r4, [r5], #-3148	; 0xfffff3b4
    3358:	74614400 	strbtvc	r4, [r1], #-1024	; 0xfffffc00
    335c:	61745361 	cmnvs	r4, r1, ror #6
    3360:	754f6567 	strbvc	r6, [pc, #-1383]	; 2e01 <__Stack_Size+0x2a01>
    3364:	45530074 	ldrbmi	r0, [r3, #-116]	; 0xffffff8c
    3368:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    336c:	46524554 			; <UNDEFINED> instruction: 0x46524554
    3370:	00454341 	subeq	r4, r5, r1, asr #6
    3374:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    3378:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    337c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3380:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3384:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    3388:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    338c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    3390:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    3394:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3398:	4700746e 	strmi	r7, [r0, -lr, ror #8]
    339c:	445f5445 	ldrbmi	r5, [pc], #-1093	; 33a4 <__Stack_Size+0x2fa4>
    33a0:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    33a4:	4f545049 	svcmi	0x00545049
    33a8:	54530052 	ldrbpl	r0, [r3], #-82	; 0xffffffae
    33ac:	474e4952 	smlsldmi	r4, lr, r2, r9
    33b0:	5345445f 	movtpl	r4, #21599	; 0x545f
    33b4:	50495243 	subpl	r5, r9, r3, asr #4
    33b8:	00524f54 	subseq	r4, r2, r4, asr pc
    33bc:	61746144 	cmnvs	r4, r4, asr #2
    33c0:	67617453 			; <UNDEFINED> instruction: 0x67617453
    33c4:	006e4965 	rsbeq	r4, lr, r5, ror #18
    33c8:	61656c43 	cmnvs	r5, r3, asr #24
    33cc:	4f544472 	svcmi	0x00544472
    33d0:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    33d4:	52775f00 	rsbspl	r5, r7, #0, 30
    33d8:	61566765 	cmpvs	r6, r5, ror #14
    33dc:	6553006c 	ldrbvs	r0, [r3, #-108]	; 0xffffff94
    33e0:	30707574 	rsbscc	r7, r0, r4, ror r5
    33e4:	6f72505f 	svcvs	0x0072505f
    33e8:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    33ec:	70784500 	rsbsvc	r4, r8, r0, lsl #10
    33f0:	5f746365 	svcpl	0x00746365
    33f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    33f8:	4f5f7375 	svcmi	0x005f7375
    33fc:	57007475 	smlsdxpl	r0, r5, r4, r7
    3400:	5f544941 	svcpl	0x00544941
    3404:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    3408:	495f5355 	ldmdbmi	pc, {r0, r2, r4, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    340c:	4150004e 	cmpmi	r0, lr, asr #32
    3410:	00455355 	subeq	r5, r5, r5, asr r3
    3414:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    3418:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    341c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3420:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3424:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    3428:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    342c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    3430:	6f4e5f74 	svcvs	0x004e5f74
    3434:	504f4e00 	subpl	r4, pc, r0, lsl #28
    3438:	6f72505f 	svcvs	0x0072505f
    343c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    3440:	61745300 	cmnvs	r4, r0, lsl #6
    3444:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    3448:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xfffff09c
    344c:	76654474 			; <UNDEFINED> instruction: 0x76654474
    3450:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    3454:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0xfffffe9b
    3458:	53006572 	movwpl	r6, #1394	; 0x572
    345c:	48434e59 	stmdami	r3, {r0, r3, r4, r6, r9, sl, fp, lr}^
    3460:	4152465f 	cmpmi	r2, pc, asr r6
    3464:	5000454d 	andpl	r4, r0, sp, asr #10
    3468:	6f54414d 	svcvs	0x0054414d
    346c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3470:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    3474:	6f437265 	svcvs	0x00437265
    3478:	70007970 	andvc	r7, r0, r0, ror r9
    347c:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    3480:	54454700 	strbpl	r4, [r5], #-1792	; 0xfffff900
    3484:	4154535f 	cmpmi	r4, pc, asr r3
    3488:	00535554 	subseq	r5, r3, r4, asr r5
    348c:	50444e45 	subpl	r4, r4, r5, asr #28
    3490:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
    3494:	5345445f 	movtpl	r4, #21599	; 0x545f
    3498:	50495243 	subpl	r5, r9, r3, asr #4
    349c:	00524f54 	subseq	r4, r2, r4, asr pc
    34a0:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    34a4:	5300746c 	movwpl	r7, #1132	; 0x46c
    34a8:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    34ac:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    34b0:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
    34b4:	46524554 			; <UNDEFINED> instruction: 0x46524554
    34b8:	5f454341 	svcpl	0x00454341
    34bc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    34c0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0xfffff6ae
    34c4:	7000524f 	andvc	r5, r0, pc, asr #4
    34c8:	00766544 	rsbseq	r6, r6, r4, asr #10
    34cc:	5f544547 	svcpl	0x00544547
    34d0:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    34d4:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    34d8:	4f495441 	svcmi	0x00495441
    34dc:	4544004e 	strbmi	r0, [r4, #-78]	; 0xffffffb2
    34e0:	45434956 	strbmi	r4, [r3, #-2390]	; 0xfffff6aa
    34e4:	5345445f 	movtpl	r4, #21599	; 0x545f
    34e8:	50495243 	subpl	r5, r9, r3, asr #4
    34ec:	00524f54 	subseq	r4, r2, r4, asr pc
    34f0:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    34f4:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    34f8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    34fc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3500:	53007375 	movwpl	r7, #885	; 0x375
    3504:	54657661 	strbtpl	r7, [r5], #-1633	; 0xfffff99f
    3508:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    350c:	74530065 	ldrbvc	r0, [r3], #-101	; 0xffffff9b
    3510:	61646e61 	cmnvs	r4, r1, ror #28
    3514:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    3518:	6f437465 	svcvs	0x00437465
    351c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3520:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
    3524:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3528:	5f544553 	svcpl	0x00544553
    352c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    3530:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    3534:	4f495441 	svcmi	0x00495441
    3538:	6270004e 	rsbsvs	r0, r0, #78	; 0x4e
    353c:	42727355 	rsbsmi	r7, r2, #1409286145	; 0x54000001
    3540:	77006675 	smlsdxvc	r0, r5, r6, r6
    3544:	7479424e 	ldrbtvc	r4, [r9], #-590	; 0xfffffdb2
    3548:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
    354c:	31706d65 	cmncc	r0, r5, ror #26
    3550:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    3554:	77003270 	smlsdxvc	r0, r0, r2, r3
    3558:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    355c:	64416675 	strbvs	r6, [r1], #-1653	; 0xfffff98b
    3560:	70007264 	andvc	r7, r0, r4, ror #4
    3564:	61567764 	cmpvs	r6, r4, ror #14
    3568:	696c006c 	stmdbvs	ip!, {r2, r3, r5, r6}^
    356c:	53552f62 	cmppl	r5, #392	; 0x188
    3570:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    3574:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    3578:	73752f63 	cmnvc	r5, #396	; 0x18c
    357c:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xfffff09e
    3580:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    3584:	445f5045 	ldrbmi	r5, [pc], #-69	; 358c <__Stack_Size+0x318c>
    3588:	5f465542 	svcpl	0x00465542
    358c:	00525245 	subseq	r5, r2, r5, asr #4
    3590:	6d655462 	cfstrdvs	mvd5, [r5, #-392]!	; 0xfffffe78
    3594:	6f540070 	svcvs	0x00540070
    3598:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
    359c:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    35a0:	0058525f 	subseq	r5, r8, pc, asr r2
    35a4:	61656c43 	cmnvs	r5, r3, asr #24
    35a8:	44504572 	ldrbmi	r4, [r0], #-1394	; 0xfffffa8e
    35ac:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    35b0:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    35b4:	65470066 	strbvs	r0, [r7, #-102]	; 0xffffff9a
    35b8:	41544274 	cmpmi	r4, r4, ror r2
    35bc:	00454c42 	subeq	r4, r5, r2, asr #24
    35c0:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    35c4:	00525453 	subseq	r5, r2, r3, asr r4
    35c8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    35cc:	64644150 	strbtvs	r4, [r4], #-336	; 0xfffffeb0
    35d0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    35d4:	646e4500 	strbtvs	r4, [lr], #-1280	; 0xfffffb00
    35d8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    35dc:	54445f74 	strbpl	r5, [r4], #-3956	; 0xfffff08c
    35e0:	535f474f 	cmppl	pc, #20709376	; 0x13c0000
    35e4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    35e8:	455f0073 	ldrbmi	r0, [pc, #-115]	; 357d <__Stack_Size+0x317d>
    35ec:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    35f0:	445f4655 	ldrbmi	r4, [pc], #-1621	; 35f8 <__Stack_Size+0x31f8>
    35f4:	53005249 	movwpl	r5, #585	; 0x249
    35f8:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    35fc:	53005254 	movwpl	r5, #596	; 0x254
    3600:	50457465 	subpl	r7, r5, r5, ror #8
    3604:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    3608:	43316675 	teqmi	r1, #122683392	; 0x7500000
    360c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3610:	424e7700 	submi	r7, lr, #0, 14
    3614:	6b636f6c 	blvs	18df3cc <__Stack_Size+0x18defcc>
    3618:	65530073 	ldrbvs	r0, [r3, #-115]	; 0xffffff8d
    361c:	444e4574 	strbmi	r4, [lr], #-1396	; 0xfffffa8c
    3620:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    3624:	50450054 	subpl	r0, r5, r4, asr r0
    3628:	5542445f 	strbpl	r4, [r2, #-1119]	; 0xfffffba1
    362c:	4e495f46 	cdpmi	15, 4, cr5, cr9, cr6, {2}
    3630:	656c4300 	strbvs	r4, [ip, #-768]!	; 0xfffffd00
    3634:	50457261 	subpl	r7, r5, r1, ror #4
    3638:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    363c:	0058545f 	subseq	r5, r8, pc, asr r4
    3640:	64644162 	strbtvs	r4, [r4], #-354	; 0xfffffe9e
    3644:	65470072 	strbvs	r0, [r7, #-114]	; 0xffffff8e
    3648:	544e4374 	strbpl	r4, [lr], #-884	; 0xfffffc8c
    364c:	64700052 	ldrbtvs	r0, [r0], #-82	; 0xffffffae
    3650:	67655277 			; <UNDEFINED> instruction: 0x67655277
    3654:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    3658:	00524e46 	subseq	r4, r2, r6, asr #28
    365c:	70795477 	rsbsvc	r5, r9, r7, ror r4
    3660:	65470065 	strbvs	r0, [r7, #-101]	; 0xffffff9b
    3664:	44414474 	strbmi	r4, [r1], #-1140	; 0xfffffb8c
    3668:	47005244 	strmi	r5, [r0, -r4, asr #4]
    366c:	50457465 	subpl	r7, r5, r5, ror #8
    3670:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    3674:	41306675 	teqmi	r0, r5, ror r6
    3678:	00726464 	rsbseq	r6, r2, r4, ror #8
    367c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    3680:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    3684:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3688:	65530073 	ldrbvs	r0, [r3, #-115]	; 0xffffff8d
    368c:	44504574 	ldrbmi	r4, [r0], #-1396	; 0xfffffa8c
    3690:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xfffff39e
    3694:	64416666 	strbvs	r6, [r1], #-1638	; 0xfffff99a
    3698:	47007264 	strmi	r7, [r0, -r4, ror #4]
    369c:	50457465 	subpl	r7, r5, r5, ror #8
    36a0:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    36a4:	69446675 	stmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
    36a8:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
    36ac:	53552f62 	cmppl	r5, #392	; 0x188
    36b0:	696c5f42 	stmdbvs	ip!, {r1, r6, r8, r9, sl, fp, ip, lr}^
    36b4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    36b8:	73752f63 	cmnvc	r5, #396	; 0x18c
    36bc:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
    36c0:	632e7367 			; <UNDEFINED> instruction: 0x632e7367
    36c4:	77537700 	ldrbvc	r7, [r3, -r0, lsl #14]
    36c8:	65470057 	strbvs	r0, [r7, #-87]	; 0xffffffa9
    36cc:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    36d0:	61745378 	cmnvs	r4, r8, ror r3
    36d4:	00737574 	rsbseq	r7, r3, r4, ror r5
    36d8:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    36dc:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    36e0:	30667542 	rsbcc	r7, r6, r2, asr #10
    36e4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    36e8:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    36ec:	44444144 	strbmi	r4, [r4], #-324	; 0xfffffebc
    36f0:	45620052 	strbmi	r0, [r2, #-82]!	; 0xffffffae
    36f4:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    36f8:	656c4300 	strbvs	r4, [ip, #-768]!	; 0xfffffd00
    36fc:	50457261 	subpl	r7, r5, r1, ror #4
    3700:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    3704:	0058525f 	subseq	r5, r8, pc, asr r2
    3708:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    370c:	756f4350 	strbvc	r4, [pc, #-848]!	; 33c4 <__Stack_Size+0x2fc4>
    3710:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    3714:	00676552 	rsbeq	r6, r7, r2, asr r5
    3718:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    371c:	5444656c 	strbpl	r6, [r4], #-1388	; 0xfffffa94
    3720:	545f474f 	ldrbpl	r4, [pc], #-1871	; 3728 <__Stack_Size+0x3328>
    3724:	42770058 	rsbsmi	r0, r7, #88	; 0x58
    3728:	41306675 	teqmi	r0, r5, ror r6
    372c:	00726464 	rsbseq	r6, r2, r4, ror #8
    3730:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3734:	61745378 	cmnvs	r4, r8, ror r3
    3738:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xfffff394
    373c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3740:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    3744:	62445045 	subvs	r5, r4, #69	; 0x45
    3748:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    374c:	756f4330 	strbvc	r4, [pc, #-816]!	; 3424 <__Stack_Size+0x3024>
    3750:	5300746e 	movwpl	r7, #1134	; 0x46e
    3754:	50457465 	subpl	r7, r5, r5, ror #8
    3758:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    375c:	43306675 	teqmi	r0, #122683392	; 0x7500000
    3760:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3764:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    3768:	74537854 	ldrbvc	r7, [r3], #-2132	; 0xfffff7ac
    376c:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    3770:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3774:	50450073 	subpl	r0, r5, r3, ror r0
    3778:	5542445f 	strbpl	r4, [r2, #-1119]	; 0xfffffba1
    377c:	554f5f46 	strbpl	r5, [pc, #-3910]	; 283e <__Stack_Size+0x243e>
    3780:	44620054 	strbtmi	r0, [r2], #-84	; 0xffffffac
    3784:	47007269 	strmi	r7, [r0, -r9, ror #4]
    3788:	50457465 	subpl	r7, r5, r5, ror #8
    378c:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    3790:	43316675 	teqmi	r1, #122683392	; 0x7500000
    3794:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3798:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    379c:	64415045 	strbvs	r5, [r1], #-69	; 0xffffffbb
    37a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    37a4:	6f540073 	svcvs	0x00540073
    37a8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    37ac:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    37b0:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    37b4:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    37b8:	62445045 	subvs	r5, r4, #69	; 0x45
    37bc:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    37c0:	64644131 	strbtvs	r4, [r4], #-305	; 0xfffffecf
    37c4:	65530072 	ldrbvs	r0, [r3, #-114]	; 0xffffff8e
    37c8:	44504574 	ldrbmi	r4, [r0], #-1396	; 0xfffffa8c
    37cc:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xfffff39e
    37d0:	6f436666 	svcvs	0x00436666
    37d4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    37d8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0xfffffaad
    37dc:	6c42756f 	cfstr64vs	mvdx7, [r2], {111}	; 0x6f
    37e0:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    37e4:	53504566 	cmppl	r0, #427819008	; 0x19800000
    37e8:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    37ec:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0xfffff900
    37f0:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    37f4:	47006575 	smlsdxmi	r0, r5, r5, r6
    37f8:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    37fc:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    3800:	5300544e 	movwpl	r5, #1102	; 0x44e
    3804:	50457465 	subpl	r7, r5, r5, ror #8
    3808:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    380c:	41316675 	teqmi	r1, r5, ror r6
    3810:	00726464 	rsbseq	r6, r2, r4, ror #8
    3814:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0xfffffaad
    3818:	756f4450 	strbvc	r4, [pc, #-1104]!	; 33d0 <__Stack_Size+0x2fd0>
    381c:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    3820:	00666675 	rsbeq	r6, r6, r5, ror r6
    3824:	74655277 	strbtvc	r5, [r5], #-631	; 0xfffffd89
    3828:	75427700 	strbvc	r7, [r2, #-1792]	; 0xfffff900
    382c:	64413166 	strbvs	r3, [r1], #-358	; 0xfffffe9a
    3830:	46007264 	strmi	r7, [r0], -r4, ror #4
    3834:	55656572 	strbpl	r6, [r5, #-1394]!	; 0xfffffa8e
    3838:	42726573 	rsbsmi	r6, r2, #482344960	; 0x1cc00000
    383c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    3840:	65470072 	strbvs	r0, [r7, #-114]	; 0xffffff8e
    3844:	54504574 	ldrbpl	r4, [r0], #-1396	; 0xfffffa8c
    3848:	00657079 	rsbeq	r7, r5, r9, ror r0
    384c:	41704562 	cmnmi	r0, r2, ror #10
    3850:	00726464 	rsbseq	r6, r2, r4, ror #8
    3854:	61746144 	cmnvs	r4, r4, asr #2
    3858:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    385c:	70006874 	andvc	r6, r0, r4, ror r8
    3860:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    3864:	6f507265 	svcvs	0x00507265
    3868:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    386c:	65470072 	strbvs	r0, [r7, #-114]	; 0xffffff8e
    3870:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    3874:	756f4378 	strbvc	r4, [pc, #-888]!	; 3504 <__Stack_Size+0x3104>
    3878:	6c00746e 	cfstrsvs	mvf7, [r0], {110}	; 0x6e
    387c:	552f6269 	strpl	r6, [pc, #-617]!	; 361b <__Stack_Size+0x321b>
    3880:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
    3884:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3888:	752f6372 	strvc	r6, [pc, #-882]!	; 351e <__Stack_Size+0x311e>
    388c:	735f6273 	cmpvc	pc, #805306375	; 0x30000007
    3890:	632e6c69 			; <UNDEFINED> instruction: 0x632e6c69
    3894:	52544300 	subspl	r4, r4, #0, 6
    3898:	0050485f 	subseq	r4, r0, pc, asr r8
    389c:	56504577 			; <UNDEFINED> instruction: 0x56504577
    38a0:	6c006c61 	stcvs	12, cr6, [r0], {97}	; 0x61
    38a4:	552f6269 	strpl	r6, [pc, #-617]!	; 3643 <__Stack_Size+0x3243>
    38a8:	6c5f4253 	lfmvs	f4, 2, [pc], {83}	; 0x53
    38ac:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    38b0:	752f6372 	strvc	r6, [pc, #-882]!	; 3546 <__Stack_Size+0x3146>
    38b4:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    38b8:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
       8:	00500001 	subseq	r0, r0, r1
       c:	00000000 	andeq	r0, r0, r0
      10:	04000000 	streq	r0, [r0], #-0
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
      20:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
      2c:	7f700003 	svcvc	0x00700003
      30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      34:	00000000 	andeq	r0, r0, r0
      38:	f3000400 	vshl.u8	d0, d0, d0
      3c:	009f5001 	addseq	r5, pc, r1
      40:	00000000 	andeq	r0, r0, r0
}
      44:	01000000 	mrseq	r0, (UNDEF: 0)
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
      48:	00005000 	andeq	r5, r0, r0
      4c:	00000000 	andeq	r0, r0, r0
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00040000 	andeq	r0, r4, r0
      54:	9f5001f3 	svcls	0x005001f3
	...


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
      68:	9f310002 	svcls	0x00310002
	...
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
      74:	9f310002 	svcls	0x00310002
	...
    }
          
    if(status != FLASH_BUSY)
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
      88:	00500001 	subseq	r0, r0, r1
      8c:	00000000 	andeq	r0, r0, r0
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
      90:	04000000 	streq	r0, [r0], #-0
      94:	5001f300 	andpl	pc, r1, r0, lsl #6
      98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      9c:	00000000 	andeq	r0, r0, r0
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      ac:	01f30004 	mvnseq	r0, r4
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      b0:	00009f50 	andeq	r9, r0, r0, asr pc
      b4:	00000000 	andeq	r0, r0, r0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      b8:	02280000 	eoreq	r0, r8, #0
      bc:	02300800 	eorseq	r0, r0, #0, 16
      break; 
      
    default:
      break;
  }
}
      c0:	00010800 	andeq	r0, r1, r0, lsl #16
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
      c4:	00023050 	andeq	r3, r2, r0, asr r0
      c8:	00025008 	andeq	r5, r2, r8
      cc:	f3000408 	vshl.u8	d0, d8, d0
      d0:	009f5001 	addseq	r5, pc, r1
	...
      e0:	01000000 	mrseq	r0, (UNDEF: 0)
      e4:	00005000 	andeq	r5, r0, r0
      e8:	00000000 	andeq	r0, r0, r0
      ec:	00040000 	andeq	r0, r4, r0
      f0:	9f5001f3 	svcls	0x005001f3
	...
      fc:	00540001 	subseq	r0, r4, r1
     100:	00000000 	andeq	r0, r0, r0
     104:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     108:	09007500 	stmdbeq	r0, {r8, sl, ip, sp, lr}
     10c:	00741ef6 	ldrshteq	r1, [r4], #-230	; 0xffffff1a
     110:	00009f22 	andeq	r9, r0, r2, lsr #30
     114:	00000000 	andeq	r0, r0, r0
     118:	00090000 	andeq	r0, r9, r0
     11c:	f6090075 			; <UNDEFINED> instruction: 0xf6090075
     120:	2250741e 	subscs	r7, r0, #503316480	; 0x1e000000
     124:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     134:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     140:	0075000c 	rsbseq	r0, r5, ip
     144:	640825f7 	strvs	r2, [r8], #-1527	; 0xfffffa09
     148:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
     14c:	00009f00 	andeq	r9, r0, r0, lsl #30
     150:	00000000 	andeq	r0, r0, r0
     154:	00010000 	andeq	r0, r1, r0
     158:	00000055 	andeq	r0, r0, r5, asr r0
     15c:	00000000 	andeq	r0, r0, r0
     160:	00025000 	andeq	r5, r2, r0
     164:	00025408 	andeq	r5, r2, r8, lsl #8
     168:	50000108 	andpl	r0, r0, r8, lsl #2
     16c:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
     170:	08000262 	stmdaeq	r0, {r1, r5, r6, r9}
     174:	01f30004 	mvnseq	r0, r4
     178:	00009f50 	andeq	r9, r0, r0, asr pc
     17c:	00000000 	andeq	r0, r0, r0
     180:	02500000 	subseq	r0, r0, #0
     184:	02540800 	subseq	r0, r4, #0, 16
     188:	00020800 	andeq	r0, r2, r0, lsl #16
     18c:	02549f30 	subseq	r9, r4, #48, 30	; 0xc0
     190:	02580800 	subseq	r0, r8, #0, 16
     194:	00090800 	andeq	r0, r9, r0, lsl #16
     198:	01f30074 	mvnseq	r0, r4, ror r0
     19c:	01231c50 			; <UNDEFINED> instruction: 0x01231c50
     1a0:	0002589f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     1a4:	00025e08 	andeq	r5, r2, r8, lsl #28
     1a8:	74000708 	strvc	r0, [r0], #-1800	; 0xfffff8f8
     1ac:	5001f300 	andpl	pc, r1, r0, lsl #6
     1b0:	025e9f1c 	subseq	r9, lr, #28, 30	; 0x70
     1b4:	02600800 	rsbeq	r0, r0, #0, 16
     1b8:	00090800 	andeq	r0, r9, r0, lsl #16
     1bc:	01f30074 	mvnseq	r0, r4, ror r0
     1c0:	01231c50 			; <UNDEFINED> instruction: 0x01231c50
     1c4:	0002609f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     1c8:	00026208 	andeq	r6, r2, r8, lsl #4
     1cc:	74000708 	strvc	r0, [r0], #-1800	; 0xfffff8f8
     1d0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1d4:	00009f1c 	andeq	r9, r0, ip, lsl pc
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	02620000 	rsbeq	r0, r2, #0
     1e0:	026e0800 	rsbeq	r0, lr, #0, 16
     1e4:	00010800 	andeq	r0, r1, r0, lsl #16
     1e8:	00026e50 	andeq	r6, r2, r0, asr lr
     1ec:	00029608 	andeq	r9, r2, r8, lsl #12
     1f0:	f3000408 	vshl.u8	d0, d8, d0
     1f4:	009f5001 	addseq	r5, pc, r1
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     200:	7c080002 	stcvc	0, cr0, [r8], {2}
     204:	01080002 	tsteq	r8, r2
     208:	02845000 	addeq	r5, r4, #0
     20c:	028e0800 	addeq	r0, lr, #0, 16
     210:	00010800 	andeq	r0, r1, r0, lsl #16
     214:	00000050 	andeq	r0, r0, r0, asr r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	00029600 	andeq	r9, r2, r0, lsl #12
     220:	00029c08 	andeq	r9, r2, r8, lsl #24
     224:	50000108 	andpl	r0, r0, r8, lsl #2
     228:	0800029c 	stmdaeq	r0, {r2, r3, r4, r7, r9}
     22c:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
     230:	01f30004 	mvnseq	r0, r4
     234:	00009f50 	andeq	r9, r0, r0, asr pc
     238:	00000000 	andeq	r0, r0, r0
     23c:	02aa0000 	adceq	r0, sl, #0
     240:	02b00800 	adcseq	r0, r0, #0, 16
     244:	00010800 	andeq	r0, r1, r0, lsl #16
     248:	0002b050 	andeq	fp, r2, r0, asr r0
     24c:	0002ba08 	andeq	fp, r2, r8, lsl #20
     250:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     254:	080002ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9}
     258:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
     25c:	01f30004 	mvnseq	r0, r4
     260:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     270:	00010000 	andeq	r0, r1, r0
     274:	00000050 	andeq	r0, r0, r0, asr r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	f3000400 	vshl.u8	d0, d0, d0
     280:	009f5001 	addseq	r5, pc, r1
     284:	00000000 	andeq	r0, r0, r0
     288:	01000000 	mrseq	r0, (UNDEF: 0)
     28c:	00005400 	andeq	r5, r0, r0, lsl #8
     290:	00000000 	andeq	r0, r0, r0
     294:	00090000 	andeq	r0, r9, r0
     298:	f6090075 			; <UNDEFINED> instruction: 0xf6090075
     29c:	2200741e 	andcs	r7, r0, #503316480	; 0x1e000000
     2a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	75000900 	strvc	r0, [r0, #-2304]	; 0xfffff700
     2ac:	1ef60900 	cdpne	9, 15, cr0, cr6, cr0, {0}
     2b0:	9f225074 	svcls	0x00225074
	...
     2c4:	00540001 	subseq	r0, r4, r1
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2d0:	f7007500 			; <UNDEFINED> instruction: 0xf7007500
     2d4:	f7640825 			; <UNDEFINED> instruction: 0xf7640825
     2d8:	00f71b25 	rscseq	r1, r7, r5, lsr #22
     2dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     2f0:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
     2f4:	080002c2 	stmdaeq	r0, {r1, r6, r7, r9}
     2f8:	c2500001 	subsgt	r0, r0, #1
     2fc:	d0080002 	andle	r0, r8, r2
     300:	04080002 	streq	r0, [r8], #-2
     304:	5001f300 	andpl	pc, r1, r0, lsl #6
     308:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     30c:	00000000 	andeq	r0, r0, r0
     310:	0002be00 	andeq	fp, r2, r0, lsl #28
     314:	0002c208 	andeq	ip, r2, r8, lsl #4
     318:	30000208 	andcc	r0, r0, r8, lsl #4
     31c:	0002c29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
     320:	0002c608 	andeq	ip, r2, r8, lsl #12
     324:	74000908 	strvc	r0, [r0], #-2312	; 0xfffff6f8
     328:	5001f300 	andpl	pc, r1, r0, lsl #6
     32c:	9f01231c 	svcls	0x0001231c
     330:	080002c6 	stmdaeq	r0, {r1, r2, r6, r7, r9}
     334:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
     338:	00740007 	rsbseq	r0, r4, r7
     33c:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
     340:	0002cc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
     344:	0002ce08 	andeq	ip, r2, r8, lsl #28
     348:	74000908 	strvc	r0, [r0], #-2312	; 0xfffff6f8
     34c:	5001f300 	andpl	pc, r1, r0, lsl #6
     350:	9f01231c 	svcls	0x0001231c
     354:	080002ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9}
     358:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
     35c:	00740007 	rsbseq	r0, r4, r7
     360:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
     364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     374:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     380:	01f30004 	mvnseq	r0, r4
     384:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     394:	00010000 	andeq	r0, r1, r0
     398:	00000050 	andeq	r0, r0, r0, asr r0
     39c:	00000000 	andeq	r0, r0, r0
     3a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     3b4:	00500001 	subseq	r0, r0, r1
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	04000000 	streq	r0, [r0], #-0
     3c0:	5001f300 	andpl	pc, r1, r0, lsl #6
     3c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     3d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     3e0:	00540001 	subseq	r0, r4, r1
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	04000000 	streq	r0, [r0], #-0
     3ec:	5001f300 	andpl	pc, r1, r0, lsl #6
     3f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3f4:	00000000 	andeq	r0, r0, r0
     3f8:	0002d000 	andeq	sp, r2, r0
     3fc:	0002d608 	andeq	sp, r2, r8, lsl #12
     400:	50000108 	andpl	r0, r0, r8, lsl #2
     404:	080002d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9}
     408:	080002de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9}
     40c:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
     410:	eb080002 	bl	200420 <__Stack_Size+0x200020>
     414:	05080002 	streq	r0, [r8, #-2]
     418:	01340300 	teqeq	r4, r0, lsl #6
     41c:	02eb2000 	rsceq	r2, fp, #0
     420:	02fc0800 	rscseq	r0, ip, #0, 16
     424:	00040800 	andeq	r0, r4, r0, lsl #16
     428:	9f5001f3 	svcls	0x005001f3
	...
     434:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
     438:	08000302 	stmdaeq	r0, {r1, r8, r9}
     43c:	02500001 	subseq	r0, r0, #1
     440:	2c080003 	stccs	0, cr0, [r8], {3}
     444:	04080003 	streq	r0, [r8], #-3
     448:	5001f300 	andpl	pc, r1, r0, lsl #6
     44c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     450:	00000000 	andeq	r0, r0, r0
     454:	0002fc00 	andeq	pc, r2, r0, lsl #24
     458:	00030208 	andeq	r0, r3, r8, lsl #4
     45c:	51000108 	tstpl	r0, r8, lsl #2
     460:	08000302 	stmdaeq	r0, {r1, r8, r9}
     464:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
     468:	01f30004 	mvnseq	r0, r4
     46c:	00009f51 	andeq	r9, r0, r1, asr pc
     470:	00000000 	andeq	r0, r0, r0
     474:	02fc0000 	rscseq	r0, ip, #0
     478:	03020800 	movweq	r0, #10240	; 0x2800
     47c:	00020800 	andeq	r0, r2, r0, lsl #16
     480:	03029f30 	movweq	r9, #12080	; 0x2f30
     484:	03120800 	tsteq	r2, #0, 16
     488:	00030800 	andeq	r0, r3, r0, lsl #16
     48c:	129f7f73 	addsne	r7, pc, #460	; 0x1cc
     490:	24080003 	strcs	r0, [r8], #-3
     494:	01080003 	tsteq	r8, r3
     498:	03265000 			; <UNDEFINED> instruction: 0x03265000
     49c:	032a0800 			; <UNDEFINED> instruction: 0x032a0800
     4a0:	00030800 	andeq	r0, r3, r0, lsl #16
     4a4:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	2c000000 	stccs	0, cr0, [r0], {-0}
     4b0:	4e080003 	cdpmi	0, 0, cr0, cr8, cr3, {0}
     4b4:	01080003 	tsteq	r8, r3
     4b8:	034e5000 	movteq	r5, #57344	; 0xe000
     4bc:	03500800 	cmpeq	r0, #0, 16
     4c0:	00030800 	andeq	r0, r3, r0, lsl #16
     4c4:	009f7674 	addseq	r7, pc, r4, ror r6	; <UNPREDICTABLE>
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	2c000000 	stccs	0, cr0, [r0], {-0}
     4d0:	32080003 	andcc	r0, r8, #3
     4d4:	01080003 	tsteq	r8, r3
     4d8:	03325100 	teqeq	r2, #0, 2
     4dc:	03360800 	teqeq	r6, #0, 16
     4e0:	00030800 	andeq	r0, r3, r0, lsl #16
     4e4:	369f0171 			; <UNDEFINED> instruction: 0x369f0171
     4e8:	50080003 	andpl	r0, r8, r3
     4ec:	04080003 	streq	r0, [r8], #-3
     4f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     4f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	00032c00 	andeq	r2, r3, r0, lsl #24
     500:	00033608 	andeq	r3, r3, r8, lsl #12
     504:	30000208 	andcc	r0, r0, r8, lsl #4
     508:	0003449f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
     50c:	00034608 	andeq	r4, r3, r8, lsl #12
     510:	53000108 	movwpl	r0, #264	; 0x108
     514:	08000346 	stmdaeq	r0, {r1, r2, r6, r8, r9}
     518:	0800034c 	stmdaeq	r0, {r2, r3, r6, r8, r9}
     51c:	00720006 	rsbseq	r0, r2, r6
     520:	9f1c0070 	svcls	0x001c0070
	...
     52c:	08000350 	stmdaeq	r0, {r4, r6, r8, r9}
     530:	0800035a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9}
     534:	5a500001 	bpl	1400540 <__Stack_Size+0x1400140>
     538:	0c080003 	stceq	0, cr0, [r8], {3}
     53c:	04080004 	streq	r0, [r8], #-4
     540:	5001f300 	andpl	pc, r1, r0, lsl #6
     544:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     548:	00000000 	andeq	r0, r0, r0
     54c:	00035000 	andeq	r5, r3, r0
     550:	00035d08 	andeq	r5, r3, r8, lsl #26
     554:	51000108 	tstpl	r0, r8, lsl #2
     558:	0800035d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9}
     55c:	080003fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9}
     560:	fe550001 	cdp2	0, 5, cr0, cr5, cr1, {0}
     564:	0c080003 	stceq	0, cr0, [r8], {3}
     568:	04080004 	streq	r0, [r8], #-4
     56c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     570:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     574:	00000000 	andeq	r0, r0, r0
     578:	00040c00 	andeq	r0, r4, r0, lsl #24
     57c:	00044208 	andeq	r4, r4, r8, lsl #4
     580:	30000208 	andcc	r0, r0, r8, lsl #4
     584:	0006649f 	muleq	r6, pc, r4	; <UNPREDICTABLE>
     588:	0007b608 	andeq	fp, r7, r8, lsl #12
     58c:	58000108 	stmdapl	r0, {r3, r8}
     590:	080007e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl}
     594:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
     598:	00580001 	subseq	r0, r8, r1
     59c:	00000000 	andeq	r0, r0, r0
     5a0:	0c000000 	stceq	0, cr0, [r0], {-0}
     5a4:	18080004 	stmdane	r8, {r2}
     5a8:	02080004 	andeq	r0, r8, #4
     5ac:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
     5b0:	31080004 	tstcc	r8, r4
     5b4:	01080004 	tsteq	r8, r4
     5b8:	046a5300 	strbteq	r5, [sl], #-768	; 0xfffffd00
     5bc:	046e0800 	strbteq	r0, [lr], #-2048	; 0xfffff800
     5c0:	00020800 	andeq	r0, r2, r0, lsl #16
     5c4:	046e9f30 	strbteq	r9, [lr], #-3888	; 0xfffff0d0
     5c8:	04820800 	streq	r0, [r2], #2048	; 0x800
     5cc:	00010800 	andeq	r0, r1, r0, lsl #16
     5d0:	0006e253 	andeq	lr, r6, r3, asr r2
     5d4:	0006e608 	andeq	lr, r6, r8, lsl #12
     5d8:	30000208 	andcc	r0, r0, r8, lsl #4
     5dc:	0006e69f 	muleq	r6, pc, r6	; <UNPREDICTABLE>
     5e0:	00077a08 	andeq	r7, r7, r8, lsl #20
     5e4:	59000108 	stmdbpl	r0, {r3, r8}
     5e8:	080007e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl}
     5ec:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
     5f0:	00530001 	subseq	r0, r3, r1
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	24000000 	strcs	r0, [r0], #-0
     5fc:	42080004 	andmi	r0, r8, #4
     600:	02080004 	andeq	r0, r8, #4
     604:	e09f3000 	adds	r3, pc, r0
     608:	1c080007 	stcne	0, cr0, [r8], {7}
     60c:	02080008 	andeq	r0, r8, #8
     610:	00007d00 	andeq	r7, r0, r0, lsl #26
     614:	00000000 	andeq	r0, r0, r0
     618:	a6000000 	strge	r0, [r0], -r0
     61c:	f0080004 			; <UNDEFINED> instruction: 0xf0080004
     620:	02080004 	andeq	r0, r8, #4
     624:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
     628:	19080004 	stmdbne	r8, {r2}
     62c:	01080005 	tsteq	r8, r5
     630:	05195300 	ldreq	r5, [r9, #-768]	; 0xfffffd00
     634:	05300800 	ldreq	r0, [r0, #-2048]!	; 0xfffff800
     638:	00030800 	andeq	r0, r3, r0, lsl #16
     63c:	307fb491 			; <UNDEFINED> instruction: 0x307fb491
     640:	36080005 	strcc	r0, [r8], -r5
     644:	01080005 	tsteq	r8, r5
     648:	00005300 	andeq	r5, r0, r0, lsl #6
     64c:	00000000 	andeq	r0, r0, r0
     650:	05e20000 	strbeq	r0, [r2, #0]!
     654:	05e50800 	strbeq	r0, [r5, #2048]!	; 0x800
     658:	00020800 	andeq	r0, r2, r0, lsl #16
     65c:	05e50073 	strbeq	r0, [r5, #115]!	; 0x73
     660:	05f00800 	ldrbeq	r0, [r0, #2048]!	; 0x800
     664:	00010800 	andeq	r0, r1, r0, lsl #16
     668:	00000059 	andeq	r0, r0, r9, asr r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	0005dc00 	andeq	sp, r5, r0, lsl #24
     674:	0005de08 	andeq	sp, r5, r8, lsl #28
     678:	0c000508 	cfstr32eq	mvfx0, [r0], {8}
     67c:	08003004 	stmdaeq	r0, {r2, ip, sp}
     680:	080005de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl}
     684:	080005e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl}
     688:	00730002 	rsbseq	r0, r3, r2
     68c:	080005e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl}
     690:	080005f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl}
     694:	00590001 	subseq	r0, r9, r1
     698:	00000000 	andeq	r0, r0, r0
     69c:	b0000000 	andlt	r0, r0, r0
     6a0:	b608000a 	strlt	r0, [r8], -sl
     6a4:	0208000a 	andeq	r0, r8, #10
     6a8:	b69f3000 	ldrlt	r3, [pc], r0
     6ac:	be08000a 	cdplt	0, 0, cr0, cr8, cr10, {0}
     6b0:	0908000a 	stmdbeq	r8, {r1, r3}
     6b4:	09007600 	stmdbeq	r0, {r9, sl, ip, sp, lr}
     6b8:	ff0829ff 			; <UNDEFINED> instruction: 0xff0829ff
     6bc:	0ac69f1a 	beq	ff1a832c <SCS_BASE+0x1f19a32c>
     6c0:	0ad40800 	beq	ff5026c8 <SCS_BASE+0x1f4f46c8>
     6c4:	00090800 	andeq	r0, r9, r0, lsl #16
     6c8:	ff090076 			; <UNDEFINED> instruction: 0xff090076
     6cc:	1aff0829 	bne	fffc2778 <SCS_BASE+0x1ffb4778>
     6d0:	000ad49f 	muleq	sl, pc, r4	; <UNPREDICTABLE>
     6d4:	000ade08 	andeq	sp, sl, r8, lsl #28
     6d8:	76000808 	strvc	r0, [r0], -r8, lsl #16
     6dc:	08293000 	stmdaeq	r9!, {ip, sp}
     6e0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	d6000000 	strle	r0, [r0], -r0
     6ec:	d908000a 	stmdble	r8, {r1, r3}
     6f0:	0208000a 	andeq	r0, r8, #10
     6f4:	00007500 	andeq	r7, r0, r0, lsl #10
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	10000000 	andne	r0, r0, r0
     700:	3408000c 	strcc	r0, [r8], #-12
     704:	0108000c 	tsteq	r8, ip
     708:	0c345000 	ldceq	0, cr5, [r4], #-0
     70c:	0cee0800 	stcleq	8, cr0, [lr]
     710:	00010800 	andeq	r0, r1, r0, lsl #16
     714:	000cee56 	andeq	lr, ip, r6, asr lr
     718:	000d1008 	andeq	r1, sp, r8
     71c:	f3000408 	vshl.u8	d0, d8, d0
     720:	009f5001 	addseq	r5, pc, r1
     724:	00000000 	andeq	r0, r0, r0
     728:	10000000 	andne	r0, r0, r0
     72c:	3408000c 	strcc	r0, [r8], #-12
     730:	0108000c 	tsteq	r8, ip
     734:	0c345100 	ldfeqs	f5, [r4], #-0
     738:	0d100800 	ldceq	8, cr0, [r0, #-0]
     73c:	00040800 	andeq	r0, r4, r0, lsl #16
     740:	9f5101f3 	svcls	0x005101f3
	...
     74c:	08000c32 	stmdaeq	r0, {r1, r4, r5, sl, fp}
     750:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
     754:	9f300002 	svcls	0x00300002
     758:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
     75c:	08000cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp}
     760:	c0550001 	subsgt	r0, r5, r1
     764:	e608000c 	str	r0, [r8], -ip
     768:	0108000c 	tsteq	r8, ip
     76c:	00005500 	andeq	r5, r0, r0, lsl #10
     770:	00000000 	andeq	r0, r0, r0
     774:	0c100000 	ldceq	0, cr0, [r0], {-0}
     778:	0c320800 	ldceq	8, cr0, [r2], #-0
     77c:	00020800 	andeq	r0, r2, r0, lsl #16
     780:	0c329f30 	ldceq	15, cr9, [r2], #-192	; 0xffffff40
     784:	0ce20800 	stcleq	8, cr0, [r2]
     788:	00010800 	andeq	r0, r1, r0, lsl #16
     78c:	00000054 	andeq	r0, r0, r4, asr r0
     790:	00000000 	andeq	r0, r0, r0
     794:	000c5e00 	andeq	r5, ip, r0, lsl #28
     798:	000cc608 	andeq	ip, ip, r8, lsl #12
     79c:	58000108 	stmdapl	r0, {r3, r8}
	...
     7a8:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
     7ac:	08000e26 	stmdaeq	r0, {r1, r2, r5, r9, sl, fp}
     7b0:	26500001 	ldrbcs	r0, [r0], -r1
     7b4:	2808000e 	stmdacs	r8, {r1, r2, r3}
     7b8:	0408000e 	streq	r0, [r8], #-14
     7bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     7c0:	000e289f 	muleq	lr, pc, r8	; <UNPREDICTABLE>
     7c4:	000e5008 	andeq	r5, lr, r8
     7c8:	50000108 	andpl	r0, r0, r8, lsl #2
     7cc:	08000e50 	stmdaeq	r0, {r4, r6, r9, sl, fp}
     7d0:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
     7d4:	01f30004 	mvnseq	r0, r4
     7d8:	00009f50 	andeq	r9, r0, r0, asr pc
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     7e4:	0e240800 	cdpeq	8, 2, cr0, cr4, cr0, {0}
     7e8:	00020800 	andeq	r0, r2, r0, lsl #16
     7ec:	0e289f30 	mcreq	15, 1, r9, cr8, cr0, {1}
     7f0:	0e420800 	cdpeq	8, 4, cr0, cr2, cr0, {0}
     7f4:	00020800 	andeq	r0, r2, r0, lsl #16
     7f8:	0e429f30 	mcreq	15, 2, r9, cr2, cr0, {1}
     7fc:	0e460800 	cdpeq	8, 4, cr0, cr6, cr0, {0}
     800:	00010800 	andeq	r0, r1, r0, lsl #16
     804:	000e4653 	andeq	r4, lr, r3, asr r6
     808:	000e4808 	andeq	r4, lr, r8, lsl #16
     80c:	30000208 	andcc	r0, r0, r8, lsl #4
     810:	000e489f 	muleq	lr, pc, r8	; <UNPREDICTABLE>
     814:	000e5508 	andeq	r5, lr, r8, lsl #10
     818:	53000108 	movwpl	r0, #264	; 0x108
	...
     824:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
     828:	08000e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp}
     82c:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
     830:	8808000e 	stmdahi	r8, {r1, r2, r3}
     834:	0408000e 	streq	r0, [r8], #-14
     838:	5001f300 	andpl	pc, r1, r0, lsl #6
     83c:	000e889f 	muleq	lr, pc, r8	; <UNPREDICTABLE>
     840:	000e8a08 	andeq	r8, lr, r8, lsl #20
     844:	50000108 	andpl	r0, r0, r8, lsl #2
     848:	08000e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp}
     84c:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
     850:	01f30004 	mvnseq	r0, r4
     854:	00009f50 	andeq	r9, r0, r0, asr pc
     858:	00000000 	andeq	r0, r0, r0
     85c:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
     860:	0e980800 	cdpeq	8, 9, cr0, cr8, cr0, {0}
     864:	00010800 	andeq	r0, r1, r0, lsl #16
     868:	000e9850 	andeq	r9, lr, r0, asr r8
     86c:	000e9c08 	andeq	r9, lr, r8, lsl #24
     870:	f3000408 	vshl.u8	d0, d8, d0
     874:	9c9f5001 	ldcls	0, cr5, [pc], {1}
     878:	9e08000e 	cdpls	0, 0, cr0, cr8, cr14, {0}
     87c:	0108000e 	tsteq	r8, lr
     880:	0e9e5000 	cdpeq	0, 9, cr5, cr14, cr0, {0}
     884:	0ea00800 	cdpeq	8, 10, cr0, cr0, cr0, {0}
     888:	00040800 	andeq	r0, r4, r0, lsl #16
     88c:	9f5001f3 	svcls	0x005001f3
	...
     898:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
     89c:	08000eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp}
     8a0:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
     8a4:	b808000e 	stmdalt	r8, {r1, r2, r3}
     8a8:	0408000e 	streq	r0, [r8], #-14
     8ac:	5001f300 	andpl	pc, r1, r0, lsl #6
     8b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	000eb800 	andeq	fp, lr, r0, lsl #16
     8bc:	000ed608 	andeq	sp, lr, r8, lsl #12
     8c0:	50000108 	andpl	r0, r0, r8, lsl #2
     8c4:	08000ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp}
     8c8:	08000ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp}
     8cc:	01f30004 	mvnseq	r0, r4
     8d0:	00009f50 	andeq	r9, r0, r0, asr pc
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	0fe80000 	svceq	0x00e80000
     8dc:	0fed0800 	svceq	0x00ed0800
     8e0:	00010800 	andeq	r0, r1, r0, lsl #16
     8e4:	000fed50 	andeq	lr, pc, r0, asr sp	; <UNPREDICTABLE>
     8e8:	000ff408 	andeq	pc, pc, r8, lsl #8
     8ec:	f3000408 	vshl.u8	d0, d8, d0
     8f0:	009f5001 	addseq	r5, pc, r1
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     8fc:	f908000f 			; <UNDEFINED> instruction: 0xf908000f
     900:	0108000f 	tsteq	r8, pc
     904:	0ff95000 	svceq	0x00f95000
     908:	10000800 	andne	r0, r0, r0, lsl #16
     90c:	00040800 	andeq	r0, r4, r0, lsl #16
     910:	9f5001f3 	svcls	0x005001f3
	...
     91c:	08001000 	stmdaeq	r0, {ip}
     920:	08001013 	stmdaeq	r0, {r0, r1, r4, ip}
     924:	13500001 	cmpne	r0, #1
     928:	14080010 	strne	r0, [r8], #-16
     92c:	04080010 	streq	r0, [r8], #-16
     930:	5001f300 	andpl	pc, r1, r0, lsl #6
     934:	0010149f 	mulseq	r0, pc, r4	; <UNPREDICTABLE>
     938:	00101608 	andseq	r1, r0, r8, lsl #12
     93c:	50000108 	andpl	r0, r0, r8, lsl #2
     940:	08001016 	stmdaeq	r0, {r1, r2, r4, ip}
     944:	08001020 	stmdaeq	r0, {r5, ip}
     948:	01f30004 	mvnseq	r0, r4
     94c:	00009f50 	andeq	r9, r0, r0, asr pc
     950:	00000000 	andeq	r0, r0, r0
     954:	10060000 	andne	r0, r6, r0
     958:	10130800 	andsne	r0, r3, r0, lsl #16
     95c:	00010800 	andeq	r0, r1, r0, lsl #16
     960:	00101453 	andseq	r1, r0, r3, asr r4
     964:	00102008 	andseq	r2, r0, r8
     968:	53000108 	movwpl	r0, #264	; 0x108
	...
     974:	08001020 	stmdaeq	r0, {r5, ip}
     978:	08001040 	stmdaeq	r0, {r6, ip}
     97c:	40500001 	subsmi	r0, r0, r1
     980:	48080010 	stmdami	r8, {r4}
     984:	01080010 	tsteq	r8, r0, lsl r0
     988:	00005000 	andeq	r5, r0, r0
     98c:	00000000 	andeq	r0, r0, r0
     990:	10200000 	eorne	r0, r0, r0
     994:	10260800 	eorne	r0, r6, r0, lsl #16
     998:	00020800 	andeq	r0, r2, r0, lsl #16
     99c:	10269f30 	eorne	r9, r6, r0, lsr pc
     9a0:	10420800 	subne	r0, r2, r0, lsl #16
     9a4:	00010800 	andeq	r0, r1, r0, lsl #16
     9a8:	00104253 	andseq	r4, r0, r3, asr r2
     9ac:	00104408 	andseq	r4, r0, r8, lsl #8
     9b0:	73000308 	movwvc	r0, #776	; 0x308
     9b4:	10469f01 	subne	r9, r6, r1, lsl #30
     9b8:	10480800 	subne	r0, r8, r0, lsl #16
     9bc:	00010800 	andeq	r0, r1, r0, lsl #16
     9c0:	00000053 	andeq	r0, r0, r3, asr r0
     9c4:	00000000 	andeq	r0, r0, r0
     9c8:	00104800 	andseq	r4, r0, r0, lsl #16
     9cc:	00105408 	andseq	r5, r0, r8, lsl #8
     9d0:	31000208 	tstcc	r0, r8, lsl #4
     9d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	00108000 	andseq	r8, r0, r0
     9e0:	00108808 	andseq	r8, r0, r8, lsl #16
     9e4:	50000108 	andpl	r0, r0, r8, lsl #2
     9e8:	08001088 	stmdaeq	r0, {r3, r7, ip}
     9ec:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     9f0:	01f30004 	mvnseq	r0, r4
     9f4:	108c9f50 	addne	r9, ip, r0, asr pc
     9f8:	108e0800 	addne	r0, lr, r0, lsl #16
     9fc:	00010800 	andeq	r0, r1, r0, lsl #16
     a00:	00108e50 	andseq	r8, r0, r0, asr lr
     a04:	00109808 	andseq	r9, r0, r8, lsl #16
     a08:	f3000408 	vshl.u8	d0, d8, d0
     a0c:	009f5001 	addseq	r5, pc, r1
     a10:	00000000 	andeq	r0, r0, r0
     a14:	86000000 	strhi	r0, [r0], -r0
     a18:	88080010 	stmdahi	r8, {r4}
     a1c:	01080010 	tsteq	r8, r0, lsl r0
     a20:	00005000 	andeq	r5, r0, r0
     a24:	00000000 	andeq	r0, r0, r0
     a28:	10c80000 	sbcne	r0, r8, r0
     a2c:	10cc0800 	sbcne	r0, ip, r0, lsl #16
     a30:	00010800 	andeq	r0, r1, r0, lsl #16
     a34:	0010cc53 	andseq	ip, r0, r3, asr ip
     a38:	0010ce08 	andseq	ip, r0, r8, lsl #28
     a3c:	73000608 	movwvc	r0, #1544	; 0x608
     a40:	22007000 	andcs	r7, r0, #0
     a44:	0010ce9f 	mulseq	r0, pc, lr	; <UNPREDICTABLE>
     a48:	0010d708 	andseq	sp, r0, r8, lsl #14
     a4c:	50000108 	andpl	r0, r0, r8, lsl #2
     a50:	080010e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip}
     a54:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
     a58:	00500001 	subseq	r0, r0, r1
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	ca000000 	bgt	a68 <__Stack_Size+0x668>
     a64:	de080010 	mcrle	0, 0, r0, cr8, cr0, {0}
     a68:	01080010 	tsteq	r8, r0, lsl r0
     a6c:	10de5400 	sbcsne	r5, lr, r0, lsl #8
     a70:	10e50800 	rscne	r0, r5, r0, lsl #16
     a74:	00010800 	andeq	r0, r1, r0, lsl #16
     a78:	0010e650 	andseq	lr, r0, r0, asr r6
     a7c:	0010e808 	andseq	lr, r0, r8, lsl #16
     a80:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
     a8c:	080010cc 	stmdaeq	r0, {r2, r3, r6, r7, ip}
     a90:	080010ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip}
     a94:	00500001 	subseq	r0, r0, r1
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     aa0:	02080010 	andeq	r0, r8, #16
     aa4:	01080011 	tsteq	r8, r1, lsl r0
     aa8:	11025000 	mrsne	r5, (UNDEF: 2)
     aac:	11220800 			; <UNDEFINED> instruction: 0x11220800
     ab0:	00020800 	andeq	r0, r2, r0, lsl #16
     ab4:	00000074 	andeq	r0, r0, r4, ror r0
     ab8:	00000000 	andeq	r0, r0, r0
     abc:	11240000 			; <UNDEFINED> instruction: 0x11240000
     ac0:	11320800 	teqne	r2, r0, lsl #16
     ac4:	00010800 	andeq	r0, r1, r0, lsl #16
     ac8:	00113250 	andseq	r3, r1, r0, asr r2
     acc:	00113c08 	andseq	r3, r1, r8, lsl #24
     ad0:	f3000408 	vshl.u8	d0, d8, d0
     ad4:	009f5001 	addseq	r5, pc, r1
	...
     ae4:	01000000 	mrseq	r0, (UNDEF: 0)
     ae8:	00005000 	andeq	r5, r0, r0
     aec:	00000000 	andeq	r0, r0, r0
     af0:	00040000 	andeq	r0, r4, r0
     af4:	9f5001f3 	svcls	0x005001f3
	...
     b00:	0800113c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip}
     b04:	0800114a 	stmdaeq	r0, {r1, r3, r6, r8, ip}
     b08:	4a500001 	bmi	1400b14 <__Stack_Size+0x1400714>
     b0c:	54080011 	strpl	r0, [r8], #-17	; 0xffffffef
     b10:	04080011 	streq	r0, [r8], #-17	; 0xffffffef
     b14:	5001f300 	andpl	pc, r1, r0, lsl #6
     b18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b28:	30000200 	andcc	r0, r0, r0, lsl #4
     b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b30:	00000000 	andeq	r0, r0, r0
     b34:	70000700 	andvc	r0, r0, r0, lsl #14
     b38:	301a3200 	andscc	r3, sl, r0, lsl #4
     b3c:	00009f2e 	andeq	r9, r0, lr, lsr #30
	...
     b4c:	00020000 	andeq	r0, r2, r0
     b50:	00009f30 	andeq	r9, r0, r0, lsr pc
     b54:	00000000 	andeq	r0, r0, r0
     b58:	00080000 	andeq	r0, r8, r0
     b5c:	20080070 	andcs	r0, r8, r0, ror r0
     b60:	9f2e301a 	svcls	0x002e301a
	...
     b74:	00500001 	subseq	r0, r0, r1
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	04000000 	streq	r0, [r0], #-0
     b80:	5001f300 	andpl	pc, r1, r0, lsl #6
     b84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b98:	01f30004 	mvnseq	r0, r4
     b9c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     bac:	00010000 	andeq	r0, r1, r0
     bb0:	00000050 	andeq	r0, r0, r0, asr r0
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	f3000400 	vshl.u8	d0, d0, d0
     bbc:	009f5001 	addseq	r5, pc, r1
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	01000000 	mrseq	r0, (UNDEF: 0)
     bc8:	00005000 	andeq	r5, r0, r0
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	00040000 	andeq	r0, r4, r0
     bd4:	9f5001f3 	svcls	0x005001f3
	...
     be8:	9f300002 	svcls	0x00300002
	...
     bf4:	00500001 	subseq	r0, r0, r1
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     c00:	aa080011 	bge	200c4c <__Stack_Size+0x20084c>
     c04:	02080011 	andeq	r0, r8, #17
     c08:	aa9f3400 	bge	fe7cdc10 <SCS_BASE+0x1e7bfc10>
     c0c:	b0080011 	andlt	r0, r8, r1, lsl r0
     c10:	01080011 	tsteq	r8, r1, lsl r0
     c14:	00005000 	andeq	r5, r0, r0
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	11b00000 	movsne	r0, r0
     c20:	11b70800 			; <UNDEFINED> instruction: 0x11b70800
     c24:	00010800 	andeq	r0, r1, r0, lsl #16
     c28:	0011b750 	andseq	fp, r1, r0, asr r7
     c2c:	0011e808 	andseq	lr, r1, r8, lsl #16
     c30:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
     c3c:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
     c40:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
     c44:	9f340002 	svcls	0x00340002
     c48:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
     c4c:	080011d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, ip}
     c50:	d6500001 	ldrble	r0, [r0], -r1
     c54:	dc080011 	stcle	0, cr0, [r8], {17}
     c58:	01080011 	tsteq	r8, r1, lsl r0
     c5c:	11de5000 	bicsne	r5, lr, r0
     c60:	11e80800 	mvnne	r0, r0, lsl #16
     c64:	00010800 	andeq	r0, r1, r0, lsl #16
     c68:	00000050 	andeq	r0, r0, r0, asr r0
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	0011e800 	andseq	lr, r1, r0, lsl #16
     c74:	0011f008 	andseq	pc, r1, r8
     c78:	50000108 	andpl	r0, r0, r8, lsl #2
     c7c:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
     c80:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     c84:	24550001 	ldrbcs	r0, [r5], #-1
     c88:	28080012 	stmdacs	r8, {r1, r4}
     c8c:	04080012 	streq	r0, [r8], #-18	; 0xffffffee
     c90:	5001f300 	andpl	pc, r1, r0, lsl #6
     c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c98:	00000000 	andeq	r0, r0, r0
     c9c:	0011e800 	andseq	lr, r1, r0, lsl #16
     ca0:	0011f408 	andseq	pc, r1, r8, lsl #8
     ca4:	34000208 	strcc	r0, [r0], #-520	; 0xfffffdf8
     ca8:	0011f49f 	mulseq	r1, pc, r4	; <UNPREDICTABLE>
     cac:	0011fe08 	andseq	pc, r1, r8, lsl #28
     cb0:	50000108 	andpl	r0, r0, r8, lsl #2
     cb4:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
     cb8:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
     cbc:	00500001 	subseq	r0, r0, r1
	...
     ccc:	02000000 	andeq	r0, r0, #0
     cd0:	009f3400 	addseq	r3, pc, r0, lsl #8
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
     cdc:	00005000 	andeq	r5, r0, r0
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	00010000 	andeq	r0, r1, r0
     ce8:	00000050 	andeq	r0, r0, r0, asr r0
	...
     cf8:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
     cfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d00:	00000000 	andeq	r0, r0, r0
     d04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d10:	00500001 	subseq	r0, r0, r1
     d14:	00000000 	andeq	r0, r0, r0
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	00005000 	andeq	r5, r0, r0
     d20:	00000000 	andeq	r0, r0, r0
     d24:	12280000 	eorne	r0, r8, #0
     d28:	122e0800 	eorne	r0, lr, #0, 16
     d2c:	00010800 	andeq	r0, r1, r0, lsl #16
     d30:	00122e50 	andseq	r2, r2, r0, asr lr
     d34:	00126a08 	andseq	r6, r2, r8, lsl #20
     d38:	56000108 	strpl	r0, [r0], -r8, lsl #2
     d3c:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
     d40:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     d44:	01f30004 	mvnseq	r0, r4
     d48:	00009f50 	andeq	r9, r0, r0, asr pc
     d4c:	00000000 	andeq	r0, r0, r0
     d50:	12280000 	eorne	r0, r8, #0
     d54:	12330800 	eorsne	r0, r3, #0, 16
     d58:	00010800 	andeq	r0, r1, r0, lsl #16
     d5c:	00123351 	andseq	r3, r2, r1, asr r3
     d60:	00125208 	andseq	r5, r2, r8, lsl #4
     d64:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
     d68:	08001252 	stmdaeq	r0, {r1, r4, r6, r9, ip}
     d6c:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     d70:	01f30004 	mvnseq	r0, r4
     d74:	00009f51 	andeq	r9, r0, r1, asr pc
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	12280000 	eorne	r0, r8, #0
     d80:	12340800 	eorsne	r0, r4, #0, 16
     d84:	00020800 	andeq	r0, r2, r0, lsl #16
     d88:	12349f34 	eorsne	r9, r4, #52, 30	; 0xd0
     d8c:	123c0800 	eorsne	r0, ip, #0, 16
     d90:	00010800 	andeq	r0, r1, r0, lsl #16
     d94:	00124c50 	andseq	r4, r2, r0, asr ip
     d98:	00125608 	andseq	r5, r2, r8, lsl #12
     d9c:	50000108 	andpl	r0, r0, r8, lsl #2
     da0:	0800125a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip}
     da4:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     da8:	00500001 	subseq	r0, r0, r1
	...
     db8:	01000000 	mrseq	r0, (UNDEF: 0)
     dbc:	00005000 	andeq	r5, r0, r0
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	00010000 	andeq	r0, r1, r0
     dc8:	00000055 	andeq	r0, r0, r5, asr r0
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	f3000400 	vshl.u8	d0, d0, d0
     dd4:	009f5001 	addseq	r5, pc, r1
	...
     de4:	01000000 	mrseq	r0, (UNDEF: 0)
     de8:	00005100 	andeq	r5, r0, r0, lsl #2
     dec:	00000000 	andeq	r0, r0, r0
     df0:	00040000 	andeq	r0, r4, r0
     df4:	9f5101f3 	svcls	0x005101f3
	...
     e08:	9f340002 	svcls	0x00340002
	...
     e14:	00500001 	subseq	r0, r0, r1
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	01000000 	mrseq	r0, (UNDEF: 0)
     e20:	00005000 	andeq	r5, r0, r0
	...
     e30:	00010000 	andeq	r0, r1, r0
     e34:	00000050 	andeq	r0, r0, r0, asr r0
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     e48:	01f30004 	mvnseq	r0, r4
     e4c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     e5c:	00010000 	andeq	r0, r1, r0
     e60:	00000051 	andeq	r0, r0, r1, asr r0
     e64:	00000000 	andeq	r0, r0, r0
     e68:	f3000400 	vshl.u8	d0, d0, d0
     e6c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     e7c:	02000000 	andeq	r0, r0, #0
     e80:	009f3400 	addseq	r3, pc, r0, lsl #8
     e84:	00000000 	andeq	r0, r0, r0
     e88:	01000000 	mrseq	r0, (UNDEF: 0)
     e8c:	00005000 	andeq	r5, r0, r0
     e90:	00000000 	andeq	r0, r0, r0
     e94:	00010000 	andeq	r0, r1, r0
     e98:	00000050 	andeq	r0, r0, r0, asr r0
	...
     ea8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     eb4:	00700004 	rsbseq	r0, r0, r4
     eb8:	00009f20 	andeq	r9, r0, r0, lsr #30
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	00040000 	andeq	r0, r4, r0
     ec4:	9f200074 	svcls	0x00200074
	...
     ed0:	00540001 	subseq	r0, r4, r1
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	05000000 	streq	r0, [r0, #-0]
     edc:	5001f300 	andpl	pc, r1, r0, lsl #6
     ee0:	00009f20 	andeq	r9, r0, r0, lsr #30
	...
     ef0:	00070000 	andeq	r0, r7, r0
     ef4:	08200070 	stmdaeq	r0!, {r4, r5, r6}
     ef8:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
     efc:	00000000 	andeq	r0, r0, r0
     f00:	07000000 	streq	r0, [r0, -r0]
     f04:	20007400 	andcs	r7, r0, r0, lsl #8
     f08:	9f1aff08 	svcls	0x001aff08
	...
     f14:	00740006 	rsbseq	r0, r4, r6
     f18:	9f1aff08 	svcls	0x001aff08
	...
     f24:	01f30008 	mvnseq	r0, r8
     f28:	ff082050 			; <UNDEFINED> instruction: 0xff082050
     f2c:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
     f3c:	00090000 	andeq	r0, r9, r0
     f40:	38200070 	stmdacc	r0!, {r4, r5, r6}
     f44:	1aff0825 	bne	fffc2fe0 <SCS_BASE+0x1ffb4fe0>
     f48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f4c:	00000000 	andeq	r0, r0, r0
     f50:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
     f54:	25382000 	ldrcs	r2, [r8, #-0]!
     f58:	9f1aff08 	svcls	0x001aff08
	...
     f64:	00740008 	rsbseq	r0, r4, r8
     f68:	ff082538 			; <UNDEFINED> instruction: 0xff082538
     f6c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     f70:	00000000 	andeq	r0, r0, r0
     f74:	000a0000 	andeq	r0, sl, r0
     f78:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
     f7c:	ff082538 			; <UNDEFINED> instruction: 0xff082538
     f80:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
     f90:	00090000 	andeq	r0, r9, r0
     f94:	40200070 	eormi	r0, r0, r0, ror r0
     f98:	1aff0825 	bne	fffc3034 <SCS_BASE+0x1ffb5034>
     f9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fa0:	00000000 	andeq	r0, r0, r0
     fa4:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
     fa8:	25402000 	strbcs	r2, [r0, #-0]
     fac:	9f1aff08 	svcls	0x001aff08
	...
     fb8:	00740008 	rsbseq	r0, r4, r8
     fbc:	ff082540 			; <UNDEFINED> instruction: 0xff082540
     fc0:	00009f1a 	andeq	r9, r0, sl, lsl pc
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	000a0000 	andeq	r0, sl, r0
     fcc:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
     fd0:	ff082540 			; <UNDEFINED> instruction: 0xff082540
     fd4:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
     fe4:	00060000 	andeq	r0, r6, r0
     fe8:	48200070 	stmdami	r0!, {r4, r5, r6}
     fec:	00009f25 	andeq	r9, r0, r5, lsr #30
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	00060000 	andeq	r0, r6, r0
     ff8:	48200074 	stmdami	r0!, {r2, r4, r5, r6}
     ffc:	00009f25 	andeq	r9, r0, r5, lsr #30
    1000:	00000000 	andeq	r0, r0, r0
    1004:	00050000 	andeq	r0, r5, r0
    1008:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    100c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1010:	00000000 	andeq	r0, r0, r0
    1014:	f3000700 	vabd.u8	d0, d0, d0
    1018:	48205001 	stmdami	r0!, {r0, ip, lr}
    101c:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    102c:	00020000 	andeq	r0, r2, r0
    1030:	00009f34 	andeq	r9, r0, r4, lsr pc
    1034:	00000000 	andeq	r0, r0, r0
    1038:	00010000 	andeq	r0, r1, r0
    103c:	00000050 	andeq	r0, r0, r0, asr r0
    1040:	00000000 	andeq	r0, r0, r0
    1044:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1050:	00500001 	subseq	r0, r0, r1
    1054:	00000000 	andeq	r0, r0, r0
    1058:	01000000 	mrseq	r0, (UNDEF: 0)
    105c:	00005000 	andeq	r5, r0, r0
    1060:	00000000 	andeq	r0, r0, r0
    1064:	00010000 	andeq	r0, r1, r0
    1068:	00000050 	andeq	r0, r0, r0, asr r0
    106c:	00000000 	andeq	r0, r0, r0
    1070:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1084:	00500001 	subseq	r0, r0, r1
    1088:	00000000 	andeq	r0, r0, r0
    108c:	04000000 	streq	r0, [r0], #-0
    1090:	5001f300 	andpl	pc, r1, r0, lsl #6
    1094:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    10a4:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    10a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10bc:	00500001 	subseq	r0, r0, r1
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
    10c8:	00005000 	andeq	r5, r0, r0
	...
    10d8:	00010000 	andeq	r0, r1, r0
    10dc:	00000050 	andeq	r0, r0, r0, asr r0
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	f3000400 	vshl.u8	d0, d0, d0
    10e8:	009f5001 	addseq	r5, pc, r1
	...
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	00005100 	andeq	r5, r0, r0, lsl #2
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00040000 	andeq	r0, r4, r0
    1108:	9f5101f3 	svcls	0x005101f3
	...
    111c:	00520001 	subseq	r0, r2, r1
    1120:	00000000 	andeq	r0, r0, r0
    1124:	04000000 	streq	r0, [r0], #-0
    1128:	5201f300 	andpl	pc, r1, #0, 6
    112c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    113c:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1140:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1144:	00000000 	andeq	r0, r0, r0
    1148:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1154:	00500001 	subseq	r0, r0, r1
	...
    1164:	01000000 	mrseq	r0, (UNDEF: 0)
    1168:	00005000 	andeq	r5, r0, r0
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00040000 	andeq	r0, r4, r0
    1174:	9f5001f3 	svcls	0x005001f3
	...
    1188:	9f300002 	svcls	0x00300002
	...
    1194:	0070000c 	rsbseq	r0, r0, ip
    1198:	1affff0a 	bne	dc8 <__Stack_Size+0x9c8>
    119c:	301a0073 	andscc	r0, sl, r3, ror r0
    11a0:	00009f2e 	andeq	r9, r0, lr, lsr #30
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	000d0000 	andeq	r0, sp, r0
    11ac:	0a5001f3 	beq	1401980 <__Stack_Size+0x1401580>
    11b0:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    11b4:	2e301a00 	vaddcs.f32	s2, s0, s0
    11b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    11c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    11d4:	01f30004 	mvnseq	r0, r4
    11d8:	00009f50 	andeq	r9, r0, r0, asr pc
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00010000 	andeq	r0, r1, r0
    11e4:	00000050 	andeq	r0, r0, r0, asr r0
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	f3000400 	vshl.u8	d0, d0, d0
    11f0:	009f5001 	addseq	r5, pc, r1
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	01000000 	mrseq	r0, (UNDEF: 0)
    11fc:	00005000 	andeq	r5, r0, r0
    1200:	00000000 	andeq	r0, r0, r0
    1204:	00040000 	andeq	r0, r4, r0
    1208:	9f5001f3 	svcls	0x005001f3
	...
    1214:	00500001 	subseq	r0, r0, r1
    1218:	00000000 	andeq	r0, r0, r0
    121c:	04000000 	streq	r0, [r0], #-0
    1220:	5001f300 	andpl	pc, r1, r0, lsl #6
    1224:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1228:	00000000 	andeq	r0, r0, r0
    122c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1238:	01f30004 	mvnseq	r0, r4
    123c:	00009f50 	andeq	r9, r0, r0, asr pc
    1240:	00000000 	andeq	r0, r0, r0
    1244:	00010000 	andeq	r0, r1, r0
    1248:	00000050 	andeq	r0, r0, r0, asr r0
    124c:	00000000 	andeq	r0, r0, r0
    1250:	f3000400 	vshl.u8	d0, d0, d0
    1254:	009f5001 	addseq	r5, pc, r1
    1258:	00000000 	andeq	r0, r0, r0
    125c:	01000000 	mrseq	r0, (UNDEF: 0)
    1260:	00005000 	andeq	r5, r0, r0
    1264:	00000000 	andeq	r0, r0, r0
    1268:	00040000 	andeq	r0, r4, r0
    126c:	9f5001f3 	svcls	0x005001f3
	...
    1278:	00500001 	subseq	r0, r0, r1
    127c:	00000000 	andeq	r0, r0, r0
    1280:	94000000 	strls	r0, [r0], #-0
    1284:	b2080012 	andlt	r0, r8, #18
    1288:	01080012 	tsteq	r8, r2, lsl r0
    128c:	12b25100 	adcsne	r5, r2, #0, 2
    1290:	13380800 	teqne	r8, #0, 16
    1294:	00040800 	andeq	r0, r4, r0, lsl #16
    1298:	9f5101f3 	svcls	0x005101f3
	...
    12a4:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
    12a8:	080012a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip}
    12ac:	9f300002 	svcls	0x00300002
    12b0:	080012a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip}
    12b4:	080012aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, ip}
    12b8:	00730006 	rsbseq	r0, r3, r6
    12bc:	9f1aff08 	svcls	0x001aff08
    12c0:	080012aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, ip}
    12c4:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
    12c8:	00530001 	subseq	r0, r3, r1
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	94000000 	strls	r0, [r0], #-0
    12d4:	bc080012 	stclt	0, cr0, [r8], {18}
    12d8:	02080012 	andeq	r0, r8, #18
    12dc:	c09f3000 	addsgt	r3, pc, r0
    12e0:	ee080012 	mcr	0, 0, r0, cr8, cr2, {0}
    12e4:	0a080012 	beq	201334 <__Stack_Size+0x200f34>
    12e8:	0a007600 	beq	1eaf0 <__Stack_Size+0x1e6f0>
    12ec:	771affff 			; <UNDEFINED> instruction: 0x771affff
    12f0:	069f1a00 	ldreq	r1, [pc], r0, lsl #20
    12f4:	34080013 	strcc	r0, [r8], #-19	; 0xffffffed
    12f8:	0a080013 	beq	20134c <__Stack_Size+0x200f4c>
    12fc:	0a007600 	beq	1eb04 <__Stack_Size+0x1e704>
    1300:	751affff 	ldrvc	pc, [sl, #-4095]	; 0xfffff001
    1304:	009f1a00 	addseq	r1, pc, r0, lsl #20
    1308:	00000000 	andeq	r0, r0, r0
    130c:	94000000 	strls	r0, [r0], #-0
    1310:	bc080012 	stclt	0, cr0, [r8], {18}
    1314:	02080012 	andeq	r0, r8, #18
    1318:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    131c:	ee080012 	mcr	0, 0, r0, cr8, cr2, {0}
    1320:	01080012 	tsteq	r8, r2, lsl r0
    1324:	12f45400 	rscsne	r5, r4, #0, 8
    1328:	12fe0800 	rscsne	r0, lr, #0, 16
    132c:	00020800 	andeq	r0, r2, r0, lsl #16
    1330:	12fe9f30 	rscsne	r9, lr, #48, 30	; 0xc0
    1334:	13340800 	teqne	r4, #0, 16
    1338:	00010800 	andeq	r0, r1, r0, lsl #16
    133c:	00000054 	andeq	r0, r0, r4, asr r0
    1340:	00000000 	andeq	r0, r0, r0
    1344:	00129400 	andseq	r9, r2, r0, lsl #8
    1348:	0012bc08 	andseq	fp, r2, r8, lsl #24
    134c:	30000208 	andcc	r0, r0, r8, lsl #4
    1350:	0012c09f 	mulseq	r2, pc, r0	; <UNPREDICTABLE>
    1354:	0012c808 	andseq	ip, r2, r8, lsl #16
    1358:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    135c:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
    1360:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
    1364:	d4550001 	ldrble	r0, [r5], #-1
    1368:	e6080012 			; <UNDEFINED> instruction: 0xe6080012
    136c:	05080012 	streq	r0, [r8, #-18]	; 0xffffffee
    1370:	32007400 	andcc	r7, r0, #0, 8
    1374:	13069f24 	movwne	r9, #28452	; 0x6f24
    1378:	130e0800 	movwne	r0, #59392	; 0xe800
    137c:	00010800 	andeq	r0, r1, r0, lsl #16
    1380:	00130e55 	andseq	r0, r3, r5, asr lr
    1384:	00131a08 	andseq	r1, r3, r8, lsl #20
    1388:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    138c:	0800131a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip}
    1390:	0800132c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip}
    1394:	00740005 	rsbseq	r0, r4, r5
    1398:	009f2432 	addseq	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	94000000 	strls	r0, [r0], #-0
    13a4:	b2080012 	andlt	r0, r8, #18
    13a8:	02080012 	andeq	r0, r8, #18
    13ac:	b29f3000 	addslt	r3, pc, #0
    13b0:	ee080012 	mcr	0, 0, r0, cr8, cr2, {0}
    13b4:	01080012 	tsteq	r8, r2, lsl r0
    13b8:	12f45100 	rscsne	r5, r4, #0, 2
    13bc:	13340800 	teqne	r4, #0, 16
    13c0:	00010800 	andeq	r0, r1, r0, lsl #16
    13c4:	00000051 	andeq	r0, r0, r1, asr r0
    13c8:	00000000 	andeq	r0, r0, r0
    13cc:	00129400 	andseq	r9, r2, r0, lsl #8
    13d0:	0012bc08 	andseq	fp, r2, r8, lsl #24
    13d4:	30000208 	andcc	r0, r0, r8, lsl #4
    13d8:	0012c89f 	mulseq	r2, pc, r8	; <UNPREDICTABLE>
    13dc:	0012d408 	andseq	sp, r2, r8, lsl #8
    13e0:	3f000508 	svccc	0x00000508
    13e4:	9f240075 	svcls	0x00240075
    13e8:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
    13ec:	080012e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip}
    13f0:	743f0007 	ldrtvc	r0, [pc], #-7	; 13f8 <__Stack_Size+0xff8>
    13f4:	24243200 	strtcs	r3, [r4], #-512	; 0xfffffe00
    13f8:	00130e9f 	mulseq	r3, pc, lr	; <UNPREDICTABLE>
    13fc:	00131a08 	andseq	r1, r3, r8, lsl #20
    1400:	3f000508 	svccc	0x00000508
    1404:	9f240077 	svcls	0x00240077
    1408:	0800131a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip}
    140c:	0800132c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip}
    1410:	743f0007 	ldrtvc	r0, [pc], #-7	; 1418 <__Stack_Size+0x1018>
    1414:	24243200 	strtcs	r3, [r4], #-512	; 0xfffffe00
    1418:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    141c:	00000000 	andeq	r0, r0, r0
    1420:	00133800 	andseq	r3, r3, r0, lsl #16
    1424:	00134008 	andseq	r4, r3, r8
    1428:	50000108 	andpl	r0, r0, r8, lsl #2
    142c:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
    1430:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
    1434:	01f30004 	mvnseq	r0, r4
    1438:	00009f50 	andeq	r9, r0, r0, asr pc
    143c:	00000000 	andeq	r0, r0, r0
    1440:	13380000 	teqne	r8, #0
    1444:	133a0800 	teqne	sl, #0, 16
    1448:	00020800 	andeq	r0, r2, r0, lsl #16
    144c:	133a9f30 	teqne	sl, #48, 30	; 0xc0
    1450:	13440800 	movtne	r0, #18432	; 0x4800
    1454:	000c0800 	andeq	r0, ip, r0, lsl #16
    1458:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    145c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    1460:	9f2e301a 	svcls	0x002e301a
	...
    1474:	00500001 	subseq	r0, r0, r1
    1478:	00000000 	andeq	r0, r0, r0
    147c:	04000000 	streq	r0, [r0], #-0
    1480:	5001f300 	andpl	pc, r1, r0, lsl #6
    1484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1494:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    14a0:	01f30004 	mvnseq	r0, r4
    14a4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    14b4:	00020000 	andeq	r0, r2, r0
    14b8:	00009f30 	andeq	r9, r0, r0, lsr pc
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	000c0000 	andeq	r0, ip, r0
    14c4:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    14c8:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    14cc:	9f2e301a 	svcls	0x002e301a
	...
    14e0:	00500001 	subseq	r0, r0, r1
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	04000000 	streq	r0, [r0], #-0
    14ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    14f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1500:	40000400 	andmi	r0, r0, r0, lsl #8
    1504:	009f243c 	addseq	r2, pc, ip, lsr r4	; <UNPREDICTABLE>
    1508:	00000000 	andeq	r0, r0, r0
    150c:	01000000 	mrseq	r0, (UNDEF: 0)
    1510:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1520:	00010000 	andeq	r0, r1, r0
    1524:	00000050 	andeq	r0, r0, r0, asr r0
    1528:	00000000 	andeq	r0, r0, r0
    152c:	f3000400 	vshl.u8	d0, d0, d0
    1530:	009f5001 	addseq	r5, pc, r1
	...
    1540:	01000000 	mrseq	r0, (UNDEF: 0)
    1544:	00005100 	andeq	r5, r0, r0, lsl #2
    1548:	00000000 	andeq	r0, r0, r0
    154c:	00040000 	andeq	r0, r4, r0
    1550:	9f5101f3 	svcls	0x005101f3
	...
    1564:	9f300002 	svcls	0x00300002
	...
    1570:	0073000f 	rsbseq	r0, r3, pc
    1574:	1aff800a 	bne	fffe15a4 <SCS_BASE+0x1ffd35a4>
    1578:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    157c:	2124341a 			; <UNDEFINED> instruction: 0x2124341a
    1580:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1584:	00000000 	andeq	r0, r0, r0
    1588:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1594:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
    1598:	0800138e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip}
    159c:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    15a0:	a0080013 	andge	r0, r8, r3, lsl r0
    15a4:	04080013 	streq	r0, [r8], #-19	; 0xffffffed
    15a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    15ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15b0:	00000000 	andeq	r0, r0, r0
    15b4:	00134c00 	andseq	r4, r3, r0, lsl #24
    15b8:	00135c08 	andseq	r5, r3, r8, lsl #24
    15bc:	30000208 	andcc	r0, r0, r8, lsl #4
    15c0:	00135c9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
    15c4:	00139c08 	andseq	r9, r3, r8, lsl #24
    15c8:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    15cc:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
    15d0:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
    15d4:	01f30008 	mvnseq	r0, r8
    15d8:	ffff0a50 			; <UNDEFINED> instruction: 0xffff0a50
    15dc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15e0:	00000000 	andeq	r0, r0, r0
    15e4:	134c0000 	movtne	r0, #49152	; 0xc000
    15e8:	136e0800 	cmnne	lr, #0, 16
    15ec:	00020800 	andeq	r0, r2, r0, lsl #16
    15f0:	136e9f30 	cmnne	lr, #48, 30	; 0xc0
    15f4:	138a0800 	orrne	r0, sl, #0, 16
    15f8:	00090800 	andeq	r0, r9, r0, lsl #16
    15fc:	40007033 	andmi	r7, r0, r3, lsr r0
    1600:	241a3f25 	ldrcs	r3, [sl], #-3877	; 0xfffff0db
    1604:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1608:	00000000 	andeq	r0, r0, r0
    160c:	00134c00 	andseq	r4, r3, r0, lsl #24
    1610:	00135a08 	andseq	r5, r3, r8, lsl #20
    1614:	30000208 	andcc	r0, r0, r8, lsl #4
    1618:	00135a9f 	mulseq	r3, pc, sl	; <UNPREDICTABLE>
    161c:	0013a008 	andseq	sl, r3, r8
    1620:	53000108 	movwpl	r0, #264	; 0x108
	...
    162c:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
    1630:	0800135a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, ip}
    1634:	9f300002 	svcls	0x00300002
    1638:	0800135a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, ip}
    163c:	0800138e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip}
    1640:	00700007 	rsbseq	r0, r0, r7
    1644:	1a3f2540 	bne	fcab4c <__Stack_Size+0xfca74c>
    1648:	00138e9f 	mulseq	r3, pc, lr	; <UNPREDICTABLE>
    164c:	0013a008 	andseq	sl, r3, r8
    1650:	f3000808 	vsub.i8	d0, d0, d8
    1654:	25405001 	strbcs	r5, [r0, #-1]
    1658:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
	...
    1668:	01000000 	mrseq	r0, (UNDEF: 0)
    166c:	00005000 	andeq	r5, r0, r0
    1670:	00000000 	andeq	r0, r0, r0
    1674:	00040000 	andeq	r0, r4, r0
    1678:	9f5001f3 	svcls	0x005001f3
	...
    168c:	00510001 	subseq	r0, r1, r1
    1690:	00000000 	andeq	r0, r0, r0
    1694:	04000000 	streq	r0, [r0], #-0
    1698:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    169c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    16ac:	30000200 	andcc	r0, r0, r0, lsl #4
    16b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16b4:	00000000 	andeq	r0, r0, r0
    16b8:	3f000500 	svccc	0x00000500
    16bc:	9f240073 	svcls	0x00240073
	...
    16c8:	00520001 	subseq	r0, r2, r1
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	05000000 	streq	r0, [r0, #-0]
    16d4:	00733f00 	rsbseq	r3, r3, r0, lsl #30
    16d8:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    16e8:	00020000 	andeq	r0, r2, r0
    16ec:	00009f30 	andeq	r9, r0, r0, lsr pc
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	00010000 	andeq	r0, r1, r0
    16f8:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1708:	30000200 	andcc	r0, r0, r0, lsl #4
    170c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1710:	00000000 	andeq	r0, r0, r0
    1714:	31000200 	mrscc	r0, R8_usr
    1718:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    171c:	00000000 	andeq	r0, r0, r0
    1720:	32000200 	andcc	r0, r0, #0, 4
    1724:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1728:	00000000 	andeq	r0, r0, r0
    172c:	33000200 	movwcc	r0, #512	; 0x200
    1730:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1734:	00000000 	andeq	r0, r0, r0
    1738:	0013a000 	andseq	sl, r3, r0
    173c:	0013a408 	andseq	sl, r3, r8, lsl #8
    1740:	50000108 	andpl	r0, r0, r8, lsl #2
    1744:	080013a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip}
    1748:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
    174c:	01f30004 	mvnseq	r0, r4
    1750:	00009f50 	andeq	r9, r0, r0, asr pc
    1754:	00000000 	andeq	r0, r0, r0
    1758:	13b40000 			; <UNDEFINED> instruction: 0x13b40000
    175c:	13c80800 	bicne	r0, r8, #0, 16
    1760:	00020800 	andeq	r0, r2, r0, lsl #16
    1764:	13c89f30 	bicne	r9, r8, #48, 30	; 0xc0
    1768:	13d00800 	bicsne	r0, r0, #0, 16
    176c:	00010800 	andeq	r0, r1, r0, lsl #16
    1770:	0013d051 	andseq	sp, r3, r1, asr r0
    1774:	0013ea08 	andseq	lr, r3, r8, lsl #20
    1778:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
    177c:	080013ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, ip}
    1780:	080013f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, ip}
    1784:	f2520001 	vhadd.s16	d16, d2, d1
    1788:	f4080013 	vst4.8	{d0-d3}, [r8 :64], r3
    178c:	0c080013 	stceq	0, cr0, [r8], {19}
    1790:	75007200 	strvc	r7, [r0, #-512]	; 0xfffffe00
    1794:	ff082400 			; <UNDEFINED> instruction: 0xff082400
    1798:	1a240075 	bne	901974 <__Stack_Size+0x901574>
    179c:	0014189f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    17a0:	00143808 	andseq	r3, r4, r8, lsl #16
    17a4:	30000208 	andcc	r0, r0, r8, lsl #4
    17a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	0013b400 	andseq	fp, r3, r0, lsl #8
    17b4:	0013f008 	andseq	pc, r3, r8
    17b8:	30000208 	andcc	r0, r0, r8, lsl #4
    17bc:	0013f29f 	mulseq	r3, pc, r2	; <UNPREDICTABLE>
    17c0:	0013fe08 	andseq	pc, r3, r8, lsl #28
    17c4:	08000a08 	stmdaeq	r0, {r3, r9, fp}
    17c8:	240075ff 	strcs	r7, [r0], #-1535	; 0xfffffa01
    17cc:	1a007420 	bne	1e854 <__Stack_Size+0x1e454>
    17d0:	0013fe9f 	mulseq	r3, pc, lr	; <UNPREDICTABLE>
    17d4:	00140608 	andseq	r0, r4, r8, lsl #12
    17d8:	52000108 	andpl	r0, r0, #8, 2
    17dc:	08001418 	stmdaeq	r0, {r3, r4, sl, ip}
    17e0:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
    17e4:	9f300002 	svcls	0x00300002
	...
    17f0:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
    17f4:	080013f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, ip}
    17f8:	9f300002 	svcls	0x00300002
    17fc:	080013f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, ip}
    1800:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
    1804:	ff080006 			; <UNDEFINED> instruction: 0xff080006
    1808:	9f240075 	svcls	0x00240075
    180c:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
    1810:	08001408 	stmdaeq	r0, {r3, sl, ip}
    1814:	08510001 	ldmdaeq	r1, {r0}^
    1818:	18080014 	stmdane	r8, {r2, r4}
    181c:	06080014 			; <UNDEFINED> instruction: 0x06080014
    1820:	75ff0800 	ldrbvc	r0, [pc, #2048]!	; 2028 <__Stack_Size+0x1c28>
    1824:	189f2400 	ldmne	pc, {sl, sp}	; <UNPREDICTABLE>
    1828:	38080014 	stmdacc	r8, {r2, r4}
    182c:	02080014 	andeq	r0, r8, #20
    1830:	009f3000 	addseq	r3, pc, r0
    1834:	00000000 	andeq	r0, r0, r0
    1838:	b4000000 	strlt	r0, [r0], #-0
    183c:	cc080013 	stcgt	0, cr0, [r8], {19}
    1840:	02080013 	andeq	r0, r8, #19
    1844:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    1848:	d0080013 	andle	r0, r8, r3, lsl r0
    184c:	01080013 	tsteq	r8, r3, lsl r0
    1850:	13d05400 	bicsne	r5, r0, #0, 8
    1854:	13d60800 	bicsne	r0, r6, #0, 16
    1858:	00050800 	andeq	r0, r5, r0, lsl #16
    185c:	1c007134 	stfnes	f7, [r0], {52}	; 0x34
    1860:	0014189f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    1864:	00143808 	andseq	r3, r4, r8, lsl #16
    1868:	30000208 	andcc	r0, r0, r8, lsl #4
    186c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1870:	00000000 	andeq	r0, r0, r0
    1874:	0013b400 	andseq	fp, r3, r0, lsl #8
    1878:	0013cc08 	andseq	ip, r3, r8, lsl #24
    187c:	3f000208 	svccc	0x00000208
    1880:	0013cc9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
    1884:	0013d408 	andseq	sp, r3, r8, lsl #8
    1888:	3f000508 	svccc	0x00000508
    188c:	9f250071 	svcls	0x00250071
    1890:	080013d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, ip}
    1894:	080013d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip}
    1898:	18520001 	ldmdane	r2, {r0}^
    189c:	38080014 	stmdacc	r8, {r2, r4}
    18a0:	02080014 	andeq	r0, r8, #20
    18a4:	009f3f00 	addseq	r3, pc, r0, lsl #30
	...
    18b4:	01000000 	mrseq	r0, (UNDEF: 0)
    18b8:	00005000 	andeq	r5, r0, r0
    18bc:	00000000 	andeq	r0, r0, r0
    18c0:	00040000 	andeq	r0, r4, r0
    18c4:	9f5001f3 	svcls	0x005001f3
	...
    18d8:	00500001 	subseq	r0, r0, r1
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	04000000 	streq	r0, [r0], #-0
    18e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    18e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    18f8:	30000200 	andcc	r0, r0, r0, lsl #4
    18fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1900:	00000000 	andeq	r0, r0, r0
    1904:	72000900 	andvc	r0, r0, #0, 18
    1908:	00732000 	rsbseq	r2, r3, r0
    190c:	9f29301a 	svcls	0x0029301a
	...
    1920:	9f300002 	svcls	0x00300002
	...
    192c:	00530001 	subseq	r0, r3, r1
	...
    193c:	01000000 	mrseq	r0, (UNDEF: 0)
    1940:	00005000 	andeq	r5, r0, r0
    1944:	00000000 	andeq	r0, r0, r0
    1948:	00040000 	andeq	r0, r4, r0
    194c:	9f5001f3 	svcls	0x005001f3
	...
    1960:	00500001 	subseq	r0, r0, r1
    1964:	00000000 	andeq	r0, r0, r0
    1968:	04000000 	streq	r0, [r0], #-0
    196c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1970:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1980:	30000200 	andcc	r0, r0, r0, lsl #4
    1984:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1988:	00000000 	andeq	r0, r0, r0
    198c:	72000900 	andvc	r0, r0, #0, 18
    1990:	00732000 	rsbseq	r2, r3, r0
    1994:	9f29301a 	svcls	0x0029301a
	...
    19a8:	9f300002 	svcls	0x00300002
	...
    19b4:	00530001 	subseq	r0, r3, r1
    19b8:	00000000 	andeq	r0, r0, r0
    19bc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    19c0:	44080014 	strmi	r0, [r8], #-20	; 0xffffffec
    19c4:	01080014 	tsteq	r8, r4, lsl r0
    19c8:	14445000 	strbne	r5, [r4], #-0
    19cc:	144c0800 	strbne	r0, [ip], #-2048	; 0xfffff800
    19d0:	00040800 	andeq	r0, r4, r0, lsl #16
    19d4:	9f5001f3 	svcls	0x005001f3
	...
    19e0:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
    19e4:	0800143c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip}
    19e8:	3c510001 	mrrccc	0, 0, r0, r1, cr1
    19ec:	4c080014 	stcmi	0, cr0, [r8], {20}
    19f0:	04080014 	streq	r0, [r8], #-20	; 0xffffffec
    19f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    19f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1a08:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a14:	01f30004 	mvnseq	r0, r4
    1a18:	00009f50 	andeq	r9, r0, r0, asr pc
    1a1c:	00000000 	andeq	r0, r0, r0
    1a20:	00010000 	andeq	r0, r1, r0
    1a24:	00000050 	andeq	r0, r0, r0, asr r0
    1a28:	00000000 	andeq	r0, r0, r0
    1a2c:	f3000400 	vshl.u8	d0, d0, d0
    1a30:	009f5001 	addseq	r5, pc, r1
	...
    1a40:	01000000 	mrseq	r0, (UNDEF: 0)
    1a44:	00005000 	andeq	r5, r0, r0
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	00040000 	andeq	r0, r4, r0
    1a50:	9f5001f3 	svcls	0x005001f3
	...
    1a64:	9f300002 	svcls	0x00300002
	...
    1a70:	00500001 	subseq	r0, r0, r1
    1a74:	00000000 	andeq	r0, r0, r0
    1a78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a7c:	01f33100 	mvnseq	r3, r0, lsl #2
    1a80:	241a4f50 	ldrcs	r4, [sl], #-3920	; 0xfffff0b0
    1a84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a88:	00000000 	andeq	r0, r0, r0
    1a8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a98:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
    1a9c:	1a4f5001 	bne	13d5aa8 <__Stack_Size+0x13d56a8>
    1aa0:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    1ab0:	00010000 	andeq	r0, r1, r0
    1ab4:	00000050 	andeq	r0, r0, r0, asr r0
    1ab8:	00000000 	andeq	r0, r0, r0
    1abc:	f3000400 	vshl.u8	d0, d0, d0
    1ac0:	009f5001 	addseq	r5, pc, r1
	...
    1ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad4:	00005100 	andeq	r5, r0, r0, lsl #2
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	00040000 	andeq	r0, r4, r0
    1ae0:	9f5101f3 	svcls	0x005101f3
	...
    1af4:	00520001 	subseq	r0, r2, r1
    1af8:	00000000 	andeq	r0, r0, r0
    1afc:	04000000 	streq	r0, [r0], #-0
    1b00:	5201f300 	andpl	pc, r1, #0, 6
    1b04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1b14:	30000200 	andcc	r0, r0, r0, lsl #4
    1b18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1b2c:	73340005 	teqvc	r4, #5
    1b30:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	07000000 	streq	r0, [r0, -r0]
    1b3c:	36007000 	strcc	r7, [r0], -r0
    1b40:	9f1a3325 	svcls	0x001a3325
	...
    1b4c:	01f30008 	mvnseq	r0, r8
    1b50:	33253650 			; <UNDEFINED> instruction: 0x33253650
    1b54:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    1b64:	00030000 	andeq	r0, r3, r0
    1b68:	009fff08 	addseq	pc, pc, r8, lsl #30
    1b6c:	00000000 	andeq	r0, r0, r0
    1b70:	06000000 	streq	r0, [r0], -r0
    1b74:	73ff0800 	mvnsvc	r0, #0, 16
    1b78:	009f2500 	addseq	r2, pc, r0, lsl #10
    1b7c:	00000000 	andeq	r0, r0, r0
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	00005300 	andeq	r5, r0, r0, lsl #6
    1b88:	00000000 	andeq	r0, r0, r0
    1b8c:	00070000 	andeq	r0, r7, r0
    1b90:	25380070 	ldrcs	r0, [r8, #-112]!	; 0xffffff90
    1b94:	009f1a33 	addseq	r1, pc, r3, lsr sl	; <UNPREDICTABLE>
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ba0:	5001f300 	andpl	pc, r1, r0, lsl #6
    1ba4:	1a332538 	bne	ccb08c <__Stack_Size+0xccac8c>
    1ba8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1bb8:	30000200 	andcc	r0, r0, r0, lsl #4
    1bbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	08000600 	stmdaeq	r0, {r9, sl}
    1bc8:	240073ff 	strcs	r7, [r0], #-1023	; 0xfffffc01
    1bcc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bd0:	00000000 	andeq	r0, r0, r0
    1bd4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1be0:	ff080006 			; <UNDEFINED> instruction: 0xff080006
    1be4:	9f240073 	svcls	0x00240073
	...
    1bf0:	ff08000e 			; <UNDEFINED> instruction: 0xff08000e
    1bf4:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    1bf8:	253224fa 	ldrcs	r2, [r2, #-1274]!	; 0xfffffb06
    1bfc:	9f242433 	svcls	0x00242433
	...
    1c10:	9f300002 	svcls	0x00300002
	...
    1c1c:	00530001 	subseq	r0, r3, r1
    1c20:	00000000 	andeq	r0, r0, r0
    1c24:	01000000 	mrseq	r0, (UNDEF: 0)
    1c28:	00005100 	andeq	r5, r0, r0, lsl #2
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	00010000 	andeq	r0, r1, r0
    1c34:	00000053 	andeq	r0, r0, r3, asr r0
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	52000100 	andpl	r0, r0, #0, 2
	...
    1c48:	00720006 	rsbseq	r0, r2, r6
    1c4c:	9f240073 	svcls	0x00240073
	...
    1c58:	00530001 	subseq	r0, r3, r1
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c64:	f3007200 	vhsub.u8	d7, d0, d0
    1c68:	fa095001 	blx	255c74 <__Stack_Size+0x255874>
    1c6c:	33253224 			; <UNDEFINED> instruction: 0x33253224
    1c70:	009f2424 	addseq	r2, pc, r4, lsr #8
	...
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
    1c84:	00005000 	andeq	r5, r0, r0
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	00040000 	andeq	r0, r4, r0
    1c90:	9f5001f3 	svcls	0x005001f3
	...
    1ca4:	9f300002 	svcls	0x00300002
	...
    1cb0:	00730009 	rsbseq	r0, r3, r9
    1cb4:	1a007020 	bne	1dd3c <__Stack_Size+0x1d93c>
    1cb8:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    1cc8:	02000000 	andeq	r0, r0, #0
    1ccc:	009f3000 	addseq	r3, pc, r0
    1cd0:	00000000 	andeq	r0, r0, r0
    1cd4:	06000000 	streq	r0, [r0], -r0
    1cd8:	73007000 	movwvc	r7, #0
    1cdc:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    1cec:	05000000 	streq	r0, [r0, #-0]
    1cf0:	3a007000 	bcc	1dcf8 <__Stack_Size+0x1d8f8>
    1cf4:	00009f25 	andeq	r9, r0, r5, lsr #30
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	00010000 	andeq	r0, r1, r0
    1d00:	00000050 	andeq	r0, r0, r0, asr r0
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	31000900 	tstcc	r0, r0, lsl #18
    1d0c:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    1d10:	9f2424f6 	svcls	0x002424f6
	...
    1d24:	00500001 	subseq	r0, r0, r1
    1d28:	00000000 	andeq	r0, r0, r0
    1d2c:	04000000 	streq	r0, [r0], #-0
    1d30:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1d44:	70000500 	andvc	r0, r0, r0, lsl #10
    1d48:	9f1a4f00 	svcls	0x001a4f00
	...
    1d54:	00500001 	subseq	r0, r0, r1
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	06000000 	streq	r0, [r0], -r0
    1d60:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d64:	009f1a4f 	addseq	r1, pc, pc, asr #20
	...
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
    1d78:	00005000 	andeq	r5, r0, r0
    1d7c:	00000000 	andeq	r0, r0, r0
    1d80:	00040000 	andeq	r0, r4, r0
    1d84:	9f5001f3 	svcls	0x005001f3
	...
    1d98:	00700005 	rsbseq	r0, r0, r5
    1d9c:	009f1a4f 	addseq	r1, pc, pc, asr #20
    1da0:	00000000 	andeq	r0, r0, r0
    1da4:	01000000 	mrseq	r0, (UNDEF: 0)
    1da8:	00005000 	andeq	r5, r0, r0
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	00030000 	andeq	r0, r3, r0
    1db4:	009f0170 	addseq	r0, pc, r0, ror r1	; <UNPREDICTABLE>
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	06000000 	streq	r0, [r0], -r0
    1dc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    1dc4:	009f1a4f 	addseq	r1, pc, pc, asr #20
	...
    1dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd8:	00005000 	andeq	r5, r0, r0
    1ddc:	00000000 	andeq	r0, r0, r0
    1de0:	00040000 	andeq	r0, r4, r0
    1de4:	9f5001f3 	svcls	0x005001f3
	...
    1df8:	9f300002 	svcls	0x00300002
	...
    1e04:	00730009 	rsbseq	r0, r3, r9
    1e08:	1a007020 	bne	1de90 <__Stack_Size+0x1da90>
    1e0c:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    1e1c:	02000000 	andeq	r0, r0, #0
    1e20:	009f3000 	addseq	r3, pc, r0
    1e24:	00000000 	andeq	r0, r0, r0
    1e28:	06000000 	streq	r0, [r0], -r0
    1e2c:	73007000 	movwvc	r7, #0
    1e30:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    1e40:	02000000 	andeq	r0, r0, #0
    1e44:	009f3000 	addseq	r3, pc, r0
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e50:	00005000 	andeq	r5, r0, r0
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	00090000 	andeq	r0, r9, r0
    1e5c:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    1e60:	2424f209 	strtcs	pc, [r4], #-521	; 0xfffffdf7
    1e64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1e74:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1e80:	01f30004 	mvnseq	r0, r4
    1e84:	00009f50 	andeq	r9, r0, r0, asr pc
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	00010000 	andeq	r0, r1, r0
    1e90:	00000050 	andeq	r0, r0, r0, asr r0
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	f3000400 	vshl.u8	d0, d0, d0
    1e9c:	009f5001 	addseq	r5, pc, r1
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea8:	00005000 	andeq	r5, r0, r0
    1eac:	00000000 	andeq	r0, r0, r0
    1eb0:	00040000 	andeq	r0, r4, r0
    1eb4:	9f5001f3 	svcls	0x005001f3
	...
    1ec8:	9f300002 	svcls	0x00300002
	...
    1ed4:	00500001 	subseq	r0, r0, r1
    1ed8:	00000000 	andeq	r0, r0, r0
    1edc:	02000000 	andeq	r0, r0, #0
    1ee0:	009f3000 	addseq	r3, pc, r0
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eec:	00005000 	andeq	r5, r0, r0
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	00020000 	andeq	r0, r2, r0
    1ef8:	00009f30 	andeq	r9, r0, r0, lsr pc
    1efc:	00000000 	andeq	r0, r0, r0
    1f00:	00010000 	andeq	r0, r1, r0
    1f04:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1f14:	30000200 	andcc	r0, r0, r0, lsl #4
    1f18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	52000100 	andpl	r0, r0, #0, 2
	...
    1f2c:	00700008 	rsbseq	r0, r0, r8
    1f30:	3224f009 	eorcc	pc, r4, #9
    1f34:	00009f25 	andeq	r9, r0, r5, lsr #30
    1f38:	00000000 	andeq	r0, r0, r0
    1f3c:	00090000 	andeq	r0, r9, r0
    1f40:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    1f44:	253224f0 	ldrcs	r2, [r2, #-1264]!	; 0xfffffb10
    1f48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f4c:	00000000 	andeq	r0, r0, r0
    1f50:	52000100 	andpl	r0, r0, #0, 2
	...
    1f64:	9f300002 	svcls	0x00300002
	...
    1f70:	00700007 	rsbseq	r0, r0, r7
    1f74:	1a332544 	bne	ccb48c <__Stack_Size+0xccb08c>
    1f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	f3000800 	vsub.i8	d0, d0, d0
    1f84:	25445001 	strbcs	r5, [r4, #-1]
    1f88:	009f1a33 	addseq	r1, pc, r3, lsr sl	; <UNPREDICTABLE>
    1f8c:	00000000 	andeq	r0, r0, r0
    1f90:	07000000 	streq	r0, [r0, -r0]
    1f94:	44007000 	strmi	r7, [r0], #-0
    1f98:	9f1a3325 	svcls	0x001a3325
	...
    1fa4:	01f30008 	mvnseq	r0, r8
    1fa8:	33254450 			; <UNDEFINED> instruction: 0x33254450
    1fac:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1fb0:	00000000 	andeq	r0, r0, r0
    1fb4:	00070000 	andeq	r0, r7, r0
    1fb8:	25440070 	strbcs	r0, [r4, #-112]	; 0xffffff90
    1fbc:	009f1a33 	addseq	r1, pc, r3, lsr sl	; <UNPREDICTABLE>
    1fc0:	00000000 	andeq	r0, r0, r0
    1fc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1fc8:	5001f300 	andpl	pc, r1, r0, lsl #6
    1fcc:	1a332544 	bne	ccb4e4 <__Stack_Size+0xccb0e4>
    1fd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1fe0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1fec:	01f30004 	mvnseq	r0, r4
    1ff0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    2000:	00020000 	andeq	r0, r2, r0
    2004:	00009f30 	andeq	r9, r0, r0, lsr pc
    2008:	00000000 	andeq	r0, r0, r0
    200c:	00010000 	andeq	r0, r1, r0
    2010:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2020:	70000700 	andvc	r0, r0, r0, lsl #14
    2024:	31254600 			; <UNDEFINED> instruction: 0x31254600
    2028:	00009f1a 	andeq	r9, r0, sl, lsl pc
    202c:	00000000 	andeq	r0, r0, r0
    2030:	00080000 	andeq	r0, r8, r0
    2034:	465001f3 			; <UNDEFINED> instruction: 0x465001f3
    2038:	9f1a3125 	svcls	0x001a3125
	...
    204c:	00500001 	subseq	r0, r0, r1
    2050:	00000000 	andeq	r0, r0, r0
    2054:	04000000 	streq	r0, [r0], #-0
    2058:	5001f300 	andpl	pc, r1, r0, lsl #6
    205c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    206c:	30000200 	andcc	r0, r0, r0, lsl #4
    2070:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2074:	00000000 	andeq	r0, r0, r0
    2078:	53000100 	movwpl	r0, #256	; 0x100
	...
    2084:	00500001 	subseq	r0, r0, r1
    2088:	00000000 	andeq	r0, r0, r0
    208c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2090:	e4080014 	str	r0, [r8], #-20	; 0xffffffec
    2094:	01080014 	tsteq	r8, r4, lsl r0
    2098:	14e45000 	strbtne	r5, [r4], #0
    209c:	14ec0800 	strbtne	r0, [ip], #2048	; 0x800
    20a0:	00040800 	andeq	r0, r4, r0, lsl #16
    20a4:	9f5001f3 	svcls	0x005001f3
	...
    20b0:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
    20b4:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
    20b8:	e2510001 	subs	r0, r1, #1
    20bc:	ec080014 	stc	0, cr0, [r8], {20}
    20c0:	04080014 	streq	r0, [r8], #-20	; 0xffffffec
    20c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    20c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    20cc:	00000000 	andeq	r0, r0, r0
    20d0:	0014d800 	andseq	sp, r4, r0, lsl #16
    20d4:	0014dc08 	andseq	sp, r4, r8, lsl #24
    20d8:	30000208 	andcc	r0, r0, r8, lsl #4
    20dc:	0014dc9f 	mulseq	r4, pc, ip	; <UNPREDICTABLE>
    20e0:	0014e008 	andseq	lr, r4, r8
    20e4:	73000908 	movwvc	r0, #2312	; 0x908
    20e8:	ffff1100 			; <UNDEFINED> instruction: 0xffff1100
    20ec:	9f1a7e83 	svcls	0x001a7e83
    20f0:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
    20f4:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
    20f8:	e4530001 	ldrb	r0, [r3], #-1
    20fc:	ec080014 	stc	0, cr0, [r8], {20}
    2100:	01080014 	tsteq	r8, r4, lsl r0
    2104:	00005000 	andeq	r5, r0, r0
    2108:	00000000 	andeq	r0, r0, r0
    210c:	14f80000 	ldrbtne	r0, [r8], #0
    2110:	15020800 	strne	r0, [r2, #-2048]	; 0xfffff800
    2114:	00010800 	andeq	r0, r1, r0, lsl #16
    2118:	00150250 	andseq	r0, r5, r0, asr r2
    211c:	00150c08 	andseq	r0, r5, r8, lsl #24
    2120:	f3000408 	vshl.u8	d0, d8, d0
    2124:	009f5001 	addseq	r5, pc, r1
    2128:	00000000 	andeq	r0, r0, r0
    212c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2130:	fc080014 	stc2	0, cr0, [r8], {20}
    2134:	02080014 	andeq	r0, r8, #20
    2138:	fc9f3000 	ldc2	0, cr3, [pc], {0}
    213c:	02080014 	andeq	r0, r8, #20
    2140:	01080015 	tsteq	r8, r5, lsl r0
    2144:	15025300 	strne	r5, [r2, #-768]	; 0xfffffd00
    2148:	150c0800 	strne	r0, [ip, #-2048]	; 0xfffff800
    214c:	00010800 	andeq	r0, r1, r0, lsl #16
    2150:	00000050 	andeq	r0, r0, r0, asr r0
    2154:	00000000 	andeq	r0, r0, r0
    2158:	00151c00 	andseq	r1, r5, r0, lsl #24
    215c:	00152608 	andseq	r2, r5, r8, lsl #12
    2160:	50000108 	andpl	r0, r0, r8, lsl #2
    2164:	08001526 	stmdaeq	r0, {r1, r2, r5, r8, sl, ip}
    2168:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
    216c:	01f30004 	mvnseq	r0, r4
    2170:	00009f50 	andeq	r9, r0, r0, asr pc
    2174:	00000000 	andeq	r0, r0, r0
    2178:	151c0000 	ldrne	r0, [ip, #-0]
    217c:	15200800 	strne	r0, [r0, #-2048]!	; 0xfffff800
    2180:	00020800 	andeq	r0, r2, r0, lsl #16
    2184:	15209f30 	strne	r9, [r0, #-3888]!	; 0xfffff0d0
    2188:	15260800 	strne	r0, [r6, #-2048]!	; 0xfffff800
    218c:	00010800 	andeq	r0, r1, r0, lsl #16
    2190:	00152653 	andseq	r2, r5, r3, asr r6
    2194:	00153008 	andseq	r3, r5, r8
    2198:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    21a4:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
    21a8:	0800153a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip}
    21ac:	3a500001 	bcc	14021b8 <__Stack_Size+0x1401db8>
    21b0:	44080015 	strmi	r0, [r8], #-21	; 0xffffffeb
    21b4:	04080015 	streq	r0, [r8], #-21	; 0xffffffeb
    21b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    21bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21c0:	00000000 	andeq	r0, r0, r0
    21c4:	00153000 	andseq	r3, r5, r0
    21c8:	00153408 	andseq	r3, r5, r8, lsl #8
    21cc:	30000208 	andcc	r0, r0, r8, lsl #4
    21d0:	0015349f 	mulseq	r5, pc, r4	; <UNPREDICTABLE>
    21d4:	00153a08 	andseq	r3, r5, r8, lsl #20
    21d8:	53000108 	movwpl	r0, #264	; 0x108
    21dc:	0800153a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip}
    21e0:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    21e4:	00500001 	subseq	r0, r0, r1
    21e8:	00000000 	andeq	r0, r0, r0
    21ec:	44000000 	strmi	r0, [r0], #-0
    21f0:	50080015 	andpl	r0, r8, r5, lsl r0
    21f4:	01080015 	tsteq	r8, r5, lsl r0
    21f8:	15505000 	ldrbne	r5, [r0, #-0]
    21fc:	15580800 	ldrbne	r0, [r8, #-2048]	; 0xfffff800
    2200:	00040800 	andeq	r0, r4, r0, lsl #16
    2204:	9f5001f3 	svcls	0x005001f3
	...
    2210:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
    2214:	08001548 	stmdaeq	r0, {r3, r6, r8, sl, ip}
    2218:	9f300002 	svcls	0x00300002
    221c:	08001548 	stmdaeq	r0, {r3, r6, r8, sl, ip}
    2220:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
    2224:	50530001 	subspl	r0, r3, r1
    2228:	58080015 	stmdapl	r8, {r0, r2, r4}
    222c:	01080015 	tsteq	r8, r5, lsl r0
    2230:	00005000 	andeq	r5, r0, r0
	...
    2240:	00010000 	andeq	r0, r1, r0
    2244:	00000050 	andeq	r0, r0, r0, asr r0
    2248:	00000000 	andeq	r0, r0, r0
    224c:	f3000400 	vshl.u8	d0, d0, d0
    2250:	009f5001 	addseq	r5, pc, r1
    2254:	00000000 	andeq	r0, r0, r0
    2258:	01000000 	mrseq	r0, (UNDEF: 0)
    225c:	00005000 	andeq	r5, r0, r0
    2260:	00000000 	andeq	r0, r0, r0
    2264:	00040000 	andeq	r0, r4, r0
    2268:	9f5001f3 	svcls	0x005001f3
	...
    227c:	00500001 	subseq	r0, r0, r1
    2280:	00000000 	andeq	r0, r0, r0
    2284:	04000000 	streq	r0, [r0], #-0
    2288:	5001f300 	andpl	pc, r1, r0, lsl #6
    228c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    229c:	30000200 	andcc	r0, r0, r0, lsl #4
    22a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    22a4:	00000000 	andeq	r0, r0, r0
    22a8:	53000100 	movwpl	r0, #256	; 0x100
	...
    22b4:	00500001 	subseq	r0, r0, r1
	...
    22c4:	01000000 	mrseq	r0, (UNDEF: 0)
    22c8:	00005000 	andeq	r5, r0, r0
    22cc:	00000000 	andeq	r0, r0, r0
    22d0:	00040000 	andeq	r0, r4, r0
    22d4:	9f5001f3 	svcls	0x005001f3
	...
    22e0:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
    22e4:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    22e8:	9f300002 	svcls	0x00300002
    22ec:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    22f0:	0800156e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip}
    22f4:	00730005 	rsbseq	r0, r3, r5
    22f8:	6e9f1a3c 	mrcvs	10, 4, r1, cr15, cr12, {1}
    22fc:	78080015 	stmdavc	r8, {r0, r2, r4}
    2300:	01080015 	tsteq	r8, r5, lsl r0
    2304:	157a5300 	ldrbne	r5, [sl, #-768]!	; 0xfffffd00
    2308:	157c0800 	ldrbne	r0, [ip, #-2048]!	; 0xfffff800
    230c:	00010800 	andeq	r0, r1, r0, lsl #16
    2310:	00159c53 	andseq	r9, r5, r3, asr ip
    2314:	0015a208 	andseq	sl, r5, r8, lsl #4
    2318:	73000708 	movwvc	r0, #1800	; 0x708
    231c:	3f253400 	svccc	0x00253400
    2320:	15ac9f1a 	strne	r9, [ip, #3866]!	; 0xf1a
    2324:	15b00800 	ldrne	r0, [r0, #2048]!	; 0x800
    2328:	00070800 	andeq	r0, r7, r0, lsl #16
    232c:	25380074 	ldrcs	r0, [r8, #-116]!	; 0xffffff8c
    2330:	ba9f1a37 	blt	fe7c8c14 <SCS_BASE+0x1e7bac14>
    2334:	be080015 	mcrlt	0, 0, r0, cr8, cr5, {0}
    2338:	07080015 	smladeq	r8, r5, r0, r0
    233c:	3b007400 	blcc	1f344 <__Stack_Size+0x1ef44>
    2340:	9f1a3725 	svcls	0x001a3725
    2344:	080015c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, ip}
    2348:	080015ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, ip}
    234c:	00720007 	rsbseq	r0, r2, r7
    2350:	1a33253e 	bne	ccb850 <__Stack_Size+0xccb450>
    2354:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2358:	00000000 	andeq	r0, r0, r0
    235c:	00156400 	andseq	r6, r5, r0, lsl #8
    2360:	00157c08 	andseq	r7, r5, r8, lsl #24
    2364:	30000208 	andcc	r0, r0, r8, lsl #4
    2368:	00157c9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    236c:	00158208 	andseq	r8, r5, r8, lsl #4
    2370:	73000708 	movwvc	r0, #1800	; 0x708
    2374:	24414e00 	strbcs	r4, [r1], #-3584	; 0xfffff200
    2378:	15889f1a 	strne	r9, [r8, #3866]	; 0xf1a
    237c:	15980800 	ldrne	r0, [r8, #2048]	; 0x800
    2380:	00010800 	andeq	r0, r1, r0, lsl #16
    2384:	00000053 	andeq	r0, r0, r3, asr r0
    2388:	00000000 	andeq	r0, r0, r0
    238c:	00156400 	andseq	r6, r5, r0, lsl #8
    2390:	00158808 	andseq	r8, r5, r8, lsl #16
    2394:	30000208 	andcc	r0, r0, r8, lsl #4
    2398:	0015889f 	mulseq	r5, pc, r8	; <UNPREDICTABLE>
    239c:	00158c08 	andseq	r8, r5, r8, lsl #24
    23a0:	71000708 	tstvc	r0, r8, lsl #14
    23a4:	243c4000 	ldrtcs	r4, [ip], #-0
    23a8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    23ac:	00000000 	andeq	r0, r0, r0
    23b0:	15640000 	strbne	r0, [r4, #-0]!
    23b4:	159c0800 	ldrne	r0, [ip, #2048]	; 0x800
    23b8:	00020800 	andeq	r0, r2, r0, lsl #16
    23bc:	159c9f30 	ldrne	r9, [ip, #3888]	; 0xf30
    23c0:	15a20800 	strne	r0, [r2, #2048]!	; 0x800
    23c4:	00120800 	andseq	r0, r2, r0, lsl #16
    23c8:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    23cc:	59031a3f 	stmdbpl	r3, {r0, r1, r2, r3, r4, r5, r9, fp, ip}
    23d0:	22080027 	andcs	r0, r8, #39	; 0x27
    23d4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    23d8:	15ac9f1a 	strne	r9, [ip, #3866]!	; 0xf1a
    23dc:	15b00800 	ldrne	r0, [r0, #2048]!	; 0x800
    23e0:	00120800 	andseq	r0, r2, r0, lsl #16
    23e4:	25380074 	ldrcs	r0, [r8, #-116]!	; 0xffffff8c
    23e8:	59031a37 	stmdbpl	r3, {r0, r1, r2, r4, r5, r9, fp, ip}
    23ec:	22080027 	andcs	r0, r8, #39	; 0x27
    23f0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    23f4:	15ba9f1a 	ldrne	r9, [sl, #3866]!	; 0xf1a
    23f8:	15be0800 	ldrne	r0, [lr, #2048]!	; 0x800
    23fc:	00120800 	andseq	r0, r2, r0, lsl #16
    2400:	253b0074 	ldrcs	r0, [fp, #-116]!	; 0xffffff8c
    2404:	59031a37 	stmdbpl	r3, {r0, r1, r2, r4, r5, r9, fp, ip}
    2408:	22080027 	andcs	r0, r8, #39	; 0x27
    240c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    2410:	15c69f1a 	strbne	r9, [r6, #3866]	; 0xf1a
    2414:	15ca0800 	strbne	r0, [sl, #2048]	; 0x800
    2418:	00120800 	andseq	r0, r2, r0, lsl #16
    241c:	253e0072 	ldrcs	r0, [lr, #-114]!	; 0xffffff8e
    2420:	69031a33 	stmdbvs	r3, {r0, r1, r4, r5, r9, fp, ip}
    2424:	22080027 	andcs	r0, r8, #39	; 0x27
    2428:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    242c:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    243c:	00010000 	andeq	r0, r1, r0
    2440:	00000050 	andeq	r0, r0, r0, asr r0
    2444:	00000000 	andeq	r0, r0, r0
    2448:	f3000400 	vshl.u8	d0, d0, d0
    244c:	009f5001 	addseq	r5, pc, r1
    2450:	00000000 	andeq	r0, r0, r0
    2454:	01000000 	mrseq	r0, (UNDEF: 0)
    2458:	00005000 	andeq	r5, r0, r0
    245c:	00000000 	andeq	r0, r0, r0
    2460:	00040000 	andeq	r0, r4, r0
    2464:	9f5001f3 	svcls	0x005001f3
	...
    2470:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
    2474:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
    2478:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    247c:	f2080015 	vqadd.s8	d0, d8, d5
    2480:	04080015 	streq	r0, [r8], #-21	; 0xffffffeb
    2484:	5001f300 	andpl	pc, r1, r0, lsl #6
    2488:	0015f29f 	mulseq	r5, pc, r2	; <UNPREDICTABLE>
    248c:	0015f608 	andseq	pc, r5, r8, lsl #12
    2490:	50000108 	andpl	r0, r0, r8, lsl #2
    2494:	080015f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, ip}
    2498:	08001600 	stmdaeq	r0, {r9, sl, ip}
    249c:	01f30004 	mvnseq	r0, r4
    24a0:	00009f50 	andeq	r9, r0, r0, asr pc
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	16000000 	strne	r0, [r0], -r0
    24ac:	16080800 	strne	r0, [r8], -r0, lsl #16
    24b0:	00010800 	andeq	r0, r1, r0, lsl #16
    24b4:	00160850 	andseq	r0, r6, r0, asr r8
    24b8:	00160a08 	andseq	r0, r6, r8, lsl #20
    24bc:	f3000408 	vshl.u8	d0, d8, d0
    24c0:	0a9f5001 	beq	fe7d64cc <SCS_BASE+0x1e7c84cc>
    24c4:	0e080016 	mcreq	0, 0, r0, cr8, cr6, {0}
    24c8:	01080016 	tsteq	r8, r6, lsl r0
    24cc:	160e5000 	strne	r5, [lr], -r0
    24d0:	16180800 	ldrne	r0, [r8], -r0, lsl #16
    24d4:	00040800 	andeq	r0, r4, r0, lsl #16
    24d8:	9f5001f3 	svcls	0x005001f3
	...
    24e4:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
    24e8:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
    24ec:	20500001 	subscs	r0, r0, r1
    24f0:	22080016 	andcs	r0, r8, #22
    24f4:	04080016 	streq	r0, [r8], #-22	; 0xffffffea
    24f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    24fc:	0016229f 	mulseq	r6, pc, r2	; <UNPREDICTABLE>
    2500:	00162608 	andseq	r2, r6, r8, lsl #12
    2504:	50000108 	andpl	r0, r0, r8, lsl #2
    2508:	08001626 	stmdaeq	r0, {r1, r2, r5, r9, sl, ip}
    250c:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
    2510:	01f30004 	mvnseq	r0, r4
    2514:	00009f50 	andeq	r9, r0, r0, asr pc
    2518:	00000000 	andeq	r0, r0, r0
    251c:	16300000 	ldrtne	r0, [r0], -r0
    2520:	16380800 	ldrtne	r0, [r8], -r0, lsl #16
    2524:	00010800 	andeq	r0, r1, r0, lsl #16
    2528:	00163850 	andseq	r3, r6, r0, asr r8
    252c:	00163a08 	andseq	r3, r6, r8, lsl #20
    2530:	f3000408 	vshl.u8	d0, d8, d0
    2534:	3a9f5001 	bcc	fe7d6540 <SCS_BASE+0x1e7c8540>
    2538:	3e080016 	mcrcc	0, 0, r0, cr8, cr6, {0}
    253c:	01080016 	tsteq	r8, r6, lsl r0
    2540:	163e5000 	ldrtne	r5, [lr], -r0
    2544:	16480800 	strbne	r0, [r8], -r0, lsl #16
    2548:	00040800 	andeq	r0, r4, r0, lsl #16
    254c:	9f5001f3 	svcls	0x005001f3
	...
    2558:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
    255c:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
    2560:	60500001 	subsvs	r0, r0, r1
    2564:	70080016 	andvc	r0, r8, r6, lsl r0
    2568:	04080016 	streq	r0, [r8], #-22	; 0xffffffea
    256c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2570:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2574:	00000000 	andeq	r0, r0, r0
    2578:	00164800 	andseq	r4, r6, r0, lsl #16
    257c:	00164a08 	andseq	r4, r6, r8, lsl #20
    2580:	30000208 	andcc	r0, r0, r8, lsl #4
    2584:	00164a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
    2588:	00165c08 	andseq	r5, r6, r8, lsl #24
    258c:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    2590:	1aff0800 	bne	fffc4598 <SCS_BASE+0x1ffb6598>
    2594:	00165c9f 	mulseq	r6, pc, ip	; <UNPREDICTABLE>
    2598:	00166008 	andseq	r6, r6, r8
    259c:	70000808 	andvc	r0, r0, r8, lsl #16
    25a0:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    25a4:	609f1aff 			; <UNDEFINED> instruction: 0x609f1aff
    25a8:	70080016 	andvc	r0, r8, r6, lsl r0
    25ac:	09080016 	stmdbeq	r8, {r1, r2, r4}
    25b0:	5001f300 	andpl	pc, r1, r0, lsl #6
    25b4:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    25b8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	16480000 	strbne	r0, [r8], -r0
    25c4:	16520800 	ldrbne	r0, [r2], -r0, lsl #16
    25c8:	00020800 	andeq	r0, r2, r0, lsl #16
    25cc:	16529f30 	uasxne	r9, r2, r0
    25d0:	16540800 	ldrbne	r0, [r4], -r0, lsl #16
    25d4:	00010800 	andeq	r0, r1, r0, lsl #16
    25d8:	00165453 	andseq	r5, r6, r3, asr r4
    25dc:	00165a08 	andseq	r5, r6, r8, lsl #20
    25e0:	30000208 	andcc	r0, r0, r8, lsl #4
    25e4:	00165a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
    25e8:	00167008 	andseq	r7, r6, r8
    25ec:	53000108 	movwpl	r0, #264	; 0x108
	...
    25f8:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
    25fc:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
    2600:	9f300002 	svcls	0x00300002
    2604:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
    2608:	08001660 	stmdaeq	r0, {r5, r6, r9, sl, ip}
    260c:	0073000b 	rsbseq	r0, r3, fp
    2610:	1a4f0070 	bne	13c27d8 <__Stack_Size+0x13c23d8>
    2614:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xfffff0f8
    2618:	0016609f 	mulseq	r6, pc, r0	; <UNPREDICTABLE>
    261c:	00167008 	andseq	r7, r6, r8
    2620:	73000c08 	movwvc	r0, #3080	; 0xc08
    2624:	5001f300 	andpl	pc, r1, r0, lsl #6
    2628:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    262c:	009f251a 	addseq	r2, pc, sl, lsl r5	; <UNPREDICTABLE>
    2630:	00000000 	andeq	r0, r0, r0
    2634:	76000000 	strvc	r0, [r0], -r0
    2638:	92080016 	andls	r0, r8, #22
    263c:	02080016 	andeq	r0, r8, #22
    2640:	929f3000 	addsls	r3, pc, #0
    2644:	94080016 	strls	r0, [r8], #-22	; 0xffffffea
    2648:	07080016 	smladeq	r8, r6, r0, r0
    264c:	48007000 	stmdami	r0, {ip, sp, lr}
    2650:	9f2e3024 	svcls	0x002e3024
	...
    265c:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
    2660:	0800168e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip}
    2664:	00500001 	subseq	r0, r0, r1
	...
    2674:	01000000 	mrseq	r0, (UNDEF: 0)
    2678:	00005000 	andeq	r5, r0, r0
    267c:	00000000 	andeq	r0, r0, r0
    2680:	00040000 	andeq	r0, r4, r0
    2684:	9f5001f3 	svcls	0x005001f3
	...
    2698:	9f300002 	svcls	0x00300002
	...
    26a4:	0070000b 	rsbseq	r0, r0, fp
    26a8:	731aff08 	tstvc	sl, #8, 30	; <UNPREDICTABLE>
    26ac:	2e301a00 	vaddcs.f32	s2, s0, s0
    26b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    26b4:	00000000 	andeq	r0, r0, r0
    26b8:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    26bc:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    26c0:	1a00731a 	bne	1f330 <__Stack_Size+0x1ef30>
    26c4:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
	...
    26d4:	01000000 	mrseq	r0, (UNDEF: 0)
    26d8:	00005100 	andeq	r5, r0, r0, lsl #2
    26dc:	00000000 	andeq	r0, r0, r0
    26e0:	00040000 	andeq	r0, r4, r0
    26e4:	9f5101f3 	svcls	0x005101f3
	...
    26f8:	00520001 	subseq	r0, r2, r1
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	04000000 	streq	r0, [r0], #-0
    2704:	5201f300 	andpl	pc, r1, #0, 6
    2708:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2718:	53000100 	movwpl	r0, #256	; 0x100
	...
    2724:	01f30004 	mvnseq	r0, r4
    2728:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    2738:	00020000 	andeq	r0, r2, r0
    273c:	00009f30 	andeq	r9, r0, r0, lsr pc
    2740:	00000000 	andeq	r0, r0, r0
    2744:	00010000 	andeq	r0, r1, r0
    2748:	00000054 	andeq	r0, r0, r4, asr r0
    274c:	00000000 	andeq	r0, r0, r0
    2750:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
    2754:	ff0c0b00 			; <UNDEFINED> instruction: 0xff0c0b00
    2758:	00009f1a 	andeq	r9, r0, sl, lsl pc
    275c:	00000000 	andeq	r0, r0, r0
    2760:	00010000 	andeq	r0, r1, r0
    2764:	00000052 	andeq	r0, r0, r2, asr r0
	...
    2774:	30000200 	andcc	r0, r0, r0, lsl #4
    2778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    277c:	00000000 	andeq	r0, r0, r0
    2780:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    278c:	00510001 	subseq	r0, r1, r1
	...
    279c:	01000000 	mrseq	r0, (UNDEF: 0)
    27a0:	00005100 	andeq	r5, r0, r0, lsl #2
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	00040000 	andeq	r0, r4, r0
    27ac:	9f5101f3 	svcls	0x005101f3
	...
    27c0:	00520001 	subseq	r0, r2, r1
    27c4:	00000000 	andeq	r0, r0, r0
    27c8:	04000000 	streq	r0, [r0], #-0
    27cc:	5201f300 	andpl	pc, r1, #0, 6
    27d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    27e0:	53000100 	movwpl	r0, #256	; 0x100
	...
    27ec:	01f30004 	mvnseq	r0, r4
    27f0:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    2800:	00020000 	andeq	r0, r2, r0
    2804:	00009f30 	andeq	r9, r0, r0, lsr pc
    2808:	00000000 	andeq	r0, r0, r0
    280c:	00010000 	andeq	r0, r1, r0
    2810:	00000055 	andeq	r0, r0, r5, asr r0
    2814:	00000000 	andeq	r0, r0, r0
    2818:	53000100 	movwpl	r0, #256	; 0x100
	...
    282c:	9f300002 	svcls	0x00300002
	...
    2838:	00540001 	subseq	r0, r4, r1
    283c:	00000000 	andeq	r0, r0, r0
    2840:	01000000 	mrseq	r0, (UNDEF: 0)
    2844:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2854:	00020000 	andeq	r0, r2, r0
    2858:	00009f30 	andeq	r9, r0, r0, lsr pc
    285c:	00000000 	andeq	r0, r0, r0
    2860:	00050000 	andeq	r0, r5, r0
    2864:	24340071 	ldrtcs	r0, [r4], #-113	; 0xffffff8f
    2868:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    286c:	00000000 	andeq	r0, r0, r0
    2870:	f3000600 	vmax.u8	d0, d0, d0
    2874:	24345101 	ldrtcs	r5, [r4], #-257	; 0xfffffeff
    2878:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2888:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2894:	01f30004 	mvnseq	r0, r4
    2898:	00009f50 	andeq	r9, r0, r0, asr pc
    289c:	00000000 	andeq	r0, r0, r0
    28a0:	00010000 	andeq	r0, r1, r0
    28a4:	00000050 	andeq	r0, r0, r0, asr r0
    28a8:	00000000 	andeq	r0, r0, r0
    28ac:	f3000400 	vshl.u8	d0, d0, d0
    28b0:	009f5001 	addseq	r5, pc, r1
    28b4:	00000000 	andeq	r0, r0, r0
    28b8:	01000000 	mrseq	r0, (UNDEF: 0)
    28bc:	00005000 	andeq	r5, r0, r0
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	00040000 	andeq	r0, r4, r0
    28c8:	9f5001f3 	svcls	0x005001f3
	...
    28d4:	00500001 	subseq	r0, r0, r1
    28d8:	00000000 	andeq	r0, r0, r0
    28dc:	04000000 	streq	r0, [r0], #-0
    28e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    28e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    28f8:	01f30004 	mvnseq	r0, r4
    28fc:	00009f50 	andeq	r9, r0, r0, asr pc
    2900:	00000000 	andeq	r0, r0, r0
    2904:	00010000 	andeq	r0, r1, r0
    2908:	00000050 	andeq	r0, r0, r0, asr r0
    290c:	00000000 	andeq	r0, r0, r0
    2910:	f3000400 	vshl.u8	d0, d0, d0
    2914:	009f5001 	addseq	r5, pc, r1
    2918:	00000000 	andeq	r0, r0, r0
    291c:	01000000 	mrseq	r0, (UNDEF: 0)
    2920:	00005000 	andeq	r5, r0, r0
    2924:	00000000 	andeq	r0, r0, r0
    2928:	00040000 	andeq	r0, r4, r0
    292c:	9f5001f3 	svcls	0x005001f3
	...
    2938:	00500001 	subseq	r0, r0, r1
    293c:	00000000 	andeq	r0, r0, r0
    2940:	04000000 	streq	r0, [r0], #-0
    2944:	5001f300 	andpl	pc, r1, r0, lsl #6
    2948:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    294c:	00000000 	andeq	r0, r0, r0
    2950:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2964:	9f300002 	svcls	0x00300002
	...
    2970:	00560001 	subseq	r0, r6, r1
	...
    2980:	02000000 	andeq	r0, r0, #0
    2984:	009f3000 	addseq	r3, pc, r0
    2988:	00000000 	andeq	r0, r0, r0
    298c:	01000000 	mrseq	r0, (UNDEF: 0)
    2990:	00005300 	andeq	r5, r0, r0, lsl #6
    2994:	00000000 	andeq	r0, r0, r0
    2998:	00010000 	andeq	r0, r1, r0
    299c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    29ac:	30000200 	andcc	r0, r0, r0, lsl #4
    29b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29b4:	00000000 	andeq	r0, r0, r0
    29b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    29c4:	0c710008 	ldcleq	0, cr0, [r1], #-32	; 0xffffffe0
    29c8:	00750294 			; <UNDEFINED> instruction: 0x00750294
    29cc:	00009f21 	andeq	r9, r0, r1, lsr #30
    29d0:	00000000 	andeq	r0, r0, r0
    29d4:	00010000 	andeq	r0, r1, r0
    29d8:	00000054 	andeq	r0, r0, r4, asr r0
	...
    29e8:	30000200 	andcc	r0, r0, r0, lsl #4
    29ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29f0:	00000000 	andeq	r0, r0, r0
    29f4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2a08:	9f300002 	svcls	0x00300002
	...
    2a14:	00530001 	subseq	r0, r3, r1
    2a18:	00000000 	andeq	r0, r0, r0
    2a1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a20:	00005300 	andeq	r5, r0, r0, lsl #6
    2a24:	00000000 	andeq	r0, r0, r0
    2a28:	00010000 	andeq	r0, r1, r0
    2a2c:	00000053 	andeq	r0, r0, r3, asr r0
    2a30:	00000000 	andeq	r0, r0, r0
    2a34:	53000100 	movwpl	r0, #256	; 0x100
	...
    2a40:	00520001 	subseq	r0, r2, r1
    2a44:	00000000 	andeq	r0, r0, r0
    2a48:	01000000 	mrseq	r0, (UNDEF: 0)
    2a4c:	00005300 	andeq	r5, r0, r0, lsl #6
    2a50:	00000000 	andeq	r0, r0, r0
    2a54:	00010000 	andeq	r0, r1, r0
    2a58:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2a68:	30000200 	andcc	r0, r0, r0, lsl #4
    2a6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a70:	00000000 	andeq	r0, r0, r0
    2a74:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2a80:	00520001 	subseq	r0, r2, r1
    2a84:	00000000 	andeq	r0, r0, r0
    2a88:	01000000 	mrseq	r0, (UNDEF: 0)
    2a8c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    2a9c:	00020000 	andeq	r0, r2, r0
    2aa0:	00009f30 	andeq	r9, r0, r0, lsr pc
    2aa4:	00000000 	andeq	r0, r0, r0
    2aa8:	00010000 	andeq	r0, r1, r0
    2aac:	00000056 	andeq	r0, r0, r6, asr r0
	...
    2abc:	30000200 	andcc	r0, r0, r0, lsl #4
    2ac0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ac4:	00000000 	andeq	r0, r0, r0
    2ac8:	53000100 	movwpl	r0, #256	; 0x100
	...
    2ad4:	00530001 	subseq	r0, r3, r1
    2ad8:	00000000 	andeq	r0, r0, r0
    2adc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ae0:	00005300 	andeq	r5, r0, r0, lsl #6
    2ae4:	00000000 	andeq	r0, r0, r0
    2ae8:	00010000 	andeq	r0, r1, r0
    2aec:	00000053 	andeq	r0, r0, r3, asr r0
    2af0:	00000000 	andeq	r0, r0, r0
    2af4:	52000100 	andpl	r0, r0, #0, 2
	...
    2b00:	00530001 	subseq	r0, r3, r1
    2b04:	00000000 	andeq	r0, r0, r0
    2b08:	01000000 	mrseq	r0, (UNDEF: 0)
    2b0c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2b1c:	00020000 	andeq	r0, r2, r0
    2b20:	00009f30 	andeq	r9, r0, r0, lsr pc
    2b24:	00000000 	andeq	r0, r0, r0
    2b28:	00010000 	andeq	r0, r1, r0
    2b2c:	00000054 	andeq	r0, r0, r4, asr r0
    2b30:	00000000 	andeq	r0, r0, r0
    2b34:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2b40:	00540001 	subseq	r0, r4, r1
	...
    2b50:	01000000 	mrseq	r0, (UNDEF: 0)
    2b54:	00005100 	andeq	r5, r0, r0, lsl #2
    2b58:	00000000 	andeq	r0, r0, r0
    2b5c:	00040000 	andeq	r0, r4, r0
    2b60:	9f5101f3 	svcls	0x005101f3
	...
    2b74:	9f300002 	svcls	0x00300002
	...
    2b80:	00520001 	subseq	r0, r2, r1
	...
    2b90:	02000000 	andeq	r0, r0, #0
    2b94:	009f3000 	addseq	r3, pc, r0
    2b98:	00000000 	andeq	r0, r0, r0
    2b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2ba0:	00005300 	andeq	r5, r0, r0, lsl #6
    2ba4:	00000000 	andeq	r0, r0, r0
    2ba8:	00010000 	andeq	r0, r1, r0
    2bac:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2bbc:	30000200 	andcc	r0, r0, r0, lsl #4
    2bc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2bc4:	00000000 	andeq	r0, r0, r0
    2bc8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2bd4:	00540001 	subseq	r0, r4, r1
	...
    2be4:	01000000 	mrseq	r0, (UNDEF: 0)
    2be8:	00005200 	andeq	r5, r0, r0, lsl #4
    2bec:	00000000 	andeq	r0, r0, r0
    2bf0:	00040000 	andeq	r0, r4, r0
    2bf4:	9f5201f3 	svcls	0x005201f3
	...
    2c00:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
    2c04:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
    2c08:	0c510001 	mrrceq	0, 0, r0, r1, cr1
    2c0c:	0e080017 	mcreq	0, 0, r0, cr8, cr7, {0}
    2c10:	04080017 	streq	r0, [r8], #-23	; 0xffffffe9
    2c14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2c18:	00170e9f 	mulseq	r7, pc, lr	; <UNPREDICTABLE>
    2c1c:	00171208 	andseq	r1, r7, r8, lsl #4
    2c20:	51000108 	tstpl	r0, r8, lsl #2
    2c24:	08001712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip}
    2c28:	08001716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, ip}
    2c2c:	01f30004 	mvnseq	r0, r4
    2c30:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    2c40:	00010000 	andeq	r0, r1, r0
    2c44:	00000051 	andeq	r0, r0, r1, asr r0
    2c48:	00000000 	andeq	r0, r0, r0
    2c4c:	f3000400 	vshl.u8	d0, d0, d0
    2c50:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2c60:	01000000 	mrseq	r0, (UNDEF: 0)
    2c64:	00005100 	andeq	r5, r0, r0, lsl #2
    2c68:	00000000 	andeq	r0, r0, r0
    2c6c:	00040000 	andeq	r0, r4, r0
    2c70:	9f5101f3 	svcls	0x005101f3
	...
    2c84:	00500001 	subseq	r0, r0, r1
	...
    2c94:	02000000 	andeq	r0, r0, #0
    2c98:	009f3000 	addseq	r3, pc, r0
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca4:	00005300 	andeq	r5, r0, r0, lsl #6
    2ca8:	00000000 	andeq	r0, r0, r0
    2cac:	00010000 	andeq	r0, r1, r0
    2cb0:	00000053 	andeq	r0, r0, r3, asr r0
    2cb4:	00000000 	andeq	r0, r0, r0
    2cb8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2ccc:	00500001 	subseq	r0, r0, r1
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    2cd8:	00005400 	andeq	r5, r0, r0, lsl #8
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	00010000 	andeq	r0, r1, r0
    2ce4:	00000050 	andeq	r0, r0, r0, asr r0
    2ce8:	00000000 	andeq	r0, r0, r0
    2cec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2d00:	00510001 	subseq	r0, r1, r1
    2d04:	00000000 	andeq	r0, r0, r0
    2d08:	04000000 	streq	r0, [r0], #-0
    2d0c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2d10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2d20:	52000100 	andpl	r0, r0, #0, 2
	...
    2d2c:	01f30004 	mvnseq	r0, r4
    2d30:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    2d40:	00010000 	andeq	r0, r1, r0
    2d44:	00000053 	andeq	r0, r0, r3, asr r0
    2d48:	00000000 	andeq	r0, r0, r0
    2d4c:	f3000400 	vshl.u8	d0, d0, d0
    2d50:	009f5301 	addseq	r5, pc, r1, lsl #6
    2d54:	00000000 	andeq	r0, r0, r0
    2d58:	01000000 	mrseq	r0, (UNDEF: 0)
    2d5c:	00005300 	andeq	r5, r0, r0, lsl #6
    2d60:	00000000 	andeq	r0, r0, r0
    2d64:	00040000 	andeq	r0, r4, r0
    2d68:	9f5301f3 	svcls	0x005301f3
	...
    2d7c:	00550001 	subseq	r0, r5, r1
	...
    2d8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d90:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2da0:	00020000 	andeq	r0, r2, r0
    2da4:	00009f30 	andeq	r9, r0, r0, lsr pc
    2da8:	00000000 	andeq	r0, r0, r0
    2dac:	00010000 	andeq	r0, r1, r0
    2db0:	00000051 	andeq	r0, r0, r1, asr r0
    2db4:	00000000 	andeq	r0, r0, r0
    2db8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2dcc:	00510001 	subseq	r0, r1, r1
    2dd0:	00000000 	andeq	r0, r0, r0
    2dd4:	04000000 	streq	r0, [r0], #-0
    2dd8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2ddc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2dec:	53000100 	movwpl	r0, #256	; 0x100
	...
    2df8:	01f30004 	mvnseq	r0, r4
    2dfc:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    2e0c:	00020000 	andeq	r0, r2, r0
    2e10:	00009f30 	andeq	r9, r0, r0, lsr pc
    2e14:	00000000 	andeq	r0, r0, r0
    2e18:	00060000 	andeq	r0, r6, r0
    2e1c:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    2e20:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2e24:	00000000 	andeq	r0, r0, r0
    2e28:	00010000 	andeq	r0, r1, r0
    2e2c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    2e3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2e48:	01f30004 	mvnseq	r0, r4
    2e4c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    2e5c:	00010000 	andeq	r0, r1, r0
    2e60:	00000051 	andeq	r0, r0, r1, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	f3000400 	vshl.u8	d0, d0, d0
    2e6c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e80:	00005200 	andeq	r5, r0, r0, lsl #4
    2e84:	00000000 	andeq	r0, r0, r0
    2e88:	00040000 	andeq	r0, r4, r0
    2e8c:	9f5201f3 	svcls	0x005201f3
	...
    2ea0:	00530001 	subseq	r0, r3, r1
    2ea4:	00000000 	andeq	r0, r0, r0
    2ea8:	04000000 	streq	r0, [r0], #-0
    2eac:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2eb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2ec0:	30000200 	andcc	r0, r0, r0, lsl #4
    2ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	73000500 	movwvc	r0, #1280	; 0x500
    2ed0:	9f213700 	svcls	0x00213700
	...
    2edc:	00730005 	rsbseq	r0, r3, r5
    2ee0:	009f2137 	addseq	r2, pc, r7, lsr r1	; <UNPREDICTABLE>
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    2eec:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2efc:	00010000 	andeq	r0, r1, r0
    2f00:	00000050 	andeq	r0, r0, r0, asr r0
    2f04:	00000000 	andeq	r0, r0, r0
    2f08:	f3000400 	vshl.u8	d0, d0, d0
    2f0c:	009f5001 	addseq	r5, pc, r1
	...
    2f1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f20:	00005100 	andeq	r5, r0, r0, lsl #2
    2f24:	00000000 	andeq	r0, r0, r0
    2f28:	00040000 	andeq	r0, r4, r0
    2f2c:	9f5101f3 	svcls	0x005101f3
	...
    2f40:	00520001 	subseq	r0, r2, r1
    2f44:	00000000 	andeq	r0, r0, r0
    2f48:	04000000 	streq	r0, [r0], #-0
    2f4c:	5201f300 	andpl	pc, r1, #0, 6
    2f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2f60:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f6c:	01f30004 	mvnseq	r0, r4
    2f70:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    2f80:	00010000 	andeq	r0, r1, r0
    2f84:	00000051 	andeq	r0, r0, r1, asr r0
    2f88:	00000000 	andeq	r0, r0, r0
    2f8c:	f3000400 	vshl.u8	d0, d0, d0
    2f90:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2fa0:	02000000 	andeq	r0, r0, #0
    2fa4:	009f3000 	addseq	r3, pc, r0
    2fa8:	00000000 	andeq	r0, r0, r0
    2fac:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb0:	00005300 	andeq	r5, r0, r0, lsl #6
    2fb4:	00000000 	andeq	r0, r0, r0
    2fb8:	00010000 	andeq	r0, r1, r0
    2fbc:	00000053 	andeq	r0, r0, r3, asr r0
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2fd8:	00510001 	subseq	r0, r1, r1
    2fdc:	00000000 	andeq	r0, r0, r0
    2fe0:	04000000 	streq	r0, [r0], #-0
    2fe4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2fe8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2ff8:	30000200 	andcc	r0, r0, r0, lsl #4
    2ffc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3000:	00000000 	andeq	r0, r0, r0
    3004:	53000100 	movwpl	r0, #256	; 0x100
	...
    3010:	00530001 	subseq	r0, r3, r1
    3014:	00000000 	andeq	r0, r0, r0
    3018:	01000000 	mrseq	r0, (UNDEF: 0)
    301c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    302c:	00010000 	andeq	r0, r1, r0
    3030:	00000051 	andeq	r0, r0, r1, asr r0
    3034:	00000000 	andeq	r0, r0, r0
    3038:	f3000400 	vshl.u8	d0, d0, d0
    303c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    304c:	01000000 	mrseq	r0, (UNDEF: 0)
    3050:	00005200 	andeq	r5, r0, r0, lsl #4
    3054:	00000000 	andeq	r0, r0, r0
    3058:	00040000 	andeq	r0, r4, r0
    305c:	9f5201f3 	svcls	0x005201f3
	...
    3070:	00530001 	subseq	r0, r3, r1
    3074:	00000000 	andeq	r0, r0, r0
    3078:	04000000 	streq	r0, [r0], #-0
    307c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3080:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3090:	30000200 	andcc	r0, r0, r0, lsl #4
    3094:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3098:	00000000 	andeq	r0, r0, r0
    309c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    30a8:	00560001 	subseq	r0, r6, r1
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	01000000 	mrseq	r0, (UNDEF: 0)
    30b4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    30c4:	00020000 	andeq	r0, r2, r0
    30c8:	00009f30 	andeq	r9, r0, r0, lsr pc
    30cc:	00000000 	andeq	r0, r0, r0
    30d0:	00010000 	andeq	r0, r1, r0
    30d4:	00000054 	andeq	r0, r0, r4, asr r0
    30d8:	00000000 	andeq	r0, r0, r0
    30dc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    30f0:	9f300002 	svcls	0x00300002
	...
    30fc:	00550001 	subseq	r0, r5, r1
    3100:	00000000 	andeq	r0, r0, r0
    3104:	01000000 	mrseq	r0, (UNDEF: 0)
    3108:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    3118:	00010000 	andeq	r0, r1, r0
    311c:	00000051 	andeq	r0, r0, r1, asr r0
    3120:	00000000 	andeq	r0, r0, r0
    3124:	f3000400 	vshl.u8	d0, d0, d0
    3128:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3138:	02000000 	andeq	r0, r0, #0
    313c:	009f3000 	addseq	r3, pc, r0
    3140:	00000000 	andeq	r0, r0, r0
    3144:	01000000 	mrseq	r0, (UNDEF: 0)
    3148:	00005300 	andeq	r5, r0, r0, lsl #6
    314c:	00000000 	andeq	r0, r0, r0
    3150:	00010000 	andeq	r0, r1, r0
    3154:	00000053 	andeq	r0, r0, r3, asr r0
    3158:	00000000 	andeq	r0, r0, r0
    315c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3170:	00510001 	subseq	r0, r1, r1
    3174:	00000000 	andeq	r0, r0, r0
    3178:	04000000 	streq	r0, [r0], #-0
    317c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3180:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3190:	30000200 	andcc	r0, r0, r0, lsl #4
    3194:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3198:	00000000 	andeq	r0, r0, r0
    319c:	53000100 	movwpl	r0, #256	; 0x100
	...
    31a8:	00530001 	subseq	r0, r3, r1
    31ac:	00000000 	andeq	r0, r0, r0
    31b0:	01000000 	mrseq	r0, (UNDEF: 0)
    31b4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    31c4:	00010000 	andeq	r0, r1, r0
    31c8:	00000051 	andeq	r0, r0, r1, asr r0
    31cc:	00000000 	andeq	r0, r0, r0
    31d0:	f3000400 	vshl.u8	d0, d0, d0
    31d4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    31e4:	02000000 	andeq	r0, r0, #0
    31e8:	009f3000 	addseq	r3, pc, r0
    31ec:	00000000 	andeq	r0, r0, r0
    31f0:	01000000 	mrseq	r0, (UNDEF: 0)
    31f4:	00005300 	andeq	r5, r0, r0, lsl #6
    31f8:	00000000 	andeq	r0, r0, r0
    31fc:	00010000 	andeq	r0, r1, r0
    3200:	00000053 	andeq	r0, r0, r3, asr r0
    3204:	00000000 	andeq	r0, r0, r0
    3208:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    321c:	00510001 	subseq	r0, r1, r1
    3220:	00000000 	andeq	r0, r0, r0
    3224:	04000000 	streq	r0, [r0], #-0
    3228:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    322c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    323c:	30000200 	andcc	r0, r0, r0, lsl #4
    3240:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3244:	00000000 	andeq	r0, r0, r0
    3248:	53000100 	movwpl	r0, #256	; 0x100
	...
    3254:	00530001 	subseq	r0, r3, r1
    3258:	00000000 	andeq	r0, r0, r0
    325c:	01000000 	mrseq	r0, (UNDEF: 0)
    3260:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3270:	00010000 	andeq	r0, r1, r0
    3274:	00000051 	andeq	r0, r0, r1, asr r0
    3278:	00000000 	andeq	r0, r0, r0
    327c:	f3000400 	vshl.u8	d0, d0, d0
    3280:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3290:	02000000 	andeq	r0, r0, #0
    3294:	009f3000 	addseq	r3, pc, r0
    3298:	00000000 	andeq	r0, r0, r0
    329c:	01000000 	mrseq	r0, (UNDEF: 0)
    32a0:	00005300 	andeq	r5, r0, r0, lsl #6
    32a4:	00000000 	andeq	r0, r0, r0
    32a8:	00010000 	andeq	r0, r1, r0
    32ac:	00000053 	andeq	r0, r0, r3, asr r0
    32b0:	00000000 	andeq	r0, r0, r0
    32b4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    32c8:	00510001 	subseq	r0, r1, r1
    32cc:	00000000 	andeq	r0, r0, r0
    32d0:	04000000 	streq	r0, [r0], #-0
    32d4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    32d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    32e8:	30000200 	andcc	r0, r0, r0, lsl #4
    32ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	53000100 	movwpl	r0, #256	; 0x100
	...
    3300:	00530001 	subseq	r0, r3, r1
    3304:	00000000 	andeq	r0, r0, r0
    3308:	01000000 	mrseq	r0, (UNDEF: 0)
    330c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    331c:	00010000 	andeq	r0, r1, r0
    3320:	00000051 	andeq	r0, r0, r1, asr r0
    3324:	00000000 	andeq	r0, r0, r0
    3328:	f3000400 	vshl.u8	d0, d0, d0
    332c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    333c:	02000000 	andeq	r0, r0, #0
    3340:	009f3000 	addseq	r3, pc, r0
    3344:	00000000 	andeq	r0, r0, r0
    3348:	01000000 	mrseq	r0, (UNDEF: 0)
    334c:	00005300 	andeq	r5, r0, r0, lsl #6
    3350:	00000000 	andeq	r0, r0, r0
    3354:	00010000 	andeq	r0, r1, r0
    3358:	00000053 	andeq	r0, r0, r3, asr r0
    335c:	00000000 	andeq	r0, r0, r0
    3360:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3374:	00510001 	subseq	r0, r1, r1
    3378:	00000000 	andeq	r0, r0, r0
    337c:	04000000 	streq	r0, [r0], #-0
    3380:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3384:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3394:	30000200 	andcc	r0, r0, r0, lsl #4
    3398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    339c:	00000000 	andeq	r0, r0, r0
    33a0:	53000100 	movwpl	r0, #256	; 0x100
	...
    33ac:	00530001 	subseq	r0, r3, r1
    33b0:	00000000 	andeq	r0, r0, r0
    33b4:	01000000 	mrseq	r0, (UNDEF: 0)
    33b8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    33c8:	00010000 	andeq	r0, r1, r0
    33cc:	00000051 	andeq	r0, r0, r1, asr r0
    33d0:	00000000 	andeq	r0, r0, r0
    33d4:	f3000400 	vshl.u8	d0, d0, d0
    33d8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    33e8:	02000000 	andeq	r0, r0, #0
    33ec:	009f3000 	addseq	r3, pc, r0
    33f0:	00000000 	andeq	r0, r0, r0
    33f4:	01000000 	mrseq	r0, (UNDEF: 0)
    33f8:	00005300 	andeq	r5, r0, r0, lsl #6
    33fc:	00000000 	andeq	r0, r0, r0
    3400:	00010000 	andeq	r0, r1, r0
    3404:	00000053 	andeq	r0, r0, r3, asr r0
    3408:	00000000 	andeq	r0, r0, r0
    340c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3420:	00510001 	subseq	r0, r1, r1
    3424:	00000000 	andeq	r0, r0, r0
    3428:	04000000 	streq	r0, [r0], #-0
    342c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3430:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3440:	30000200 	andcc	r0, r0, r0, lsl #4
    3444:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3448:	00000000 	andeq	r0, r0, r0
    344c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3458:	00530001 	subseq	r0, r3, r1
    345c:	00000000 	andeq	r0, r0, r0
    3460:	01000000 	mrseq	r0, (UNDEF: 0)
    3464:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3474:	00010000 	andeq	r0, r1, r0
    3478:	00000051 	andeq	r0, r0, r1, asr r0
    347c:	00000000 	andeq	r0, r0, r0
    3480:	f3000400 	vshl.u8	d0, d0, d0
    3484:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3494:	02000000 	andeq	r0, r0, #0
    3498:	009f3000 	addseq	r3, pc, r0
    349c:	00000000 	andeq	r0, r0, r0
    34a0:	01000000 	mrseq	r0, (UNDEF: 0)
    34a4:	00005300 	andeq	r5, r0, r0, lsl #6
    34a8:	00000000 	andeq	r0, r0, r0
    34ac:	00010000 	andeq	r0, r1, r0
    34b0:	00000053 	andeq	r0, r0, r3, asr r0
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    34cc:	00510001 	subseq	r0, r1, r1
    34d0:	00000000 	andeq	r0, r0, r0
    34d4:	04000000 	streq	r0, [r0], #-0
    34d8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    34ec:	30000200 	andcc	r0, r0, r0, lsl #4
    34f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    3504:	00530001 	subseq	r0, r3, r1
    3508:	00000000 	andeq	r0, r0, r0
    350c:	01000000 	mrseq	r0, (UNDEF: 0)
    3510:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3520:	00010000 	andeq	r0, r1, r0
    3524:	00000051 	andeq	r0, r0, r1, asr r0
    3528:	00000000 	andeq	r0, r0, r0
    352c:	f3000400 	vshl.u8	d0, d0, d0
    3530:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3540:	02000000 	andeq	r0, r0, #0
    3544:	009f3000 	addseq	r3, pc, r0
    3548:	00000000 	andeq	r0, r0, r0
    354c:	01000000 	mrseq	r0, (UNDEF: 0)
    3550:	00005300 	andeq	r5, r0, r0, lsl #6
    3554:	00000000 	andeq	r0, r0, r0
    3558:	00010000 	andeq	r0, r1, r0
    355c:	00000053 	andeq	r0, r0, r3, asr r0
    3560:	00000000 	andeq	r0, r0, r0
    3564:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3578:	00510001 	subseq	r0, r1, r1
    357c:	00000000 	andeq	r0, r0, r0
    3580:	04000000 	streq	r0, [r0], #-0
    3584:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3588:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3598:	30000200 	andcc	r0, r0, r0, lsl #4
    359c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35a0:	00000000 	andeq	r0, r0, r0
    35a4:	53000100 	movwpl	r0, #256	; 0x100
	...
    35b0:	00510001 	subseq	r0, r1, r1
	...
    35c0:	01000000 	mrseq	r0, (UNDEF: 0)
    35c4:	00005100 	andeq	r5, r0, r0, lsl #2
    35c8:	00000000 	andeq	r0, r0, r0
    35cc:	00040000 	andeq	r0, r4, r0
    35d0:	9f5101f3 	svcls	0x005101f3
	...
    35e4:	9f300002 	svcls	0x00300002
	...
    35f0:	00530001 	subseq	r0, r3, r1
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	01000000 	mrseq	r0, (UNDEF: 0)
    35fc:	00005300 	andeq	r5, r0, r0, lsl #6
    3600:	00000000 	andeq	r0, r0, r0
    3604:	00010000 	andeq	r0, r1, r0
    3608:	00000051 	andeq	r0, r0, r1, asr r0
	...
    3618:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3624:	01f30004 	mvnseq	r0, r4
    3628:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3638:	00020000 	andeq	r0, r2, r0
    363c:	00009f30 	andeq	r9, r0, r0, lsr pc
    3640:	00000000 	andeq	r0, r0, r0
    3644:	00010000 	andeq	r0, r1, r0
    3648:	00000053 	andeq	r0, r0, r3, asr r0
    364c:	00000000 	andeq	r0, r0, r0
    3650:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3664:	00510001 	subseq	r0, r1, r1
    3668:	00000000 	andeq	r0, r0, r0
    366c:	04000000 	streq	r0, [r0], #-0
    3670:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3674:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3684:	30000200 	andcc	r0, r0, r0, lsl #4
    3688:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    368c:	00000000 	andeq	r0, r0, r0
    3690:	53000100 	movwpl	r0, #256	; 0x100
	...
    369c:	00530001 	subseq	r0, r3, r1
    36a0:	00000000 	andeq	r0, r0, r0
    36a4:	01000000 	mrseq	r0, (UNDEF: 0)
    36a8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    36b8:	00010000 	andeq	r0, r1, r0
    36bc:	00000051 	andeq	r0, r0, r1, asr r0
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	f3000400 	vshl.u8	d0, d0, d0
    36c8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    36d8:	02000000 	andeq	r0, r0, #0
    36dc:	009f3000 	addseq	r3, pc, r0
    36e0:	00000000 	andeq	r0, r0, r0
    36e4:	01000000 	mrseq	r0, (UNDEF: 0)
    36e8:	00005300 	andeq	r5, r0, r0, lsl #6
    36ec:	00000000 	andeq	r0, r0, r0
    36f0:	00010000 	andeq	r0, r1, r0
    36f4:	00000053 	andeq	r0, r0, r3, asr r0
    36f8:	00000000 	andeq	r0, r0, r0
    36fc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3710:	00510001 	subseq	r0, r1, r1
    3714:	00000000 	andeq	r0, r0, r0
    3718:	04000000 	streq	r0, [r0], #-0
    371c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3720:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3730:	30000200 	andcc	r0, r0, r0, lsl #4
    3734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3738:	00000000 	andeq	r0, r0, r0
    373c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3748:	00530001 	subseq	r0, r3, r1
    374c:	00000000 	andeq	r0, r0, r0
    3750:	01000000 	mrseq	r0, (UNDEF: 0)
    3754:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3764:	00010000 	andeq	r0, r1, r0
    3768:	00000051 	andeq	r0, r0, r1, asr r0
    376c:	00000000 	andeq	r0, r0, r0
    3770:	f3000400 	vshl.u8	d0, d0, d0
    3774:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3784:	02000000 	andeq	r0, r0, #0
    3788:	009f3000 	addseq	r3, pc, r0
    378c:	00000000 	andeq	r0, r0, r0
    3790:	01000000 	mrseq	r0, (UNDEF: 0)
    3794:	00005300 	andeq	r5, r0, r0, lsl #6
    3798:	00000000 	andeq	r0, r0, r0
    379c:	00010000 	andeq	r0, r1, r0
    37a0:	00000053 	andeq	r0, r0, r3, asr r0
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    37bc:	00510001 	subseq	r0, r1, r1
    37c0:	00000000 	andeq	r0, r0, r0
    37c4:	04000000 	streq	r0, [r0], #-0
    37c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    37cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    37dc:	30000200 	andcc	r0, r0, r0, lsl #4
    37e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37e4:	00000000 	andeq	r0, r0, r0
    37e8:	53000100 	movwpl	r0, #256	; 0x100
	...
    37f4:	00530001 	subseq	r0, r3, r1
    37f8:	00000000 	andeq	r0, r0, r0
    37fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3800:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3810:	00010000 	andeq	r0, r1, r0
    3814:	00000051 	andeq	r0, r0, r1, asr r0
    3818:	00000000 	andeq	r0, r0, r0
    381c:	f3000400 	vshl.u8	d0, d0, d0
    3820:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3830:	02000000 	andeq	r0, r0, #0
    3834:	009f3000 	addseq	r3, pc, r0
    3838:	00000000 	andeq	r0, r0, r0
    383c:	01000000 	mrseq	r0, (UNDEF: 0)
    3840:	00005300 	andeq	r5, r0, r0, lsl #6
    3844:	00000000 	andeq	r0, r0, r0
    3848:	00010000 	andeq	r0, r1, r0
    384c:	00000053 	andeq	r0, r0, r3, asr r0
    3850:	00000000 	andeq	r0, r0, r0
    3854:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3868:	00510001 	subseq	r0, r1, r1
    386c:	00000000 	andeq	r0, r0, r0
    3870:	04000000 	streq	r0, [r0], #-0
    3874:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3878:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3888:	30000200 	andcc	r0, r0, r0, lsl #4
    388c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3890:	00000000 	andeq	r0, r0, r0
    3894:	53000100 	movwpl	r0, #256	; 0x100
	...
    38a0:	00530001 	subseq	r0, r3, r1
    38a4:	00000000 	andeq	r0, r0, r0
    38a8:	01000000 	mrseq	r0, (UNDEF: 0)
    38ac:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    38bc:	00010000 	andeq	r0, r1, r0
    38c0:	00000052 	andeq	r0, r0, r2, asr r0
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	f3000400 	vshl.u8	d0, d0, d0
    38cc:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    38dc:	01000000 	mrseq	r0, (UNDEF: 0)
    38e0:	00005200 	andeq	r5, r0, r0, lsl #4
    38e4:	00000000 	andeq	r0, r0, r0
    38e8:	00040000 	andeq	r0, r4, r0
    38ec:	9f5201f3 	svcls	0x005201f3
	...
    3900:	00500001 	subseq	r0, r0, r1
    3904:	00000000 	andeq	r0, r0, r0
    3908:	03000000 	movweq	r0, #0
    390c:	9f687000 	svcls	0x00687000
	...
    3920:	00510001 	subseq	r0, r1, r1
    3924:	00000000 	andeq	r0, r0, r0
    3928:	04000000 	streq	r0, [r0], #-0
    392c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3930:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3934:	00000000 	andeq	r0, r0, r0
    3938:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3944:	01f30004 	mvnseq	r0, r4
    3948:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3958:	00010000 	andeq	r0, r1, r0
    395c:	00000052 	andeq	r0, r0, r2, asr r0
    3960:	00000000 	andeq	r0, r0, r0
    3964:	f3000400 	vshl.u8	d0, d0, d0
    3968:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3978:	01000000 	mrseq	r0, (UNDEF: 0)
    397c:	00005100 	andeq	r5, r0, r0, lsl #2
    3980:	00000000 	andeq	r0, r0, r0
    3984:	00040000 	andeq	r0, r4, r0
    3988:	9f5101f3 	svcls	0x005101f3
	...
    399c:	00510001 	subseq	r0, r1, r1
    39a0:	00000000 	andeq	r0, r0, r0
    39a4:	04000000 	streq	r0, [r0], #-0
    39a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    39ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    39c8:	01f30004 	mvnseq	r0, r4
    39cc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    39dc:	00010000 	andeq	r0, r1, r0
    39e0:	00000051 	andeq	r0, r0, r1, asr r0
    39e4:	00000000 	andeq	r0, r0, r0
    39e8:	f3000400 	vshl.u8	d0, d0, d0
    39ec:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    39fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3a00:	00005100 	andeq	r5, r0, r0, lsl #2
    3a04:	00000000 	andeq	r0, r0, r0
    3a08:	00040000 	andeq	r0, r4, r0
    3a0c:	9f5101f3 	svcls	0x005101f3
	...
    3a20:	00510001 	subseq	r0, r1, r1
    3a24:	00000000 	andeq	r0, r0, r0
    3a28:	04000000 	streq	r0, [r0], #-0
    3a2c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3a30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3a40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3a4c:	01f30004 	mvnseq	r0, r4
    3a50:	00009f50 	andeq	r9, r0, r0, asr pc
    3a54:	00000000 	andeq	r0, r0, r0
    3a58:	00010000 	andeq	r0, r1, r0
    3a5c:	00000050 	andeq	r0, r0, r0, asr r0
    3a60:	00000000 	andeq	r0, r0, r0
    3a64:	f3000400 	vshl.u8	d0, d0, d0
    3a68:	009f5001 	addseq	r5, pc, r1
	...
    3a78:	01000000 	mrseq	r0, (UNDEF: 0)
    3a7c:	00005100 	andeq	r5, r0, r0, lsl #2
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	00010000 	andeq	r0, r1, r0
    3a88:	00000054 	andeq	r0, r0, r4, asr r0
    3a8c:	00000000 	andeq	r0, r0, r0
    3a90:	f3000400 	vshl.u8	d0, d0, d0
    3a94:	009f5101 	addseq	r5, pc, r1, lsl #2
    3a98:	00000000 	andeq	r0, r0, r0
    3a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    3aa0:	00005400 	andeq	r5, r0, r0, lsl #8
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	00040000 	andeq	r0, r4, r0
    3aac:	9f5101f3 	svcls	0x005101f3
	...
    3ac0:	9f300002 	svcls	0x00300002
	...
    3acc:	00560001 	subseq	r0, r6, r1
    3ad0:	00000000 	andeq	r0, r0, r0
    3ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ad8:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    3ae8:	00020000 	andeq	r0, r2, r0
    3aec:	00009f31 	andeq	r9, r0, r1, lsr pc
    3af0:	00000000 	andeq	r0, r0, r0
    3af4:	00010000 	andeq	r0, r1, r0
    3af8:	00000057 	andeq	r0, r0, r7, asr r0
    3afc:	00000000 	andeq	r0, r0, r0
    3b00:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    3b14:	00510001 	subseq	r0, r1, r1
    3b18:	00000000 	andeq	r0, r0, r0
    3b1c:	04000000 	streq	r0, [r0], #-0
    3b20:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3b24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3b34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3b40:	01f30004 	mvnseq	r0, r4
    3b44:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3b54:	00010000 	andeq	r0, r1, r0
    3b58:	00000050 	andeq	r0, r0, r0, asr r0
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	f3000400 	vshl.u8	d0, d0, d0
    3b64:	009f5001 	addseq	r5, pc, r1
    3b68:	00000000 	andeq	r0, r0, r0
    3b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b70:	00005000 	andeq	r5, r0, r0
    3b74:	00000000 	andeq	r0, r0, r0
    3b78:	00040000 	andeq	r0, r4, r0
    3b7c:	9f5001f3 	svcls	0x005001f3
	...
    3b88:	00500001 	subseq	r0, r0, r1
    3b8c:	00000000 	andeq	r0, r0, r0
    3b90:	04000000 	streq	r0, [r0], #-0
    3b94:	5001f300 	andpl	pc, r1, r0, lsl #6
    3b98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b9c:	00000000 	andeq	r0, r0, r0
    3ba0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3bac:	01f30004 	mvnseq	r0, r4
    3bb0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3bc0:	00010000 	andeq	r0, r1, r0
    3bc4:	00000051 	andeq	r0, r0, r1, asr r0
    3bc8:	00000000 	andeq	r0, r0, r0
    3bcc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3bd8:	01f30004 	mvnseq	r0, r4
    3bdc:	00009f51 	andeq	r9, r0, r1, asr pc
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	00010000 	andeq	r0, r1, r0
    3be8:	00000055 	andeq	r0, r0, r5, asr r0
    3bec:	00000000 	andeq	r0, r0, r0
    3bf0:	f3000400 	vshl.u8	d0, d0, d0
    3bf4:	009f5101 	addseq	r5, pc, r1, lsl #2
    3bf8:	00000000 	andeq	r0, r0, r0
    3bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    3c00:	00005500 	andeq	r5, r0, r0, lsl #10
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	00040000 	andeq	r0, r4, r0
    3c0c:	9f5101f3 	svcls	0x005101f3
	...
    3c20:	00530001 	subseq	r0, r3, r1
	...
    3c30:	01000000 	mrseq	r0, (UNDEF: 0)
    3c34:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3c44:	00010000 	andeq	r0, r1, r0
    3c48:	00000051 	andeq	r0, r0, r1, asr r0
	...
    3c58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3c6c:	9f300002 	svcls	0x00300002
	...
    3c78:	00570001 	subseq	r0, r7, r1
    3c7c:	00000000 	andeq	r0, r0, r0
    3c80:	01000000 	mrseq	r0, (UNDEF: 0)
    3c84:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    3c94:	00020000 	andeq	r0, r2, r0
    3c98:	00009f30 	andeq	r9, r0, r0, lsr pc
    3c9c:	00000000 	andeq	r0, r0, r0
    3ca0:	00010000 	andeq	r0, r1, r0
    3ca4:	00000056 	andeq	r0, r0, r6, asr r0
    3ca8:	00000000 	andeq	r0, r0, r0
    3cac:	76000700 	strvc	r0, [r0], -r0, lsl #14
    3cb0:	fdff0b00 	ldc2l	11, cr0, [pc]	; 3cb8 <__Stack_Size+0x38b8>
    3cb4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	00010000 	andeq	r0, r1, r0
    3cc0:	00000056 	andeq	r0, r0, r6, asr r0
	...
    3cd0:	30000200 	andcc	r0, r0, r0, lsl #4
    3cd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cd8:	00000000 	andeq	r0, r0, r0
    3cdc:	71000500 	tstvc	r0, r0, lsl #10
    3ce0:	9f243800 	svcls	0x00243800
	...
    3cf4:	00530001 	subseq	r0, r3, r1
	...
    3d04:	01000000 	mrseq	r0, (UNDEF: 0)
    3d08:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3d18:	00010000 	andeq	r0, r1, r0
    3d1c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    3d2c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3d40:	9f300002 	svcls	0x00300002
	...
    3d4c:	00560001 	subseq	r0, r6, r1
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	07000000 	streq	r0, [r0, -r0]
    3d58:	0a007600 	beq	21560 <__Stack_Size+0x21160>
    3d5c:	9f1a0cff 	svcls	0x001a0cff
	...
    3d68:	00530001 	subseq	r0, r3, r1
    3d6c:	00000000 	andeq	r0, r0, r0
    3d70:	02000000 	andeq	r0, r0, #0
    3d74:	001c7000 	andseq	r7, ip, r0
	...
    3d84:	02000000 	andeq	r0, r0, #0
    3d88:	009f3000 	addseq	r3, pc, r0
    3d8c:	00000000 	andeq	r0, r0, r0
    3d90:	01000000 	mrseq	r0, (UNDEF: 0)
    3d94:	00005700 	andeq	r5, r0, r0, lsl #14
    3d98:	00000000 	andeq	r0, r0, r0
    3d9c:	00070000 	andeq	r0, r7, r0
    3da0:	ff0b0077 			; <UNDEFINED> instruction: 0xff0b0077
    3da4:	009f1adf 			; <UNDEFINED> instruction: 0x009f1adf
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	01000000 	mrseq	r0, (UNDEF: 0)
    3db0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3dc0:	00020000 	andeq	r0, r2, r0
    3dc4:	00009f30 	andeq	r9, r0, r0, lsr pc
    3dc8:	00000000 	andeq	r0, r0, r0
    3dcc:	00050000 	andeq	r0, r5, r0
    3dd0:	243c0071 	ldrtcs	r0, [ip], #-113	; 0xffffff8f
    3dd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3de4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3df0:	01f30004 	mvnseq	r0, r4
    3df4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3e04:	00010000 	andeq	r0, r1, r0
    3e08:	00000050 	andeq	r0, r0, r0, asr r0
    3e0c:	00000000 	andeq	r0, r0, r0
    3e10:	f3000400 	vshl.u8	d0, d0, d0
    3e14:	009f5001 	addseq	r5, pc, r1
	...
    3e24:	01000000 	mrseq	r0, (UNDEF: 0)
    3e28:	00005000 	andeq	r5, r0, r0
    3e2c:	00000000 	andeq	r0, r0, r0
    3e30:	00040000 	andeq	r0, r4, r0
    3e34:	9f5001f3 	svcls	0x005001f3
	...
    3e48:	00500001 	subseq	r0, r0, r1
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	04000000 	streq	r0, [r0], #-0
    3e54:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3e68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3e74:	01f30004 	mvnseq	r0, r4
    3e78:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3e88:	00010000 	andeq	r0, r1, r0
    3e8c:	00000050 	andeq	r0, r0, r0, asr r0
    3e90:	00000000 	andeq	r0, r0, r0
    3e94:	f3000400 	vshl.u8	d0, d0, d0
    3e98:	009f5001 	addseq	r5, pc, r1
	...
    3ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    3eac:	00005000 	andeq	r5, r0, r0
    3eb0:	00000000 	andeq	r0, r0, r0
    3eb4:	00040000 	andeq	r0, r4, r0
    3eb8:	9f5001f3 	svcls	0x005001f3
	...
    3ecc:	00500001 	subseq	r0, r0, r1
    3ed0:	00000000 	andeq	r0, r0, r0
    3ed4:	04000000 	streq	r0, [r0], #-0
    3ed8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3edc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3eec:	30000200 	andcc	r0, r0, r0, lsl #4
    3ef0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ef4:	00000000 	andeq	r0, r0, r0
    3ef8:	71000a00 	tstvc	r0, r0, lsl #20
    3efc:	1a007300 	bne	20b04 <__Stack_Size+0x20704>
    3f00:	2e302440 	cfnegscs	mvf2, mvf0
    3f04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3f20:	01f30004 	mvnseq	r0, r4
    3f24:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3f34:	00020000 	andeq	r0, r2, r0
    3f38:	00009f30 	andeq	r9, r0, r0, lsr pc
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	00010000 	andeq	r0, r1, r0
    3f44:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3f54:	30000200 	andcc	r0, r0, r0, lsl #4
    3f58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f5c:	00000000 	andeq	r0, r0, r0
    3f60:	73000600 	movwvc	r0, #1536	; 0x600
    3f64:	1a007100 	bne	2036c <__Stack_Size+0x1ff6c>
    3f68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f78:	30000200 	andcc	r0, r0, r0, lsl #4
    3f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f80:	00000000 	andeq	r0, r0, r0
    3f84:	71000600 	tstvc	r0, r0, lsl #12
    3f88:	1a007200 	bne	20790 <__Stack_Size+0x20390>
    3f8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f90:	00000000 	andeq	r0, r0, r0
    3f94:	00172800 	andseq	r2, r7, r0, lsl #16
    3f98:	00172a08 	andseq	r2, r7, r8, lsl #20
    3f9c:	51000108 	tstpl	r0, r8, lsl #2
    3fa0:	0800172a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, ip}
    3fa4:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
    3fa8:	01f30004 	mvnseq	r0, r4
    3fac:	00009f51 	andeq	r9, r0, r1, asr pc
    3fb0:	00000000 	andeq	r0, r0, r0
    3fb4:	173c0000 	ldrne	r0, [ip, -r0]!
    3fb8:	174c0800 	strbne	r0, [ip, -r0, lsl #16]
    3fbc:	00010800 	andeq	r0, r1, r0, lsl #16
    3fc0:	00174c50 	andseq	r4, r7, r0, asr ip
    3fc4:	00175408 	andseq	r5, r7, r8, lsl #8
    3fc8:	70000308 	andvc	r0, r0, r8, lsl #6
    3fcc:	17549f7e 			; <UNDEFINED> instruction: 0x17549f7e
    3fd0:	17580800 	ldrbne	r0, [r8, -r0, lsl #16]
    3fd4:	00040800 	andeq	r0, r4, r0, lsl #16
    3fd8:	9f5001f3 	svcls	0x005001f3
    3fdc:	08001758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip}
    3fe0:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
    3fe4:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    3fe8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ff8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4004:	01f30004 	mvnseq	r0, r4
    4008:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4018:	00020000 	andeq	r0, r2, r0
    401c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4020:	00000000 	andeq	r0, r0, r0
    4024:	00010000 	andeq	r0, r1, r0
    4028:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4038:	70000800 	andvc	r0, r0, r0, lsl #16
    403c:	08253300 	stmdaeq	r5!, {r8, r9, ip, sp}
    4040:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4044:	00000000 	andeq	r0, r0, r0
    4048:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    404c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4050:	ff082533 			; <UNDEFINED> instruction: 0xff082533
    4054:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    4064:	00020000 	andeq	r0, r2, r0
    4068:	00009f30 	andeq	r9, r0, r0, lsr pc
    406c:	00000000 	andeq	r0, r0, r0
    4070:	00090000 	andeq	r0, r9, r0
    4074:	00700073 	rsbseq	r0, r0, r3, ror r0
    4078:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xfffff0f8
    407c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4080:	00000000 	andeq	r0, r0, r0
    4084:	73000a00 	movwvc	r0, #2560	; 0xa00
    4088:	5001f300 	andpl	pc, r1, r0, lsl #6
    408c:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xfffff0f8
    4090:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4094:	00000000 	andeq	r0, r0, r0
    4098:	00177c00 	andseq	r7, r7, r0, lsl #24
    409c:	0017ac08 	andseq	sl, r7, r8, lsl #24
    40a0:	50000108 	andpl	r0, r0, r8, lsl #2
    40a4:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
    40a8:	080017be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip}
    40ac:	01f30004 	mvnseq	r0, r4
    40b0:	17be9f50 	sbfxne	r9, r0, #30, #31
    40b4:	17c40800 	strbne	r0, [r4, r0, lsl #16]
    40b8:	00010800 	andeq	r0, r1, r0, lsl #16
    40bc:	0017c450 	andseq	ip, r7, r0, asr r4
    40c0:	0017d008 	andseq	sp, r7, r8
    40c4:	f3000408 	vshl.u8	d0, d8, d0
    40c8:	d09f5001 	addsle	r5, pc, r1
    40cc:	d6080017 			; <UNDEFINED> instruction: 0xd6080017
    40d0:	01080017 	tsteq	r8, r7, lsl r0
    40d4:	17d65000 	ldrbne	r5, [r6, r0]
    40d8:	17e20800 	strbne	r0, [r2, r0, lsl #16]!
    40dc:	00040800 	andeq	r0, r4, r0, lsl #16
    40e0:	9f5001f3 	svcls	0x005001f3
    40e4:	080017e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, ip}
    40e8:	080017e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip}
    40ec:	e8500001 	ldmda	r0, {r0}^
    40f0:	f4080017 	vst4.8	{d0-d3}, [r8 :64], r7
    40f4:	04080017 	streq	r0, [r8], #-23	; 0xffffffe9
    40f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    40fc:	0017f49f 	mulseq	r7, pc, r4	; <UNPREDICTABLE>
    4100:	0017fa08 	andseq	pc, r7, r8, lsl #20
    4104:	50000108 	andpl	r0, r0, r8, lsl #2
    4108:	080017fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip}
    410c:	0800180c 	stmdaeq	r0, {r2, r3, fp, ip}
    4110:	01f30004 	mvnseq	r0, r4
    4114:	180c9f50 	stmdane	ip, {r4, r6, r8, r9, sl, fp, ip, pc}
    4118:	18180800 	ldmdane	r8, {fp}
    411c:	00010800 	andeq	r0, r1, r0, lsl #16
    4120:	00000050 	andeq	r0, r0, r0, asr r0
    4124:	00000000 	andeq	r0, r0, r0
    4128:	00181800 	andseq	r1, r8, r0, lsl #16
    412c:	00185a08 	andseq	r5, r8, r8, lsl #20
    4130:	50000108 	andpl	r0, r0, r8, lsl #2
    4134:	0800185a 	stmdaeq	r0, {r1, r3, r4, r6, fp, ip}
    4138:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    413c:	9a540001 	bls	1504148 <__Stack_Size+0x1503d48>
    4140:	a0080018 	andge	r0, r8, r8, lsl r0
    4144:	04080018 	streq	r0, [r8], #-24	; 0xffffffe8
    4148:	5001f300 	andpl	pc, r1, r0, lsl #6
    414c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4150:	00000000 	andeq	r0, r0, r0
    4154:	00181800 	andseq	r1, r8, r0, lsl #16
    4158:	00183008 	andseq	r3, r8, r8
    415c:	51000108 	tstpl	r0, r8, lsl #2
    4160:	08001830 	stmdaeq	r0, {r4, r5, fp, ip}
    4164:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    4168:	9a550001 	bls	1544174 <__Stack_Size+0x1543d74>
    416c:	a0080018 	andge	r0, r8, r8, lsl r0
    4170:	04080018 	streq	r0, [r8], #-24	; 0xffffffe8
    4174:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4178:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    417c:	00000000 	andeq	r0, r0, r0
    4180:	00181800 	andseq	r1, r8, r0, lsl #16
    4184:	00182408 	andseq	r2, r8, r8, lsl #8
    4188:	30000208 	andcc	r0, r0, r8, lsl #4
    418c:	0018249f 	mulseq	r8, pc, r4	; <UNPREDICTABLE>
    4190:	00182808 	andseq	r2, r8, r8, lsl #16
    4194:	73000b08 	movwvc	r0, #2824	; 0xb08
    4198:	cfff0b00 	svcgt	0x00ff0b00
    419c:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    41a0:	182a9f1a 	stmdane	sl!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    41a4:	18320800 	ldmdane	r2!, {fp}
    41a8:	00070800 	andeq	r0, r7, r0, lsl #16
    41ac:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    41b0:	329f1aff 	addscc	r1, pc, #1044480	; 0xff000
    41b4:	34080018 	strcc	r0, [r8], #-24	; 0xffffffe8
    41b8:	09080018 	stmdbeq	r8, {r3, r4}
    41bc:	94107000 	ldrls	r7, [r0], #-0
    41c0:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    41c4:	18349f1a 	ldmdane	r4!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    41c8:	183c0800 	ldmdane	ip!, {fp}
    41cc:	000b0800 	andeq	r0, fp, r0, lsl #16
    41d0:	f30b0072 	vqadd.u8	q0, <illegal reg q5.5>, q9
    41d4:	ff0a1ae9 			; <UNDEFINED> instruction: 0xff0a1ae9
    41d8:	469f1aff 			; <UNDEFINED> instruction: 0x469f1aff
    41dc:	4a080018 	bmi	204244 <__Stack_Size+0x203e44>
    41e0:	07080018 	smladeq	r8, r8, r0, r0
    41e4:	0a007300 	beq	20dec <__Stack_Size+0x209ec>
    41e8:	9f1affff 	svcls	0x001affff
    41ec:	0800184a 	stmdaeq	r0, {r1, r3, r6, fp, ip}
    41f0:	0800184e 	stmdaeq	r0, {r1, r2, r3, r6, fp, ip}
    41f4:	0c700009 	ldcleq	0, cr0, [r0], #-36	; 0xffffffdc
    41f8:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    41fc:	4e9f1aff 	mrcmi	10, 4, r1, cr15, cr15, {7}
    4200:	52080018 	andpl	r0, r8, #24
    4204:	0b080018 	bleq	20426c <__Stack_Size+0x203e6c>
    4208:	0b007300 	bleq	20e10 <__Stack_Size+0x20a10>
    420c:	0a1afcff 	beq	6c3610 <__Stack_Size+0x6c3210>
    4210:	9f1affff 	svcls	0x001affff
    4214:	08001856 	stmdaeq	r0, {r1, r2, r4, r6, fp, ip}
    4218:	0800185d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, ip}
    421c:	00730007 	rsbseq	r0, r3, r7
    4220:	1affff0a 	bne	3e50 <__Stack_Size+0x3a50>
    4224:	00187e9f 	mulseq	r8, pc, lr	; <UNPREDICTABLE>
    4228:	00189008 	andseq	r9, r8, r8
    422c:	50000108 	andpl	r0, r0, r8, lsl #2
    4230:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
    4234:	08001892 	stmdaeq	r0, {r1, r4, r7, fp, ip}
    4238:	00700006 	rsbseq	r0, r0, r6
    423c:	9f210073 	svcls	0x00210073
    4240:	08001892 	stmdaeq	r0, {r1, r4, r7, fp, ip}
    4244:	08001894 	stmdaeq	r0, {r2, r4, r7, fp, ip}
    4248:	94530001 	ldrbls	r0, [r3], #-1
    424c:	a0080018 	andge	r0, r8, r8, lsl r0
    4250:	11080018 	tstne	r8, r8, lsl r0
    4254:	f7007200 			; <UNDEFINED> instruction: 0xf7007200
    4258:	f7640825 			; <UNDEFINED> instruction: 0xf7640825
    425c:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    4260:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    4264:	00009f21 	andeq	r9, r0, r1, lsr #30
    4268:	00000000 	andeq	r0, r0, r0
    426c:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    4270:	186a0800 	stmdane	sl!, {fp}^
    4274:	00020800 	andeq	r0, r2, r0, lsl #16
    4278:	186a9f30 	stmdane	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    427c:	18700800 	ldmdane	r0!, {fp}^
    4280:	00010800 	andeq	r0, r1, r0, lsl #16
    4284:	00187052 	andseq	r7, r8, r2, asr r0
    4288:	00188008 	andseq	r8, r8, r8
    428c:	91001108 	tstls	r0, r8, lsl #2
    4290:	64910668 	ldrvs	r0, [r1], #1640	; 0x668
    4294:	71007406 	tstvc	r0, r6, lsl #8
    4298:	01282900 			; <UNDEFINED> instruction: 0x01282900
    429c:	9f131600 	svcls	0x00131600
    42a0:	08001880 	stmdaeq	r0, {r7, fp, ip}
    42a4:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    42a8:	68910014 	ldmvs	r1, {r2, r4}
    42ac:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    42b0:	000c0074 	andeq	r0, ip, r4, ror r0
    42b4:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    42b8:	16000128 	strne	r0, [r0], -r8, lsr #2
    42bc:	189a9f13 	ldmne	sl, {r0, r1, r4, r8, r9, sl, fp, ip, pc}
    42c0:	18a00800 	stmiane	r0!, {fp}
    42c4:	00150800 	andseq	r0, r5, r0, lsl #16
    42c8:	7d06687d 	stcvc	8, cr6, [r6, #-500]	; 0xfffffe0c
    42cc:	01f30664 	mvnseq	r0, r4, ror #12
    42d0:	38000c50 	stmdacc	r0, {r4, r6, sl, fp}
    42d4:	28294001 	stmdacs	r9!, {r0, lr}
    42d8:	13160001 	tstne	r6, #1
    42dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42e0:	00000000 	andeq	r0, r0, r0
    42e4:	00181800 	andseq	r1, r8, r0, lsl #16
    42e8:	00187608 	andseq	r7, r8, r8, lsl #12
    42ec:	30000208 	andcc	r0, r0, r8, lsl #4
    42f0:	0018769f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    42f4:	00188408 	andseq	r8, r8, r8, lsl #8
    42f8:	52000108 	andpl	r0, r0, #8, 2
    42fc:	08001884 	stmdaeq	r0, {r2, r7, fp, ip}
    4300:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    4304:	68910022 	ldmvs	r1, {r1, r5}
    4308:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    430c:	000c0074 	andeq	r0, ip, r4, ror r0
    4310:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4314:	16000128 	strne	r0, [r0], -r8, lsr #2
    4318:	f71e4913 			; <UNDEFINED> instruction: 0xf71e4913
    431c:	06007525 	streq	r7, [r0], -r5, lsr #10
    4320:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    4324:	9f00f71b 	svcls	0x0000f71b
    4328:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    432c:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    4330:	687d0024 	ldmdavs	sp!, {r2, r5}^
    4334:	06647d06 	strbteq	r7, [r4], -r6, lsl #26
    4338:	0c5001f3 	ldfeqe	f0, [r0], {243}	; 0xf3
    433c:	40013800 	andmi	r3, r1, r0, lsl #16
    4340:	00012829 	andeq	r2, r1, r9, lsr #16
    4344:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    4348:	01f325f7 	ldrsheq	r2, [r3, #87]!	; 0x57
    434c:	24320651 	ldrtcs	r0, [r2], #-1617	; 0xfffff9af
    4350:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4354:	00009f00 	andeq	r9, r0, r0, lsl #30
    4358:	00000000 	andeq	r0, r0, r0
    435c:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    4360:	187e0800 	ldmdane	lr!, {fp}^
    4364:	00020800 	andeq	r0, r2, r0, lsl #16
    4368:	187e9f30 	ldmdane	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    436c:	18840800 	stmne	r4, {fp}
    4370:	000b0800 	andeq	r0, fp, r0, lsl #16
    4374:	00700072 	rsbseq	r0, r0, r2, ror r0
    4378:	64082534 	strvs	r2, [r8], #-1332	; 0xfffffacc
    437c:	849f1c1e 	ldrhi	r1, [pc], #3102	; 4384 <__Stack_Size+0x3f84>
    4380:	86080018 			; <UNDEFINED> instruction: 0x86080018
    4384:	01080018 	tsteq	r8, r8, lsl r0
    4388:	18865200 	stmne	r6, {r9, ip, lr}
    438c:	189a0800 	ldmne	sl, {fp}
    4390:	002a0800 	eoreq	r0, sl, r0, lsl #16
    4394:	91066891 			; <UNDEFINED> instruction: 0x91066891
    4398:	00740664 	rsbseq	r0, r4, r4, ror #12
    439c:	0138000c 	teqeq	r8, ip
    43a0:	01282940 			; <UNDEFINED> instruction: 0x01282940
    43a4:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    43a8:	7525f71e 	strvc	pc, [r5, #-1822]!	; 0xfffff8e2
    43ac:	24320600 	ldrtcs	r0, [r2], #-1536	; 0xfffffa00
    43b0:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    43b4:	34007000 	strcc	r7, [r0], #-0
    43b8:	1e640825 	cdpne	8, 6, cr0, cr4, cr5, {1}
    43bc:	189a9f1c 	ldmne	sl, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    43c0:	18a00800 	stmiane	r0!, {fp}
    43c4:	002c0800 	eoreq	r0, ip, r0, lsl #16
    43c8:	7d06687d 	stcvc	8, cr6, [r6, #-500]	; 0xfffffe0c
    43cc:	01f30664 	mvnseq	r0, r4, ror #12
    43d0:	38000c50 	stmdacc	r0, {r4, r6, sl, fp}
    43d4:	28294001 	stmdacs	r9!, {r0, lr}
    43d8:	13160001 	tstne	r6, #1
    43dc:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    43e0:	065101f3 			; <UNDEFINED> instruction: 0x065101f3
    43e4:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    43e8:	7000f71b 	andvc	pc, r0, fp, lsl r7	; <UNPREDICTABLE>
    43ec:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    43f0:	9f1c1e64 	svcls	0x001c1e64
	...
    43fc:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
    4400:	0800185a 	stmdaeq	r0, {r1, r3, r4, r6, fp, ip}
    4404:	5a500001 	bpl	1404410 <__Stack_Size+0x1404010>
    4408:	9a080018 	bls	204470 <__Stack_Size+0x204070>
    440c:	01080018 	tsteq	r8, r8, lsl r0
    4410:	189a5400 	ldmne	sl, {sl, ip, lr}
    4414:	18a00800 	stmiane	r0!, {fp}
    4418:	00040800 	andeq	r0, r4, r0, lsl #16
    441c:	9f5001f3 	svcls	0x005001f3
	...
    4430:	00510001 	subseq	r0, r1, r1
    4434:	00000000 	andeq	r0, r0, r0
    4438:	04000000 	streq	r0, [r0], #-0
    443c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4440:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4450:	30000200 	andcc	r0, r0, r0, lsl #4
    4454:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4458:	00000000 	andeq	r0, r0, r0
    445c:	72000b00 	andvc	r0, r0, #0, 22
    4460:	f0ff0b00 			; <UNDEFINED> instruction: 0xf0ff0b00
    4464:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4468:	00009f1a 	andeq	r9, r0, sl, lsl pc
    446c:	00000000 	andeq	r0, r0, r0
    4470:	00070000 	andeq	r0, r7, r0
    4474:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    4478:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    447c:	00000000 	andeq	r0, r0, r0
    4480:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4484:	e4080018 	str	r0, [r8], #-24	; 0xffffffe8
    4488:	01080018 	tsteq	r8, r8, lsl r0
    448c:	18e45000 	stmiane	r4!, {ip, lr}^
    4490:	18e60800 	stmiane	r6!, {fp}^
    4494:	00030800 	andeq	r0, r3, r0, lsl #16
    4498:	e69f7470 			; <UNDEFINED> instruction: 0xe69f7470
    449c:	ec080018 	stc	0, cr0, [r8], {24}
    44a0:	01080018 	tsteq	r8, r8, lsl r0
    44a4:	18ec5000 	stmiane	ip!, {ip, lr}^
    44a8:	18fe0800 	ldmne	lr!, {fp}^
    44ac:	00040800 	andeq	r0, r4, r0, lsl #16
    44b0:	9f5001f3 	svcls	0x005001f3
	...
    44bc:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    44c0:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
    44c4:	dc510001 	mrrcle	0, 0, r0, r1, cr1
    44c8:	fe080018 	mcr2	0, 0, r0, cr8, cr8, {0}
    44cc:	04080018 	streq	r0, [r8], #-24	; 0xffffffe8
    44d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    44d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44d8:	00000000 	andeq	r0, r0, r0
    44dc:	0018ce00 	andseq	ip, r8, r0, lsl #28
    44e0:	0018d608 	andseq	sp, r8, r8, lsl #12
    44e4:	30000208 	andcc	r0, r0, r8, lsl #4
    44e8:	0018d69f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    44ec:	0018fe08 	andseq	pc, r8, r8, lsl #28
    44f0:	74000608 	strvc	r0, [r0], #-1544	; 0xfffff9f8
    44f4:	1aff0800 	bne	fffc64fc <SCS_BASE+0x1ffb84fc>
    44f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44fc:	00000000 	andeq	r0, r0, r0
    4500:	0018ce00 	andseq	ip, r8, r0, lsl #28
    4504:	0018d608 	andseq	sp, r8, r8, lsl #12
    4508:	30000208 	andcc	r0, r0, r8, lsl #4
    450c:	0018d69f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    4510:	0018dc08 	andseq	sp, r8, r8, lsl #24
    4514:	71000908 	tstvc	r0, r8, lsl #18
    4518:	0a1a4f00 	beq	698120 <__Stack_Size+0x697d20>
    451c:	9f1affff 	svcls	0x001affff
    4520:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
    4524:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
    4528:	01f3000a 	mvnseq	r0, sl
    452c:	0a1a4f51 	beq	698278 <__Stack_Size+0x697e78>
    4530:	9f1affff 	svcls	0x001affff
	...
    453c:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    4540:	080018e0 	stmdaeq	r0, {r5, r6, r7, fp, ip}
    4544:	9f300002 	svcls	0x00300002
    4548:	080018e0 	stmdaeq	r0, {r5, r6, r7, fp, ip}
    454c:	080018f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip}
    4550:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
    4554:	fa080018 	blx	2045bc <__Stack_Size+0x2041bc>
    4558:	01080018 	tsteq	r8, r8, lsl r0
    455c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    456c:	00010000 	andeq	r0, r1, r0
    4570:	00000051 	andeq	r0, r0, r1, asr r0
    4574:	00000000 	andeq	r0, r0, r0
    4578:	f3000400 	vshl.u8	d0, d0, d0
    457c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4580:	00000000 	andeq	r0, r0, r0
    4584:	01000000 	mrseq	r0, (UNDEF: 0)
    4588:	00005100 	andeq	r5, r0, r0, lsl #2
    458c:	00000000 	andeq	r0, r0, r0
    4590:	00040000 	andeq	r0, r4, r0
    4594:	9f5101f3 	svcls	0x005101f3
	...
    45a8:	00510001 	subseq	r0, r1, r1
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	04000000 	streq	r0, [r0], #-0
    45b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    45b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    45c8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    45d4:	01f30004 	mvnseq	r0, r4
    45d8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    45e8:	00010000 	andeq	r0, r1, r0
    45ec:	00000051 	andeq	r0, r0, r1, asr r0
    45f0:	00000000 	andeq	r0, r0, r0
    45f4:	f3000400 	vshl.u8	d0, d0, d0
    45f8:	009f5101 	addseq	r5, pc, r1, lsl #2
    45fc:	00000000 	andeq	r0, r0, r0
    4600:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    4604:	02080018 	andeq	r0, r8, #24
    4608:	01080019 	tsteq	r8, r9, lsl r0
    460c:	19025100 	stmdbne	r2, {r8, ip, lr}
    4610:	19060800 	stmdbne	r6, {fp}
    4614:	00040800 	andeq	r0, r4, r0, lsl #16
    4618:	9f5101f3 	svcls	0x005101f3
	...
    4624:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
    4628:	08001908 	stmdaeq	r0, {r3, r8, fp, ip}
    462c:	08500001 	ldmdaeq	r0, {r0}^
    4630:	0e080019 	mcreq	0, 0, r0, cr8, cr9, {0}
    4634:	04080019 	streq	r0, [r8], #-25	; 0xffffffe7
    4638:	5001f300 	andpl	pc, r1, r0, lsl #6
    463c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    464c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4658:	01f30004 	mvnseq	r0, r4
    465c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    466c:	00010000 	andeq	r0, r1, r0
    4670:	00000051 	andeq	r0, r0, r1, asr r0
    4674:	00000000 	andeq	r0, r0, r0
    4678:	f3000400 	vshl.u8	d0, d0, d0
    467c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    468c:	01000000 	mrseq	r0, (UNDEF: 0)
    4690:	00005100 	andeq	r5, r0, r0, lsl #2
    4694:	00000000 	andeq	r0, r0, r0
    4698:	00040000 	andeq	r0, r4, r0
    469c:	9f5101f3 	svcls	0x005101f3
	...
    46a8:	0800190e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip}
    46ac:	08001916 	stmdaeq	r0, {r1, r2, r4, r8, fp, ip}
    46b0:	16500001 	ldrbne	r0, [r0], -r1
    46b4:	1a080019 	bne	204720 <__Stack_Size+0x204320>
    46b8:	04080019 	streq	r0, [r8], #-25	; 0xffffffe7
    46bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    46c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46c4:	00000000 	andeq	r0, r0, r0
    46c8:	00190e00 	andseq	r0, r9, r0, lsl #28
    46cc:	00191008 	andseq	r1, r9, r8
    46d0:	30000208 	andcc	r0, r0, r8, lsl #4
    46d4:	0019109f 	mulseq	r9, pc, r0	; <UNPREDICTABLE>
    46d8:	00191a08 	andseq	r1, r9, r8, lsl #20
    46dc:	71000a08 	tstvc	r0, r8, lsl #20
    46e0:	1a007300 	bne	212e8 <__Stack_Size+0x20ee8>
    46e4:	2e302440 	cfnegscs	mvf2, mvf0
    46e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	00191a00 	andseq	r1, r9, r0, lsl #20
    46f4:	00191c08 	andseq	r1, r9, r8, lsl #24
    46f8:	51000108 	tstpl	r0, r8, lsl #2
    46fc:	0800191c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip}
    4700:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
    4704:	01f30004 	mvnseq	r0, r4
    4708:	00009f51 	andeq	r9, r0, r1, asr pc
    470c:	00000000 	andeq	r0, r0, r0
    4710:	19220000 	stmdbne	r2!, {}	; <UNPREDICTABLE>
    4714:	195a0800 	ldmdbne	sl, {fp}^
    4718:	00010800 	andeq	r0, r1, r0, lsl #16
    471c:	00195a50 	andseq	r5, r9, r0, asr sl
    4720:	00195e08 	andseq	r5, r9, r8, lsl #28
    4724:	f3000408 	vshl.u8	d0, d8, d0
    4728:	5e9f5001 	cdppl	0, 9, cr5, cr15, cr1, {0}
    472c:	60080019 	andvs	r0, r8, r9, lsl r0
    4730:	01080019 	tsteq	r8, r9, lsl r0
    4734:	19605000 	stmdbne	r0!, {ip, lr}^
    4738:	19620800 	stmdbne	r2!, {fp}^
    473c:	00040800 	andeq	r0, r4, r0, lsl #16
    4740:	9f5001f3 	svcls	0x005001f3
	...
    474c:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
    4750:	08001950 	stmdaeq	r0, {r4, r6, r8, fp, ip}
    4754:	50510001 	subspl	r0, r1, r1
    4758:	5e080019 	mcrpl	0, 0, r0, cr8, cr9, {0}
    475c:	04080019 	streq	r0, [r8], #-25	; 0xffffffe7
    4760:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4764:	00195e9f 	mulseq	r9, pc, lr	; <UNPREDICTABLE>
    4768:	00196208 	andseq	r6, r9, r8, lsl #4
    476c:	51000108 	tstpl	r0, r8, lsl #2
	...
    4778:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
    477c:	08001946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip}
    4780:	9f300002 	svcls	0x00300002
    4784:	08001946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip}
    4788:	0800194a 	stmdaeq	r0, {r1, r3, r6, r8, fp, ip}
    478c:	7131000b 	teqvc	r1, fp
    4790:	0a253800 	beq	952798 <__Stack_Size+0x952398>
    4794:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfffff001
    4798:	00194a9f 	mulseq	r9, pc, sl	; <UNPREDICTABLE>
    479c:	00195008 	andseq	r5, r9, r8
    47a0:	31001208 	tstcc	r0, r8, lsl #4
    47a4:	25380071 	ldrcs	r0, [r8, #-113]!	; 0xffffff8f
    47a8:	1affff0a 	bne	43d8 <__Stack_Size+0x3fd8>
    47ac:	0a007224 	beq	21044 <__Stack_Size+0x20c44>
    47b0:	1a1affff 	bne	6c47b4 <__Stack_Size+0x6c43b4>
    47b4:	0019509f 	mulseq	r9, pc, r0	; <UNPREDICTABLE>
    47b8:	00195e08 	andseq	r5, r9, r8, lsl #28
    47bc:	31001308 	tstcc	r0, r8, lsl #6
    47c0:	385101f3 	ldmdacc	r1, {r0, r1, r4, r5, r6, r7, r8}^
    47c4:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    47c8:	0072241a 	rsbseq	r2, r2, sl, lsl r4
    47cc:	1affff0a 	bne	43fc <__Stack_Size+0x3ffc>
    47d0:	195e9f1a 	ldmdbne	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
    47d4:	19620800 	stmdbne	r2!, {fp}^
    47d8:	00120800 	andseq	r0, r2, r0, lsl #16
    47dc:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    47e0:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    47e4:	0072241a 	rsbseq	r2, r2, sl, lsl r4
    47e8:	1affff0a 	bne	4418 <__Stack_Size+0x4018>
    47ec:	00009f1a 	andeq	r9, r0, sl, lsl pc
    47f0:	00000000 	andeq	r0, r0, r0
    47f4:	19220000 	stmdbne	r2!, {}	; <UNPREDICTABLE>
    47f8:	192e0800 	stmdbne	lr!, {fp}
    47fc:	00020800 	andeq	r0, r2, r0, lsl #16
    4800:	192e9f30 	stmdbne	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
    4804:	19460800 	stmdbne	r6, {fp}^
    4808:	00010800 	andeq	r0, r1, r0, lsl #16
    480c:	00194652 	andseq	r4, r9, r2, asr r6
    4810:	00194e08 	andseq	r4, r9, r8, lsl #28
    4814:	53000108 	movwpl	r0, #264	; 0x108
    4818:	0800195e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip}
    481c:	08001962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip}
    4820:	00530001 	subseq	r0, r3, r1
    4824:	00000000 	andeq	r0, r0, r0
    4828:	22000000 	andcs	r0, r0, #0
    482c:	2a080019 	bcs	204898 <__Stack_Size+0x204498>
    4830:	02080019 	andeq	r0, r8, #25
    4834:	2a9f3000 	bcs	fe7d083c <SCS_BASE+0x1e7c283c>
    4838:	62080019 	andvs	r0, r8, #25
    483c:	06080019 			; <UNDEFINED> instruction: 0x06080019
    4840:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    4844:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4848:	00000000 	andeq	r0, r0, r0
    484c:	22000000 	andcs	r0, r0, #0
    4850:	60080019 	andvs	r0, r8, r9, lsl r0
    4854:	02080019 	andeq	r0, r8, #25
    4858:	609f3000 	addsvs	r3, pc, r0
    485c:	62080019 	andvs	r0, r8, #25
    4860:	01080019 	tsteq	r8, r9, lsl r0
    4864:	00005000 	andeq	r5, r0, r0
	...
    4874:	00010000 	andeq	r0, r1, r0
    4878:	00000051 	andeq	r0, r0, r1, asr r0
    487c:	00000000 	andeq	r0, r0, r0
    4880:	f3000400 	vshl.u8	d0, d0, d0
    4884:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4894:	05000000 	streq	r0, [r0, #-0]
    4898:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    489c:	00009f25 	andeq	r9, r0, r5, lsr #30
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	00060000 	andeq	r0, r6, r0
    48a8:	385101f3 	ldmdacc	r1, {r0, r1, r4, r5, r6, r7, r8}^
    48ac:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    48bc:	00070000 	andeq	r0, r7, r0
    48c0:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    48c4:	009f2425 	addseq	r2, pc, r5, lsr #8
    48c8:	00000000 	andeq	r0, r0, r0
    48cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    48d0:	01f33100 	mvnseq	r3, r0, lsl #2
    48d4:	24253851 	strtcs	r3, [r5], #-2129	; 0xfffff7af
    48d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48dc:	00000000 	andeq	r0, r0, r0
    48e0:	00197400 	andseq	r7, r9, r0, lsl #8
    48e4:	00197808 	andseq	r7, r9, r8, lsl #16
    48e8:	53000108 	movwpl	r0, #264	; 0x108
    48ec:	08001978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, ip}
    48f0:	08001980 	stmdaeq	r0, {r7, r8, fp, ip}
    48f4:	04730003 	ldrbteq	r0, [r3], #-3
    48f8:	0019809f 	mulseq	r9, pc, r0	; <UNPREDICTABLE>
    48fc:	00198408 	andseq	r8, r9, r8, lsl #8
    4900:	53000108 	movwpl	r0, #264	; 0x108
    4904:	08001988 	stmdaeq	r0, {r3, r7, r8, fp, ip}
    4908:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
    490c:	90530001 	subsls	r0, r3, r1
    4910:	92080019 	andls	r0, r8, #25
    4914:	03080019 	movweq	r0, #32793	; 0x8019
    4918:	9f7c7300 	svcls	0x007c7300
    491c:	08001992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip}
    4920:	08001995 	stmdaeq	r0, {r0, r2, r4, r7, r8, fp, ip}
    4924:	00530001 	subseq	r0, r3, r1
    4928:	00000000 	andeq	r0, r0, r0
    492c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    4930:	fd080019 	stc2	0, cr0, [r8, #-100]	; 0xffffff9c
    4934:	01080019 	tsteq	r8, r9, lsl r0
    4938:	19fd5000 	ldmibne	sp!, {ip, lr}^
    493c:	1a0c0800 	bne	306944 <__Stack_Size+0x306544>
    4940:	00040800 	andeq	r0, r4, r0, lsl #16
    4944:	9f5001f3 	svcls	0x005001f3
	...
    4950:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
    4954:	08001a21 	stmdaeq	r0, {r0, r5, r9, fp, ip}
    4958:	21500001 	cmpcs	r0, r1
    495c:	3008001a 	andcc	r0, r8, sl, lsl r0
    4960:	0408001a 	streq	r0, [r8], #-26	; 0xffffffe6
    4964:	5001f300 	andpl	pc, r1, r0, lsl #6
    4968:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    496c:	00000000 	andeq	r0, r0, r0
    4970:	001a3000 	andseq	r3, sl, r0
    4974:	001a4008 	andseq	r4, sl, r8
    4978:	50000108 	andpl	r0, r0, r8, lsl #2
    497c:	08001a40 	stmdaeq	r0, {r6, r9, fp, ip}
    4980:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
    4984:	01f30004 	mvnseq	r0, r4
    4988:	00009f50 	andeq	r9, r0, r0, asr pc
    498c:	00000000 	andeq	r0, r0, r0
    4990:	1a520000 	bne	1484998 <__Stack_Size+0x1484598>
    4994:	1a600800 	bne	180699c <__Stack_Size+0x180659c>
    4998:	00010800 	andeq	r0, r1, r0, lsl #16
    499c:	001a6053 	andseq	r6, sl, r3, asr r0
    49a0:	001a6c08 	andseq	r6, sl, r8, lsl #24
    49a4:	74000208 	strvc	r0, [r0], #-520	; 0xfffffdf8
    49a8:	00000009 	andeq	r0, r0, r9
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	001a7a00 	andseq	r7, sl, r0, lsl #20
    49b4:	001a7c08 	andseq	r7, sl, r8, lsl #24
    49b8:	53000108 	movwpl	r0, #264	; 0x108
    49bc:	08001a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, ip}
    49c0:	08001a96 	stmdaeq	r0, {r1, r2, r4, r7, r9, fp, ip}
    49c4:	00710005 	rsbseq	r0, r1, r5
    49c8:	9a9f1a3f 	bls	fe7cb2cc <SCS_BASE+0x1e7bd2cc>
    49cc:	a408001a 	strge	r0, [r8], #-26	; 0xffffffe6
    49d0:	0508001a 	streq	r0, [r8, #-26]	; 0xffffffe6
    49d4:	3f007100 	svccc	0x00007100
    49d8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    49dc:	00000000 	andeq	r0, r0, r0
    49e0:	1a760000 	bne	1d849e8 <__Stack_Size+0x1d845e8>
    49e4:	1a960800 	bne	fe5869ec <SCS_BASE+0x1e5789ec>
    49e8:	00010800 	andeq	r0, r1, r0, lsl #16
    49ec:	001a9a51 	andseq	r9, sl, r1, asr sl
    49f0:	001aa408 	andseq	sl, sl, r8, lsl #8
    49f4:	51000108 	tstpl	r0, r8, lsl #2
	...
    4a00:	08001acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip}
    4a04:	08001b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip}
    4a08:	10740003 	rsbsne	r0, r4, r3
    4a0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a10:	00000000 	andeq	r0, r0, r0
    4a14:	001ace00 	andseq	ip, sl, r0, lsl #28
    4a18:	001af808 	andseq	pc, sl, r8, lsl #16
    4a1c:	53000108 	movwpl	r0, #264	; 0x108
    4a20:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
    4a24:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
    4a28:	10740009 	rsbsne	r0, r4, r9
    4a2c:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    4a30:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4a34:	1208001b 	andne	r0, r8, #27
    4a38:	0108001b 	tsteq	r8, fp, lsl r0
    4a3c:	1b125300 	blne	499644 <__Stack_Size+0x499244>
    4a40:	1b150800 	blne	546a48 <__Stack_Size+0x546648>
    4a44:	00090800 	andeq	r0, r9, r0, lsl #16
    4a48:	02941074 	addseq	r1, r4, #116	; 0x74
    4a4c:	1affff0a 	bne	467c <__Stack_Size+0x427c>
    4a50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a54:	00000000 	andeq	r0, r0, r0
    4a58:	001ace00 	andseq	ip, sl, r0, lsl #28
    4a5c:	001aec08 	andseq	lr, sl, r8, lsl #24
    4a60:	74000808 	strvc	r0, [r0], #-2056	; 0xfffff7f8
    4a64:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    4a68:	ec9f1aff 	vldmia	pc, {s2-s256}
    4a6c:	f208001a 	vqadd.s8	d0, d8, d10
    4a70:	0608001a 			; <UNDEFINED> instruction: 0x0608001a
    4a74:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    4a78:	f29f1aff 			; <UNDEFINED> instruction: 0xf29f1aff
    4a7c:	f608001a 			; <UNDEFINED> instruction: 0xf608001a
    4a80:	0208001a 	andeq	r0, r8, #26
    4a84:	f69f3400 			; <UNDEFINED> instruction: 0xf69f3400
    4a88:	0008001a 	andeq	r0, r8, sl, lsl r0
    4a8c:	0208001b 	andeq	r0, r8, #27
    4a90:	009f3700 	addseq	r3, pc, r0, lsl #14
    4a94:	0a08001b 	beq	204b08 <__Stack_Size+0x204708>
    4a98:	0808001b 	stmdaeq	r8, {r0, r1, r3, r4}
    4a9c:	94087400 	strls	r7, [r8], #-1024	; 0xfffffc00
    4aa0:	1aff0801 	bne	fffc6aac <SCS_BASE+0x1ffb8aac>
    4aa4:	001b0a9f 	mulseq	fp, pc, sl	; <UNPREDICTABLE>
    4aa8:	001b5208 	andseq	r5, fp, r8, lsl #4
    4aac:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4ab8:	08001b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip}
    4abc:	08001b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip}
    4ac0:	1a500001 	bne	1404acc <__Stack_Size+0x14046cc>
    4ac4:	4a08001b 	bmi	204b38 <__Stack_Size+0x204738>
    4ac8:	0108001b 	tsteq	r8, fp, lsl r0
    4acc:	00005900 	andeq	r5, r0, r0, lsl #18
    4ad0:	00000000 	andeq	r0, r0, r0
    4ad4:	1b020000 	blne	84adc <__Stack_Size+0x846dc>
    4ad8:	1b0a0800 	blne	286ae0 <__Stack_Size+0x2866e0>
    4adc:	00010800 	andeq	r0, r1, r0, lsl #16
    4ae0:	001b0a55 	andseq	r0, fp, r5, asr sl
    4ae4:	001b1008 	andseq	r1, fp, r8
    4ae8:	73001608 	movwvc	r1, #1544	; 0x608
    4aec:	4b401200 	blmi	10092f4 <__Stack_Size+0x1008ef4>
    4af0:	00752224 	rsbseq	r2, r5, r4, lsr #4
    4af4:	4b401416 	blmi	1009b54 <__Stack_Size+0x1009754>
    4af8:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4afc:	13160001 	tstne	r6, #1
    4b00:	001b109f 	mulseq	fp, pc, r0	; <UNPREDICTABLE>
    4b04:	001b1208 	andseq	r1, fp, r8, lsl #4
    4b08:	74001c08 	strvc	r1, [r0], #-3080	; 0xfffff3f8
    4b0c:	0a029414 	beq	a9b64 <__Stack_Size+0xa9764>
    4b10:	121affff 	andsne	pc, sl, #1020	; 0x3fc
    4b14:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4b18:	14160073 	ldrne	r0, [r6], #-115	; 0xffffff8d
    4b1c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4b20:	0001282d 	andeq	r2, r1, sp, lsr #16
    4b24:	129f1316 	addsne	r1, pc, #1476395008	; 0x58000000
    4b28:	1508001b 	strne	r0, [r8, #-27]	; 0xffffffe5
    4b2c:	2208001b 	andcs	r0, r8, #27
    4b30:	94107400 	ldrls	r7, [r0], #-1024	; 0xfffffc00
    4b34:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4b38:	4b40121a 	blmi	10093a8 <__Stack_Size+0x1008fa8>
    4b3c:	14742224 	ldrbtne	r2, [r4], #-548	; 0xfffffddc
    4b40:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    4b44:	14161aff 	ldrne	r1, [r6], #-2815	; 0xfffff501
    4b48:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4b4c:	0001282d 	andeq	r2, r1, sp, lsr #16
    4b50:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	b6000000 	strlt	r0, [r0], -r0
    4b5c:	cd08001b 	stcgt	0, cr0, [r8, #-108]	; 0xffffff94
    4b60:	0108001b 	tsteq	r8, fp, lsl r0
    4b64:	1bdc5000 	blne	ff718b6c <SCS_BASE+0x1f70ab6c>
    4b68:	1bde0800 	blne	ff786b70 <SCS_BASE+0x1f778b70>
    4b6c:	00010800 	andeq	r0, r1, r0, lsl #16
    4b70:	00000050 	andeq	r0, r0, r0, asr r0
    4b74:	00000000 	andeq	r0, r0, r0
    4b78:	001bf400 	andseq	pc, fp, r0, lsl #8
    4b7c:	001bf808 	andseq	pc, fp, r8, lsl #16
    4b80:	70000608 	andvc	r0, r0, r8, lsl #12
    4b84:	1a7f0800 	bne	1fc6b8c <__Stack_Size+0x1fc678c>
    4b88:	001bf89f 	mulseq	fp, pc, r8	; <UNPREDICTABLE>
    4b8c:	001c1c08 	andseq	r1, ip, r8, lsl #24
    4b90:	50000108 	andpl	r0, r0, r8, lsl #2
    4b94:	08001c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip}
    4b98:	08001c42 	stmdaeq	r0, {r1, r6, sl, fp, ip}
    4b9c:	0073000b 	rsbseq	r0, r3, fp
    4ba0:	7f080194 	svcvc	0x00080194
    4ba4:	1aff081a 	bne	fffc6c14 <SCS_BASE+0x1ffb8c14>
    4ba8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4bac:	00000000 	andeq	r0, r0, r0
    4bb0:	001c3400 	andseq	r3, ip, r0, lsl #8
    4bb4:	001c5008 	andseq	r5, ip, r8
    4bb8:	52000108 	andpl	r0, r0, #8, 2
	...
    4bc4:	08001c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip}
    4bc8:	08001c60 	stmdaeq	r0, {r5, r6, sl, fp, ip}
    4bcc:	60500001 	subsvs	r0, r0, r1
    4bd0:	6308001c 	movwvs	r0, #32796	; 0x801c
    4bd4:	0708001c 	smladeq	r8, ip, r0, r0
    4bd8:	0b007100 	bleq	20fe0 <__Stack_Size+0x20be0>
    4bdc:	9f1aff7f 	svcls	0x001aff7f
    4be0:	08001c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip}
    4be4:	08001c83 	stmdaeq	r0, {r0, r1, r7, sl, fp, ip}
    4be8:	86500001 	ldrbhi	r0, [r0], -r1
    4bec:	8908001c 	stmdbhi	r8, {r2, r3, r4}
    4bf0:	0108001c 	tsteq	r8, ip, lsl r0
    4bf4:	00005000 	andeq	r5, r0, r0
    4bf8:	00000000 	andeq	r0, r0, r0
    4bfc:	1c160000 	ldcne	0, cr0, [r6], {-0}
    4c00:	1c630800 	stclne	8, cr0, [r3], #-0
    4c04:	00060800 	andeq	r0, r6, r0, lsl #16
    4c08:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4c0c:	1c6e9f1a 	stclne	15, cr9, [lr], #-104	; 0xffffff98
    4c10:	1c800800 	stcne	8, cr0, [r0], {0}
    4c14:	00060800 	andeq	r0, r6, r0, lsl #16
    4c18:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4c1c:	1c869f1a 	stcne	15, cr9, [r6], {26}
    4c20:	1c890800 	stcne	8, cr0, [r9], {0}
    4c24:	00060800 	andeq	r0, r6, r0, lsl #16
    4c28:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4c2c:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	1c960000 	ldcne	0, cr0, [r6], {0}
    4c38:	1c9a0800 	ldcne	8, cr0, [sl], {0}
    4c3c:	00070800 	andeq	r0, r7, r0, lsl #16
    4c40:	000a0073 	andeq	r0, sl, r3, ror r0
    4c44:	9a9f2730 	bls	fe7ce90c <SCS_BASE+0x1e7c090c>
    4c48:	9e08001c 	mcrls	0, 0, r0, cr8, cr12, {0}
    4c4c:	0b08001c 	bleq	204cc4 <__Stack_Size+0x2048c4>
    4c50:	0a007300 	beq	21858 <__Stack_Size+0x21458>
    4c54:	0a273000 	beq	9d0c5c <__Stack_Size+0x9d085c>
    4c58:	9f273000 	svcls	0x00273000
	...
    4c64:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
    4c68:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
    4c6c:	00710006 	rsbseq	r0, r1, r6
    4c70:	9f1aff08 	svcls	0x001aff08
    4c74:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
    4c78:	08001d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip}
    4c7c:	05700008 	ldrbeq	r0, [r0, #-8]!
    4c80:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    4c84:	1d3e9f1a 	ldcne	15, cr9, [lr, #-104]!	; 0xffffff98
    4c88:	1d500800 	ldclne	8, cr0, [r0, #-0]
    4c8c:	00060800 	andeq	r0, r6, r0, lsl #16
    4c90:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    4c94:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4c98:	00000000 	andeq	r0, r0, r0
    4c9c:	1cd40000 	ldclne	0, cr0, [r4], {0}
    4ca0:	1cf40800 	ldclne	8, cr0, [r4]
    4ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    4ca8:	001cf454 	andseq	pc, ip, r4, asr r4	; <UNPREDICTABLE>
    4cac:	001d0808 	andseq	r0, sp, r8, lsl #16
    4cb0:	71000708 	tstvc	r0, r8, lsl #14
    4cb4:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    4cb8:	1d089f1a 	stcne	15, cr9, [r8, #-104]	; 0xffffff98
    4cbc:	1d320800 	ldcne	8, cr0, [r2, #-0]
    4cc0:	000c0800 	andeq	r0, ip, r0, lsl #16
    4cc4:	01940570 	orrseq	r0, r4, r0, ror r5
    4cc8:	0b1aff08 	bleq	6c48f0 <__Stack_Size+0x6c44f0>
    4ccc:	9f1aff7f 	svcls	0x001aff7f
    4cd0:	08001d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, ip}
    4cd4:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
    4cd8:	00710007 	rsbseq	r0, r1, r7
    4cdc:	1aff7f0b 	bne	fffe4910 <SCS_BASE+0x1ffd6910>
    4ce0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ce4:	00000000 	andeq	r0, r0, r0
    4ce8:	001cea00 	andseq	lr, ip, r0, lsl #20
    4cec:	001cfa08 	andseq	pc, ip, r8, lsl #20
    4cf0:	52000108 	andpl	r0, r0, #8, 2
	...
    4cfc:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
    4d00:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
    4d04:	00720007 	rsbseq	r0, r2, r7
    4d08:	2710000a 	ldrcs	r0, [r0, -sl]
    4d0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d10:	00000000 	andeq	r0, r0, r0
    4d14:	001d7400 	andseq	r7, sp, r0, lsl #8
    4d18:	001d8808 	andseq	r8, sp, r8, lsl #16
    4d1c:	50000108 	andpl	r0, r0, r8, lsl #2
    4d20:	08001d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip}
    4d24:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
    4d28:	01f30004 	mvnseq	r0, r4
    4d2c:	00009f50 	andeq	r9, r0, r0, asr pc
    4d30:	00000000 	andeq	r0, r0, r0
    4d34:	1dda0000 	ldclne	0, cr0, [sl]
    4d38:	1de40800 	stclne	8, cr0, [r4]
    4d3c:	001e0800 	andseq	r0, lr, r0, lsl #16
    4d40:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    4d44:	84231aff 	strthi	r1, [r3], #-2815	; 0xfffff501
    4d48:	028080e0 	addeq	r8, r0, #224	; 0xe0
    4d4c:	0a062431 	beq	18de18 <__Stack_Size+0x18da18>
    4d50:	311affff 			; <UNDEFINED> instruction: 0x311affff
    4d54:	c0802324 	addgt	r2, r0, r4, lsr #6
    4d58:	9f048081 	svcls	0x00048081
    4d5c:	00000493 	muleq	r0, r3, r4
    4d60:	00000000 	andeq	r0, r0, r0
    4d64:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
    4d68:	1e320800 	cdpne	8, 3, cr0, cr2, cr0, {0}
    4d6c:	00020800 	andeq	r0, r2, r0, lsl #16
    4d70:	1e329f32 	mrcne	15, 1, r9, cr2, cr2, {1}
    4d74:	1e340800 	cdpne	8, 3, cr0, cr4, cr0, {0}
    4d78:	00010800 	andeq	r0, r1, r0, lsl #16
    4d7c:	001e3450 	andseq	r3, lr, r0, asr r4
    4d80:	001e4008 	andseq	r4, lr, r8
    4d84:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    4d88:	001e449f 	mulseq	lr, pc, r4	; <UNPREDICTABLE>
    4d8c:	001e6408 	andseq	r6, lr, r8, lsl #8
    4d90:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    4d94:	001e6e9f 	mulseq	lr, pc, lr	; <UNPREDICTABLE>
    4d98:	001e7408 	andseq	r7, lr, r8, lsl #8
    4d9c:	50000108 	andpl	r0, r0, r8, lsl #2
    4da0:	08001e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip}
    4da4:	08001e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip}
    4da8:	9f320002 	svcls	0x00320002
    4dac:	08001e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip}
    4db0:	08001e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip}
    4db4:	86500001 	ldrbhi	r0, [r0], -r1
    4db8:	a008001e 	andge	r0, r8, lr, lsl r0
    4dbc:	0208001e 	andeq	r0, r8, #30
    4dc0:	a09f3200 	addsge	r3, pc, r0, lsl #4
    4dc4:	a208001e 	andge	r0, r8, #30
    4dc8:	0108001e 	tsteq	r8, lr, lsl r0
    4dcc:	1ea25000 	cdpne	0, 10, cr5, cr2, cr0, {0}
    4dd0:	1eae0800 	cdpne	8, 10, cr0, cr14, cr0, {0}
    4dd4:	00020800 	andeq	r0, r2, r0, lsl #16
    4dd8:	1eae9f32 	mcrne	15, 5, r9, cr14, cr2, {1}
    4ddc:	1eb00800 	cdpne	8, 11, cr0, cr0, cr0, {0}
    4de0:	00010800 	andeq	r0, r1, r0, lsl #16
    4de4:	001eb050 	andseq	fp, lr, r0, asr r0
    4de8:	001ec008 	andseq	ip, lr, r8
    4dec:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    4df0:	001ec09f 	mulseq	lr, pc, r0	; <UNPREDICTABLE>
    4df4:	001ed008 	andseq	sp, lr, r8
    4df8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    4e04:	08001e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, ip}
    4e08:	08001ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip}
    4e0c:	84540001 	ldrbhi	r0, [r4], #-1
    4e10:	9c080020 	stcls	0, cr0, [r8], {32}
    4e14:	01080020 	tsteq	r8, r0, lsr #32
    4e18:	00005400 	andeq	r5, r0, r0, lsl #8
    4e1c:	00000000 	andeq	r0, r0, r0
    4e20:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    4e24:	1ed60800 	cdpne	8, 13, cr0, cr6, cr0, {0}
    4e28:	00010800 	andeq	r0, r1, r0, lsl #16
    4e2c:	00208453 	eoreq	r8, r0, r3, asr r4
    4e30:	00209c08 	eoreq	r9, r0, r8, lsl #24
    4e34:	36000208 	strcc	r0, [r0], -r8, lsl #4
    4e38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	001ed600 	andseq	sp, lr, r0, lsl #12
    4e44:	001eee08 	andseq	lr, lr, r8, lsl #28
    4e48:	30000208 	andcc	r0, r0, r8, lsl #4
    4e4c:	001eee9f 	mulseq	lr, pc, lr	; <UNPREDICTABLE>
    4e50:	001ef008 	andseq	pc, lr, r8
    4e54:	53000108 	movwpl	r0, #264	; 0x108
    4e58:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
    4e5c:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
    4e60:	9f300002 	svcls	0x00300002
    4e64:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
    4e68:	08001efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
    4e6c:	fa530001 	blx	14c4e78 <__Stack_Size+0x14c4a78>
    4e70:	0408001e 	streq	r0, [r8], #-30	; 0xffffffe2
    4e74:	0208001f 	andeq	r0, r8, #31
    4e78:	049f3000 	ldreq	r3, [pc], #0	; 4e80 <__Stack_Size+0x4a80>
    4e7c:	0608001f 			; <UNDEFINED> instruction: 0x0608001f
    4e80:	0108001f 	tsteq	r8, pc, lsl r0
    4e84:	1f065300 	svcne	0x00065300
    4e88:	1fd40800 	svcne	0x00d40800
    4e8c:	00020800 	andeq	r0, r2, r0, lsl #16
    4e90:	1fd49f30 	svcne	0x00d49f30
    4e94:	1fd60800 	svcne	0x00d60800
    4e98:	00060800 	andeq	r0, r6, r0, lsl #16
    4e9c:	001a0d03 	andseq	r0, sl, r3, lsl #26
    4ea0:	1fd69f08 	svcne	0x00d69f08
    4ea4:	1fe50800 	svcne	0x00e50800
    4ea8:	00010800 	andeq	r0, r1, r0, lsl #16
    4eac:	00209c53 	eoreq	r9, r0, r3, asr ip
    4eb0:	0020a008 	eoreq	sl, r0, r8
    4eb4:	30000208 	andcc	r0, r0, r8, lsl #4
    4eb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ebc:	00000000 	andeq	r0, r0, r0
    4ec0:	001fe600 	andseq	lr, pc, r0, lsl #12
    4ec4:	001fe808 	andseq	lr, pc, r8, lsl #16
    4ec8:	30000208 	andcc	r0, r0, r8, lsl #4
    4ecc:	001fe89f 	mulseq	pc, pc, r8	; <UNPREDICTABLE>
    4ed0:	00201408 	eoreq	r1, r0, r8, lsl #8
    4ed4:	50000108 	andpl	r0, r0, r8, lsl #2
    4ed8:	08002070 	stmdaeq	r0, {r4, r5, r6, sp}
    4edc:	0800207c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp}
    4ee0:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4ee4:	d0080020 	andle	r0, r8, r0, lsr #32
    4ee8:	01080020 	tsteq	r8, r0, lsr #32
    4eec:	00005000 	andeq	r5, r0, r0
    4ef0:	00000000 	andeq	r0, r0, r0
    4ef4:	1ed60000 	cdpne	0, 13, cr0, cr6, cr0, {0}
    4ef8:	1fde0800 	svcne	0x00de0800
    4efc:	00010800 	andeq	r0, r1, r0, lsl #16
    4f00:	00209c54 	eoreq	r9, r0, r4, asr ip
    4f04:	0020d008 	eoreq	sp, r0, r8
    4f08:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
    4f14:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
    4f18:	08001f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip}
    4f1c:	00510001 	subseq	r0, r1, r1
    4f20:	00000000 	andeq	r0, r0, r0
    4f24:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4f28:	8608001f 			; <UNDEFINED> instruction: 0x8608001f
    4f2c:	0908001f 	stmdbeq	r8, {r0, r1, r2, r3, r4}
    4f30:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    4f34:	ff081a70 			; <UNDEFINED> instruction: 0xff081a70
    4f38:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4f3c:	00000000 	andeq	r0, r0, r0
    4f40:	1ed60000 	cdpne	0, 13, cr0, cr6, cr0, {0}
    4f44:	207c0800 	rsbscs	r0, ip, r0, lsl #16
    4f48:	00020800 	andeq	r0, r2, r0, lsl #16
    4f4c:	209c9f30 	addscs	r9, ip, r0, lsr pc
    4f50:	20d00800 	sbcscs	r0, r0, r0, lsl #16
    4f54:	00020800 	andeq	r0, r2, r0, lsl #16
    4f58:	00009f30 	andeq	r9, r0, r0, lsr pc
    4f5c:	00000000 	andeq	r0, r0, r0
    4f60:	1f740000 	svcne	0x00740000
    4f64:	1f860800 	svcne	0x00860800
    4f68:	00010800 	andeq	r0, r1, r0, lsl #16
    4f6c:	00000053 	andeq	r0, r0, r3, asr r0
    4f70:	00000000 	andeq	r0, r0, r0
    4f74:	001ee400 	andseq	lr, lr, r0, lsl #8
    4f78:	001f0608 	andseq	r0, pc, r8, lsl #12
    4f7c:	52000108 	andpl	r0, r0, #8, 2
    4f80:	08001fd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, fp, ip}
    4f84:	08001fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    4f88:	00520001 	subseq	r0, r2, r1
    4f8c:	00000000 	andeq	r0, r0, r0
    4f90:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4f94:	f2080020 	vhadd.s8	d0, d8, d16
    4f98:	01080020 	tsteq	r8, r0, lsr #32
    4f9c:	20f25300 	rscscs	r5, r2, r0, lsl #6
    4fa0:	20fb0800 	rscscs	r0, fp, r0, lsl #16
    4fa4:	00080800 	andeq	r0, r8, r0, lsl #16
    4fa8:	01940874 	orrseq	r0, r4, r4, ror r8
    4fac:	9f1aff08 	svcls	0x001aff08
    4fb0:	08002166 	stmdaeq	r0, {r1, r2, r5, r6, r8, sp}
    4fb4:	0800216e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sp}
    4fb8:	6e530001 	cdpvs	0, 5, cr0, cr3, cr1, {0}
    4fbc:	73080021 	movwvc	r0, #32801	; 0x8021
    4fc0:	08080021 	stmdaeq	r8, {r0, r5}
    4fc4:	94087400 	strls	r7, [r8], #-1024	; 0xfffffc00
    4fc8:	1aff0801 	bne	fffc6fd4 <SCS_BASE+0x1ffb8fd4>
    4fcc:	0021769f 	mlaeq	r1, pc, r6, r7	; <UNPREDICTABLE>
    4fd0:	00217e08 	eoreq	r7, r1, r8, lsl #28
    4fd4:	53000108 	movwpl	r0, #264	; 0x108
	...
    4fe0:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
    4fe4:	08002168 	stmdaeq	r0, {r3, r5, r6, r8, sp}
    4fe8:	10740003 	rsbsne	r0, r4, r3
    4fec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ff0:	00000000 	andeq	r0, r0, r0
    4ff4:	0020ec00 	eoreq	lr, r0, r0, lsl #24
    4ff8:	0020f808 	eoreq	pc, r0, r8, lsl #16
    4ffc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5000:	080020f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp}
    5004:	080020fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, sp}
    5008:	10740009 	rsbsne	r0, r4, r9
    500c:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    5010:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    501c:	08080021 	stmdaeq	r8, {r0, r5}
    5020:	01080021 	tsteq	r8, r1, lsr #32
    5024:	21085000 	mrscs	r5, (UNDEF: 8)
    5028:	211a0800 	tstcs	sl, r0, lsl #16
    502c:	00010800 	andeq	r0, r1, r0, lsl #16
    5030:	00000057 	andeq	r0, r0, r7, asr r0
    5034:	00000000 	andeq	r0, r0, r0
    5038:	0020f200 	eoreq	pc, r0, r0, lsl #4
    503c:	0020f808 	eoreq	pc, r0, r8, lsl #16
    5040:	76001608 	strvc	r1, [r0], -r8, lsl #12
    5044:	4b401200 	blmi	100984c <__Stack_Size+0x100944c>
    5048:	00732224 	rsbseq	r2, r3, r4, lsr #4
    504c:	4b401416 	blmi	100a0ac <__Stack_Size+0x1009cac>
    5050:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    5054:	13160001 	tstne	r6, #1
    5058:	0020f89f 	mlaeq	r0, pc, r8, pc	; <UNPREDICTABLE>
    505c:	0020fb08 	eoreq	pc, r0, r8, lsl #22
    5060:	74001c08 	strvc	r1, [r0], #-3080	; 0xfffff3f8
    5064:	0a029410 	beq	aa0ac <__Stack_Size+0xa9cac>
    5068:	121affff 	andsne	pc, sl, #1020	; 0x3fc
    506c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5070:	14160073 	ldrne	r0, [r6], #-115	; 0xffffff8d
    5074:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5078:	0001282d 	andeq	r2, r1, sp, lsr #16
    507c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    5080:	00000000 	andeq	r0, r0, r0
    5084:	9c000000 	stcls	0, cr0, [r0], {-0}
    5088:	d0080021 	andle	r0, r8, r1, lsr #32
    508c:	01080021 	tsteq	r8, r1, lsr #32
    5090:	21d05000 	bicscs	r5, r0, r0
    5094:	21dc0800 	bicscs	r0, ip, r0, lsl #16
    5098:	00040800 	andeq	r0, r4, r0, lsl #16
    509c:	9f5001f3 	svcls	0x005001f3
	...
    50a8:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    50ac:	080021d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp}
    50b0:	00550001 	subseq	r0, r5, r1
    50b4:	00000000 	andeq	r0, r0, r0
    50b8:	e4000000 	str	r0, [r0], #-0
    50bc:	ef080021 	svc	0x00080021
    50c0:	01080021 	tsteq	r8, r1, lsr #32
    50c4:	21f45200 	mvnscs	r5, r0, lsl #4
    50c8:	21f60800 	mvnscs	r0, r0, lsl #16
    50cc:	00010800 	andeq	r0, r1, r0, lsl #16
    50d0:	0021f653 	eoreq	pc, r1, r3, asr r6	; <UNPREDICTABLE>
    50d4:	0021fc08 	eoreq	pc, r1, r8, lsl #24
    50d8:	52000108 	andpl	r0, r0, #8, 2
    50dc:	080021fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sp}
    50e0:	0800220b 	stmdaeq	r0, {r0, r1, r3, r9, sp}
    50e4:	08730008 	ldmdaeq	r3!, {r3}^
    50e8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    50ec:	221e9f1a 	andscs	r9, lr, #26, 30	; 0x68
    50f0:	22290800 	eorcs	r0, r9, #0, 16
    50f4:	00010800 	andeq	r0, r1, r0, lsl #16
    50f8:	00000053 	andeq	r0, r0, r3, asr r0
    50fc:	00000000 	andeq	r0, r0, r0
    5100:	00223a00 	eoreq	r3, r2, r0, lsl #20
    5104:	00225408 	eoreq	r5, r2, r8, lsl #8
    5108:	50000108 	andpl	r0, r0, r8, lsl #2
    510c:	08002254 	stmdaeq	r0, {r2, r4, r6, r9, sp}
    5110:	08002258 	stmdaeq	r0, {r3, r4, r6, r9, sp}
    5114:	01700003 	cmneq	r0, r3
    5118:	0022589f 	mlaeq	r2, pc, r8, r5	; <UNPREDICTABLE>
    511c:	00225e08 	eoreq	r5, r2, r8, lsl #28
    5120:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    512c:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
    5130:	08002240 	stmdaeq	r0, {r6, r9, sp}
    5134:	40510001 	subsmi	r0, r1, r1
    5138:	5e080022 	cdppl	0, 0, cr0, cr8, cr2, {1}
    513c:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    5140:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5148:	00000000 	andeq	r0, r0, r0
    514c:	00223a00 	eoreq	r3, r2, r0, lsl #20
    5150:	00224208 	eoreq	r4, r2, r8, lsl #4
    5154:	52000108 	andpl	r0, r0, #8, 2
    5158:	08002242 	stmdaeq	r0, {r1, r6, r9, sp}
    515c:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
    5160:	01f30004 	mvnseq	r0, r4
    5164:	00009f52 	andeq	r9, r0, r2, asr pc
    5168:	00000000 	andeq	r0, r0, r0
    516c:	224a0000 	subcs	r0, sl, #0
    5170:	224c0800 	subcs	r0, ip, #0, 16
    5174:	00010800 	andeq	r0, r1, r0, lsl #16
    5178:	00224c52 	eoreq	r4, r2, r2, asr ip
    517c:	00225808 	eoreq	r5, r2, r8, lsl #16
    5180:	f3000f08 	vpmax.f32	d0, d0, d8
    5184:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    5188:	01231aff 	strdeq	r1, [r3, -pc]!
    518c:	00732631 	rsbseq	r2, r3, r1, lsr r6
    5190:	22589f1c 	subscs	r9, r8, #28, 30	; 0x70
    5194:	225a0800 	subscs	r0, sl, #0, 16
    5198:	00100800 	andseq	r0, r0, r0, lsl #16
    519c:	0a5201f3 	beq	1485970 <__Stack_Size+0x1485570>
    51a0:	231affff 	tstcs	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    51a4:	73263101 			; <UNDEFINED> instruction: 0x73263101
    51a8:	9f222000 	svcls	0x00222000
    51ac:	0800225a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sp}
    51b0:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
    51b4:	01f3000f 	mvnseq	r0, pc
    51b8:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    51bc:	3101231a 	tstcc	r1, sl, lsl r3
    51c0:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    51c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51c8:	00000000 	andeq	r0, r0, r0
    51cc:	00225400 	eoreq	r5, r2, r0, lsl #8
    51d0:	00225808 	eoreq	r5, r2, r8, lsl #16
    51d4:	70000808 	andvc	r0, r0, r8, lsl #16
    51d8:	08019400 	stmdaeq	r1, {sl, ip, pc}
    51dc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    51e0:	00000000 	andeq	r0, r0, r0
    51e4:	54000000 	strpl	r0, [r0], #-0
    51e8:	58080022 	stmdapl	r8, {r1, r5}
    51ec:	12080022 	andne	r0, r8, #34	; 0x22
    51f0:	94017000 	strls	r7, [r1], #-0
    51f4:	1aff0801 	bne	fffc7200 <SCS_BASE+0x1ffb9200>
    51f8:	00702438 	rsbseq	r2, r0, r8, lsr r4
    51fc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    5200:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    5204:	00000000 	andeq	r0, r0, r0
    5208:	4a000000 	bmi	5210 <__Stack_Size+0x4e10>
    520c:	4c080022 	stcmi	0, cr0, [r8], {34}	; 0x22
    5210:	01080022 	tsteq	r8, r2, lsr #32
    5214:	22585100 	subscs	r5, r8, #0, 2
    5218:	225a0800 	subscs	r0, sl, #0, 16
    521c:	000a0800 	andeq	r0, sl, r0, lsl #16
    5220:	24320073 	ldrtcs	r0, [r2], #-115	; 0xffffff8d
    5224:	23220071 			; <UNDEFINED> instruction: 0x23220071
    5228:	225a9f04 	subscs	r9, sl, #4, 30
    522c:	225c0800 	subscs	r0, ip, #0, 16
    5230:	000a0800 	andeq	r0, sl, r0, lsl #16
    5234:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xfffff08d
    5238:	23220071 			; <UNDEFINED> instruction: 0x23220071
    523c:	00009f04 	andeq	r9, r0, r4, lsl #30
    5240:	00000000 	andeq	r0, r0, r0
    5244:	225e0000 	subscs	r0, lr, #0
    5248:	22700800 	rsbscs	r0, r0, #0, 16
    524c:	00010800 	andeq	r0, r1, r0, lsl #16
    5250:	00227c50 	eoreq	r7, r2, r0, asr ip
    5254:	00227e08 	eoreq	r7, r2, r8, lsl #28
    5258:	73000808 	movwvc	r0, #2056	; 0x808
    525c:	70243101 	eorvc	r3, r4, r1, lsl #2
    5260:	7e9f2200 	cdpvc	2, 9, cr2, cr15, cr0, {0}
    5264:	80080022 	andhi	r0, r8, r2, lsr #32
    5268:	08080022 	stmdaeq	r8, {r1, r5}
    526c:	31007300 	mrscc	r7, LR_irq
    5270:	22007024 	andcs	r7, r0, #36	; 0x24
    5274:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5278:	00000000 	andeq	r0, r0, r0
    527c:	00225e00 	eoreq	r5, r2, r0, lsl #28
    5280:	00226408 	eoreq	r6, r2, r8, lsl #8
    5284:	51000108 	tstpl	r0, r8, lsl #2
    5288:	08002264 	stmdaeq	r0, {r2, r5, r6, r9, sp}
    528c:	08002282 	stmdaeq	r0, {r1, r7, r9, sp}
    5290:	01f30004 	mvnseq	r0, r4
    5294:	00009f51 	andeq	r9, r0, r1, asr pc
    5298:	00000000 	andeq	r0, r0, r0
    529c:	225e0000 	subscs	r0, lr, #0
    52a0:	22660800 	rsbcs	r0, r6, #0, 16
    52a4:	00010800 	andeq	r0, r1, r0, lsl #16
    52a8:	00226652 	eoreq	r6, r2, r2, asr r6
    52ac:	00228208 	eoreq	r8, r2, r8, lsl #4
    52b0:	f3000408 	vshl.u8	d0, d8, d0
    52b4:	009f5201 	addseq	r5, pc, r1, lsl #4
    52b8:	00000000 	andeq	r0, r0, r0
    52bc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    52c0:	70080022 	andvc	r0, r8, r2, lsr #32
    52c4:	01080022 	tsteq	r8, r2, lsr #32
    52c8:	22705200 	rsbscs	r5, r0, #0, 4
    52cc:	227c0800 	rsbscs	r0, ip, #0, 16
    52d0:	000f0800 	andeq	r0, pc, r0, lsl #16
    52d4:	0a5201f3 	beq	1485aa8 <__Stack_Size+0x14856a8>
    52d8:	231affff 	tstcs	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    52dc:	73263101 			; <UNDEFINED> instruction: 0x73263101
    52e0:	7c9f1c00 	ldcvc	12, cr1, [pc], {0}
    52e4:	7e080022 	cdpvc	0, 0, cr0, cr8, cr2, {1}
    52e8:	10080022 	andne	r0, r8, r2, lsr #32
    52ec:	5201f300 	andpl	pc, r1, #0, 6
    52f0:	1affff0a 	bne	4f20 <__Stack_Size+0x4b20>
    52f4:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    52f8:	22200073 	eorcs	r0, r0, #115	; 0x73
    52fc:	00227e9f 	mlaeq	r2, pc, lr, r7	; <UNPREDICTABLE>
    5300:	00228208 	eoreq	r8, r2, r8, lsl #4
    5304:	f3000f08 	vpmax.f32	d0, d0, d8
    5308:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    530c:	01231aff 	strdeq	r1, [r3, -pc]!
    5310:	00732631 	rsbseq	r2, r3, r1, lsr r6
    5314:	00009f1c 	andeq	r9, r0, ip, lsl pc
    5318:	00000000 	andeq	r0, r0, r0
    531c:	226e0000 	rsbcs	r0, lr, #0
    5320:	22700800 	rsbscs	r0, r0, #0, 16
    5324:	00010800 	andeq	r0, r1, r0, lsl #16
    5328:	00227451 	eoreq	r7, r2, r1, asr r4
    532c:	00227e08 	eoreq	r7, r2, r8, lsl #28
    5330:	73000a08 	movwvc	r0, #2568	; 0xa08
    5334:	71243200 			; <UNDEFINED> instruction: 0x71243200
    5338:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    533c:	00227e9f 	mlaeq	r2, pc, lr, r7	; <UNPREDICTABLE>
    5340:	00228008 	eoreq	r8, r2, r8
    5344:	73000a08 	movwvc	r0, #2568	; 0xa08
    5348:	7124327f 			; <UNDEFINED> instruction: 0x7124327f
    534c:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    5350:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5360:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    536c:	01f30004 	mvnseq	r0, r4
    5370:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5380:	00010000 	andeq	r0, r1, r0
    5384:	00000050 	andeq	r0, r0, r0, asr r0
    5388:	00000000 	andeq	r0, r0, r0
    538c:	f3000400 	vshl.u8	d0, d0, d0
    5390:	009f5001 	addseq	r5, pc, r1
    5394:	00000000 	andeq	r0, r0, r0
    5398:	94000000 	strls	r0, [r0], #-0
    539c:	96080022 	strls	r0, [r8], -r2, lsr #32
    53a0:	01080022 	tsteq	r8, r2, lsr #32
    53a4:	22965000 	addscs	r5, r6, #0
    53a8:	22b00800 	adcscs	r0, r0, #0, 16
    53ac:	00040800 	andeq	r0, r4, r0, lsl #16
    53b0:	9f5001f3 	svcls	0x005001f3
	...
    53bc:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
    53c0:	080022aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sp}
    53c4:	aa510001 	bge	14453d0 <__Stack_Size+0x1444fd0>
    53c8:	b0080022 	andlt	r0, r8, r2, lsr #32
    53cc:	04080022 	streq	r0, [r8], #-34	; 0xffffffde
    53d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    53d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    53e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    53f0:	01f30004 	mvnseq	r0, r4
    53f4:	00009f50 	andeq	r9, r0, r0, asr pc
    53f8:	00000000 	andeq	r0, r0, r0
    53fc:	22b00000 	adcscs	r0, r0, #0
    5400:	22b20800 	adcscs	r0, r2, #0, 16
    5404:	00010800 	andeq	r0, r1, r0, lsl #16
    5408:	0022b250 	eoreq	fp, r2, r0, asr r2
    540c:	0022e208 	eoreq	lr, r2, r8, lsl #4
    5410:	f3000408 	vshl.u8	d0, d8, d0
    5414:	009f5001 	addseq	r5, pc, r1
    5418:	00000000 	andeq	r0, r0, r0
    541c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    5420:	da080022 	ble	2054b0 <__Stack_Size+0x2050b0>
    5424:	01080022 	tsteq	r8, r2, lsr #32
    5428:	00005300 	andeq	r5, r0, r0, lsl #6
    542c:	00000000 	andeq	r0, r0, r0
    5430:	22e20000 	rsccs	r0, r2, #0
    5434:	22e40800 	rsccs	r0, r4, #0, 16
    5438:	00010800 	andeq	r0, r1, r0, lsl #16
    543c:	0022e450 	eoreq	lr, r2, r0, asr r4
    5440:	00231408 	eoreq	r1, r3, r8, lsl #8
    5444:	f3000408 	vshl.u8	d0, d8, d0
    5448:	009f5001 	addseq	r5, pc, r1
    544c:	00000000 	andeq	r0, r0, r0
    5450:	fa000000 	blx	5458 <__Stack_Size+0x5058>
    5454:	0c080022 	stceq	0, cr0, [r8], {34}	; 0x22
    5458:	01080023 	tsteq	r8, r3, lsr #32
    545c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    546c:	00010000 	andeq	r0, r1, r0
    5470:	00000050 	andeq	r0, r0, r0, asr r0
    5474:	00000000 	andeq	r0, r0, r0
    5478:	f3000400 	vshl.u8	d0, d0, d0
    547c:	009f5001 	addseq	r5, pc, r1
	...
    548c:	01000000 	mrseq	r0, (UNDEF: 0)
    5490:	00005000 	andeq	r5, r0, r0
    5494:	00000000 	andeq	r0, r0, r0
    5498:	00040000 	andeq	r0, r4, r0
    549c:	9f5001f3 	svcls	0x005001f3
	...
    54b0:	00500001 	subseq	r0, r0, r1
    54b4:	00000000 	andeq	r0, r0, r0
    54b8:	04000000 	streq	r0, [r0], #-0
    54bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    54c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    54dc:	01f30004 	mvnseq	r0, r4
    54e0:	00009f50 	andeq	r9, r0, r0, asr pc
    54e4:	00000000 	andeq	r0, r0, r0
    54e8:	23140000 	tstcs	r4, #0
    54ec:	23160800 	tstcs	r6, #0, 16
    54f0:	00010800 	andeq	r0, r1, r0, lsl #16
    54f4:	00231650 	eoreq	r1, r3, r0, asr r6
    54f8:	00233a08 	eoreq	r3, r3, r8, lsl #20
    54fc:	f3000408 	vshl.u8	d0, d8, d0
    5500:	009f5001 	addseq	r5, pc, r1
    5504:	00000000 	andeq	r0, r0, r0
    5508:	2a000000 	bcs	5510 <__Stack_Size+0x5110>
    550c:	2e080023 	cdpcs	0, 0, cr0, cr8, cr3, {1}
    5510:	06080023 	streq	r0, [r8], -r3, lsr #32
    5514:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    5518:	2e9f2730 	mrccs	7, 4, r2, cr15, cr0, {1}
    551c:	32080023 	andcc	r0, r8, #35	; 0x23
    5520:	09080023 	stmdbeq	r8, {r0, r1, r5}
    5524:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    5528:	30082730 	andcc	r2, r8, r0, lsr r7
    552c:	00009f27 	andeq	r9, r0, r7, lsr #30
    5530:	00000000 	andeq	r0, r0, r0
    5534:	233a0000 	teqcs	sl, #0
    5538:	233c0800 	teqcs	ip, #0, 16
    553c:	00010800 	andeq	r0, r1, r0, lsl #16
    5540:	00233c50 	eoreq	r3, r3, r0, asr ip
    5544:	00236008 	eoreq	r6, r3, r8
    5548:	f3000408 	vshl.u8	d0, d8, d0
    554c:	009f5001 	addseq	r5, pc, r1
    5550:	00000000 	andeq	r0, r0, r0
    5554:	50000000 	andpl	r0, r0, r0
    5558:	54080023 	strpl	r0, [r8], #-35	; 0xffffffdd
    555c:	07080023 	streq	r0, [r8, -r3, lsr #32]
    5560:	0a007300 	beq	22168 <__Stack_Size+0x21d68>
    5564:	9f273000 	svcls	0x00273000
    5568:	08002354 	stmdaeq	r0, {r2, r4, r6, r8, r9, sp}
    556c:	08002358 	stmdaeq	r0, {r3, r4, r6, r8, r9, sp}
    5570:	0073000b 	rsbseq	r0, r3, fp
    5574:	2730000a 	ldrcs	r0, [r0, -sl]!
    5578:	2730000a 	ldrcs	r0, [r0, -sl]!
    557c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    558c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5598:	01f30004 	mvnseq	r0, r4
    559c:	00009f50 	andeq	r9, r0, r0, asr pc
    55a0:	00000000 	andeq	r0, r0, r0
    55a4:	23600000 	cmncs	r0, #0
    55a8:	23620800 	cmncs	r2, #0, 16
    55ac:	00010800 	andeq	r0, r1, r0, lsl #16
    55b0:	00236250 	eoreq	r6, r3, r0, asr r2
    55b4:	00238008 	eoreq	r8, r3, r8
    55b8:	f3000408 	vshl.u8	d0, d8, d0
    55bc:	009f5001 	addseq	r5, pc, r1
	...
    55cc:	01000000 	mrseq	r0, (UNDEF: 0)
    55d0:	00005000 	andeq	r5, r0, r0
    55d4:	00000000 	andeq	r0, r0, r0
    55d8:	00040000 	andeq	r0, r4, r0
    55dc:	9f5001f3 	svcls	0x005001f3
	...
    55f0:	00500001 	subseq	r0, r0, r1
    55f4:	00000000 	andeq	r0, r0, r0
    55f8:	04000000 	streq	r0, [r0], #-0
    55fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    5600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5610:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    561c:	01f30004 	mvnseq	r0, r4
    5620:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5630:	00010000 	andeq	r0, r1, r0
    5634:	00000050 	andeq	r0, r0, r0, asr r0
    5638:	00000000 	andeq	r0, r0, r0
    563c:	f3000400 	vshl.u8	d0, d0, d0
    5640:	009f5001 	addseq	r5, pc, r1
	...
    5650:	01000000 	mrseq	r0, (UNDEF: 0)
    5654:	00005000 	andeq	r5, r0, r0
    5658:	00000000 	andeq	r0, r0, r0
    565c:	00040000 	andeq	r0, r4, r0
    5660:	9f5001f3 	svcls	0x005001f3
	...
    5674:	00500001 	subseq	r0, r0, r1
    5678:	00000000 	andeq	r0, r0, r0
    567c:	04000000 	streq	r0, [r0], #-0
    5680:	5001f300 	andpl	pc, r1, r0, lsl #6
    5684:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5688:	00000000 	andeq	r0, r0, r0
    568c:	00238400 	eoreq	r8, r3, r0, lsl #8
    5690:	00238608 	eoreq	r8, r3, r8, lsl #12
    5694:	50000108 	andpl	r0, r0, r8, lsl #2
    5698:	08002386 	stmdaeq	r0, {r1, r2, r7, r8, r9, sp}
    569c:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
    56a0:	01f30004 	mvnseq	r0, r4
    56a4:	00009f50 	andeq	r9, r0, r0, asr pc
    56a8:	00000000 	andeq	r0, r0, r0
    56ac:	23a80000 			; <UNDEFINED> instruction: 0x23a80000
    56b0:	23aa0800 			; <UNDEFINED> instruction: 0x23aa0800
    56b4:	00010800 	andeq	r0, r1, r0, lsl #16
    56b8:	0023aa50 	eoreq	sl, r3, r0, asr sl
    56bc:	0023cc08 	eoreq	ip, r3, r8, lsl #24
    56c0:	f3000408 	vshl.u8	d0, d8, d0
    56c4:	009f5001 	addseq	r5, pc, r1
	...
    56d4:	01000000 	mrseq	r0, (UNDEF: 0)
    56d8:	00005000 	andeq	r5, r0, r0
    56dc:	00000000 	andeq	r0, r0, r0
    56e0:	00040000 	andeq	r0, r4, r0
    56e4:	9f5001f3 	svcls	0x005001f3
	...
    56f8:	00510001 	subseq	r0, r1, r1
    56fc:	00000000 	andeq	r0, r0, r0
    5700:	04000000 	streq	r0, [r0], #-0
    5704:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5708:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5718:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5724:	01f30004 	mvnseq	r0, r4
    5728:	00009f50 	andeq	r9, r0, r0, asr pc
    572c:	00000000 	andeq	r0, r0, r0
    5730:	23cc0000 	biccs	r0, ip, #0
    5734:	23d60800 	bicscs	r0, r6, #0, 16
    5738:	00010800 	andeq	r0, r1, r0, lsl #16
    573c:	0023d650 	eoreq	sp, r3, r0, asr r6
    5740:	0023e808 	eoreq	lr, r3, r8, lsl #16
    5744:	f3000408 	vshl.u8	d0, d8, d0
    5748:	009f5001 	addseq	r5, pc, r1
	...
    5758:	01000000 	mrseq	r0, (UNDEF: 0)
    575c:	00005100 	andeq	r5, r0, r0, lsl #2
    5760:	00000000 	andeq	r0, r0, r0
    5764:	00040000 	andeq	r0, r4, r0
    5768:	9f5101f3 	svcls	0x005101f3
	...
    5774:	00510001 	subseq	r0, r1, r1
    5778:	00000000 	andeq	r0, r0, r0
    577c:	04000000 	streq	r0, [r0], #-0
    5780:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5784:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5794:	53000100 	movwpl	r0, #256	; 0x100
	...
    57a0:	00530001 	subseq	r0, r3, r1
    57a4:	00000000 	andeq	r0, r0, r0
    57a8:	01000000 	mrseq	r0, (UNDEF: 0)
    57ac:	00005300 	andeq	r5, r0, r0, lsl #6
    57b0:	00000000 	andeq	r0, r0, r0
    57b4:	23e80000 	mvncs	r0, #0
    57b8:	23f40800 	mvnscs	r0, #0, 16
    57bc:	00010800 	andeq	r0, r1, r0, lsl #16
    57c0:	0023f450 	eoreq	pc, r3, r0, asr r4	; <UNPREDICTABLE>
    57c4:	00242808 	eoreq	r2, r4, r8, lsl #16
    57c8:	f3000408 	vshl.u8	d0, d8, d0
    57cc:	009f5001 	addseq	r5, pc, r1
    57d0:	00000000 	andeq	r0, r0, r0
    57d4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    57d8:	16080023 	strne	r0, [r8], -r3, lsr #32
    57dc:	01080024 	tsteq	r8, r4, lsr #32
    57e0:	24165100 	ldrcs	r5, [r6], #-256	; 0xffffff00
    57e4:	24280800 	strtcs	r0, [r8], #-2048	; 0xfffff800
    57e8:	00040800 	andeq	r0, r4, r0, lsl #16
    57ec:	9f5101f3 	svcls	0x005101f3
	...
    57f8:	08002400 	stmdaeq	r0, {sl, sp}
    57fc:	08002408 	stmdaeq	r0, {r3, sl, sp}
    5800:	08530001 	ldmdaeq	r3, {r0}^
    5804:	0a080024 	beq	20589c <__Stack_Size+0x20549c>
    5808:	05080024 	streq	r0, [r8, #-36]	; 0xffffffdc
    580c:	35007100 	strcc	r7, [r0, #-256]	; 0xffffff00
    5810:	240a9f25 	strcs	r9, [sl], #-3877	; 0xfffff0db
    5814:	240c0800 	strcs	r0, [ip], #-2048	; 0xfffff800
    5818:	00010800 	andeq	r0, r1, r0, lsl #16
    581c:	00241453 	eoreq	r1, r4, r3, asr r4
    5820:	00241c08 	eoreq	r1, r4, r8, lsl #24
    5824:	53000108 	movwpl	r0, #264	; 0x108
	...
    5838:	00500001 	subseq	r0, r0, r1
    583c:	00000000 	andeq	r0, r0, r0
    5840:	04000000 	streq	r0, [r0], #-0
    5844:	5001f300 	andpl	pc, r1, r0, lsl #6
    5848:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5858:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5864:	01f30004 	mvnseq	r0, r4
    5868:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5878:	00010000 	andeq	r0, r1, r0
    587c:	00000052 	andeq	r0, r0, r2, asr r0
    5880:	00000000 	andeq	r0, r0, r0
    5884:	f3000400 	vshl.u8	d0, d0, d0
    5888:	009f5201 	addseq	r5, pc, r1, lsl #4
    588c:	00000000 	andeq	r0, r0, r0
    5890:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5894:	36080024 	strcc	r0, [r8], -r4, lsr #32
    5898:	01080024 	tsteq	r8, r4, lsr #32
    589c:	24365000 	ldrtcs	r5, [r6], #-0
    58a0:	24480800 	strbcs	r0, [r8], #-2048	; 0xfffff800
    58a4:	00040800 	andeq	r0, r4, r0, lsl #16
    58a8:	9f5001f3 	svcls	0x005001f3
	...
    58b4:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    58b8:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
    58bc:	2c510001 	mrrccs	0, 0, r0, r1, cr1
    58c0:	48080024 	stmdami	r8, {r2, r5}
    58c4:	04080024 	streq	r0, [r8], #-36	; 0xffffffdc
    58c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    58cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    58d0:	00000000 	andeq	r0, r0, r0
    58d4:	00244c00 	eoreq	r4, r4, r0, lsl #24
    58d8:	00245a08 	eoreq	r5, r4, r8, lsl #20
    58dc:	50000108 	andpl	r0, r0, r8, lsl #2
    58e0:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
    58e4:	0800246c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp}
    58e8:	01f30004 	mvnseq	r0, r4
    58ec:	00009f50 	andeq	r9, r0, r0, asr pc
    58f0:	00000000 	andeq	r0, r0, r0
    58f4:	244c0000 	strbcs	r0, [ip], #-0
    58f8:	24500800 	ldrbcs	r0, [r0], #-2048	; 0xfffff800
    58fc:	00010800 	andeq	r0, r1, r0, lsl #16
    5900:	00245051 	eoreq	r5, r4, r1, asr r0
    5904:	00246c08 	eoreq	r6, r4, r8, lsl #24
    5908:	f3000408 	vshl.u8	d0, d8, d0
    590c:	009f5101 	addseq	r5, pc, r1, lsl #2
    5910:	00000000 	andeq	r0, r0, r0
    5914:	70000000 	andvc	r0, r0, r0
    5918:	7a080024 	bvc	2059b0 <__Stack_Size+0x2055b0>
    591c:	01080024 	tsteq	r8, r4, lsr #32
    5920:	247a5000 	ldrbtcs	r5, [sl], #-0
    5924:	248c0800 	strcs	r0, [ip], #2048	; 0x800
    5928:	00040800 	andeq	r0, r4, r0, lsl #16
    592c:	9f5001f3 	svcls	0x005001f3
	...
    5938:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
    593c:	0800249a 	stmdaeq	r0, {r1, r3, r4, r7, sl, sp}
    5940:	9a500001 	bls	140594c <__Stack_Size+0x140554c>
    5944:	ac080024 	stcge	0, cr0, [r8], {36}	; 0x24
    5948:	04080024 	streq	r0, [r8], #-36	; 0xffffffdc
    594c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5950:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5960:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    596c:	01f30004 	mvnseq	r0, r4
    5970:	00009f50 	andeq	r9, r0, r0, asr pc
    5974:	00000000 	andeq	r0, r0, r0
    5978:	00010000 	andeq	r0, r1, r0
    597c:	00000050 	andeq	r0, r0, r0, asr r0
    5980:	00000000 	andeq	r0, r0, r0
    5984:	f3000400 	vshl.u8	d0, d0, d0
    5988:	009f5001 	addseq	r5, pc, r1
    598c:	00000000 	andeq	r0, r0, r0
    5990:	01000000 	mrseq	r0, (UNDEF: 0)
    5994:	00005000 	andeq	r5, r0, r0
	...
    59a4:	00010000 	andeq	r0, r1, r0
    59a8:	00000051 	andeq	r0, r0, r1, asr r0
    59ac:	00000000 	andeq	r0, r0, r0
    59b0:	f3000400 	vshl.u8	d0, d0, d0
    59b4:	009f5101 	addseq	r5, pc, r1, lsl #2
    59b8:	00000000 	andeq	r0, r0, r0
    59bc:	01000000 	mrseq	r0, (UNDEF: 0)
    59c0:	00005100 	andeq	r5, r0, r0, lsl #2
    59c4:	00000000 	andeq	r0, r0, r0
    59c8:	00040000 	andeq	r0, r4, r0
    59cc:	9f5101f3 	svcls	0x005101f3
	...
    59d8:	00510001 	subseq	r0, r1, r1
	...
    59e8:	01000000 	mrseq	r0, (UNDEF: 0)
    59ec:	00005200 	andeq	r5, r0, r0, lsl #4
    59f0:	00000000 	andeq	r0, r0, r0
    59f4:	00040000 	andeq	r0, r4, r0
    59f8:	9f5201f3 	svcls	0x005201f3
	...
    5a04:	00520001 	subseq	r0, r2, r1
	...
    5a14:	01000000 	mrseq	r0, (UNDEF: 0)
    5a18:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5a28:	00010000 	andeq	r0, r1, r0
    5a2c:	00000053 	andeq	r0, r0, r3, asr r0
    5a30:	00000000 	andeq	r0, r0, r0
    5a34:	72000500 	andvc	r0, r0, #0, 10
    5a38:	9f253500 	svcls	0x00253500
	...
    5a44:	00530001 	subseq	r0, r3, r1
    5a48:	00000000 	andeq	r0, r0, r0
    5a4c:	01000000 	mrseq	r0, (UNDEF: 0)
    5a50:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    5a60:	00010000 	andeq	r0, r1, r0
    5a64:	00000051 	andeq	r0, r0, r1, asr r0
    5a68:	00000000 	andeq	r0, r0, r0
    5a6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5a80:	00530001 	subseq	r0, r3, r1
    5a84:	00000000 	andeq	r0, r0, r0
    5a88:	05000000 	streq	r0, [r0, #-0]
    5a8c:	35007200 	strcc	r7, [r0, #-512]	; 0xfffffe00
    5a90:	00009f25 	andeq	r9, r0, r5, lsr #30
    5a94:	00000000 	andeq	r0, r0, r0
    5a98:	00010000 	andeq	r0, r1, r0
    5a9c:	00000053 	andeq	r0, r0, r3, asr r0
    5aa0:	00000000 	andeq	r0, r0, r0
    5aa4:	53000100 	movwpl	r0, #256	; 0x100
	...
    5ab8:	00500001 	subseq	r0, r0, r1
    5abc:	00000000 	andeq	r0, r0, r0
    5ac0:	04000000 	streq	r0, [r0], #-0
    5ac4:	5001f300 	andpl	pc, r1, r0, lsl #6
    5ac8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5acc:	00000000 	andeq	r0, r0, r0
    5ad0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5adc:	01f30004 	mvnseq	r0, r4
    5ae0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5af0:	00010000 	andeq	r0, r1, r0
    5af4:	00000051 	andeq	r0, r0, r1, asr r0
    5af8:	00000000 	andeq	r0, r0, r0
    5afc:	f3000400 	vshl.u8	d0, d0, d0
    5b00:	009f5101 	addseq	r5, pc, r1, lsl #2
    5b04:	00000000 	andeq	r0, r0, r0
    5b08:	01000000 	mrseq	r0, (UNDEF: 0)
    5b0c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5b1c:	00010000 	andeq	r0, r1, r0
    5b20:	00000052 	andeq	r0, r0, r2, asr r0
    5b24:	00000000 	andeq	r0, r0, r0
    5b28:	f3000400 	vshl.u8	d0, d0, d0
    5b2c:	009f5201 	addseq	r5, pc, r1, lsl #4
    5b30:	00000000 	andeq	r0, r0, r0
    5b34:	01000000 	mrseq	r0, (UNDEF: 0)
    5b38:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    5b48:	00010000 	andeq	r0, r1, r0
    5b4c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5b5c:	53000100 	movwpl	r0, #256	; 0x100
	...
    5b68:	00720005 	rsbseq	r0, r2, r5
    5b6c:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    5b70:	00000000 	andeq	r0, r0, r0
    5b74:	01000000 	mrseq	r0, (UNDEF: 0)
    5b78:	00005300 	andeq	r5, r0, r0, lsl #6
    5b7c:	00000000 	andeq	r0, r0, r0
    5b80:	00010000 	andeq	r0, r1, r0
    5b84:	00000053 	andeq	r0, r0, r3, asr r0
	...
    5b94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5ba0:	01f30004 	mvnseq	r0, r4
    5ba4:	00009f50 	andeq	r9, r0, r0, asr pc
    5ba8:	00000000 	andeq	r0, r0, r0
    5bac:	00010000 	andeq	r0, r1, r0
    5bb0:	00000050 	andeq	r0, r0, r0, asr r0
    5bb4:	00000000 	andeq	r0, r0, r0
    5bb8:	f3000400 	vshl.u8	d0, d0, d0
    5bbc:	009f5001 	addseq	r5, pc, r1
	...
    5bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    5bd0:	00005100 	andeq	r5, r0, r0, lsl #2
    5bd4:	00000000 	andeq	r0, r0, r0
    5bd8:	00040000 	andeq	r0, r4, r0
    5bdc:	9f5101f3 	svcls	0x005101f3
	...
    5be8:	00510001 	subseq	r0, r1, r1
	...
    5bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bfc:	00005200 	andeq	r5, r0, r0, lsl #4
    5c00:	00000000 	andeq	r0, r0, r0
    5c04:	00040000 	andeq	r0, r4, r0
    5c08:	9f5201f3 	svcls	0x005201f3
	...
    5c14:	00520001 	subseq	r0, r2, r1
	...
    5c24:	01000000 	mrseq	r0, (UNDEF: 0)
    5c28:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5c38:	00010000 	andeq	r0, r1, r0
    5c3c:	00000053 	andeq	r0, r0, r3, asr r0
    5c40:	00000000 	andeq	r0, r0, r0
    5c44:	72000500 	andvc	r0, r0, #0, 10
    5c48:	9f253500 	svcls	0x00253500
	...
    5c54:	00530001 	subseq	r0, r3, r1
    5c58:	00000000 	andeq	r0, r0, r0
    5c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c60:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    5c70:	00010000 	andeq	r0, r1, r0
    5c74:	00000050 	andeq	r0, r0, r0, asr r0
    5c78:	00000000 	andeq	r0, r0, r0
    5c7c:	f3000400 	vshl.u8	d0, d0, d0
    5c80:	009f5001 	addseq	r5, pc, r1
    5c84:	00000000 	andeq	r0, r0, r0
    5c88:	b0000000 	andlt	r0, r0, r0
    5c8c:	ba080024 	blt	205d24 <__Stack_Size+0x205924>
    5c90:	01080024 	tsteq	r8, r4, lsr #32
    5c94:	24ba5000 	ldrtcs	r5, [sl], #0
    5c98:	24d00800 	ldrbcs	r0, [r0], #2048	; 0x800
    5c9c:	00040800 	andeq	r0, r4, r0, lsl #16
    5ca0:	9f5001f3 	svcls	0x005001f3
	...
    5cb4:	00500001 	subseq	r0, r0, r1
    5cb8:	00000000 	andeq	r0, r0, r0
    5cbc:	04000000 	streq	r0, [r0], #-0
    5cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    5cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5cd4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5ce0:	01f30004 	mvnseq	r0, r4
    5ce4:	00009f50 	andeq	r9, r0, r0, asr pc
    5ce8:	00000000 	andeq	r0, r0, r0
    5cec:	00010000 	andeq	r0, r1, r0
    5cf0:	00000050 	andeq	r0, r0, r0, asr r0
    5cf4:	00000000 	andeq	r0, r0, r0
    5cf8:	f3000400 	vshl.u8	d0, d0, d0
    5cfc:	009f5001 	addseq	r5, pc, r1
	...
    5d0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5d10:	00005000 	andeq	r5, r0, r0
    5d14:	00000000 	andeq	r0, r0, r0
    5d18:	00040000 	andeq	r0, r4, r0
    5d1c:	9f5001f3 	svcls	0x005001f3
	...
    5d30:	0070000e 	rsbseq	r0, r0, lr
    5d34:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    5d38:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    5d3c:	9f211aff 	svcls	0x00211aff
	...
    5d48:	01f3000f 	mvnseq	r0, pc
    5d4c:	1aff0850 	bne	fffc7e94 <SCS_BASE+0x1ffb9e94>
    5d50:	00712438 	rsbseq	r2, r1, r8, lsr r4
    5d54:	211aff08 	tstcs	sl, r8, lsl #30	; <UNPREDICTABLE>
    5d58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5d5c:	00000000 	andeq	r0, r0, r0
    5d60:	0024d400 	eoreq	sp, r4, r0, lsl #8
    5d64:	0024d808 	eoreq	sp, r4, r8, lsl #16
    5d68:	50000108 	andpl	r0, r0, r8, lsl #2
    5d6c:	080024d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp}
    5d70:	080024de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, sp}
    5d74:	01f30004 	mvnseq	r0, r4
    5d78:	00009f50 	andeq	r9, r0, r0, asr pc
    5d7c:	00000000 	andeq	r0, r0, r0
    5d80:	24d40000 	ldrbcs	r0, [r4], #0
    5d84:	24d80800 	ldrbcs	r0, [r8], #2048	; 0x800
    5d88:	00010800 	andeq	r0, r1, r0, lsl #16
    5d8c:	0024d850 	eoreq	sp, r4, r0, asr r8
    5d90:	0024de08 	eoreq	sp, r4, r8, lsl #28
    5d94:	53000108 	movwpl	r0, #264	; 0x108
	...
    5da0:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    5da4:	080024d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp}
    5da8:	0070000d 	rsbseq	r0, r0, sp
    5dac:	00702538 	rsbseq	r2, r0, r8, lsr r5
    5db0:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    5db4:	d89f2124 	ldmle	pc, {r2, r5, r8, sp}	; <UNPREDICTABLE>
    5db8:	de080024 	cdple	0, 0, cr0, cr8, cr4, {1}
    5dbc:	0e080024 	cdpeq	0, 0, cr0, cr8, cr4, {1}
    5dc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    5dc4:	00732538 	rsbseq	r2, r3, r8, lsr r5
    5dc8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    5dcc:	009f2124 	addseq	r2, pc, r4, lsr #2
	...
    5dd8:	08080025 	stmdaeq	r8, {r0, r2, r5}
    5ddc:	01080025 	tsteq	r8, r5, lsr #32
    5de0:	25085000 	strcs	r5, [r8, #-0]
    5de4:	25240800 	strcs	r0, [r4, #-2048]!	; 0xfffff800
    5de8:	00040800 	andeq	r0, r4, r0, lsl #16
    5dec:	9f5001f3 	svcls	0x005001f3
	...
    5df8:	08002500 	stmdaeq	r0, {r8, sl, sp}
    5dfc:	0800250d 	stmdaeq	r0, {r0, r2, r3, r8, sl, sp}
    5e00:	0d510001 	ldcleq	0, cr0, [r1, #-4]
    5e04:	24080025 	strcs	r0, [r8], #-37	; 0xffffffdb
    5e08:	01080025 	tsteq	r8, r5, lsr #32
    5e0c:	00005600 	andeq	r5, r0, r0, lsl #12
    5e10:	00000000 	andeq	r0, r0, r0
    5e14:	25000000 	strcs	r0, [r0, #-0]
    5e18:	25100800 	ldrcs	r0, [r0, #-2048]	; 0xfffff800
    5e1c:	00020800 	andeq	r0, r2, r0, lsl #16
    5e20:	25109f30 	ldrcs	r9, [r0, #-3888]	; 0xfffff0d0
    5e24:	25240800 	strcs	r0, [r4, #-2048]!	; 0xfffff800
    5e28:	00070800 	andeq	r0, r7, r0, lsl #16
    5e2c:	ff0a0074 			; <UNDEFINED> instruction: 0xff0a0074
    5e30:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    5e34:	00000000 	andeq	r0, r0, r0
    5e38:	74000000 	strvc	r0, [r0], #-0
    5e3c:	78080025 	stmdavc	r8, {r0, r2, r5}
    5e40:	07080025 	streq	r0, [r8, -r5, lsr #32]
    5e44:	0a007300 	beq	22a4c <__Stack_Size+0x2264c>
    5e48:	9f272020 	svcls	0x00272020
    5e4c:	08002578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, sp}
    5e50:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    5e54:	00730006 	rsbseq	r0, r3, r6
    5e58:	9f272008 	svcls	0x00272008
    5e5c:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    5e60:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
    5e64:	80530001 	subshi	r0, r3, r1
    5e68:	9b080025 	blls	205f04 <__Stack_Size+0x205b04>
    5e6c:	0b080025 	bleq	205f08 <__Stack_Size+0x205b08>
    5e70:	0a007000 	beq	21e78 <__Stack_Size+0x21a78>
    5e74:	0a1abfbf 	beq	6b5d78 <__Stack_Size+0x6b5978>
    5e78:	9f272020 	svcls	0x00272020
    5e7c:	0800259e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, sp}
    5e80:	080025bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, sl, sp}
    5e84:	0070000b 	rsbseq	r0, r0, fp
    5e88:	1abfbf0a 	bne	feff5ab8 <SCS_BASE+0x1efe7ab8>
    5e8c:	2720200a 	strcs	r2, [r0, -sl]!
    5e90:	0025be9f 	mlaeq	r5, pc, lr, fp	; <UNPREDICTABLE>
    5e94:	0025d308 	eoreq	sp, r5, r8, lsl #6
    5e98:	70000b08 	andvc	r0, r0, r8, lsl #22
    5e9c:	bfbf0a00 	svclt	0x00bf0a00
    5ea0:	20200a1a 	eorcs	r0, r0, sl, lsl sl
    5ea4:	00009f27 	andeq	r9, r0, r7, lsr #30
    5ea8:	00000000 	andeq	r0, r0, r0
    5eac:	25dc0000 	ldrbcs	r0, [ip]
    5eb0:	260c0800 	strcs	r0, [ip], -r0, lsl #16
    5eb4:	00010800 	andeq	r0, r1, r0, lsl #16
    5eb8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    5ec8:	30000200 	andcc	r0, r0, r0, lsl #4
    5ecc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5ed0:	00000000 	andeq	r0, r0, r0
    5ed4:	71000700 	tstvc	r0, r0, lsl #14
    5ed8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5edc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5ee0:	00000000 	andeq	r0, r0, r0
    5ee4:	00070000 	andeq	r0, r7, r0
    5ee8:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    5eec:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    5ef0:	00000000 	andeq	r0, r0, r0
    5ef4:	Address 0x00005ef4 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00000001 	andeq	r0, r0, r1
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
   4:	00000001 	andeq	r0, r0, r1
}
   8:	00000001 	andeq	r0, r0, r1
   c:	00000001 	andeq	r0, r0, r1
	...
  18:	080001a4 	stmdaeq	r0, {r2, r5, r7, r8}
  1c:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
void USB_TxD_Dec_U8(u8 bByte)
{
    u8 bTmp;
    bTmp = bByte/100;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
  20:	080001b0 	stmdaeq	r0, {r4, r5, r7, r8}
    bTmp = bByte/10;
  24:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
  28:	080001c4 	stmdaeq	r0, {r2, r6, r7, r8}
  2c:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
  30:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  34:	08000226 	stmdaeq	r0, {r1, r2, r5, r9}
  38:	00000001 	andeq	r0, r0, r1
  3c:	00000001 	andeq	r0, r0, r1
  40:	00000001 	andeq	r0, r0, r1
}
  44:	00000001 	andeq	r0, r0, r1
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*100;
    bTmp = bByte/10;
    /*if(bTmp)*/ USB_TxDByte( bTmp+'0');
    bByte -= bTmp*10;
    USB_TxDByte( bByte+'0');
  48:	08000228 	stmdaeq	r0, {r3, r5, r9}
  4c:	08000250 	stmdaeq	r0, {r4, r6, r9}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00000001 	andeq	r0, r0, r1
  54:	00000001 	andeq	r0, r0, r1
  58:	08000250 	stmdaeq	r0, {r4, r6, r9}


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
  5c:	08000262 	stmdaeq	r0, {r1, r5, r6, r9}
  60:	08000262 	stmdaeq	r0, {r1, r5, r6, r9}
  64:	08000296 	stmdaeq	r0, {r1, r2, r4, r7, r9}
  68:	08000296 	stmdaeq	r0, {r1, r2, r4, r7, r9}
  6c:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
  70:	080002aa 	stmdaeq	r0, {r1, r3, r5, r7, r9}
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  74:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
  78:	00000001 	andeq	r0, r0, r1
  7c:	00000001 	andeq	r0, r0, r1
    }
          
    if(status != FLASH_BUSY)
  80:	080002be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9}
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
  84:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
  88:	00000001 	andeq	r0, r0, r1
  8c:	00000001 	andeq	r0, r0, r1
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
  90:	00000001 	andeq	r0, r0, r1
  94:	00000001 	andeq	r0, r0, r1
  98:	00000001 	andeq	r0, r0, r1
  9c:	00000001 	andeq	r0, r0, r1
  a0:	00000001 	andeq	r0, r0, r1
  a4:	00000001 	andeq	r0, r0, r1
  a8:	080002d0 	stmdaeq	r0, {r4, r6, r7, r9}
  ac:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
  b0:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
  b4:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  b8:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
  bc:	08000350 	stmdaeq	r0, {r4, r6, r8, r9}
      break; 
      
    default:
      break;
  }
}
  c0:	08000350 	stmdaeq	r0, {r4, r6, r8, r9}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  c4:	0800040c 	stmdaeq	r0, {r2, r3, sl}
  c8:	0800040c 	stmdaeq	r0, {r2, r3, sl}
  cc:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
  d0:	0800081c 	stmdaeq	r0, {r2, r3, r4, fp}
  d4:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
  d8:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
  dc:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
  e0:	080009d0 	stmdaeq	r0, {r4, r6, r7, r8, fp}
  e4:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
  e8:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
  ec:	08000b00 	stmdaeq	r0, {r8, r9, fp}
	...
  f8:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
  fc:	08000b24 	stmdaeq	r0, {r2, r5, r8, r9, fp}
 100:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
 104:	08000b42 	stmdaeq	r0, {r1, r6, r8, r9, fp}
 108:	08000b50 	stmdaeq	r0, {r4, r6, r8, r9, fp}
 10c:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
 110:	08000b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp}
 114:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
 118:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
 11c:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
 120:	08000c00 	stmdaeq	r0, {sl, fp}
 124:	08000c02 	stmdaeq	r0, {r1, sl, fp}
	...
 130:	08000c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp}
 134:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
 138:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 13c:	08000cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp}
 140:	08000cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp}
 144:	08000cbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, fp}
 148:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
 14c:	08000cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp}
	...
 158:	08000c04 	stmdaeq	r0, {r2, sl, fp}
 15c:	08000c10 	stmdaeq	r0, {r4, sl, fp}
 160:	08000c10 	stmdaeq	r0, {r4, sl, fp}
 164:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
 168:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
 16c:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
 170:	00000001 	andeq	r0, r0, r1
 174:	00000001 	andeq	r0, r0, r1
	...
 180:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
 184:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
	...
 190:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 194:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 198:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
 19c:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 1a0:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 1a4:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 1a8:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 1ac:	08000e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp}
 1b0:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 1b4:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
 1b8:	08000e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp}
 1bc:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 1c0:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 1c4:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
 1c8:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
 1cc:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 1d0:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 1d4:	08000ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp}
 1d8:	08000ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp}
 1dc:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 1e0:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 1e4:	08000fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp}
 1e8:	08000fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp}
 1ec:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 1f0:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 1f4:	08001000 	stmdaeq	r0, {ip}
 1f8:	08001000 	stmdaeq	r0, {ip}
 1fc:	08001020 	stmdaeq	r0, {r5, ip}
	...
 208:	08001080 	stmdaeq	r0, {r7, ip}
 20c:	08001084 	stmdaeq	r0, {r2, r7, ip}
 210:	08001086 	stmdaeq	r0, {r1, r2, r7, ip}
 214:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
	...
 220:	08001020 	stmdaeq	r0, {r5, ip}
 224:	08001048 	stmdaeq	r0, {r3, r6, ip}
 228:	08001048 	stmdaeq	r0, {r3, r6, ip}
 22c:	08001080 	stmdaeq	r0, {r7, ip}
 230:	00000001 	andeq	r0, r0, r1
 234:	00000001 	andeq	r0, r0, r1
 238:	08001080 	stmdaeq	r0, {r7, ip}
 23c:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 240:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 244:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 248:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 24c:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 250:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 254:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
 258:	080010f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip}
 25c:	08001122 	stmdaeq	r0, {r1, r5, r8, ip}
	...
 268:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
 26c:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
 270:	080011c2 	stmdaeq	r0, {r1, r6, r7, r8, ip}
 274:	080011d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip}
	...
 280:	08001124 	stmdaeq	r0, {r2, r5, r8, ip}
 284:	0800113c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip}
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	0800113c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip}
 294:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
 298:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
 29c:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 2a0:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 2a4:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	00000001 	andeq	r0, r0, r1
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
 2dc:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
 2e0:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
 2e4:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 2e8:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
 2ec:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
 2f0:	080011e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip}
 2f4:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
 308:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
 30c:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
	...
 340:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 344:	0800127c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip}
 348:	0800127c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip}
 34c:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
 350:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
 354:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
	...
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 38c:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
 39c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 3a0:	00000001 	andeq	r0, r0, r1
 3a4:	00000001 	andeq	r0, r0, r1
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 3bc:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 3c0:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 3c4:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	00000001 	andeq	r0, r0, r1
 3d4:	00000001 	andeq	r0, r0, r1
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	00000001 	andeq	r0, r0, r1
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
 3f4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
	...
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 41c:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 420:	080013b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip}
 424:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	00000001 	andeq	r0, r0, r1
 43c:	00000001 	andeq	r0, r0, r1
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
 470:	00000001 	andeq	r0, r0, r1
 474:	00000001 	andeq	r0, r0, r1
 478:	00000001 	andeq	r0, r0, r1
 47c:	00000001 	andeq	r0, r0, r1
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	00000001 	andeq	r0, r0, r1
 48c:	00000001 	andeq	r0, r0, r1
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
 49c:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
 4a0:	0800144c 	stmdaeq	r0, {r2, r3, r6, sl, ip}
 4a4:	08001464 	stmdaeq	r0, {r2, r5, r6, sl, ip}
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
	...
 500:	08001464 	stmdaeq	r0, {r2, r5, r6, sl, ip}
 504:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
 508:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
 50c:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
 510:	00000001 	andeq	r0, r0, r1
 514:	00000001 	andeq	r0, r0, r1
 518:	00000001 	andeq	r0, r0, r1
 51c:	00000001 	andeq	r0, r0, r1
 520:	080014d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip}
 524:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
 528:	080014ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip}
 52c:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
 530:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
 534:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
 538:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
 53c:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
 540:	0800151c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip}
 544:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
 548:	08001530 	stmdaeq	r0, {r4, r5, r8, sl, ip}
 54c:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 550:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 554:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
 558:	00000001 	andeq	r0, r0, r1
 55c:	00000001 	andeq	r0, r0, r1
 560:	08001558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip}
 564:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
 568:	00000001 	andeq	r0, r0, r1
 56c:	00000001 	andeq	r0, r0, r1
 570:	00000001 	andeq	r0, r0, r1
 574:	00000001 	andeq	r0, r0, r1
 578:	00000001 	andeq	r0, r0, r1
 57c:	00000001 	andeq	r0, r0, r1
 580:	00000001 	andeq	r0, r0, r1
 584:	00000001 	andeq	r0, r0, r1
 588:	00000001 	andeq	r0, r0, r1
 58c:	00000001 	andeq	r0, r0, r1
 590:	08001564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip}
 594:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
 598:	00000001 	andeq	r0, r0, r1
 59c:	00000001 	andeq	r0, r0, r1
 5a0:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
 5a4:	08001600 	stmdaeq	r0, {r9, sl, ip}
 5a8:	08001600 	stmdaeq	r0, {r9, sl, ip}
 5ac:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
 5b0:	08001618 	stmdaeq	r0, {r3, r4, r9, sl, ip}
 5b4:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
 5b8:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
 5bc:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 5c0:	00000001 	andeq	r0, r0, r1
 5c4:	00000001 	andeq	r0, r0, r1
 5c8:	00000001 	andeq	r0, r0, r1
 5cc:	00000001 	andeq	r0, r0, r1
 5d0:	00000001 	andeq	r0, r0, r1
 5d4:	00000001 	andeq	r0, r0, r1
 5d8:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 5dc:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
 5e0:	08001670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip}
 5e4:	0800169e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip}
 5e8:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
 5ec:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
 5f8:	00000001 	andeq	r0, r0, r1
 5fc:	00000001 	andeq	r0, r0, r1
	...
 608:	00000001 	andeq	r0, r0, r1
 60c:	00000001 	andeq	r0, r0, r1
 610:	00000001 	andeq	r0, r0, r1
 614:	00000001 	andeq	r0, r0, r1
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
	...
 628:	00000001 	andeq	r0, r0, r1
 62c:	00000001 	andeq	r0, r0, r1
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
	...
 640:	00000001 	andeq	r0, r0, r1
 644:	00000001 	andeq	r0, r0, r1
 648:	00000001 	andeq	r0, r0, r1
 64c:	00000001 	andeq	r0, r0, r1
 650:	00000001 	andeq	r0, r0, r1
 654:	00000001 	andeq	r0, r0, r1
 658:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
 65c:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
 660:	00000001 	andeq	r0, r0, r1
 664:	00000001 	andeq	r0, r0, r1
 668:	00000001 	andeq	r0, r0, r1
 66c:	00000001 	andeq	r0, r0, r1
 670:	00000001 	andeq	r0, r0, r1
 674:	00000001 	andeq	r0, r0, r1
 678:	00000001 	andeq	r0, r0, r1
 67c:	00000001 	andeq	r0, r0, r1
 680:	00000001 	andeq	r0, r0, r1
 684:	00000001 	andeq	r0, r0, r1
 688:	00000001 	andeq	r0, r0, r1
 68c:	00000001 	andeq	r0, r0, r1
 690:	00000001 	andeq	r0, r0, r1
 694:	00000001 	andeq	r0, r0, r1
 698:	00000001 	andeq	r0, r0, r1
 69c:	00000001 	andeq	r0, r0, r1
 6a0:	00000001 	andeq	r0, r0, r1
 6a4:	00000001 	andeq	r0, r0, r1
 6a8:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
 6ac:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 6b0:	00000001 	andeq	r0, r0, r1
 6b4:	00000001 	andeq	r0, r0, r1
 6b8:	00000001 	andeq	r0, r0, r1
 6bc:	00000001 	andeq	r0, r0, r1
 6c0:	00000001 	andeq	r0, r0, r1
 6c4:	00000001 	andeq	r0, r0, r1
 6c8:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 6cc:	08001716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, ip}
 6d0:	00000001 	andeq	r0, r0, r1
 6d4:	00000001 	andeq	r0, r0, r1
 6d8:	00000001 	andeq	r0, r0, r1
 6dc:	00000001 	andeq	r0, r0, r1
 6e0:	00000001 	andeq	r0, r0, r1
 6e4:	00000001 	andeq	r0, r0, r1
 6e8:	00000001 	andeq	r0, r0, r1
 6ec:	00000001 	andeq	r0, r0, r1
 6f0:	00000001 	andeq	r0, r0, r1
 6f4:	00000001 	andeq	r0, r0, r1
 6f8:	00000001 	andeq	r0, r0, r1
 6fc:	00000001 	andeq	r0, r0, r1
 700:	0800171a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip}
 704:	08001720 	stmdaeq	r0, {r5, r8, r9, sl, ip}
 708:	00000001 	andeq	r0, r0, r1
 70c:	00000001 	andeq	r0, r0, r1
 710:	00000001 	andeq	r0, r0, r1
 714:	00000001 	andeq	r0, r0, r1
 718:	00000001 	andeq	r0, r0, r1
 71c:	00000001 	andeq	r0, r0, r1
 720:	00000001 	andeq	r0, r0, r1
 724:	00000001 	andeq	r0, r0, r1
 728:	00000001 	andeq	r0, r0, r1
 72c:	00000001 	andeq	r0, r0, r1
 730:	00000001 	andeq	r0, r0, r1
 734:	00000001 	andeq	r0, r0, r1
 738:	00000001 	andeq	r0, r0, r1
 73c:	00000001 	andeq	r0, r0, r1
 740:	00000001 	andeq	r0, r0, r1
 744:	00000001 	andeq	r0, r0, r1
 748:	00000001 	andeq	r0, r0, r1
 74c:	00000001 	andeq	r0, r0, r1
 750:	00000001 	andeq	r0, r0, r1
 754:	00000001 	andeq	r0, r0, r1
 758:	00000001 	andeq	r0, r0, r1
 75c:	00000001 	andeq	r0, r0, r1
 760:	00000001 	andeq	r0, r0, r1
 764:	00000001 	andeq	r0, r0, r1
 768:	00000001 	andeq	r0, r0, r1
 76c:	00000001 	andeq	r0, r0, r1
 770:	00000001 	andeq	r0, r0, r1
 774:	00000001 	andeq	r0, r0, r1
 778:	00000001 	andeq	r0, r0, r1
 77c:	00000001 	andeq	r0, r0, r1
 780:	00000001 	andeq	r0, r0, r1
 784:	00000001 	andeq	r0, r0, r1
 788:	00000001 	andeq	r0, r0, r1
 78c:	00000001 	andeq	r0, r0, r1
 790:	00000001 	andeq	r0, r0, r1
 794:	00000001 	andeq	r0, r0, r1
 798:	00000001 	andeq	r0, r0, r1
 79c:	00000001 	andeq	r0, r0, r1
 7a0:	00000001 	andeq	r0, r0, r1
 7a4:	00000001 	andeq	r0, r0, r1
 7a8:	00000001 	andeq	r0, r0, r1
 7ac:	00000001 	andeq	r0, r0, r1
 7b0:	00000001 	andeq	r0, r0, r1
 7b4:	00000001 	andeq	r0, r0, r1
 7b8:	00000001 	andeq	r0, r0, r1
 7bc:	00000001 	andeq	r0, r0, r1
 7c0:	00000001 	andeq	r0, r0, r1
 7c4:	00000001 	andeq	r0, r0, r1
 7c8:	00000001 	andeq	r0, r0, r1
 7cc:	00000001 	andeq	r0, r0, r1
 7d0:	00000001 	andeq	r0, r0, r1
 7d4:	00000001 	andeq	r0, r0, r1
 7d8:	00000001 	andeq	r0, r0, r1
 7dc:	00000001 	andeq	r0, r0, r1
 7e0:	00000001 	andeq	r0, r0, r1
 7e4:	00000001 	andeq	r0, r0, r1
 7e8:	00000001 	andeq	r0, r0, r1
 7ec:	00000001 	andeq	r0, r0, r1
 7f0:	00000001 	andeq	r0, r0, r1
 7f4:	00000001 	andeq	r0, r0, r1
 7f8:	00000001 	andeq	r0, r0, r1
 7fc:	00000001 	andeq	r0, r0, r1
 800:	00000001 	andeq	r0, r0, r1
 804:	00000001 	andeq	r0, r0, r1
 808:	00000001 	andeq	r0, r0, r1
 80c:	00000001 	andeq	r0, r0, r1
 810:	00000001 	andeq	r0, r0, r1
 814:	00000001 	andeq	r0, r0, r1
 818:	00000001 	andeq	r0, r0, r1
 81c:	00000001 	andeq	r0, r0, r1
 820:	00000001 	andeq	r0, r0, r1
 824:	00000001 	andeq	r0, r0, r1
 828:	00000001 	andeq	r0, r0, r1
 82c:	00000001 	andeq	r0, r0, r1
 830:	00000001 	andeq	r0, r0, r1
 834:	00000001 	andeq	r0, r0, r1
 838:	00000001 	andeq	r0, r0, r1
 83c:	00000001 	andeq	r0, r0, r1
 840:	00000001 	andeq	r0, r0, r1
 844:	00000001 	andeq	r0, r0, r1
 848:	00000001 	andeq	r0, r0, r1
 84c:	00000001 	andeq	r0, r0, r1
 850:	00000001 	andeq	r0, r0, r1
 854:	00000001 	andeq	r0, r0, r1
 858:	00000001 	andeq	r0, r0, r1
 85c:	00000001 	andeq	r0, r0, r1
 860:	00000001 	andeq	r0, r0, r1
 864:	00000001 	andeq	r0, r0, r1
 868:	00000001 	andeq	r0, r0, r1
 86c:	00000001 	andeq	r0, r0, r1
 870:	00000001 	andeq	r0, r0, r1
 874:	00000001 	andeq	r0, r0, r1
 878:	00000001 	andeq	r0, r0, r1
 87c:	00000001 	andeq	r0, r0, r1
 880:	00000001 	andeq	r0, r0, r1
 884:	00000001 	andeq	r0, r0, r1
 888:	00000001 	andeq	r0, r0, r1
 88c:	00000001 	andeq	r0, r0, r1
 890:	00000001 	andeq	r0, r0, r1
 894:	00000001 	andeq	r0, r0, r1
 898:	00000001 	andeq	r0, r0, r1
 89c:	00000001 	andeq	r0, r0, r1
 8a0:	00000001 	andeq	r0, r0, r1
 8a4:	00000001 	andeq	r0, r0, r1
 8a8:	00000001 	andeq	r0, r0, r1
 8ac:	00000001 	andeq	r0, r0, r1
 8b0:	00000001 	andeq	r0, r0, r1
 8b4:	00000001 	andeq	r0, r0, r1
 8b8:	00000001 	andeq	r0, r0, r1
 8bc:	00000001 	andeq	r0, r0, r1
 8c0:	00000001 	andeq	r0, r0, r1
 8c4:	00000001 	andeq	r0, r0, r1
 8c8:	00000001 	andeq	r0, r0, r1
 8cc:	00000001 	andeq	r0, r0, r1
 8d0:	00000001 	andeq	r0, r0, r1
 8d4:	00000001 	andeq	r0, r0, r1
 8d8:	00000001 	andeq	r0, r0, r1
 8dc:	00000001 	andeq	r0, r0, r1
 8e0:	00000001 	andeq	r0, r0, r1
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	00000001 	andeq	r0, r0, r1
 8ec:	00000001 	andeq	r0, r0, r1
 8f0:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 8f4:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
	...
 900:	00000001 	andeq	r0, r0, r1
 904:	00000001 	andeq	r0, r0, r1
 908:	08001730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip}
 90c:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
 910:	0800173c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip}
 914:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 918:	08001764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip}
 91c:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
 920:	00000001 	andeq	r0, r0, r1
 924:	00000001 	andeq	r0, r0, r1
 928:	00000001 	andeq	r0, r0, r1
 92c:	00000001 	andeq	r0, r0, r1
	...
 938:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
 93c:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 940:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 944:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 948:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 94c:	080018b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip}
 950:	00000001 	andeq	r0, r0, r1
 954:	00000001 	andeq	r0, r0, r1
 958:	00000001 	andeq	r0, r0, r1
 95c:	00000001 	andeq	r0, r0, r1
 960:	080018b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip}
 964:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
 968:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
 96c:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
 970:	00000001 	andeq	r0, r0, r1
 974:	00000001 	andeq	r0, r0, r1
 978:	00000001 	andeq	r0, r0, r1
 97c:	00000001 	andeq	r0, r0, r1
 980:	00000001 	andeq	r0, r0, r1
 984:	00000001 	andeq	r0, r0, r1
 988:	00000001 	andeq	r0, r0, r1
 98c:	00000001 	andeq	r0, r0, r1
 990:	00000001 	andeq	r0, r0, r1
 994:	00000001 	andeq	r0, r0, r1
 998:	00000001 	andeq	r0, r0, r1
 99c:	00000001 	andeq	r0, r0, r1
 9a0:	080018fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip}
 9a4:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
 9a8:	08001906 	stmdaeq	r0, {r1, r2, r8, fp, ip}
 9ac:	0800190e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip}
 9b0:	00000001 	andeq	r0, r0, r1
 9b4:	00000001 	andeq	r0, r0, r1
 9b8:	00000001 	andeq	r0, r0, r1
 9bc:	00000001 	andeq	r0, r0, r1
 9c0:	00000001 	andeq	r0, r0, r1
 9c4:	00000001 	andeq	r0, r0, r1
 9c8:	00000001 	andeq	r0, r0, r1
 9cc:	00000001 	andeq	r0, r0, r1
 9d0:	00000001 	andeq	r0, r0, r1
 9d4:	00000001 	andeq	r0, r0, r1
 9d8:	00000001 	andeq	r0, r0, r1
 9dc:	00000001 	andeq	r0, r0, r1
 9e0:	00000001 	andeq	r0, r0, r1
 9e4:	00000001 	andeq	r0, r0, r1
 9e8:	00000001 	andeq	r0, r0, r1
 9ec:	00000001 	andeq	r0, r0, r1
 9f0:	0800190e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip}
 9f4:	0800191a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip}
 9f8:	0800191a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip}
 9fc:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
 a00:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
 a04:	08001962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip}
 a08:	00000001 	andeq	r0, r0, r1
 a0c:	00000001 	andeq	r0, r0, r1
	...
 a18:	08001964 	stmdaeq	r0, {r2, r5, r6, r8, fp, ip}
 a1c:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
	...
 a28:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
 a2c:	080019e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip}
	...
 a38:	08001cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip}
 a3c:	08001d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, ip}
 a40:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
 a44:	08001d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, ip}
 a48:	08001d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip}
 a4c:	08001d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip}
 a50:	08001d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp, ip}
 a54:	08001d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, ip}
 a58:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
 a5c:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
	...
 a68:	08001d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, ip}
 a6c:	08001d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip}
 a70:	08001d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip}
 a74:	08001d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp, ip}
 a78:	08001d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, ip}
 a7c:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
 a80:	08001d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip}
 a84:	08001d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip}
	...
 a90:	08001e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip}
 a94:	08001ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip}
 a98:	08002084 	stmdaeq	r0, {r2, r7, sp}
 a9c:	0800209c 	stmdaeq	r0, {r2, r3, r4, r7, sp}
	...
 aa8:	08001ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip}
 aac:	0800207c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp}
 ab0:	0800209c 	stmdaeq	r0, {r2, r3, r4, r7, sp}
 ab4:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
	...
 ac0:	080019e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip}
 ac4:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
 ac8:	08001a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip}
 acc:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
 ad0:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
 ad4:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 ad8:	08001ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip}
 adc:	08001b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip}
 ae0:	08001b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip}
 ae4:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
 ae8:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
 aec:	08001bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip}
 af0:	08001bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip}
 af4:	08001cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip}
 af8:	08001cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip}
 afc:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 b00:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
 b04:	08001d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip}
 b08:	08001d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip}
 b0c:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
 b10:	08001d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip}
 b14:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
 b18:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
 b1c:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
 b20:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
 b24:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
 b28:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
 b2c:	080021dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sp}
 b30:	080021dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sp}
 b34:	08002238 	stmdaeq	r0, {r3, r4, r5, r9, sp}
 b38:	08002238 	stmdaeq	r0, {r3, r4, r5, r9, sp}
 b3c:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
	...
 b48:	0800223a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp}
 b4c:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
 b50:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
 b54:	08002282 	stmdaeq	r0, {r1, r7, r9, sp}
	...
 b60:	00000001 	andeq	r0, r0, r1
 b64:	00000001 	andeq	r0, r0, r1
 b68:	00000001 	andeq	r0, r0, r1
 b6c:	00000001 	andeq	r0, r0, r1
	...
 b78:	080023ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sp}
 b7c:	080023ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp}
 b80:	080023fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sp}
 b84:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
	...
 b90:	00000001 	andeq	r0, r0, r1
 b94:	00000001 	andeq	r0, r0, r1
 b98:	00000001 	andeq	r0, r0, r1
 b9c:	00000001 	andeq	r0, r0, r1
	...
 ba8:	00000001 	andeq	r0, r0, r1
 bac:	00000001 	andeq	r0, r0, r1
 bb0:	00000001 	andeq	r0, r0, r1
 bb4:	00000001 	andeq	r0, r0, r1
	...
 bc0:	00000001 	andeq	r0, r0, r1
 bc4:	00000001 	andeq	r0, r0, r1
 bc8:	00000001 	andeq	r0, r0, r1
 bcc:	00000001 	andeq	r0, r0, r1
 bd0:	00000001 	andeq	r0, r0, r1
 bd4:	00000001 	andeq	r0, r0, r1
	...
 be0:	00000001 	andeq	r0, r0, r1
 be4:	00000001 	andeq	r0, r0, r1
 be8:	00000001 	andeq	r0, r0, r1
 bec:	00000001 	andeq	r0, r0, r1
	...
 bf8:	00000001 	andeq	r0, r0, r1
 bfc:	00000001 	andeq	r0, r0, r1
 c00:	00000001 	andeq	r0, r0, r1
 c04:	00000001 	andeq	r0, r0, r1
	...
 c10:	00000001 	andeq	r0, r0, r1
 c14:	00000001 	andeq	r0, r0, r1
 c18:	00000001 	andeq	r0, r0, r1
 c1c:	00000001 	andeq	r0, r0, r1
 c20:	00000001 	andeq	r0, r0, r1
 c24:	00000001 	andeq	r0, r0, r1
 c28:	00000001 	andeq	r0, r0, r1
 c2c:	00000001 	andeq	r0, r0, r1
 c30:	00000001 	andeq	r0, r0, r1
 c34:	00000001 	andeq	r0, r0, r1
 c38:	00000001 	andeq	r0, r0, r1
 c3c:	00000001 	andeq	r0, r0, r1
 c40:	00000001 	andeq	r0, r0, r1
 c44:	00000001 	andeq	r0, r0, r1
 c48:	08002284 	stmdaeq	r0, {r2, r7, r9, sp}
 c4c:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
 c50:	00000001 	andeq	r0, r0, r1
 c54:	00000001 	andeq	r0, r0, r1
 c58:	00000001 	andeq	r0, r0, r1
 c5c:	00000001 	andeq	r0, r0, r1
 c60:	00000001 	andeq	r0, r0, r1
 c64:	00000001 	andeq	r0, r0, r1
 c68:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
 c6c:	080022b0 	stmdaeq	r0, {r4, r5, r7, r9, sp}
 c70:	00000001 	andeq	r0, r0, r1
 c74:	00000001 	andeq	r0, r0, r1
 c78:	080022b0 	stmdaeq	r0, {r4, r5, r7, r9, sp}
 c7c:	080022e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sp}
 c80:	080022e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sp}
 c84:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
 c88:	00000001 	andeq	r0, r0, r1
 c8c:	00000001 	andeq	r0, r0, r1
 c90:	00000001 	andeq	r0, r0, r1
 c94:	00000001 	andeq	r0, r0, r1
 c98:	00000001 	andeq	r0, r0, r1
 c9c:	00000001 	andeq	r0, r0, r1
 ca0:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
 ca4:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
 ca8:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
 cac:	08002360 	stmdaeq	r0, {r5, r6, r8, r9, sp}
 cb0:	00000001 	andeq	r0, r0, r1
 cb4:	00000001 	andeq	r0, r0, r1
 cb8:	08002360 	stmdaeq	r0, {r5, r6, r8, r9, sp}
 cbc:	08002380 	stmdaeq	r0, {r7, r8, r9, sp}
 cc0:	00000001 	andeq	r0, r0, r1
 cc4:	00000001 	andeq	r0, r0, r1
 cc8:	00000001 	andeq	r0, r0, r1
 ccc:	00000001 	andeq	r0, r0, r1
 cd0:	00000001 	andeq	r0, r0, r1
 cd4:	00000001 	andeq	r0, r0, r1
 cd8:	00000001 	andeq	r0, r0, r1
 cdc:	00000001 	andeq	r0, r0, r1
 ce0:	00000001 	andeq	r0, r0, r1
 ce4:	00000001 	andeq	r0, r0, r1
 ce8:	00000001 	andeq	r0, r0, r1
 cec:	00000001 	andeq	r0, r0, r1
 cf0:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
 cf4:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
 cf8:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
 cfc:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
 d00:	00000001 	andeq	r0, r0, r1
 d04:	00000001 	andeq	r0, r0, r1
 d08:	00000001 	andeq	r0, r0, r1
 d0c:	00000001 	andeq	r0, r0, r1
 d10:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
 d14:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
 d18:	00000001 	andeq	r0, r0, r1
 d1c:	00000001 	andeq	r0, r0, r1
 d20:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
 d24:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 d28:	00000001 	andeq	r0, r0, r1
 d2c:	00000001 	andeq	r0, r0, r1
 d30:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 d34:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
 d38:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
 d3c:	0800246c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp}
 d40:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
 d44:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
 d48:	08002490 	stmdaeq	r0, {r4, r7, sl, sp}
 d4c:	080024ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, sp}
 d50:	00000001 	andeq	r0, r0, r1
 d54:	00000001 	andeq	r0, r0, r1
 d58:	00000001 	andeq	r0, r0, r1
 d5c:	00000001 	andeq	r0, r0, r1
 d60:	00000001 	andeq	r0, r0, r1
 d64:	00000001 	andeq	r0, r0, r1
 d68:	00000001 	andeq	r0, r0, r1
 d6c:	00000001 	andeq	r0, r0, r1
 d70:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
 d74:	080024d0 	stmdaeq	r0, {r4, r6, r7, sl, sp}
 d78:	00000001 	andeq	r0, r0, r1
 d7c:	00000001 	andeq	r0, r0, r1
 d80:	00000001 	andeq	r0, r0, r1
 d84:	00000001 	andeq	r0, r0, r1
 d88:	00000001 	andeq	r0, r0, r1
 d8c:	00000001 	andeq	r0, r0, r1
 d90:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
 d94:	080024de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, sp}
	...
 da0:	080024e0 	stmdaeq	r0, {r5, r6, r7, sl, sp}
 da4:	08002500 	stmdaeq	r0, {r8, sl, sp}
 da8:	08002500 	stmdaeq	r0, {r8, sl, sp}
 dac:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
	...
 db8:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
 dbc:	08002698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp}
 dc0:	00000001 	andeq	r0, r0, r1
 dc4:	00000001 	andeq	r0, r0, r1
	...
